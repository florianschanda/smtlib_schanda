;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun pow2 (Int) Int)

(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-fun of_int (RoundingMode Int) Float32)

(declare-fun to_int1 (RoundingMode Float32) Int)

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(declare-fun sqrt (Real) Real)

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(declare-fun is_int1 (Float32) Bool)

(declare-datatypes () ((t__ref (mk_t__ref (t__content Float32)))))
(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int1 ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort float 0)

(declare-fun user_eq (float float) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE1 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Float32)

(declare-const dummy float)

(declare-datatypes () ((float__ref (mk_float__ref (float__content float)))))
(define-fun float__ref___projection ((a float__ref)) float (float__content a))

(declare-fun to_rep (float) Float32)

(declare-fun of_rep (Float32) float)

;; inversion_axiom
  (assert
  (forall ((x float)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x float)) (! (fp.isFinite32 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Float32))
  (! (=> (fp.isFinite32 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                                (of_rep x))) )))

(declare-sort speed_t 0)

(declare-fun user_eq1 (speed_t speed_t) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE2 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Float32)

(declare-const dummy1 speed_t)

(declare-datatypes ()
((speed_t__ref (mk_speed_t__ref (speed_t__content speed_t)))))
(define-fun speed_t__ref___projection ((a speed_t__ref)) speed_t (speed_t__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_151 Float32)
  (temp___is_init_148 Bool) (temp___skip_constant_149 Bool)
  (temp___do_toplevel_150 Bool)) Bool (=>
                                      (or (= temp___is_init_148 true)
                                      (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                      (fp.isFinite32 temp___expr_151)))

(declare-sort deceleration_t 0)

(define-fun in_range1 ((x Float32)) Bool (and (fp.isFinite32 x)
                                         (and
                                         (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x)
                                         (fp.leq x (fp #b0 #b11111110 #b11111111111111111111111)))))

(declare-fun user_eq2 (deceleration_t deceleration_t) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE3 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Float32)

(declare-const dummy2 deceleration_t)

(declare-datatypes ()
((deceleration_t__ref
 (mk_deceleration_t__ref (deceleration_t__content deceleration_t)))))
(define-fun deceleration_t__ref___projection ((a deceleration_t__ref)) deceleration_t
  (deceleration_t__content a))

(define-fun dynamic_invariant1 ((temp___expr_169 Float32)
  (temp___is_init_166 Bool) (temp___skip_constant_167 Bool)
  (temp___do_toplevel_168 Bool)) Bool (=>
                                      (or (= temp___is_init_166 true)
                                      (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b11111110 #b11111111111111111111111)))
                                      (in_range1 temp___expr_169)))

(declare-sort distance_t 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (distance_t distance_t) Bool)

(declare-const dummy3 distance_t)

(declare-datatypes ()
((distance_t__ref (mk_distance_t__ref (distance_t__content distance_t)))))
(define-fun distance_t__ref___projection ((a distance_t__ref)) distance_t
  (distance_t__content a))

(define-fun dynamic_invariant2 ((temp___expr_175 Int)
  (temp___is_init_172 Bool) (temp___skip_constant_173 Bool)
  (temp___do_toplevel_174 Bool)) Bool (=>
                                      (or (= temp___is_init_172 true)
                                      (<= 0 2147483647)) (in_range2
                                      temp___expr_175)))

(declare-sort time_t 0)

(declare-fun user_eq4 (time_t time_t) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE5 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Float32)

(declare-const dummy4 time_t)

(declare-datatypes ()
((time_t__ref (mk_time_t__ref (time_t__content time_t)))))
(define-fun time_t__ref___projection ((a time_t__ref)) time_t (time_t__content
                                                              a))

(define-fun dynamic_invariant3 ((temp___expr_181 Float32)
  (temp___is_init_178 Bool) (temp___skip_constant_179 Bool)
  (temp___do_toplevel_180 Bool)) Bool (=>
                                      (or (= temp___is_init_178 true)
                                      (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                      (fp.isFinite32 temp___expr_181)))

(declare-sort speed_km_per_h_t 0)

(declare-fun user_eq5 (speed_km_per_h_t speed_km_per_h_t) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE6 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Float32)

(declare-const dummy5 speed_km_per_h_t)

(declare-datatypes ()
((speed_km_per_h_t__ref
 (mk_speed_km_per_h_t__ref (speed_km_per_h_t__content speed_km_per_h_t)))))
(define-fun speed_km_per_h_t__ref___projection ((a speed_km_per_h_t__ref)) speed_km_per_h_t
  (speed_km_per_h_t__content a))

(define-fun dynamic_invariant4 ((temp___expr_157 Float32)
  (temp___is_init_154 Bool) (temp___skip_constant_155 Bool)
  (temp___do_toplevel_156 Bool)) Bool (=>
                                      (or (= temp___is_init_154 true)
                                      (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                      (fp.isFinite32 temp___expr_157)))

(declare-fun is_valid_speed_km_per_h (Float32) Bool)

(declare-fun is_valid_speed_km_per_h__function_guard (Bool Float32) Bool)

(declare-fun m_per_s_from_km_per_h (Float32) Float32)

(declare-fun m_per_s_from_km_per_h__function_guard (Float32 Float32) Bool)

;; m_per_s_from_km_per_h__post_axiom
  (assert
  (forall ((speed Float32))
  (! (=>
     (and (dynamic_invariant4 speed true true true)
     (= (is_valid_speed_km_per_h speed) true)) (dynamic_invariant
     (m_per_s_from_km_per_h speed) true false true)) :pattern ((m_per_s_from_km_per_h
                                                               speed)) )))

;; m_per_s_from_km_per_h__def_axiom
  (assert
  (forall ((speed Float32))
  (! (=> (dynamic_invariant4 speed true true true)
     (= (m_per_s_from_km_per_h speed) (fp.div RNE (fp.mul RNE speed (fp #b0 #b10001000 #b11110100000000000000000)) (fp #b0 #b10001010 #b11000010000000000000000)))) :pattern (
  (m_per_s_from_km_per_h speed)) )))

(declare-sort num_delimiters_range 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq6 (num_delimiters_range num_delimiters_range) Bool)

(declare-const dummy6 num_delimiters_range)

(declare-datatypes ()
((num_delimiters_range__ref
 (mk_num_delimiters_range__ref
 (num_delimiters_range__content num_delimiters_range)))))
(define-fun num_delimiters_range__ref___projection ((a num_delimiters_range__ref)) num_delimiters_range
  (num_delimiters_range__content a))

(declare-fun to_rep1 (num_delimiters_range) Int)

(declare-fun of_rep1 (Int) num_delimiters_range)

;; inversion_axiom
  (assert
  (forall ((x num_delimiters_range))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x num_delimiters_range)) (! (in_range3
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort function_range 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq7 (function_range function_range) Bool)

(declare-const dummy7 function_range)

(declare-datatypes ()
((function_range__ref
 (mk_function_range__ref (function_range__content function_range)))))
(define-fun function_range__ref___projection ((a function_range__ref)) function_range
  (function_range__content a))

(declare-fun to_rep2 (function_range) Int)

(declare-fun of_rep2 (Int) function_range)

;; inversion_axiom
  (assert
  (forall ((x function_range))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x function_range)) (! (in_range4
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__step_function__delimiter_entry__delimiter function_range)(rec__step_function__delimiter_entry__value float)))))
(define-fun us_split_fields_Delimiter__projection ((a us_split_fields)) function_range
  (rec__step_function__delimiter_entry__delimiter a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep2
                           (rec__step_function__delimiter_entry__delimiter
                           (us_split_fields1 a))) (to_rep2
                                                  (rec__step_function__delimiter_entry__delimiter
                                                  (us_split_fields1 b))))
                        (= (to_rep
                           (rec__step_function__delimiter_entry__value
                           (us_split_fields1 a))) (to_rep
                                                  (rec__step_function__delimiter_entry__value
                                                  (us_split_fields1 b)))))
                   true false))

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const step_function__delimiter_entry__delimiter__first__bit Int)

(declare-const step_function__delimiter_entry__delimiter__last__bit Int)

(declare-const step_function__delimiter_entry__delimiter__position Int)

;; step_function__delimiter_entry__delimiter__first__bit_axiom
  (assert (<= 0 step_function__delimiter_entry__delimiter__first__bit))

;; step_function__delimiter_entry__delimiter__last__bit_axiom
  (assert
  (< step_function__delimiter_entry__delimiter__first__bit step_function__delimiter_entry__delimiter__last__bit))

;; step_function__delimiter_entry__delimiter__position_axiom
  (assert (<= 0 step_function__delimiter_entry__delimiter__position))

(declare-const step_function__delimiter_entry__value__first__bit Int)

(declare-const step_function__delimiter_entry__value__last__bit Int)

(declare-const step_function__delimiter_entry__value__position Int)

;; step_function__delimiter_entry__value__first__bit_axiom
  (assert (<= 0 step_function__delimiter_entry__value__first__bit))

;; step_function__delimiter_entry__value__last__bit_axiom
  (assert
  (< step_function__delimiter_entry__value__first__bit step_function__delimiter_entry__value__last__bit))

;; step_function__delimiter_entry__value__position_axiom
  (assert (<= 0 step_function__delimiter_entry__value__position))

(declare-fun user_eq8 (us_rep us_rep) Bool)

(declare-const dummy8 us_rep)

(declare-datatypes ()
((delimiter_entry__ref
 (mk_delimiter_entry__ref (delimiter_entry__content us_rep)))))
(define-fun delimiter_entry__ref___projection ((a delimiter_entry__ref)) us_rep
  (delimiter_entry__content a))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int us_rep))))))
(declare-fun slide ((Array Int us_rep) Int Int) (Array Int us_rep))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int us_rep) Int Int (Array Int us_rep) Int
  Int) (Array Int us_rep))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (us_rep Int) (Array Int us_rep))

;; singleton_def
  (assert
  (forall ((v us_rep))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq1 ((a (Array Int us_rep)) (a__first Int) (a__last Int)
  (b (Array Int us_rep)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (bool_eq (select a temp___idx_132)
                              (select b (+ (- b__first a__first) temp___idx_132))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq1 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (bool_eq (select a temp___idx_132)
     (select b (+ (- b__first a__first) temp___idx_132))) true))))))))

(declare-const dummy9 (Array Int us_rep))

(declare-const value__size1 Int)

(declare-fun object__size1 ((Array Int us_rep)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int us_rep)) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 ((Array Int us_rep)) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a (Array Int us_rep))) (<= 0 (object__size1 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int us_rep))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a (Array Int us_rep))) (<= 0 (object__alignment1 a))))

(declare-fun user_eq9 ((Array Int us_rep) (Array Int us_rep)) Bool)

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1
 (rec__step_function__step_function_t__number_of_delimiters num_delimiters_range)(rec__step_function__step_function_t__step (Array Int us_rep))))))
(define-fun us_split_fields_Number_Of_Delimiters__projection ((a us_split_fields2)) num_delimiters_range
  (rec__step_function__step_function_t__number_of_delimiters a))

(define-fun us_split_fields_Step__projection ((a us_split_fields2)) (Array Int us_rep)
  (rec__step_function__step_function_t__step a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___2__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                  a))

(define-fun bool_eq2 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (to_rep1
                            (rec__step_function__step_function_t__number_of_delimiters
                            (us_split_fields3 a))) (to_rep1
                                                   (rec__step_function__step_function_t__number_of_delimiters
                                                   (us_split_fields3 b))))
                         (= (bool_eq1
                            (rec__step_function__step_function_t__step
                            (us_split_fields3 a)) 0 10
                            (rec__step_function__step_function_t__step
                            (us_split_fields3 b)) 0 10) true))
                    true false))

(declare-const value__size2 Int)

(declare-fun object__size2 (us_rep1) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))

(declare-const step_function__step_function_t__number_of_delimiters__first__bit Int)

(declare-const step_function__step_function_t__number_of_delimiters__last__bit Int)

(declare-const step_function__step_function_t__number_of_delimiters__position Int)

;; step_function__step_function_t__number_of_delimiters__first__bit_axiom
  (assert
  (<= 0 step_function__step_function_t__number_of_delimiters__first__bit))

;; step_function__step_function_t__number_of_delimiters__last__bit_axiom
  (assert
  (< step_function__step_function_t__number_of_delimiters__first__bit
  step_function__step_function_t__number_of_delimiters__last__bit))

;; step_function__step_function_t__number_of_delimiters__position_axiom
  (assert
  (<= 0 step_function__step_function_t__number_of_delimiters__position))

(declare-const step_function__step_function_t__step__first__bit Int)

(declare-const step_function__step_function_t__step__last__bit Int)

(declare-const step_function__step_function_t__step__position Int)

;; step_function__step_function_t__step__first__bit_axiom
  (assert (<= 0 step_function__step_function_t__step__first__bit))

;; step_function__step_function_t__step__last__bit_axiom
  (assert
  (< step_function__step_function_t__step__first__bit step_function__step_function_t__step__last__bit))

;; step_function__step_function_t__step__position_axiom
  (assert (<= 0 step_function__step_function_t__step__position))

(declare-fun user_eq10 (us_rep1 us_rep1) Bool)

(declare-const dummy10 us_rep1)

(declare-datatypes ()
((step_function_t__ref
 (mk_step_function_t__ref (step_function_t__content us_rep1)))))
(define-fun step_function_t__ref___projection ((a step_function_t__ref)) us_rep1
  (step_function_t__content a))

(declare-sort breaking_model_t 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq11 (breaking_model_t breaking_model_t) Bool)

(declare-const dummy11 breaking_model_t)

(declare-datatypes ()
((breaking_model_t__ref
 (mk_breaking_model_t__ref (breaking_model_t__content breaking_model_t)))))
(define-fun breaking_model_t__ref___projection ((a breaking_model_t__ref)) breaking_model_t
  (breaking_model_t__content a))

(define-fun dynamic_invariant5 ((temp___expr_280 Int)
  (temp___is_init_277 Bool) (temp___skip_constant_278 Bool)
  (temp___do_toplevel_279 Bool)) Bool (=>
                                      (or (= temp___is_init_277 true)
                                      (<= 0 1)) (in_range5 temp___expr_280)))

(declare-const breaking_model Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const t_traction_cut_off Float32)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const a_brake_emergency_model us_rep1)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-fun temp___133 (us_rep us_rep) (Array Int us_rep))

;; def_axiom
  (assert
  (forall ((temp___135 us_rep) (temp___136 us_rep))
  (let ((temp___134 (temp___133 temp___135 temp___136)))
  (forall ((temp___137 Int))
  (ite (= temp___137 0) (= (select temp___134 temp___137) temp___135)
  (= (select temp___134 temp___137) temp___136))))))

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const a_sb01 Float32)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const a_sb02 Float32)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const t_brake_react Float32)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const t_brake_increase Float32)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const t_brake_build_up Float32)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-const t_brake_emergency_react Float32)

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(declare-const t_brake_emergency_increase Float32)

(declare-const attr__ATTRIBUTE_ADDRESS11 Int)

(declare-const t_brake_emergency Float32)

(declare-const attr__ATTRIBUTE_ADDRESS12 Int)

(declare-const t_brake_service_react Float32)

(declare-const attr__ATTRIBUTE_ADDRESS13 Int)

(declare-const t_brake_service_increase Float32)

(declare-const attr__ATTRIBUTE_ADDRESS14 Int)

(declare-const t_brake_service Float32)

(declare-const attr__ATTRIBUTE_ADDRESS15 Int)

(declare-const kdry_rst_model us_rep1)

(declare-const attr__ATTRIBUTE_ADDRESS16 Int)

(declare-fun temp___138 (us_rep us_rep) (Array Int us_rep))

;; def_axiom
  (assert
  (forall ((temp___140 us_rep) (temp___141 us_rep))
  (let ((temp___139 (temp___138 temp___140 temp___141)))
  (forall ((temp___142 Int))
  (ite (= temp___142 0) (= (select temp___139 temp___142) temp___140)
  (= (select temp___139 temp___142) temp___141))))))

(declare-const kwet_rst_model us_rep1)

(declare-const attr__ATTRIBUTE_ADDRESS17 Int)

(declare-fun temp___143 (us_rep us_rep) (Array Int us_rep))

;; def_axiom
  (assert
  (forall ((temp___145 us_rep) (temp___146 us_rep))
  (let ((temp___144 (temp___143 temp___145 temp___146)))
  (forall ((temp___147 Int))
  (ite (= temp___147 0) (= (select temp___144 temp___147) temp___145)
  (= (select temp___144 temp___147) temp___146))))))

(declare-const attr__ATTRIBUTE_ADDRESS18 Int)

(declare-const attr__ATTRIBUTE_ADDRESS19 Int)

(declare-const train_length Int)

(declare-const attr__ATTRIBUTE_ADDRESS20 Int)

(declare-const maximum_train_speed Float32)

(declare-const attr__ATTRIBUTE_ADDRESS21 Int)

(define-fun dynamic_invariant6 ((temp___expr_51 Float32)
  (temp___is_init_48 Bool) (temp___skip_constant_49 Bool)
  (temp___do_toplevel_50 Bool)) Bool (=>
                                     (or (= temp___is_init_48 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                     (fp.isFinite32 temp___expr_51)))

;; breaking_model__def_axiom
  (assert (= breaking_model 0))

;; t_traction_cut_off__def_axiom
  (assert
  (= t_traction_cut_off (fp #b0 #b10000010 #b01000000000000000000000)))

;; a_brake_emergency_model__def_axiom
  (assert
  (= a_brake_emergency_model (mk___rep1
                             (mk___split_fields1 (of_rep1 0)
                             (temp___133
                             (mk___rep
                             (mk___split_fields (of_rep2 0)
                             (of_rep
                             (fp #b0 #b01111111 #b00000000000000000000000))))
                             (mk___rep
                             (mk___split_fields (of_rep2 0)
                             (of_rep
                             (fp #b0 #b00000000 #b00000000000000000000000)))))))))

;; a_sb01__def_axiom
  (assert (= a_sb01 (fp #b0 #b01111011 #b10011001100110011001101)))

;; a_sb02__def_axiom
  (assert (= a_sb02 (fp #b0 #b01111100 #b10011001100110011001101)))

;; t_brake_react__def_axiom
  (assert (= t_brake_react (fp #b0 #b01111111 #b00000000000000000000000)))

;; t_brake_increase__def_axiom
  (assert (= t_brake_increase (fp #b0 #b10000000 #b00000000000000000000000)))

;; t_brake_build_up__def_axiom
  (assert (= t_brake_build_up (fp #b0 #b10000000 #b00000000000000000000000)))

;; t_brake_emergency_react__def_axiom
  (assert
  (= t_brake_emergency_react (fp #b0 #b01111111 #b00000000000000000000000)))

;; t_brake_emergency_increase__def_axiom
  (assert
  (= t_brake_emergency_increase (fp #b0 #b10000000 #b00000000000000000000000)))

;; t_brake_emergency__def_axiom
  (assert
  (= t_brake_emergency (fp #b0 #b10000000 #b00000000000000000000000)))

;; t_brake_service_react__def_axiom
  (assert
  (= t_brake_service_react (fp #b0 #b01111111 #b00000000000000000000000)))

;; t_brake_service_increase__def_axiom
  (assert
  (= t_brake_service_increase (fp #b0 #b10000000 #b00000000000000000000000)))

;; t_brake_service__def_axiom
  (assert (= t_brake_service (fp #b0 #b10000000 #b00000000000000000000000)))

;; kdry_rst_model__def_axiom
  (assert
  (= kdry_rst_model (mk___rep1
                    (mk___split_fields1 (of_rep1 0)
                    (temp___138
                    (mk___rep
                    (mk___split_fields (of_rep2 0)
                    (of_rep (fp #b0 #b01111111 #b00000000000000000000000))))
                    (mk___rep
                    (mk___split_fields (of_rep2 0)
                    (of_rep (fp #b0 #b00000000 #b00000000000000000000000)))))))))

;; kwet_rst_model__def_axiom
  (assert
  (= kwet_rst_model (mk___rep1
                    (mk___split_fields1 (of_rep1 0)
                    (temp___143
                    (mk___rep
                    (mk___split_fields (of_rep2 0)
                    (of_rep (fp #b0 #b01111111 #b00000000000000000000000))))
                    (mk___rep
                    (mk___split_fields (of_rep2 0)
                    (of_rep (fp #b0 #b00000000 #b00000000000000000000000)))))))))

;; train_length__def_axiom
  (assert (= train_length 900))

;; maximum_train_speed__def_axiom
  (assert
  (= maximum_train_speed (m_per_s_from_km_per_h
                         (fp #b0 #b10000110 #b11110100000000000000000))))

;; is_valid_speed_km_per_h__post_axiom
  (assert true)

;; is_valid_speed_km_per_h__def_axiom
  (assert
  (forall ((speed Float32))
  (! (= (= (is_valid_speed_km_per_h speed) true)
     (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) speed)
     (fp.leq speed (fp #b0 #b10000111 #b11110100000000000000000)))) :pattern (
  (is_valid_speed_km_per_h speed)) )))

(define-fun dynamic_invariant7 ((temp___expr_187 Int)
  (temp___is_init_184 Bool) (temp___skip_constant_185 Bool)
  (temp___do_toplevel_186 Bool)) Bool (=>
                                      (or (= temp___is_init_184 true)
                                      (<= 0 10)) (in_range3 temp___expr_187)))

(define-fun dynamic_invariant8 ((temp___expr_193 Int)
  (temp___is_init_190 Bool) (temp___skip_constant_191 Bool)
  (temp___do_toplevel_192 Bool)) Bool (=>
                                      (or (= temp___is_init_190 true)
                                      (<= 0 2147483647)) (in_range4
                                      temp___expr_193)))

(declare-const o float)

(declare-const o1 function_range)

(declare-const o2 function_range)

(declare-const o3 float)

(declare-const o4 float)

(declare-const o5 function_range)

(declare-const o6 function_range)

(declare-const o7 float)

(declare-const o8 function_range)

(declare-const o9 float)

(declare-const o10 function_range)

(declare-const o11 float)

(declare-const o12 (Array Int us_rep))

(declare-const o13 num_delimiters_range)

(declare-const o14 num_delimiters_range)

(declare-const o15 (Array Int us_rep))

(declare-const sec_3_13_2_monitoring_inputs__a_brake_emergency_model__assume num_delimiters_range)

(declare-const sec_3_13_2_monitoring_inputs__a_brake_emergency_model__assume1 (Array Int us_rep))

(declare-const o16 float)

(declare-const o17 function_range)

(declare-const o18 function_range)

(declare-const o19 float)

(declare-const o20 float)

(declare-const o21 function_range)

(declare-const o22 function_range)

(declare-const o23 float)

(declare-const o24 function_range)

(declare-const o25 float)

(declare-const o26 us_rep)

(declare-const o27 (Array Int us_rep))

(declare-const o28 num_delimiters_range)

(declare-const o29 us_split_fields2)

(declare-const sec_3_13_2_monitoring_inputs__kdry_rst_model__assume us_rep1)

(declare-const o30 float)

(declare-const o31 function_range)

(declare-const o32 us_split_fields)

(declare-const o33 float)

(declare-const o34 function_range)

(declare-const o35 us_split_fields)

(declare-const o36 us_rep)

(declare-const o37 us_rep)

(declare-const o38 (Array Int us_rep))

(declare-const o39 num_delimiters_range)

(declare-const o40 us_split_fields2)

(declare-const sec_3_13_2_monitoring_inputs__kwet_rst_model__assume us_rep1)

;; H
  (assert (in_range5 breaking_model))

;; H
  (assert (fp.isFinite32 t_traction_cut_off))

;; H
  (assert (= (to_rep o4) (fp #b0 #b00000000 #b00000000000000000000000)))

;; H
  (assert (= (to_rep2 o5) 0))

;; H
  (assert (= o5 o6))

;; H
  (assert (= o4 o7))

;; H
  (assert (= o8 o6))

;; H
  (assert (= o9 o7))

;; H
  (assert (= (to_rep o) (fp #b0 #b01111111 #b00000000000000000000000)))

;; H
  (assert (= (to_rep2 o1) 0))

;; H
  (assert (= o1 o2))

;; H
  (assert (= o o3))

;; H
  (assert (= o10 o2))

;; H
  (assert (= o11 o3))

;; H
  (assert
  (= o12 (temp___133 (mk___rep (mk___split_fields o10 o11))
         (mk___rep (mk___split_fields o8 o9)))))

;; H
  (assert (= (to_rep1 o13) 0))

;; H
  (assert (= o13 o14))

;; H
  (assert (= o12 o15))

;; H
  (assert
  (= sec_3_13_2_monitoring_inputs__a_brake_emergency_model__assume o14))

;; H
  (assert
  (= sec_3_13_2_monitoring_inputs__a_brake_emergency_model__assume1 o15))

;; H
  (assert
  (= (mk___rep1
     (mk___split_fields1
     sec_3_13_2_monitoring_inputs__a_brake_emergency_model__assume
     sec_3_13_2_monitoring_inputs__a_brake_emergency_model__assume1))
  a_brake_emergency_model))

;; H
  (assert (in_range1 a_sb01))

;; H
  (assert (in_range1 a_sb02))

;; H
  (assert (fp.isFinite32 t_brake_react))

;; H
  (assert (fp.isFinite32 t_brake_increase))

;; H
  (assert (fp.isFinite32 t_brake_build_up))

;; H
  (assert (fp.isFinite32 t_brake_emergency_react))

;; H
  (assert (fp.isFinite32 t_brake_emergency_increase))

;; H
  (assert (fp.isFinite32 t_brake_emergency))

;; H
  (assert (fp.isFinite32 t_brake_service_react))

;; H
  (assert (fp.isFinite32 t_brake_service_increase))

;; H
  (assert (fp.isFinite32 t_brake_service))

;; H
  (assert (= (to_rep o20) (fp #b0 #b00000000 #b00000000000000000000000)))

;; H
  (assert (= (to_rep2 o21) 0))

;; H
  (assert (= o21 o22))

;; H
  (assert (= o20 o23))

;; H
  (assert (= o24 o22))

;; H
  (assert (= o25 o23))

;; H
  (assert (= (to_rep o16) (fp #b0 #b01111111 #b00000000000000000000000)))

;; H
  (assert (= (to_rep2 o17) 0))

;; H
  (assert (= o17 o18))

;; H
  (assert (= o16 o19))

;; H
  (assert (= o26 (mk___rep (mk___split_fields o18 o19))))

;; H
  (assert (= o27 (temp___138 o26 (mk___rep (mk___split_fields o24 o25)))))

;; H
  (assert (= (to_rep1 o28) 0))

;; H
  (assert (= o29 (mk___split_fields1 o28 o27)))

;; H
  (assert
  (= sec_3_13_2_monitoring_inputs__kdry_rst_model__assume (mk___rep1 o29)))

;; H
  (assert
  (= sec_3_13_2_monitoring_inputs__kdry_rst_model__assume kdry_rst_model))

;; H
  (assert (= (to_rep o33) (fp #b0 #b00000000 #b00000000000000000000000)))

;; H
  (assert (= (to_rep2 o34) 0))

;; H
  (assert (= o35 (mk___split_fields o34 o33)))

;; H
  (assert (= o36 (mk___rep o35)))

;; H
  (assert (= (to_rep o30) (fp #b0 #b01111111 #b00000000000000000000000)))

;; H
  (assert (= (to_rep2 o31) 0))

;; H
  (assert (= o32 (mk___split_fields o31 o30)))

;; H
  (assert (= o37 (mk___rep o32)))

;; H
  (assert (= o38 (temp___143 o37 o36)))

;; H
  (assert (= (to_rep1 o39) 0))

;; H
  (assert (= o40 (mk___split_fields1 o39 o38)))

;; H
  (assert
  (= sec_3_13_2_monitoring_inputs__kwet_rst_model__assume (mk___rep1 o40)))

;; H
  (assert
  (= sec_3_13_2_monitoring_inputs__kwet_rst_model__assume kwet_rst_model))

;; H
  (assert (in_range2 train_length))

(assert
;; WP_parameter_def
 ;; File "sec_3_13_2_monitoring_inputs.ads", line 248, characters 0-0
  (not
  (= (is_valid_speed_km_per_h (fp #b0 #b10000110 #b11110100000000000000000)) true)))
(check-sat)
(exit)
