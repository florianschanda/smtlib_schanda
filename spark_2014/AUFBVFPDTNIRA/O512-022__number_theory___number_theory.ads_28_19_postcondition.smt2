;; produced by cvc4_14.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort natural 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-fun dummy1 () natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range2
                                     temp___expr_33)))

(declare-sort positive 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(define-fun bool_eq2 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (positive positive) Bool)

(declare-fun dummy2 () positive)

(declare-datatypes ()
((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(define-fun dynamic_invariant1 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range3
                                     temp___expr_39)))

(declare-sort fibonacci_argument_type 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 46)))

(define-fun bool_eq3 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (fibonacci_argument_type fibonacci_argument_type) Bool)

(declare-fun dummy3 () fibonacci_argument_type)

(declare-datatypes ()
((fibonacci_argument_type__ref
 (mk_fibonacci_argument_type__ref
 (fibonacci_argument_type__content fibonacci_argument_type)))))
(define-fun fibonacci_argument_type__ref___projection ((a fibonacci_argument_type__ref)) fibonacci_argument_type 
  (fibonacci_argument_type__content a))

(define-fun dynamic_invariant2 ((temp___expr_185 Int)
  (temp___is_init_182 Bool) (temp___skip_constant_183 Bool)
  (temp___do_toplevel_184 Bool)) Bool (=>
                                      (or (= temp___is_init_182 true)
                                      (<= 0 46)) (in_range4 temp___expr_185)))

(declare-fun fib (Int) Int)

(declare-fun fib__function_guard (Int Int) Bool)

(declare-fun pow2 (Int) Int)

(define-fun to_nearest ((m RoundingMode)) Bool (or (= m RNE) (= m RNA)))

(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(define-fun is_not_nan ((x Float32)) Bool (or
                                          (not (or (fp.isInfinite x) (fp.isNaN x)))
                                          (fp.isInfinite  x)))

(declare-fun of_int1 (RoundingMode Int) Float32)

(declare-fun to_int2 (RoundingMode Float32) Int)

(declare-fun round (RoundingMode Real) Real)

(declare-fun max_int () Int)

(define-fun in_range5 ((x Real)) Bool (and
                                      (<= (- (* 33554430.0 10141204801825835211973625643008.0)) x)
                                      (<= x (* 33554430.0 10141204801825835211973625643008.0))))

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun no_overflow ((m RoundingMode) (x Real)) Bool (in_range5
  (round m x)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(declare-fun sqrt (Real) Real)

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(declare-fun is_int1 (Float32) Bool)

(define-fun neq ((x Float32) (y Float32)) Bool (not (fp.eq x y)))

(define-fun bool_lt ((x Float32)
  (y Float32)) Bool (ite (fp.lt x y) true false))

(define-fun bool_le ((x Float32)
  (y Float32)) Bool (ite (fp.leq x y) true false))

(define-fun bool_gt ((x Float32)
  (y Float32)) Bool (ite (fp.lt y x) true false))

(define-fun bool_ge ((x Float32)
  (y Float32)) Bool (ite (fp.leq y x) true false))

(define-fun bool_eq4 ((x Float32)
  (y Float32)) Bool (ite (fp.eq x y) true false))

(define-fun bool_neq ((x Float32)
  (y Float32)) Bool (ite (not (fp.eq x y)) true false))

(declare-datatypes () ((t__ref (mk_t__ref (t__content Float32)))))
(declare-fun power (Float32 Int) Float32)

;; Power_0
  (assert
  (forall ((x Float32))
  (=> (not (or (fp.isInfinite x) (fp.isNaN x)))
  (fp.eq (power x 0) (of_int1 RNE 1)))))

;; Power_1
  (assert
  (forall ((x Float32))
  (=> (not (or (fp.isInfinite x) (fp.isNaN x))) (fp.eq (power x 1) x))))

;; Power_2
  (assert
  (forall ((x Float32))
  (=> (not (or (fp.isInfinite x) (fp.isNaN x)))
  (fp.eq (power x 2) (fp.mul RNE x x)))))

;; Power_3
  (assert
  (forall ((x Float32))
  (=> (not (or (fp.isInfinite x) (fp.isNaN x)))
  (fp.eq (power x 3) (fp.mul RNE x (fp.mul RNE x x))))))

;; Power_neg1
  (assert
  (forall ((x Float32))
  (=> (not (or (fp.isInfinite x) (fp.isNaN x)))
  (=> (not (fp.isZero      x))
  (fp.eq (power x (- 1)) (fp.div RNE (of_int1 RNE 1) x))))))

;; Power_neg2
  (assert
  (forall ((x Float32))
  (=> (not (or (fp.isInfinite x) (fp.isNaN x)))
  (=> (not (fp.isZero      x))
  (fp.eq (power x (- 2)) (fp.div RNE (of_int1 RNE 1) (power x 2)))))))

;; Power_neg3
  (assert
  (forall ((x Float32))
  (=> (not (or (fp.isInfinite x) (fp.isNaN x)))
  (=> (not (fp.isZero      x))
  (fp.eq (power x (- 2)) (fp.div RNE (of_int1 RNE 1) (power x 3)))))))

;; fib__def_axiom
  (assert
  (forall ((n Int))
  (! (=> (dynamic_invariant2 n true true true)
     (= (fib n) (ite (or (= n 0) (= n 1)) n (+ (fib (- n 1)) (fib (- n 2)))))) :pattern (
  (fib n)) )))

(declare-fun n () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(define-fun dynamic_property ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(define-fun bool_eq5 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq4 (integer integer) Bool)

(declare-fun dummy4 () integer)

(declare-datatypes () ((t1b__ref (mk_t1b__ref (t1b__content integer)))))
(define-fun t1b__ref___projection ((a t1b__ref)) integer (t1b__content a))

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(define-fun dynamic_invariant3 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-fun result__ () Int)

(declare-fun old__ () Int)

(declare-fun oldest () Int)

(declare-fun temp () Int)

(declare-fun i () Int)

(declare-fun number_theory__fibonacci__result () Int)

(declare-fun temp___194 () Int)

(declare-fun temp___193 () Int)

(declare-fun temp___192 () Int)

(declare-fun temp___191 () Int)

(declare-fun o () Int)

(declare-fun old__1 () Int)

(declare-fun oldest1 () Int)

(declare-fun temp1 () Int)

(declare-fun i1 () Int)

(declare-fun result () Int)

(declare-fun result__1 () Int)

(declare-fun result1 () Int)

(declare-fun oldest2 () Int)

(declare-fun result2 () Int)

(declare-fun old__2 () Int)

(declare-fun result3 () Int)

(declare-fun i2 () Int)

(declare-fun old__3 () Int)

(declare-fun oldest3 () Int)

(declare-fun temp2 () Int)

(declare-fun i3 () Int)

(declare-fun result4 () Int)

(declare-fun temp3 () Int)

(declare-fun result5 () Int)

(declare-fun oldest4 () Int)

(declare-fun result6 () Int)

(declare-fun old__4 () Int)

(declare-fun old__5 () Int)

(declare-fun oldest5 () Int)

(declare-fun temp4 () Int)

(declare-fun i4 () int__ref)

(declare-fun old__6 () Int)

(declare-fun oldest6 () Int)

(declare-fun temp5 () Int)

(declare-fun i5 () Int)

(declare-fun old__7 () int__ref)

(declare-fun oldest7 () int__ref)

(declare-fun temp6 () int__ref)

(declare-fun i6 () int__ref)

(declare-fun old__8 () Int)

(declare-fun oldest8 () Int)

(declare-fun temp7 () Int)

(declare-fun i7 () Int)

(declare-fun result7 () int__ref)

(declare-fun result__2 () Int)

(declare-fun result__3 () int__ref)

(declare-fun old__9 () int__ref)

(declare-fun oldest9 () int__ref)

(declare-fun temp8 () int__ref)

(declare-fun i8 () int__ref)

(declare-fun result__4 () Int)

(declare-fun old__10 () Int)

(declare-fun oldest10 () Int)

(declare-fun temp9 () Int)

(declare-fun i9 () Int)

(declare-fun result8 () int__ref)

(declare-fun number_theory__fibonacci__result1 () Int)

(declare-fun number_theory__fibonacci__result2 () int__ref)

(declare-fun number_theory__fibonacci__result3 () Int)

(declare-fun result__5 () int__ref)

(declare-fun old__11 () int__ref)

(declare-fun oldest11 () int__ref)

(declare-fun temp10 () int__ref)

(declare-fun i10 () int__ref)

(declare-fun number_theory__fibonacci__result4 () int__ref)

(declare-fun result__6 () Int)

(declare-fun old__12 () Int)

(declare-fun oldest12 () Int)

(declare-fun temp11 () Int)

(declare-fun i11 () Int)

(declare-fun number_theory__fibonacci__result5 () Int)

(define-fun i12 () int__ref (mk_int__ref i))

(define-fun temp12 () int__ref (mk_int__ref temp))

(define-fun oldest13 () int__ref (mk_int__ref oldest))

(define-fun old__13 () int__ref (mk_int__ref old__))

(declare-fun result9 () Int)

;; H
  (assert (in_range4 n))

;; H
  (assert (=> (<= 0 2147483647) (in_range2 result__)))

;; H
  (assert (=> (<= 1 2147483647) (in_range3 old__)))

;; H
  (assert (=> (<= 0 2147483647) (in_range2 oldest)))

;; H
  (assert (=> (<= 0 2147483647) (in_range2 temp)))

;; H
  (assert (=> (=> (not (= n 0)) (= n 1)) (= result result__)))

;; H
  (assert (=> (=> (not (= n 0)) (= n 1)) (= result__1 n)))

;; H
  (assert (=> (=> (not (= n 0)) (= n 1)) (= i8 i12)))

;; H
  (assert (=> (=> (not (= n 0)) (= n 1)) (= temp8 temp12)))

;; H
  (assert (=> (=> (not (= n 0)) (= n 1)) (= oldest9 oldest13)))

;; H
  (assert (=> (=> (not (= n 0)) (= n 1)) (= old__9 old__13)))

;; H
  (assert
  (=> (=> (not (= n 0)) (= n 1)) (= result__3 (mk_int__ref result__1))))

;; H
  (assert (=> (=> (not (= n 0)) (= n 1)) (= i9 i1)))

;; H
  (assert (=> (=> (not (= n 0)) (= n 1)) (= temp9 temp1)))

;; H
  (assert (=> (=> (not (= n 0)) (= n 1)) (= oldest10 oldest1)))

;; H
  (assert (=> (=> (not (= n 0)) (= n 1)) (= old__10 old__1)))

;; H
  (assert (=> (=> (not (= n 0)) (= n 1)) (= result__4 result__1)))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1))) (= (mk_int__ref result1) oldest13)))

;; H
  (assert (=> (not (=> (not (= n 0)) (= n 1))) (= oldest2 0)))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1))) (= (mk_int__ref result2) old__13)))

;; H
  (assert (=> (not (=> (not (= n 0)) (= n 1))) (= old__2 1)))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1))) (= (mk_int__ref result3) i12)))

;; H
  (assert (=> (not (=> (not (= n 0)) (= n 1))) (= i2 2)))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (=> (and (<= 2 i2) (<= i2 n)) (= temp___194 temp))))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (=> (and (<= 2 i2) (<= i2 n)) (= temp___193 oldest2))))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (=> (and (<= 2 i2) (<= i2 n)) (= temp___192 old__2))))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (=> (and (<= 2 i2) (<= i2 n)) (= temp___191 i2))))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (=> (and (<= 2 i2) (<= i2 n))
  (and (= old__3 (fib (- i3 1))) (= oldest3 (fib (- i3 2)))))))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (=> (and (<= 2 i2) (<= i2 n))
  (and
  (and
  (and
  (and (=> (<= 2 n) (dynamic_property 2 n i3))
  (=> (<= 1 2147483647) (in_range3 old__3)))
  (=> (<= 0 2147483647) (in_range2 oldest3)))
  (=> (<= 0 2147483647) (in_range2 temp2))) (and (<= 2 i3) (<= i3 n))))))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (=> (and (<= 2 i2) (<= i2 n)) (= temp2 result4))))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (=> (and (<= 2 i2) (<= i2 n)) (= temp3 oldest3))))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (=> (and (<= 2 i2) (<= i2 n)) (= oldest3 result5))))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (=> (and (<= 2 i2) (<= i2 n)) (= oldest4 old__3))))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (=> (and (<= 2 i2) (<= i2 n))
  (and (= o (+ old__3 temp3)) (in_range1 (+ old__3 temp3))))))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (=> (and (<= 2 i2) (<= i2 n)) (= old__3 result6))))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (=> (and (<= 2 i2) (<= i2 n)) (= old__4 o))))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (=> (and (<= 2 i2) (<= i2 n)) (= i3 n))))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (=> (and (<= 2 i2) (<= i2 n)) (= i4 (mk_int__ref i3)))))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (=> (and (<= 2 i2) (<= i2 n)) (= temp3 temp4))))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (=> (and (<= 2 i2) (<= i2 n)) (= oldest4 oldest5))))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (=> (and (<= 2 i2) (<= i2 n)) (= old__4 old__5))))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (=> (and (<= 2 i2) (<= i2 n)) (= i5 i3))))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (=> (and (<= 2 i2) (<= i2 n)) (= temp5 temp3))))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (=> (and (<= 2 i2) (<= i2 n)) (= oldest6 oldest4))))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (=> (and (<= 2 i2) (<= i2 n)) (= old__6 old__4))))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (=> (and (<= 2 i2) (<= i2 n)) (= i6 i4))))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (=> (and (<= 2 i2) (<= i2 n)) (= temp6 (mk_int__ref temp4)))))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (=> (and (<= 2 i2) (<= i2 n)) (= oldest7 (mk_int__ref oldest5)))))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (=> (and (<= 2 i2) (<= i2 n)) (= old__7 (mk_int__ref old__5)))))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (=> (and (<= 2 i2) (<= i2 n)) (= i7 i5))))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (=> (and (<= 2 i2) (<= i2 n)) (= temp7 temp5))))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (=> (and (<= 2 i2) (<= i2 n)) (= oldest8 oldest6))))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (=> (and (<= 2 i2) (<= i2 n)) (= old__8 old__6))))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (=> (not (and (<= 2 i2) (<= i2 n))) (= i6 (mk_int__ref i2)))))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (=> (not (and (<= 2 i2) (<= i2 n))) (= temp6 temp12))))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (=> (not (and (<= 2 i2) (<= i2 n))) (= oldest7 (mk_int__ref oldest2)))))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (=> (not (and (<= 2 i2) (<= i2 n))) (= old__7 (mk_int__ref old__2)))))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (=> (not (and (<= 2 i2) (<= i2 n))) (= i7 i2))))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (=> (not (and (<= 2 i2) (<= i2 n))) (= temp7 temp1))))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (=> (not (and (<= 2 i2) (<= i2 n))) (= oldest8 oldest2))))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (=> (not (and (<= 2 i2) (<= i2 n))) (= old__8 old__2))))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1))) (= result7 (mk_int__ref result__))))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1))) (= result__2 (int__content old__7))))

;; H
  (assert (=> (not (=> (not (= n 0)) (= n 1))) (= i8 i6)))

;; H
  (assert (=> (not (=> (not (= n 0)) (= n 1))) (= temp8 temp6)))

;; H
  (assert (=> (not (=> (not (= n 0)) (= n 1))) (= oldest9 oldest7)))

;; H
  (assert (=> (not (=> (not (= n 0)) (= n 1))) (= old__9 old__7)))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1))) (= result__3 (mk_int__ref result__2))))

;; H
  (assert (=> (not (=> (not (= n 0)) (= n 1))) (= i9 i7)))

;; H
  (assert (=> (not (=> (not (= n 0)) (= n 1))) (= temp9 temp7)))

;; H
  (assert (=> (not (=> (not (= n 0)) (= n 1))) (= oldest10 oldest8)))

;; H
  (assert (=> (not (=> (not (= n 0)) (= n 1))) (= old__10 old__8)))

;; H
  (assert (=> (not (=> (not (= n 0)) (= n 1))) (= result__4 result__2)))

;; H
  (assert
  (= number_theory__fibonacci__result2 (mk_int__ref
                                       number_theory__fibonacci__result1)))

;; H
  (assert
  (= number_theory__fibonacci__result3 number_theory__fibonacci__result1))

;; H
  (assert (= result8 (mk_int__ref number_theory__fibonacci__result)))

;; H
  (assert (= number_theory__fibonacci__result1 (int__content result__3)))

;; H
  (assert
  (= number_theory__fibonacci__result4 number_theory__fibonacci__result2))

;; H
  (assert (= i10 i8))

;; H
  (assert (= temp10 temp8))

;; H
  (assert (= oldest11 oldest9))

;; H
  (assert (= old__11 old__9))

;; H
  (assert (= result__5 result__3))

;; H
  (assert
  (= number_theory__fibonacci__result5 number_theory__fibonacci__result3))

;; H
  (assert (= i11 i9))

;; H
  (assert (= temp11 temp9))

;; H
  (assert (= oldest12 oldest10))

;; H
  (assert (= old__12 old__10))

;; H
  (assert (= result__6 result__4))

;; H
  (assert (= result9 (int__content number_theory__fibonacci__result4)))

(assert
;; WP_parameter_def
 ;; File "system.ads", line 1, characters 0-0
  (not (= (int__content number_theory__fibonacci__result4) (fib n))))
(check-sat)
