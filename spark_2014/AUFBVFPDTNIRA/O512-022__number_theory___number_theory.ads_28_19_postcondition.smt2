;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort natural 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-const dummy1 natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range2
                                     temp___expr_33)))

(declare-sort positive 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (positive positive) Bool)

(declare-const dummy2 positive)

(declare-datatypes ()
((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(define-fun dynamic_invariant1 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range3
                                     temp___expr_39)))

(declare-sort fibonacci_argument_type 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 46)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (fibonacci_argument_type fibonacci_argument_type) Bool)

(declare-const dummy3 fibonacci_argument_type)

(declare-datatypes ()
((fibonacci_argument_type__ref
 (mk_fibonacci_argument_type__ref
 (fibonacci_argument_type__content fibonacci_argument_type)))))
(define-fun fibonacci_argument_type__ref___projection ((a fibonacci_argument_type__ref)) fibonacci_argument_type
  (fibonacci_argument_type__content a))

(define-fun dynamic_invariant2 ((temp___expr_185 Int)
  (temp___is_init_182 Bool) (temp___skip_constant_183 Bool)
  (temp___do_toplevel_184 Bool)) Bool (=>
                                      (or (= temp___is_init_182 true)
                                      (<= 0 46)) (in_range4 temp___expr_185)))

(declare-fun fib (Int) Int)

(declare-fun fib__function_guard (Int Int) Bool)

(declare-fun pow2 (Int) Int)

(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                (fp.isPositive x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                 (fp.isNegative x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x)
                                            (fp.isPositive x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x)
                                             (fp.isNegative x)))

(declare-fun of_int1 (RoundingMode Int) Float32)

(declare-fun to_int2 (RoundingMode Float32) Int)

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y))
                    (and (fp.isNegative x) (fp.isNegative y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y))
                    (and (fp.isNegative x) (fp.isPositive y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z))
                    (=> (diff_sign x y) (fp.isNegative z))))

(define-fun sqr ((x Real)) Real (* x x))

(declare-fun sqrt (Real) Real)

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r))
                 (and (fp.isNegative x) (< r 0.0))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content Float32)))))
(declare-fun power (Float32 Int) Float32)

;; Power_0
  (assert
  (forall ((x Float32))
  (=> (fp.isFinite32 x) (fp.eq (power x 0) (of_int1 RNE 1)))))

;; Power_1
  (assert
  (forall ((x Float32)) (=> (fp.isFinite32 x) (fp.eq (power x 1) x))))

;; Power_2
  (assert
  (forall ((x Float32))
  (=> (fp.isFinite32 x) (fp.eq (power x 2) (fp.mul RNE x x)))))

;; Power_3
  (assert
  (forall ((x Float32))
  (=> (fp.isFinite32 x) (fp.eq (power x 3) (fp.mul RNE x (fp.mul RNE x x))))))

;; Power_neg1
  (assert
  (forall ((x Float32))
  (=> (fp.isFinite32 x)
  (=> (not (fp.isZero x))
  (fp.eq (power x (- 1)) (fp.div RNE (of_int1 RNE 1) x))))))

;; Power_neg2
  (assert
  (forall ((x Float32))
  (=> (fp.isFinite32 x)
  (=> (not (fp.isZero x))
  (fp.eq (power x (- 2)) (fp.div RNE (of_int1 RNE 1) (power x 2)))))))

;; Power_neg3
  (assert
  (forall ((x Float32))
  (=> (fp.isFinite32 x)
  (=> (not (fp.isZero x))
  (fp.eq (power x (- 2)) (fp.div RNE (of_int1 RNE 1) (power x 3)))))))

;; fib__def_axiom
  (assert
  (forall ((n Int))
  (! (=> (dynamic_invariant2 n true true true)
     (= (fib n) (ite (or (= n 0) (= n 1)) n (+ (fib (- n 1)) (fib (- n 2)))))) :pattern (
  (fib n)) )))

(declare-const n Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(define-fun dynamic_property ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq4 (integer integer) Bool)

(declare-const dummy4 integer)

(declare-datatypes () ((t1b__ref (mk_t1b__ref (t1b__content integer)))))
(define-fun t1b__ref___projection ((a t1b__ref)) integer (t1b__content a))

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(define-fun dynamic_invariant3 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-const result__ Int)

(declare-const old__ Int)

(declare-const oldest Int)

(declare-const temp Int)

(declare-const i Int)

(declare-const number_theory__fibonacci__result Int)

(declare-const temp___194 Int)

(declare-const temp___193 Int)

(declare-const temp___192 Int)

(declare-const temp___191 Int)

(declare-const o Int)

(declare-const o1 Int)

(declare-const o2 Int)

(declare-const o3 Bool)

(declare-const o4 Int)

(declare-const old__1 Int)

(declare-const oldest1 Int)

(declare-const temp1 Int)

(declare-const i1 Int)

(declare-const result Int)

(declare-const result__1 Int)

(declare-const result1 Int)

(declare-const oldest2 Int)

(declare-const result2 Int)

(declare-const old__2 Int)

(declare-const result3 Int)

(declare-const i2 Int)

(declare-const old__3 Int)

(declare-const oldest3 Int)

(declare-const temp2 Int)

(declare-const i3 Int)

(declare-const result4 Int)

(declare-const temp3 Int)

(declare-const result5 Int)

(declare-const oldest4 Int)

(declare-const result6 Int)

(declare-const old__4 Int)

(declare-const result7 Int)

(declare-const i4 Int)

(declare-const old__5 Int)

(declare-const oldest5 Int)

(declare-const temp4 Int)

(declare-const i5 Int)

(declare-const old__6 Int)

(declare-const oldest6 Int)

(declare-const temp5 Int)

(declare-const i6 Int)

(declare-const old__7 Int)

(declare-const oldest7 Int)

(declare-const temp6 Int)

(declare-const i7 int__ref)

(declare-const old__8 Int)

(declare-const oldest8 Int)

(declare-const temp7 Int)

(declare-const i8 Int)

(declare-const old__9 int__ref)

(declare-const oldest9 int__ref)

(declare-const temp8 int__ref)

(declare-const i9 int__ref)

(declare-const old__10 Int)

(declare-const oldest10 Int)

(declare-const temp9 Int)

(declare-const i10 Int)

(declare-const result8 int__ref)

(declare-const result__2 Int)

(declare-const result__3 int__ref)

(declare-const old__11 int__ref)

(declare-const oldest11 int__ref)

(declare-const temp10 int__ref)

(declare-const i11 int__ref)

(declare-const result__4 Int)

(declare-const old__12 Int)

(declare-const oldest12 Int)

(declare-const temp11 Int)

(declare-const i12 Int)

(declare-const result9 int__ref)

(declare-const number_theory__fibonacci__result1 Int)

(declare-const number_theory__fibonacci__result2 int__ref)

(declare-const number_theory__fibonacci__result3 Int)

(declare-const result__5 int__ref)

(declare-const old__13 int__ref)

(declare-const oldest13 int__ref)

(declare-const temp12 int__ref)

(declare-const i13 int__ref)

(declare-const number_theory__fibonacci__result4 int__ref)

(declare-const result__6 Int)

(declare-const old__14 Int)

(declare-const oldest14 Int)

(declare-const temp13 Int)

(declare-const i14 Int)

(declare-const number_theory__fibonacci__result5 Int)

(declare-const result10 Int)

;; H
  (assert (in_range4 n))

;; H
  (assert (=> (<= 0 2147483647) (in_range2 result__)))

;; H
  (assert (=> (<= 1 2147483647) (in_range3 old__)))

;; H
  (assert (=> (<= 0 2147483647) (in_range2 oldest)))

;; H
  (assert (=> (<= 0 2147483647) (in_range2 temp)))

;; H
  (assert (=> (=> (not (= n 0)) (= n 1)) (= result result__)))

;; H
  (assert (=> (=> (not (= n 0)) (= n 1)) (= result__1 n)))

;; H
  (assert (=> (=> (not (= n 0)) (= n 1)) (= i11 (mk_int__ref i))))

;; H
  (assert (=> (=> (not (= n 0)) (= n 1)) (= temp10 (mk_int__ref temp))))

;; H
  (assert (=> (=> (not (= n 0)) (= n 1)) (= oldest11 (mk_int__ref oldest))))

;; H
  (assert (=> (=> (not (= n 0)) (= n 1)) (= old__11 (mk_int__ref old__))))

;; H
  (assert
  (=> (=> (not (= n 0)) (= n 1)) (= result__3 (mk_int__ref result__1))))

;; H
  (assert (=> (=> (not (= n 0)) (= n 1)) (= i12 i1)))

;; H
  (assert (=> (=> (not (= n 0)) (= n 1)) (= temp11 temp1)))

;; H
  (assert (=> (=> (not (= n 0)) (= n 1)) (= oldest12 oldest1)))

;; H
  (assert (=> (=> (not (= n 0)) (= n 1)) (= old__12 old__1)))

;; H
  (assert (=> (=> (not (= n 0)) (= n 1)) (= result__4 result__1)))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (= (mk_int__ref result1) (mk_int__ref oldest))))

;; H
  (assert (=> (not (=> (not (= n 0)) (= n 1))) (= oldest2 0)))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (= (mk_int__ref result2) (mk_int__ref old__))))

;; H
  (assert (=> (not (=> (not (= n 0)) (= n 1))) (= old__2 1)))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (= (mk_int__ref result3) (mk_int__ref i))))

;; H
  (assert (=> (not (=> (not (= n 0)) (= n 1))) (= i2 2)))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (=> (and (<= 2 i2) (<= i2 n))
  (and
  (and (= temp___194 temp)
  (and (= temp___193 oldest2)
  (and (= temp___192 old__2)
  (and (= temp___191 i2)
  (and (and (= old__3 (fib (- i3 1))) (= oldest3 (fib (- i3 2))))
  (and
  (and
  (and
  (and
  (and (=> (<= 2 n) (dynamic_property 2 n i3))
  (=> (<= 1 2147483647) (in_range3 old__3)))
  (=> (<= 0 2147483647) (in_range2 oldest3)))
  (=> (<= 0 2147483647) (in_range2 temp2))) (and (<= 2 i3) (<= i3 n)))
  (and (and (= temp2 result4) (= temp3 oldest3))
  (and (and (= oldest3 result5) (= oldest4 old__3))
  (and
  (and (and (= o4 (+ old__3 temp3)) (in_range1 (+ old__3 temp3)))
  (and (= old__3 result6) (= old__4 o4))) (= i3 n))))))))))
  (and
  (and (= i7 (mk_int__ref i3))
  (and (= temp3 temp6) (and (= oldest4 oldest7) (= old__4 old__7))))
  (and (= i8 i3)
  (and (= temp7 temp3) (and (= oldest8 oldest4) (= old__8 old__4)))))))))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (=> (and (<= 2 i2) (<= i2 n)) (= i9 i7))))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (=> (and (<= 2 i2) (<= i2 n)) (= temp8 (mk_int__ref temp6)))))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (=> (and (<= 2 i2) (<= i2 n)) (= oldest9 (mk_int__ref oldest7)))))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (=> (and (<= 2 i2) (<= i2 n)) (= old__9 (mk_int__ref old__7)))))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (=> (and (<= 2 i2) (<= i2 n)) (= i10 i8))))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (=> (and (<= 2 i2) (<= i2 n)) (= temp9 temp7))))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (=> (and (<= 2 i2) (<= i2 n)) (= oldest10 oldest8))))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (=> (and (<= 2 i2) (<= i2 n)) (= old__10 old__8))))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (=> (not (and (<= 2 i2) (<= i2 n))) (= i9 (mk_int__ref i2)))))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (=> (not (and (<= 2 i2) (<= i2 n))) (= temp8 (mk_int__ref temp)))))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (=> (not (and (<= 2 i2) (<= i2 n))) (= oldest9 (mk_int__ref oldest2)))))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (=> (not (and (<= 2 i2) (<= i2 n))) (= old__9 (mk_int__ref old__2)))))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (=> (not (and (<= 2 i2) (<= i2 n))) (= i10 i2))))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (=> (not (and (<= 2 i2) (<= i2 n))) (= temp9 temp1))))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (=> (not (and (<= 2 i2) (<= i2 n))) (= oldest10 oldest2))))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (=> (not (and (<= 2 i2) (<= i2 n))) (= old__10 old__2))))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1))) (= result8 (mk_int__ref result__))))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1))) (= result__2 (int__content old__9))))

;; H
  (assert (=> (not (=> (not (= n 0)) (= n 1))) (= i11 i9)))

;; H
  (assert (=> (not (=> (not (= n 0)) (= n 1))) (= temp10 temp8)))

;; H
  (assert (=> (not (=> (not (= n 0)) (= n 1))) (= oldest11 oldest9)))

;; H
  (assert (=> (not (=> (not (= n 0)) (= n 1))) (= old__11 old__9)))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1))) (= result__3 (mk_int__ref result__2))))

;; H
  (assert (=> (not (=> (not (= n 0)) (= n 1))) (= i12 i10)))

;; H
  (assert (=> (not (=> (not (= n 0)) (= n 1))) (= temp11 temp9)))

;; H
  (assert (=> (not (=> (not (= n 0)) (= n 1))) (= oldest12 oldest10)))

;; H
  (assert (=> (not (=> (not (= n 0)) (= n 1))) (= old__12 old__10)))

;; H
  (assert (=> (not (=> (not (= n 0)) (= n 1))) (= result__4 result__2)))

;; H
  (assert
  (= number_theory__fibonacci__result2 (mk_int__ref
                                       number_theory__fibonacci__result1)))

;; H
  (assert
  (= number_theory__fibonacci__result3 number_theory__fibonacci__result1))

;; H
  (assert (= result9 (mk_int__ref number_theory__fibonacci__result)))

;; H
  (assert (= number_theory__fibonacci__result1 (int__content result__3)))

;; H
  (assert
  (= number_theory__fibonacci__result4 number_theory__fibonacci__result2))

;; H
  (assert (= i13 i11))

;; H
  (assert (= temp12 temp10))

;; H
  (assert (= oldest13 oldest11))

;; H
  (assert (= old__13 old__11))

;; H
  (assert (= result__5 result__3))

;; H
  (assert
  (= number_theory__fibonacci__result5 number_theory__fibonacci__result3))

;; H
  (assert (= i14 i12))

;; H
  (assert (= temp13 temp11))

;; H
  (assert (= oldest14 oldest12))

;; H
  (assert (= old__14 old__12))

;; H
  (assert (= result__6 result__4))

;; H
  (assert (= result10 (int__content number_theory__fibonacci__result4)))

(assert
;; WP_parameter_def
 ;; File "system.ads", line 1, characters 0-0
  (not (= (int__content number_theory__fibonacci__result4) (fib n))))
(check-sat)
(exit)
