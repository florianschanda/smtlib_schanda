;; produced by z3_gnatprove.drv ;;
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort positive 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-fun dummy1 () positive)

(declare-datatypes ()
((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(declare-sort character 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-fun dummy2 () character)

(declare-datatypes ()
((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int
  Int) (Array Int character))

;; concat_def
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (character Int) (Array Int character))

;; singleton_def
  (assert
  (forall ((v character))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_78 Int))
                           (=>
                           (and (<= a__first temp___idx_78)
                           (<= temp___idx_78 a__last))
                           (= (to_rep (select a temp___idx_78)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_78)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_78 Int))
  (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last))
  (= (to_rep (select a temp___idx_78)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_78)))))))))))

(declare-fun compare ((Array Int character) Int Int (Array Int character) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun to_rep1 (integer) Int)

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-fun value__size () Int)

(declare-fun object__size ((Array Int character)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int character)) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-fun dummy3 () us_t)

(declare-fun to_string (us_image) us_t)

(declare-fun from_string (us_t) us_image)

(declare-datatypes ()
((string__ref (mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content
                                                            a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-sort natural 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (natural natural) Bool)

(declare-fun dummy4 () natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(declare-fun to_rep2 (natural) Int)

(declare-fun of_rep2 (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range4 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-fun to_rep3 (positive) Int)

(declare-fun of_rep3 (Int) positive)

;; inversion_axiom
  (assert
  (forall ((x positive))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x positive)) (! (in_range2 (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-sort element_type 0)

(define-fun in_range5 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (element_type element_type) Bool)

(declare-fun dummy5 () element_type)

(declare-datatypes ()
((element_type__ref
 (mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref___projection ((a element_type__ref)) element_type
  (element_type__content a))

(define-fun dynamic_invariant1 ((temp___expr_156 Int)
  (temp___is_init_153 Bool) (temp___skip_constant_154 Bool)
  (temp___do_toplevel_155 Bool)) Bool (=>
                                      (or (= temp___is_init_153 true)
                                      (<= (- 2147483648) 2147483647))
                                      (in_range5 temp___expr_156)))

(declare-fun to_rep4 (element_type) Int)

(declare-fun of_rep4 (Int) element_type)

;; inversion_axiom
  (assert
  (forall ((x element_type))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x element_type)) (! (in_range5
  (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(declare-fun max_size () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-datatypes ()
((map__ref1 (mk_map__ref1 (map__content1 (Array Int element_type))))))
(declare-fun slide1 ((Array Int element_type) Int
  Int) (Array Int element_type))

;; slide_eq
  (assert
  (forall ((a (Array Int element_type)))
  (forall ((first2 Int))
  (! (= (slide1 a first2 first2) a) :pattern ((slide1 a first2 first2)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int element_type)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int element_type) Int Int
  (Array Int element_type) Int Int) (Array Int element_type))

;; concat_def
  (assert
  (forall ((a (Array Int element_type)) (b (Array Int element_type)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 (element_type Int) (Array Int element_type))

;; singleton_def
  (assert
  (forall ((v element_type))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq2 ((a (Array Int element_type)) (a__first Int)
  (a__last Int) (b (Array Int element_type)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep4 (select a temp___idx_132)) (to_rep4
                                                                  (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int element_type)) (b (Array Int element_type)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq2 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep4 (select a temp___idx_132)) (to_rep4
                                         (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare1 ((Array Int element_type) Int Int
  (Array Int element_type) Int Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int element_type)) (b (Array Int element_type)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare1 a a_first a_last b b_first b_last) 0)
     (= (bool_eq2 a a_first a_last b b_first b_last) true)) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int element_type)) (b (Array Int element_type)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare1 a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq2 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep4 (select a (+ i 1))) (to_rep4 (select b (+ j 1))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int element_type)) (b (Array Int element_type)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare1 a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq2 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep4 (select b (+ i 1))) (to_rep4 (select a (+ j 1))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq6 (integer integer) Bool)

(declare-fun dummy6 () integer)

(declare-datatypes () ((t14s__ref (mk_t14s__ref (t14s__content integer)))))
(define-fun t14s__ref___projection ((a t14s__ref)) integer (t14s__content a))

(declare-sort t1 0)

(declare-fun first2 (t1) integer)

(declare-fun last2 (t1) integer)

(declare-fun mk1 (Int Int) t1)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first2 (mk1 f l))) f)
     (= (to_rep1 (last2 (mk1 f l))) l)))) :pattern ((mk1 f l)) )))

(define-fun dynamic_property2 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high)
                   (and (dynamic_property1 range_first range_last low)
                   (dynamic_property1 range_first range_last high))))))

(declare-datatypes ()
((us_t1 (mk___t1 (elts1 (Array Int element_type))(rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array Int element_type) (elts1 a))

(define-fun of_array1 ((a (Array Int element_type)) (f Int)
  (l Int)) us_t1 (mk___t1 a (mk1 f l)))

(define-fun first3 ((a us_t1)) Int (to_rep1 (first2 (rt1 a))))

(define-fun last3 ((a us_t1)) Int (to_rep1 (last2 (rt1 a))))

(define-fun length1 ((a us_t1)) Int (ite (<= (first3 a) (last3 a))
                                    (+ (- (last3 a) (first3 a)) 1) 0))

(declare-fun value__size1 () Int)

(declare-fun object__size1 ((Array Int element_type)) Int)

(declare-fun value__component__size1 () Int)

(declare-fun object__component__size1 ((Array Int element_type)) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 ((Array Int element_type)) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a (Array Int element_type))) (<= 0 (object__size1 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int element_type))) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert
  (forall ((a (Array Int element_type))) (<= 0 (object__alignment1 a))))

(define-fun bool_eq3 ((x us_t1)
  (y us_t1)) Bool (bool_eq2 (elts1 x) (to_rep1 (first2 (rt1 x)))
                  (to_rep1 (last2 (rt1 x))) (elts1 y)
                  (to_rep1 (first2 (rt1 y))) (to_rep1 (last2 (rt1 y)))))

(declare-fun user_eq7 (us_t1 us_t1) Bool)

(declare-fun dummy7 () us_t1)

(declare-datatypes () ((t15s__ref (mk_t15s__ref (t15s__content us_t1)))))
(define-fun t15s__ref___projection ((a t15s__ref)) us_t1 (t15s__content a))

(declare-datatypes ()
((us_split_discrs
 (mk___split_discrs (rec__bounded_queue_v2__queue_type__max_size positive)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) positive
  (rec__bounded_queue_v2__queue_type__max_size a))

(declare-datatypes ()
((us_split_discrs__ref
 (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__bounded_queue_v2__queue_type__count natural)(rec__bounded_queue_v2__queue_type__front positive)(rec__bounded_queue_v2__queue_type__rear positive)(rec__bounded_queue_v2__queue_type__items us_t1)))))
(define-fun us_split_fields_Count__projection ((a us_split_fields)) natural
  (rec__bounded_queue_v2__queue_type__count a))

(define-fun us_split_fields_Front__projection ((a us_split_fields)) positive
  (rec__bounded_queue_v2__queue_type__front a))

(define-fun us_split_fields_Rear__projection ((a us_split_fields)) positive
  (rec__bounded_queue_v2__queue_type__rear a))

(define-fun us_split_fields_Items__projection ((a us_split_fields)) us_t1
  (rec__bounded_queue_v2__queue_type__items a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep
 (mk___rep
 (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1
                                                             a))

(define-fun us_rep_2__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                              a))

(define-fun bool_eq4 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (and
                        (and
                        (= (to_rep3
                           (rec__bounded_queue_v2__queue_type__max_size
                           (us_split_discrs1 a))) (to_rep3
                                                  (rec__bounded_queue_v2__queue_type__max_size
                                                  (us_split_discrs1 b))))
                        (= (to_rep2
                           (rec__bounded_queue_v2__queue_type__count
                           (us_split_fields1 a))) (to_rep2
                                                  (rec__bounded_queue_v2__queue_type__count
                                                  (us_split_fields1 b)))))
                        (= (to_rep3
                           (rec__bounded_queue_v2__queue_type__front
                           (us_split_fields1 a))) (to_rep3
                                                  (rec__bounded_queue_v2__queue_type__front
                                                  (us_split_fields1 b)))))
                        (= (to_rep3
                           (rec__bounded_queue_v2__queue_type__rear
                           (us_split_fields1 a))) (to_rep3
                                                  (rec__bounded_queue_v2__queue_type__rear
                                                  (us_split_fields1 b)))))
                        (= (bool_eq3
                           (rec__bounded_queue_v2__queue_type__items
                           (us_split_fields1 a))
                           (rec__bounded_queue_v2__queue_type__items
                           (us_split_fields1 b))) true))
                   true false))

(declare-fun user_eq8 (us_rep us_rep) Bool)

(declare-fun value__size2 () Int)

(declare-fun object__size2 (us_rep) Int)

(declare-fun value__alignment2 () Int)

(declare-fun object__alignment2 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment2 a))))

(declare-fun bounded_queue_v2__queue_type__max_size__first__bit () Int)

(declare-fun bounded_queue_v2__queue_type__max_size__last__bit () Int)

(declare-fun bounded_queue_v2__queue_type__max_size__position () Int)

;; bounded_queue_v2__queue_type__max_size__first__bit_axiom
  (assert (<= 0 bounded_queue_v2__queue_type__max_size__first__bit))

;; bounded_queue_v2__queue_type__max_size__last__bit_axiom
  (assert
  (< bounded_queue_v2__queue_type__max_size__first__bit bounded_queue_v2__queue_type__max_size__last__bit))

;; bounded_queue_v2__queue_type__max_size__position_axiom
  (assert (<= 0 bounded_queue_v2__queue_type__max_size__position))

(declare-fun bounded_queue_v2__queue_type__count__first__bit () Int)

(declare-fun bounded_queue_v2__queue_type__count__last__bit () Int)

(declare-fun bounded_queue_v2__queue_type__count__position () Int)

;; bounded_queue_v2__queue_type__count__first__bit_axiom
  (assert (<= 0 bounded_queue_v2__queue_type__count__first__bit))

;; bounded_queue_v2__queue_type__count__last__bit_axiom
  (assert
  (< bounded_queue_v2__queue_type__count__first__bit bounded_queue_v2__queue_type__count__last__bit))

;; bounded_queue_v2__queue_type__count__position_axiom
  (assert (<= 0 bounded_queue_v2__queue_type__count__position))

(declare-fun bounded_queue_v2__queue_type__front__first__bit () Int)

(declare-fun bounded_queue_v2__queue_type__front__last__bit () Int)

(declare-fun bounded_queue_v2__queue_type__front__position () Int)

;; bounded_queue_v2__queue_type__front__first__bit_axiom
  (assert (<= 0 bounded_queue_v2__queue_type__front__first__bit))

;; bounded_queue_v2__queue_type__front__last__bit_axiom
  (assert
  (< bounded_queue_v2__queue_type__front__first__bit bounded_queue_v2__queue_type__front__last__bit))

;; bounded_queue_v2__queue_type__front__position_axiom
  (assert (<= 0 bounded_queue_v2__queue_type__front__position))

(declare-fun bounded_queue_v2__queue_type__rear__first__bit () Int)

(declare-fun bounded_queue_v2__queue_type__rear__last__bit () Int)

(declare-fun bounded_queue_v2__queue_type__rear__position () Int)

;; bounded_queue_v2__queue_type__rear__first__bit_axiom
  (assert (<= 0 bounded_queue_v2__queue_type__rear__first__bit))

;; bounded_queue_v2__queue_type__rear__last__bit_axiom
  (assert
  (< bounded_queue_v2__queue_type__rear__first__bit bounded_queue_v2__queue_type__rear__last__bit))

;; bounded_queue_v2__queue_type__rear__position_axiom
  (assert (<= 0 bounded_queue_v2__queue_type__rear__position))

(declare-fun bounded_queue_v2__queue_type__items__first__bit () Int)

(declare-fun bounded_queue_v2__queue_type__items__last__bit () Int)

(declare-fun bounded_queue_v2__queue_type__items__position () Int)

;; bounded_queue_v2__queue_type__items__first__bit_axiom
  (assert (<= 0 bounded_queue_v2__queue_type__items__first__bit))

;; bounded_queue_v2__queue_type__items__last__bit_axiom
  (assert
  (< bounded_queue_v2__queue_type__items__first__bit bounded_queue_v2__queue_type__items__last__bit))

;; bounded_queue_v2__queue_type__items__position_axiom
  (assert (<= 0 bounded_queue_v2__queue_type__items__position))

(declare-fun dummy8 () us_rep)

(declare-datatypes ()
((queue_type__ref (mk_queue_type__ref (queue_type__content us_rep)))))
(define-fun queue_type__ref___projection ((a queue_type__ref)) us_rep
  (queue_type__content a))

(define-fun dynamic_invariant2 ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range4
                                     temp___expr_33)))

(define-fun dynamic_invariant3 ((temp___expr_167 us_rep)
  (temp___is_init_164 Bool) (temp___skip_constant_165 Bool)
  (temp___do_toplevel_166 Bool)) Bool (let ((temp___168 (rec__bounded_queue_v2__queue_type__max_size
                                                        (us_split_discrs1
                                                        temp___expr_167))))
                                      (and (dynamic_property2 1
                                      (to_rep3 temp___168)
                                      (first3
                                      (rec__bounded_queue_v2__queue_type__items
                                      (us_split_fields1 temp___expr_167)))
                                      (last3
                                      (rec__bounded_queue_v2__queue_type__items
                                      (us_split_fields1 temp___expr_167))))
                                      (and
                                      (= (first3
                                         (rec__bounded_queue_v2__queue_type__items
                                         (us_split_fields1 temp___expr_167))) 1)
                                      (= (last3
                                         (rec__bounded_queue_v2__queue_type__items
                                         (us_split_fields1 temp___expr_167)))
                                      (to_rep3 temp___168))))))

(declare-fun size (us_rep) Int)

(declare-fun size__function_guard (Int us_rep) Bool)

;; size__post_axiom
  (assert
  (forall ((queue us_rep))
  (! (=> (dynamic_invariant3 queue true true true) (dynamic_invariant2
     (size queue) true false true)) :pattern ((size queue)) )))

(declare-fun empty (us_rep) Bool)

(declare-fun empty__function_guard (Bool us_rep) Bool)

(declare-fun full (us_rep) Bool)

(declare-fun full__function_guard (Bool us_rep) Bool)

(declare-fun last_element (us_rep) Int)

(declare-fun last_element__function_guard (Int us_rep) Bool)

(declare-fun first_element (us_rep) Int)

(declare-fun first_element__function_guard (Int us_rep) Bool)

(declare-sort tT1bP1 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq9 (tT1bP1 tT1bP1) Bool)

(declare-fun dummy9 () tT1bP1)

(declare-datatypes ()
((tT1bP1__ref (mk_tT1bP1__ref (tT1bP1__content tT1bP1)))))
(define-fun tT1bP1__ref___projection ((a tT1bP1__ref)) tT1bP1 (tT1bP1__content
                                                              a))

(declare-fun dummy10 () (Array Int element_type))

(declare-fun value__size3 () Int)

(declare-fun object__size3 ((Array Int element_type)) Int)

(declare-fun value__component__size2 () Int)

(declare-fun object__component__size2 ((Array Int element_type)) Int)

(declare-fun value__alignment3 () Int)

(declare-fun object__alignment3 ((Array Int element_type)) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a (Array Int element_type))) (<= 0 (object__size3 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size2))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int element_type))) (<= 0 (object__component__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert
  (forall ((a (Array Int element_type))) (<= 0 (object__alignment3 a))))

(declare-fun user_eq10 ((Array Int element_type)
  (Array Int element_type)) Bool)

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1
 (rec__bounded_queue_v2__queue_type__count1 natural)(rec__bounded_queue_v2__queue_type__front1 positive)(rec__bounded_queue_v2__queue_type__rear1 positive)(rec__bounded_queue_v2__queue_type__items1 (Array Int element_type))))))
(define-fun us_split_fields_Count2__projection ((a us_split_fields2)) natural
  (rec__bounded_queue_v2__queue_type__count1 a))

(define-fun us_split_fields_Front2__projection ((a us_split_fields2)) positive
  (rec__bounded_queue_v2__queue_type__front1 a))

(define-fun us_split_fields_Rear2__projection ((a us_split_fields2)) positive
  (rec__bounded_queue_v2__queue_type__rear1 a))

(define-fun us_split_fields_Items2__projection ((a us_split_fields2)) (Array Int element_type)
  (rec__bounded_queue_v2__queue_type__items1 a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_3__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1
 (mk___rep1
 (us_split_discrs2 us_split_discrs)(us_split_fields3 us_split_fields2)))))
(define-fun us_rep_5__projection ((a us_rep1)) us_split_discrs (us_split_discrs2
                                                               a))

(define-fun us_rep_6__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                a))

(define-fun to_base ((a us_rep1)) us_rep (mk___rep (us_split_discrs2 a)
                                         (mk___split_fields
                                         (rec__bounded_queue_v2__queue_type__count1
                                         (us_split_fields3 a))
                                         (rec__bounded_queue_v2__queue_type__front1
                                         (us_split_fields3 a))
                                         (rec__bounded_queue_v2__queue_type__rear1
                                         (us_split_fields3 a))
                                         (of_array1
                                         (rec__bounded_queue_v2__queue_type__items1
                                         (us_split_fields3 a)) 1 100))))

(define-fun of_base ((r us_rep)) us_rep1 (mk___rep1 (us_split_discrs1 r)
                                         (mk___split_fields1
                                         (rec__bounded_queue_v2__queue_type__count
                                         (us_split_fields1 r))
                                         (rec__bounded_queue_v2__queue_type__front
                                         (us_split_fields1 r))
                                         (rec__bounded_queue_v2__queue_type__rear
                                         (us_split_fields1 r))
                                         (let ((temp___152 (rec__bounded_queue_v2__queue_type__items
                                                           (us_split_fields1
                                                           r))))
                                         (to_array1 temp___152)))))

(define-fun bool_eq5 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (and
                         (and
                         (and
                         (= (to_rep3
                            (rec__bounded_queue_v2__queue_type__max_size
                            (us_split_discrs2 a))) (to_rep3
                                                   (rec__bounded_queue_v2__queue_type__max_size
                                                   (us_split_discrs2 b))))
                         (= (to_rep2
                            (rec__bounded_queue_v2__queue_type__count1
                            (us_split_fields3 a))) (to_rep2
                                                   (rec__bounded_queue_v2__queue_type__count1
                                                   (us_split_fields3 b)))))
                         (= (to_rep3
                            (rec__bounded_queue_v2__queue_type__front1
                            (us_split_fields3 a))) (to_rep3
                                                   (rec__bounded_queue_v2__queue_type__front1
                                                   (us_split_fields3 b)))))
                         (= (to_rep3
                            (rec__bounded_queue_v2__queue_type__rear1
                            (us_split_fields3 a))) (to_rep3
                                                   (rec__bounded_queue_v2__queue_type__rear1
                                                   (us_split_fields3 b)))))
                         (= (bool_eq2
                            (rec__bounded_queue_v2__queue_type__items1
                            (us_split_fields3 a)) 1 100
                            (rec__bounded_queue_v2__queue_type__items1
                            (us_split_fields3 b)) 1 100) true))
                    true false))

(declare-fun user_eq11 (us_rep1 us_rep1) Bool)

(define-fun in_range7 ((rec__bounded_queue_v2__queue_type__max_size1 Int)
  (a us_rep)) Bool (= rec__bounded_queue_v2__queue_type__max_size1 (to_rep3
                                                                   (rec__bounded_queue_v2__queue_type__max_size
                                                                   (us_split_discrs1
                                                                   a)))))

(declare-fun value__size4 () Int)

(declare-fun object__size4 (us_rep1) Int)

(declare-fun value__alignment4 () Int)

(declare-fun object__alignment4 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size4 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment4 a))))

(declare-fun bounded_queue_v2__queue_type__max_size__first__bit1 () Int)

(declare-fun bounded_queue_v2__queue_type__max_size__last__bit1 () Int)

(declare-fun bounded_queue_v2__queue_type__max_size__position1 () Int)

;; bounded_queue_v2__queue_type__max_size__first__bit_axiom
  (assert (<= 0 bounded_queue_v2__queue_type__max_size__first__bit1))

;; bounded_queue_v2__queue_type__max_size__last__bit_axiom
  (assert
  (< bounded_queue_v2__queue_type__max_size__first__bit1 bounded_queue_v2__queue_type__max_size__last__bit1))

;; bounded_queue_v2__queue_type__max_size__position_axiom
  (assert (<= 0 bounded_queue_v2__queue_type__max_size__position1))

(declare-fun bounded_queue_v2__queue_type__count__first__bit1 () Int)

(declare-fun bounded_queue_v2__queue_type__count__last__bit1 () Int)

(declare-fun bounded_queue_v2__queue_type__count__position1 () Int)

;; bounded_queue_v2__queue_type__count__first__bit_axiom
  (assert (<= 0 bounded_queue_v2__queue_type__count__first__bit1))

;; bounded_queue_v2__queue_type__count__last__bit_axiom
  (assert
  (< bounded_queue_v2__queue_type__count__first__bit1 bounded_queue_v2__queue_type__count__last__bit1))

;; bounded_queue_v2__queue_type__count__position_axiom
  (assert (<= 0 bounded_queue_v2__queue_type__count__position1))

(declare-fun bounded_queue_v2__queue_type__front__first__bit1 () Int)

(declare-fun bounded_queue_v2__queue_type__front__last__bit1 () Int)

(declare-fun bounded_queue_v2__queue_type__front__position1 () Int)

;; bounded_queue_v2__queue_type__front__first__bit_axiom
  (assert (<= 0 bounded_queue_v2__queue_type__front__first__bit1))

;; bounded_queue_v2__queue_type__front__last__bit_axiom
  (assert
  (< bounded_queue_v2__queue_type__front__first__bit1 bounded_queue_v2__queue_type__front__last__bit1))

;; bounded_queue_v2__queue_type__front__position_axiom
  (assert (<= 0 bounded_queue_v2__queue_type__front__position1))

(declare-fun bounded_queue_v2__queue_type__rear__first__bit1 () Int)

(declare-fun bounded_queue_v2__queue_type__rear__last__bit1 () Int)

(declare-fun bounded_queue_v2__queue_type__rear__position1 () Int)

;; bounded_queue_v2__queue_type__rear__first__bit_axiom
  (assert (<= 0 bounded_queue_v2__queue_type__rear__first__bit1))

;; bounded_queue_v2__queue_type__rear__last__bit_axiom
  (assert
  (< bounded_queue_v2__queue_type__rear__first__bit1 bounded_queue_v2__queue_type__rear__last__bit1))

;; bounded_queue_v2__queue_type__rear__position_axiom
  (assert (<= 0 bounded_queue_v2__queue_type__rear__position1))

(declare-fun bounded_queue_v2__queue_type__items__first__bit1 () Int)

(declare-fun bounded_queue_v2__queue_type__items__last__bit1 () Int)

(declare-fun bounded_queue_v2__queue_type__items__position1 () Int)

;; bounded_queue_v2__queue_type__items__first__bit_axiom
  (assert (<= 0 bounded_queue_v2__queue_type__items__first__bit1))

;; bounded_queue_v2__queue_type__items__last__bit_axiom
  (assert
  (< bounded_queue_v2__queue_type__items__first__bit1 bounded_queue_v2__queue_type__items__last__bit1))

;; bounded_queue_v2__queue_type__items__position_axiom
  (assert (<= 0 bounded_queue_v2__queue_type__items__position1))

(declare-fun dummy11 () us_rep1)

(declare-datatypes ()
((tmy_queueS__ref (mk_tmy_queueS__ref (tmy_queueS__content us_rep1)))))
(define-fun tmy_queueS__ref___projection ((a tmy_queueS__ref)) us_rep1
  (tmy_queueS__content a))

(declare-fun my_queue__split_discrs () us_split_discrs)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun temp___String_Literal_586 (tuple0) (Array Int character))

;; temp___String_Literal_586__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_586 us_void_param) 1)) 83)
     (= (to_rep (select (temp___String_Literal_586 us_void_param) 2)) 105))
     (= (to_rep (select (temp___String_Literal_586 us_void_param) 3)) 122))
     (= (to_rep (select (temp___String_Literal_586 us_void_param) 4)) 101))
     (= (to_rep (select (temp___String_Literal_586 us_void_param) 5)) 32))
     (= (to_rep (select (temp___String_Literal_586 us_void_param) 6)) 111))
     (= (to_rep (select (temp___String_Literal_586 us_void_param) 7)) 102))
     (= (to_rep (select (temp___String_Literal_586 us_void_param) 8)) 32))
     (= (to_rep (select (temp___String_Literal_586 us_void_param) 9)) 99))
     (= (to_rep (select (temp___String_Literal_586 us_void_param) 10)) 108))
     (= (to_rep (select (temp___String_Literal_586 us_void_param) 11)) 101))
     (= (to_rep (select (temp___String_Literal_586 us_void_param) 12)) 97))
     (= (to_rep (select (temp___String_Literal_586 us_void_param) 13)) 114))
     (= (to_rep (select (temp___String_Literal_586 us_void_param) 14)) 101))
     (= (to_rep (select (temp___String_Literal_586 us_void_param) 15)) 100))
     (= (to_rep (select (temp___String_Literal_586 us_void_param) 16)) 32))
     (= (to_rep (select (temp___String_Literal_586 us_void_param) 17)) 113))
     (= (to_rep (select (temp___String_Literal_586 us_void_param) 18)) 117))
     (= (to_rep (select (temp___String_Literal_586 us_void_param) 19)) 101))
     (= (to_rep (select (temp___String_Literal_586 us_void_param) 20)) 117))
     (= (to_rep (select (temp___String_Literal_586 us_void_param) 21)) 101))
     (= (to_rep (select (temp___String_Literal_586 us_void_param) 22)) 32))
     (= (to_rep (select (temp___String_Literal_586 us_void_param) 23)) 105))
     (= (to_rep (select (temp___String_Literal_586 us_void_param) 24)) 115))
     (= (to_rep (select (temp___String_Literal_586 us_void_param) 25)) 32)) :pattern (
  (temp___String_Literal_586 us_void_param)) )))

(define-fun dynamic_invariant4 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range2
                                     temp___expr_39)))

(define-fun dynamic_invariant5 ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range3 temp___expr_63)))

(define-fun dynamic_invariant6 ((temp___expr_82 us_t)
  (temp___is_init_79 Bool) (temp___skip_constant_80 Bool)
  (temp___do_toplevel_81 Bool)) Bool (=>
                                     (not (= temp___skip_constant_80 true))
                                     (dynamic_property 1 2147483647
                                     (first1 temp___expr_82)
                                     (last1 temp___expr_82))))

;; full__post_axiom
  (assert true)

;; empty__post_axiom
  (assert true)

;; first_element__post_axiom
  (assert
  (forall ((queue us_rep))
  (! (=>
     (and (dynamic_invariant3 queue true true true)
     (not (= (empty queue) true))) (dynamic_invariant1 (first_element queue)
     true false true)) :pattern ((first_element queue)) )))

;; last_element__post_axiom
  (assert
  (forall ((queue us_rep))
  (! (=>
     (and (dynamic_invariant3 queue true true true)
     (not (= (empty queue) true))) (dynamic_invariant1 (last_element queue)
     true false true)) :pattern ((last_element queue)) )))

(declare-fun my_queue__split_fields () natural)

(declare-fun my_queue__split_fields1 () positive)

(declare-fun my_queue__split_fields2 () positive)

(declare-fun my_queue__split_fields3 () (Array Int element_type))

(declare-fun value () Int)

(declare-fun count () Int)

(declare-fun count1 () Int)

(declare-fun us () Int)

(declare-fun temp___575 () positive)

(declare-fun temp___5751 () natural)

(declare-fun temp___5752 () positive)

(declare-fun temp___5753 () positive)

(declare-fun temp___5754 () (Array Int element_type))

(declare-fun temp___582 () positive)

(declare-fun temp___5821 () natural)

(declare-fun temp___5822 () positive)

(declare-fun temp___5823 () positive)

(declare-fun temp___5824 () (Array Int element_type))

(declare-fun temp___579 () Int)

(declare-fun o () Int)

(declare-fun o1 () Int)

(declare-fun o2 () Int)

(declare-fun o3 () Int)

(declare-fun o4 () Int)

(declare-fun o5 () Int)

(declare-fun o6 () Int)

(declare-fun value1 () Int)

(declare-fun bounded_queue_v2__clear__queue__fields () natural)

(declare-fun bounded_queue_v2__clear__queue__fields1 () positive)

(declare-fun bounded_queue_v2__clear__queue__fields2 () positive)

(declare-fun bounded_queue_v2__clear__queue__fields3 () (Array Int element_type))

(declare-fun bounded_queue_v2__clear__queue__fields4 () t1)

(declare-fun result () natural)

(declare-fun result1 () positive)

(declare-fun result2 () positive)

(declare-fun result3 () (Array Int element_type))

(declare-fun my_queue__split_fields4 () natural)

(declare-fun my_queue__split_fields5 () positive)

(declare-fun my_queue__split_fields6 () positive)

(declare-fun my_queue__split_fields7 () (Array Int element_type))

(declare-fun result4 () Int)

(declare-fun count2 () Int)

(declare-fun my_queue__split_fields8 () natural)

(declare-fun my_queue__split_fields9 () positive)

(declare-fun my_queue__split_fields10 () positive)

(declare-fun my_queue__split_fields11 () (Array Int element_type))

(declare-fun count3 () Int)

(declare-fun bounded_queue_v2__enqueue__queue__fields () natural)

(declare-fun bounded_queue_v2__enqueue__queue__fields1 () positive)

(declare-fun bounded_queue_v2__enqueue__queue__fields2 () positive)

(declare-fun bounded_queue_v2__enqueue__queue__fields3 () (Array Int element_type))

(declare-fun bounded_queue_v2__enqueue__queue__fields4 () t1)

(declare-fun result5 () natural)

(declare-fun result6 () positive)

(declare-fun result7 () positive)

(declare-fun result8 () (Array Int element_type))

(declare-fun my_queue__split_fields12 () us_split_fields2)

(declare-fun my_queue__split_fields13 () us_split_fields__ref1)

(declare-fun count4 () int__ref)

(declare-fun my_queue__split_fields14 () us_split_fields2)

(declare-fun count5 () Int)

(declare-fun my_queue__split_fields15 () us_split_fields__ref1)

(declare-fun count6 () int__ref)

(declare-fun my_queue__split_fields16 () us_split_fields2)

(declare-fun count7 () Int)

(declare-fun result9 () int__ref)

(declare-fun count8 () Int)

(declare-fun my_queue__split_fields17 () us_split_fields2)

(declare-fun value2 () Int)

(declare-fun count9 () Int)

(declare-fun bounded_queue_v2__dequeue__item () Int)

(declare-fun bounded_queue_v2__dequeue__queue__fields () us_split_fields)

(declare-fun result10 () us_split_fields__ref1)

(declare-fun my_queue__split_fields18 () us_split_fields2)

(declare-fun result11 () int__ref)

(declare-fun value3 () Int)

(declare-fun my_queue__split_fields19 () us_split_fields__ref1)

(declare-fun value4 () int__ref)

(declare-fun count10 () int__ref)

(declare-fun my_queue__split_fields20 () us_split_fields2)

(declare-fun value5 () Int)

(declare-fun count11 () Int)

(declare-fun my_queue__split_fields21 () us_split_fields__ref1)

(declare-fun value6 () int__ref)

(declare-fun count12 () int__ref)

(declare-fun my_queue__split_fields22 () us_split_fields2)

(declare-fun value7 () Int)

(declare-fun count13 () Int)

(declare-fun bounded_queue_v2__clear__queue__fields5 () us_split_fields)

(declare-fun result12 () us_split_fields__ref1)

(declare-fun my_queue__split_fields23 () us_split_fields2)

(declare-fun result13 () int__ref)

(declare-fun value8 () Int)

(define-fun bounded_queue_v2__enqueue__queue__fields5 () us_split_fields
  (mk___split_fields bounded_queue_v2__enqueue__queue__fields
  bounded_queue_v2__enqueue__queue__fields1
  bounded_queue_v2__enqueue__queue__fields2
  (mk___t1 bounded_queue_v2__enqueue__queue__fields3
  bounded_queue_v2__enqueue__queue__fields4)))

(define-fun result14 () int__ref (mk_int__ref result4))

(define-fun my_queue__split_fields24 () us_split_fields2 (mk___split_fields1
                                                         my_queue__split_fields4
                                                         my_queue__split_fields5
                                                         my_queue__split_fields6
                                                         my_queue__split_fields7))

(define-fun bounded_queue_v2__clear__queue__fields6 () us_split_fields
  (mk___split_fields bounded_queue_v2__clear__queue__fields
  bounded_queue_v2__clear__queue__fields1
  bounded_queue_v2__clear__queue__fields2
  (mk___t1 bounded_queue_v2__clear__queue__fields3
  bounded_queue_v2__clear__queue__fields4)))

(define-fun count14 () int__ref (mk_int__ref count1))

(define-fun count15 () int__ref (mk_int__ref count))

;; H
  (assert (and (= us 100) (in_range2 100)))

;; H
  (assert
  (and
  (and
  (and
  (= (to_rep3
     (rec__bounded_queue_v2__queue_type__max_size my_queue__split_discrs)) 100)
  (= (to_rep2 my_queue__split_fields) 0))
  (= (to_rep3 my_queue__split_fields1) 1))
  (= (to_rep3 my_queue__split_fields2) max_size)))

;; H
  (assert
  (= 100 (to_rep3
         (rec__bounded_queue_v2__queue_type__max_size my_queue__split_discrs))))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range1 value)))

;; H
  (assert
  (and
  (and
  (= (empty
     (mk___rep my_queue__split_discrs
     bounded_queue_v2__clear__queue__fields6)) true)
  (= (size
     (mk___rep my_queue__split_discrs
     bounded_queue_v2__clear__queue__fields6)) 0))
  (dynamic_invariant3
  (mk___rep my_queue__split_discrs bounded_queue_v2__clear__queue__fields6)
  true true true)))

;; H
  (assert (= result my_queue__split_fields))

;; H
  (assert (= result1 my_queue__split_fields1))

;; H
  (assert (= result2 my_queue__split_fields2))

;; H
  (assert (= result3 my_queue__split_fields3))

;; H
  (assert (= bounded_queue_v2__clear__queue__fields my_queue__split_fields4))

;; H
  (assert
  (= bounded_queue_v2__clear__queue__fields1 my_queue__split_fields5))

;; H
  (assert
  (= bounded_queue_v2__clear__queue__fields2 my_queue__split_fields6))

;; H
  (assert
  (= bounded_queue_v2__clear__queue__fields3 my_queue__split_fields7))

;; H
  (assert (= result14 count15))

;; H
  (assert (= count2 17))

;; H
  (assert
  (=> (and (<= 17 count2) (<= count2 52))
  (and (= (mk___split_discrs temp___575) my_queue__split_discrs)
  (and (= temp___5751 my_queue__split_fields4)
  (and (= temp___5752 my_queue__split_fields5)
  (and (= temp___5753 my_queue__split_fields6)
  (= temp___5754 my_queue__split_fields7)))))))

;; H
  (assert
  (=> (and (<= 17 count2) (<= count2 52))
  (and (<= 17 count3) (<= count3 52))))

;; H
  (assert
  (=> (and (<= 17 count2) (<= count2 52))
  (and
  (and
  (not
  (= (empty
     (mk___rep my_queue__split_discrs
     bounded_queue_v2__enqueue__queue__fields5)) true))
  (and
  (= (size
     (mk___rep my_queue__split_discrs
     bounded_queue_v2__enqueue__queue__fields5)) (+ (size
                                                    (mk___rep
                                                    my_queue__split_discrs
                                                    (mk___split_fields
                                                    my_queue__split_fields8
                                                    my_queue__split_fields9
                                                    my_queue__split_fields10
                                                    (mk___t1
                                                    my_queue__split_fields11
                                                    (mk1 1 100))))) 1))
  (= (last_element
     (mk___rep my_queue__split_discrs
     bounded_queue_v2__enqueue__queue__fields5)) count3)))
  (dynamic_invariant3
  (mk___rep my_queue__split_discrs bounded_queue_v2__enqueue__queue__fields5)
  true true true))))

;; H
  (assert
  (=> (and (<= 17 count2) (<= count2 52))
  (= result5 my_queue__split_fields8)))

;; H
  (assert
  (=> (and (<= 17 count2) (<= count2 52))
  (= result6 my_queue__split_fields9)))

;; H
  (assert
  (=> (and (<= 17 count2) (<= count2 52))
  (= result7 my_queue__split_fields10)))

;; H
  (assert
  (=> (and (<= 17 count2) (<= count2 52))
  (= result8 my_queue__split_fields11)))

;; H
  (assert
  (=> (and (<= 17 count2) (<= count2 52))
  (= my_queue__split_fields12 (mk___split_fields1
                              bounded_queue_v2__enqueue__queue__fields
                              bounded_queue_v2__enqueue__queue__fields1
                              bounded_queue_v2__enqueue__queue__fields2
                              bounded_queue_v2__enqueue__queue__fields3))))

;; H
  (assert (=> (and (<= 17 count2) (<= count2 52)) (= count3 52)))

;; H
  (assert
  (=> (and (<= 17 count2) (<= count2 52)) (= count4 (mk_int__ref count3))))

;; H
  (assert
  (=> (and (<= 17 count2) (<= count2 52))
  (= my_queue__split_fields13 (mk___split_fields__ref1
                              my_queue__split_fields12))))

;; H
  (assert (=> (and (<= 17 count2) (<= count2 52)) (= count5 count3)))

;; H
  (assert
  (=> (and (<= 17 count2) (<= count2 52))
  (= my_queue__split_fields14 my_queue__split_fields12)))

;; H
  (assert (=> (and (<= 17 count2) (<= count2 52)) (= count6 count4)))

;; H
  (assert
  (=> (and (<= 17 count2) (<= count2 52))
  (= my_queue__split_fields15 my_queue__split_fields13)))

;; H
  (assert (=> (and (<= 17 count2) (<= count2 52)) (= count7 count5)))

;; H
  (assert
  (=> (and (<= 17 count2) (<= count2 52))
  (= my_queue__split_fields16 my_queue__split_fields14)))

;; H
  (assert
  (=> (not (and (<= 17 count2) (<= count2 52)))
  (= count6 (mk_int__ref count2))))

;; H
  (assert
  (=> (not (and (<= 17 count2) (<= count2 52)))
  (= my_queue__split_fields15 (mk___split_fields__ref1
                              my_queue__split_fields24))))

;; H
  (assert (=> (not (and (<= 17 count2) (<= count2 52))) (= count7 count2)))

;; H
  (assert
  (=> (not (and (<= 17 count2) (<= count2 52)))
  (= my_queue__split_fields16 my_queue__split_fields24)))

;; H
  (assert (= result9 count14))

;; H
  (assert (= count8 1))

;; H
  (assert
  (=> (and (<= 1 count8) (<= count8 5))
  (and (= (mk___split_discrs temp___582) my_queue__split_discrs)
  (= (mk___split_fields1 temp___5821 temp___5822 temp___5823 temp___5824)
  (us_split_fields__content1 my_queue__split_fields15)))))

;; H
  (assert (=> (and (<= 1 count8) (<= count8 5)) (= temp___579 value)))

;; H
  (assert
  (=> (and (<= 1 count8) (<= count8 5))
  (and (=> (<= (- 2147483648) 2147483647) (in_range1 value2))
  (and (<= 1 count9) (<= count9 5)))))

;; H
  (assert
  (=> (and (<= 1 count8) (<= count8 5))
  (and
  (and
  (= bounded_queue_v2__dequeue__item (first_element
                                     (mk___rep my_queue__split_discrs
                                     (mk___split_fields
                                     (rec__bounded_queue_v2__queue_type__count1
                                     my_queue__split_fields17)
                                     (rec__bounded_queue_v2__queue_type__front1
                                     my_queue__split_fields17)
                                     (rec__bounded_queue_v2__queue_type__rear1
                                     my_queue__split_fields17)
                                     (mk___t1
                                     (rec__bounded_queue_v2__queue_type__items1
                                     my_queue__split_fields17) (mk1 1 100))))))
  (= (size
     (mk___rep my_queue__split_discrs
     bounded_queue_v2__dequeue__queue__fields)) (- (size
                                                   (mk___rep
                                                   my_queue__split_discrs
                                                   (mk___split_fields
                                                   (rec__bounded_queue_v2__queue_type__count1
                                                   my_queue__split_fields17)
                                                   (rec__bounded_queue_v2__queue_type__front1
                                                   my_queue__split_fields17)
                                                   (rec__bounded_queue_v2__queue_type__rear1
                                                   my_queue__split_fields17)
                                                   (mk___t1
                                                   (rec__bounded_queue_v2__queue_type__items1
                                                   my_queue__split_fields17)
                                                   (mk1 1 100))))) 1)))
  (and (dynamic_invariant3
  (mk___rep my_queue__split_discrs bounded_queue_v2__dequeue__queue__fields)
  true true true) (in_range5 bounded_queue_v2__dequeue__item)))))

;; H
  (assert
  (=> (and (<= 1 count8) (<= count8 5))
  (= result10 (mk___split_fields__ref1 my_queue__split_fields17))))

;; H
  (assert
  (=> (and (<= 1 count8) (<= count8 5))
  (= my_queue__split_fields18 (mk___split_fields1
                              (rec__bounded_queue_v2__queue_type__count
                              bounded_queue_v2__dequeue__queue__fields)
                              (rec__bounded_queue_v2__queue_type__front
                              bounded_queue_v2__dequeue__queue__fields)
                              (rec__bounded_queue_v2__queue_type__rear
                              bounded_queue_v2__dequeue__queue__fields)
                              (elts1
                              (rec__bounded_queue_v2__queue_type__items
                              bounded_queue_v2__dequeue__queue__fields))))))

;; H
  (assert
  (=> (and (<= 1 count8) (<= count8 5)) (= result11 (mk_int__ref value2))))

;; H
  (assert
  (=> (and (<= 1 count8) (<= count8 5))
  (= value3 bounded_queue_v2__dequeue__item)))

;; H
  (assert (=> (and (<= 1 count8) (<= count8 5)) (= count9 5)))

;; H
  (assert
  (=> (and (<= 1 count8) (<= count8 5)) (= count10 (mk_int__ref count9))))

;; H
  (assert
  (=> (and (<= 1 count8) (<= count8 5)) (= value4 (mk_int__ref value3))))

;; H
  (assert
  (=> (and (<= 1 count8) (<= count8 5))
  (= my_queue__split_fields19 (mk___split_fields__ref1
                              my_queue__split_fields18))))

;; H
  (assert (=> (and (<= 1 count8) (<= count8 5)) (= count11 count9)))

;; H
  (assert (=> (and (<= 1 count8) (<= count8 5)) (= value5 value3)))

;; H
  (assert
  (=> (and (<= 1 count8) (<= count8 5))
  (= my_queue__split_fields20 my_queue__split_fields18)))

;; H
  (assert (=> (and (<= 1 count8) (<= count8 5)) (= count12 count10)))

;; H
  (assert (=> (and (<= 1 count8) (<= count8 5)) (= value6 value4)))

;; H
  (assert
  (=> (and (<= 1 count8) (<= count8 5))
  (= my_queue__split_fields21 my_queue__split_fields19)))

;; H
  (assert (=> (and (<= 1 count8) (<= count8 5)) (= count13 count11)))

;; H
  (assert (=> (and (<= 1 count8) (<= count8 5)) (= value7 value5)))

;; H
  (assert
  (=> (and (<= 1 count8) (<= count8 5))
  (= my_queue__split_fields22 my_queue__split_fields20)))

;; H
  (assert
  (=> (not (and (<= 1 count8) (<= count8 5)))
  (= count12 (mk_int__ref count8))))

;; H
  (assert
  (=> (not (and (<= 1 count8) (<= count8 5))) (= value6 (mk_int__ref value))))

;; H
  (assert
  (=> (not (and (<= 1 count8) (<= count8 5)))
  (= my_queue__split_fields21 my_queue__split_fields15)))

;; H
  (assert (=> (not (and (<= 1 count8) (<= count8 5))) (= count13 count8)))

;; H
  (assert (=> (not (and (<= 1 count8) (<= count8 5))) (= value7 value1)))

;; H
  (assert
  (=> (not (and (<= 1 count8) (<= count8 5)))
  (= my_queue__split_fields22 my_queue__split_fields16)))

;; H
  (assert
  (and
  (and
  (= (empty
     (mk___rep my_queue__split_discrs
     bounded_queue_v2__clear__queue__fields5)) true)
  (= (size
     (mk___rep my_queue__split_discrs
     bounded_queue_v2__clear__queue__fields5)) 0))
  (dynamic_invariant3
  (mk___rep my_queue__split_discrs bounded_queue_v2__clear__queue__fields5)
  true true true)))

;; H
  (assert (= result12 my_queue__split_fields21))

;; H
  (assert
  (= my_queue__split_fields23 (mk___split_fields1
                              (rec__bounded_queue_v2__queue_type__count
                              bounded_queue_v2__clear__queue__fields5)
                              (rec__bounded_queue_v2__queue_type__front
                              bounded_queue_v2__clear__queue__fields5)
                              (rec__bounded_queue_v2__queue_type__rear
                              bounded_queue_v2__clear__queue__fields5)
                              (elts1
                              (rec__bounded_queue_v2__queue_type__items
                              bounded_queue_v2__clear__queue__fields5)))))

;; H
  (assert
  (and
  (= o (size
       (mk___rep my_queue__split_discrs
       (mk___split_fields
       (rec__bounded_queue_v2__queue_type__count1 my_queue__split_fields23)
       (rec__bounded_queue_v2__queue_type__front1 my_queue__split_fields23)
       (rec__bounded_queue_v2__queue_type__rear1 my_queue__split_fields23)
       (mk___t1
       (rec__bounded_queue_v2__queue_type__items1 my_queue__split_fields23)
       (mk1 1 100))))))
  (in_range4 o)))

;; H
  (assert (= result13 value6))

;; H
  (assert (= value8 o))

;; H
  (assert
  (=>
  (<= (to_rep1 (first (rt (to_string (attr__ATTRIBUTE_IMAGE1 value8)))))
  (to_rep1 (last (rt (to_string (attr__ATTRIBUTE_IMAGE1 value8))))))
  (= o1 (+ (- (to_rep1
              (last (rt (to_string (attr__ATTRIBUTE_IMAGE1 value8)))))
  (to_rep1 (first (rt (to_string (attr__ATTRIBUTE_IMAGE1 value8)))))) 1))))

;; H
  (assert
  (=>
  (not
  (<= (to_rep1 (first (rt (to_string (attr__ATTRIBUTE_IMAGE1 value8)))))
  (to_rep1 (last (rt (to_string (attr__ATTRIBUTE_IMAGE1 value8)))))))
  (= o1 0)))

;; H
  (assert (=> (<= 1 25) (= o2 (+ (- 25 1) 1))))

;; H
  (assert (=> (not (<= 1 25)) (= o2 0)))

;; H
  (assert (= o3 (+ o2 o1)))

;; H
  (assert (= o4 (+ 1 o3)))

;; H
  (assert (= o5 (- o4 1)))

(assert
;; WP_parameter_def
 ;; File "bounded_queue_example_v2.adb", line 3, characters 0-0
  (not (in_range2 o5)))
(check-sat)
(exit)
