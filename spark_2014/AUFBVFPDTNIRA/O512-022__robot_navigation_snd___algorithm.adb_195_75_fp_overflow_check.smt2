;; produced by cvc4_14.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun pow2 (Int) Int)

(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-fun of_int (RoundingMode Int) Float32)

(declare-fun to_int1 (RoundingMode Float32) Int)

(declare-fun round (RoundingMode Real) Real)

(declare-fun max_int () Int)

(define-fun in_range ((x Real)) Bool (and
                                     (<= (- (* 33554430.0 10141204801825835211973625643008.0)) x)
                                     (<= x (* 33554430.0 10141204801825835211973625643008.0))))

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun no_overflow ((m RoundingMode) (x Real)) Bool (in_range
  (round m x)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(declare-fun sqrt (Real) Real)

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(declare-fun is_int1 (Float32) Bool)

(declare-datatypes () ((t__ref (mk_t__ref (t__content Float32)))))
(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int1 ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range1 ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort float 0)

(declare-fun user_eq (float float) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE1 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Float32)

(declare-fun dummy () float)

(declare-datatypes () ((float__ref (mk_float__ref (float__content float)))))
(define-fun float__ref___projection ((a float__ref)) float (float__content a))

(define-fun dynamic_invariant ((temp___expr_51 Float32)
  (temp___is_init_48 Bool) (temp___skip_constant_49 Bool)
  (temp___do_toplevel_50 Bool)) Bool (=>
                                     (or (= temp___is_init_48 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                     (not (or (fp.isInfinite temp___expr_51) (fp.isNaN temp___expr_51)))))

(declare-sort positive_float 0)

(define-fun in_range2 ((x Float32)) Bool (and
                                         (not (or (fp.isInfinite x) (fp.isNaN x)))
                                         (and
                                         (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x)
                                         (fp.leq x (fp #b0 #b11111110 #b11111111111111111111111)))))

(declare-fun user_eq1 (positive_float positive_float) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE2 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Float32)

(declare-fun dummy1 () positive_float)

(declare-datatypes ()
((positive_float__ref
 (mk_positive_float__ref (positive_float__content positive_float)))))
(define-fun positive_float__ref___projection ((a positive_float__ref)) positive_float
  (positive_float__content a))

(define-fun dynamic_invariant1 ((temp___expr_140 Float32)
  (temp___is_init_137 Bool) (temp___skip_constant_138 Bool)
  (temp___do_toplevel_139 Bool)) Bool (=>
                                      (or (= temp___is_init_137 true)
                                      (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b11111110 #b11111111111111111111111)))
                                      (in_range2 temp___expr_140)))

(declare-sort nonnegative_float 0)

(define-fun in_range3 ((x Float32)) Bool (and
                                         (not (or (fp.isInfinite x) (fp.isNaN x)))
                                         (and
                                         (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x)
                                         (fp.leq x (fp #b0 #b11111110 #b11111111111111111111111)))))

(declare-fun user_eq2 (nonnegative_float nonnegative_float) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE3 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Float32)

(declare-fun dummy2 () nonnegative_float)

(declare-datatypes ()
((nonnegative_float__ref
 (mk_nonnegative_float__ref (nonnegative_float__content nonnegative_float)))))
(define-fun nonnegative_float__ref___projection ((a nonnegative_float__ref)) nonnegative_float
  (nonnegative_float__content a))

(declare-fun to_rep (nonnegative_float) Float32)

(declare-fun of_rep (Float32) nonnegative_float)

;; inversion_axiom
  (assert
  (forall ((x nonnegative_float))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x nonnegative_float)) (! (in_range3
  (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Float32))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-fun cos1 (Float32) Float32)

(declare-fun cos__function_guard (Float32 Float32) Bool)

;; cos__post_axiom
  (assert
  (forall ((x Float32))
  (! (=> (dynamic_invariant x true true true)
     (let ((result (cos1 x)))
     (and
     (and
     (and
     (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) result)
     (fp.leq result (fp #b0 #b01111111 #b00000000000000000000000)))
     (=> (fp.eq x (fp #b0 #b00000000 #b00000000000000000000000))
     (fp.eq result (fp #b0 #b01111111 #b00000000000000000000000))))
     (dynamic_invariant result true false true)))) :pattern ((cos1 x)) )))

(declare-sort normalized2pi 0)

(define-fun in_range4 ((x Float32)) Bool (and
                                         (not (or (fp.isInfinite x) (fp.isNaN x)))
                                         (and
                                         (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x)
                                         (fp.leq x (fp #b0 #b10000001 #b10010010000111111011011)))))

(declare-fun user_eq3 (normalized2pi normalized2pi) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE4 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Float32)

(declare-fun dummy3 () normalized2pi)

(declare-datatypes ()
((normalized2pi__ref
 (mk_normalized2pi__ref (normalized2pi__content normalized2pi)))))
(define-fun normalized2pi__ref___projection ((a normalized2pi__ref)) normalized2pi
  (normalized2pi__content a))

(declare-fun to_rep1 (normalized2pi) Float32)

(declare-fun of_rep1 (Float32) normalized2pi)

;; inversion_axiom
  (assert
  (forall ((x normalized2pi))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x normalized2pi)) (! (in_range4
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Float32))
  (! (=> (in_range4 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields (rec__spaces__angles__angle__theta normalized2pi)))))
(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (= (to_rep1
                           (rec__spaces__angles__angle__theta
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__spaces__angles__angle__theta
                                                  (us_split_fields1 b))))
                   true false))

(declare-fun user_eq4 (us_rep us_rep) Bool)

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun spaces__angles__angle__theta__first__bit () Int)

(declare-fun spaces__angles__angle__theta__last__bit () Int)

(declare-fun spaces__angles__angle__theta__position () Int)

;; spaces__angles__angle__theta__first__bit_axiom
  (assert (<= 0 spaces__angles__angle__theta__first__bit))

;; spaces__angles__angle__theta__last__bit_axiom
  (assert
  (< spaces__angles__angle__theta__first__bit spaces__angles__angle__theta__last__bit))

;; spaces__angles__angle__theta__position_axiom
  (assert (<= 0 spaces__angles__angle__theta__position))

(declare-fun dummy4 () us_rep)

(declare-datatypes () ((angle__ref (mk_angle__ref (angle__content us_rep)))))
(define-fun angle__ref___projection ((a angle__ref)) us_rep (angle__content
                                                            a))

(declare-fun ccwdiff (us_rep us_rep) Float32)

(declare-fun ccwdiff__function_guard (Float32 us_rep us_rep) Bool)

(declare-fun to_rep2 (float) Float32)

(declare-fun of_rep2 (Float32) float)

;; inversion_axiom
  (assert
  (forall ((x float))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x float))
  (! (not (or (fp.isInfinite (to_rep2 x)) (fp.isNaN (to_rep2 x)))) :pattern (
  (to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Float32))
  (! (=> (not (or (fp.isInfinite x) (fp.isNaN x)))
     (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))) )))

(declare-sort idir_t 0)

(define-fun in_range5 ((x Int)) Bool (and (<= (- 1) x) (<= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (idir_t idir_t) Bool)

(declare-fun dummy5 () idir_t)

(declare-datatypes ()
((idir_t__ref (mk_idir_t__ref (idir_t__content idir_t)))))
(define-fun idir_t__ref___projection ((a idir_t__ref)) idir_t (idir_t__content
                                                              a))

(declare-fun to_rep3 (idir_t) Int)

(declare-fun of_rep3 (Int) idir_t)

;; inversion_axiom
  (assert
  (forall ((x idir_t))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x idir_t)) (! (in_range5 (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1
 (rec__gaps__gap__bearing us_rep)(rec__gaps__gap__distance float)(rec__gaps__gap__idir idir_t)))))
(define-fun us_split_fields_bearing__projection ((a us_split_fields2)) us_rep
  (rec__gaps__gap__bearing a))

(define-fun us_split_fields_iDir__projection ((a us_split_fields2)) idir_t
  (rec__gaps__gap__idir a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_6__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep_8__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                a))

(define-fun bool_eq1 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (and
                         (= (bool_eq
                            (rec__gaps__gap__bearing (us_split_fields3 a))
                            (rec__gaps__gap__bearing (us_split_fields3 b))) true)
                         (= (to_rep2
                            (rec__gaps__gap__distance (us_split_fields3 a)))
                         (to_rep2
                         (rec__gaps__gap__distance (us_split_fields3 b)))))
                         (= (to_rep3
                            (rec__gaps__gap__idir (us_split_fields3 a)))
                         (to_rep3
                         (rec__gaps__gap__idir (us_split_fields3 b)))))
                    true false))

(declare-fun user_eq6 (us_rep1 us_rep1) Bool)

(declare-fun value__size1 () Int)

(declare-fun object__size1 (us_rep1) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))

(declare-fun gaps__gap__bearing__first__bit () Int)

(declare-fun gaps__gap__bearing__last__bit () Int)

(declare-fun gaps__gap__bearing__position () Int)

;; gaps__gap__bearing__first__bit_axiom
  (assert (<= 0 gaps__gap__bearing__first__bit))

;; gaps__gap__bearing__last__bit_axiom
  (assert (< gaps__gap__bearing__first__bit gaps__gap__bearing__last__bit))

;; gaps__gap__bearing__position_axiom
  (assert (<= 0 gaps__gap__bearing__position))

(declare-fun gaps__gap__distance__first__bit () Int)

(declare-fun gaps__gap__distance__last__bit () Int)

(declare-fun gaps__gap__distance__position () Int)

;; gaps__gap__distance__first__bit_axiom
  (assert (<= 0 gaps__gap__distance__first__bit))

;; gaps__gap__distance__last__bit_axiom
  (assert (< gaps__gap__distance__first__bit gaps__gap__distance__last__bit))

;; gaps__gap__distance__position_axiom
  (assert (<= 0 gaps__gap__distance__position))

(declare-fun gaps__gap__idir__first__bit () Int)

(declare-fun gaps__gap__idir__last__bit () Int)

(declare-fun gaps__gap__idir__position () Int)

;; gaps__gap__idir__first__bit_axiom
  (assert (<= 0 gaps__gap__idir__first__bit))

;; gaps__gap__idir__last__bit_axiom
  (assert (< gaps__gap__idir__first__bit gaps__gap__idir__last__bit))

;; gaps__gap__idir__position_axiom
  (assert (<= 0 gaps__gap__idir__position))

(declare-fun dummy6 () us_rep1)

(declare-datatypes () ((gap__ref (mk_gap__ref (gap__content us_rep1)))))
(define-fun gap__ref___projection ((a gap__ref)) us_rep1 (gap__content a))

(declare-fun create__2 (us_rep Float32 Int) us_rep1)

(declare-fun create__2__function_guard (us_rep1 us_rep Float32 Int) Bool)

(declare-sort count_type 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq7 (count_type count_type) Bool)

(declare-fun dummy7 () count_type)

(declare-datatypes ()
((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type
  (count_type__content a))

(declare-fun to_rep4 (count_type) Int)

(declare-fun of_rep4 (Int) count_type)

;; inversion_axiom
  (assert
  (forall ((x count_type))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x count_type)) (! (in_range6
  (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range6 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-datatypes ()
((us_split_discrs
 (mk___split_discrs (rec__algorithm__gap_vectors__list__capacity count_type)))))
(define-fun us_split_discrs_3__projection ((a us_split_discrs)) count_type
  (rec__algorithm__gap_vectors__list__capacity a))

(declare-datatypes ()
((us_split_discrs__ref
 (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref_3__projection ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ()
((us_split_fields4
 (mk___split_fields2 (rec__algorithm__gap_vectors__list us_main_type)))))
(define-fun us_split_fields_List__projection ((a us_split_fields4)) us_main_type
  (rec__algorithm__gap_vectors__list a))

(declare-datatypes ()
((us_split_fields__ref2
 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref_9__projection ((a us_split_fields__ref2)) us_split_fields4
  (us_split_fields__content2 a))

(declare-datatypes ()
((us_rep2
 (mk___rep2
 (us_split_discrs1 us_split_discrs)(us_split_fields5 us_split_fields4)))))
(define-fun us_rep_13__projection ((a us_rep2)) us_split_discrs (us_split_discrs1
                                                                a))

(define-fun us_rep_14__projection ((a us_rep2)) us_split_fields4 (us_split_fields5
                                                                 a))

(define-fun bool_eq2 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (= (to_rep4
                            (rec__algorithm__gap_vectors__list__capacity
                            (us_split_discrs1 a))) (to_rep4
                                                   (rec__algorithm__gap_vectors__list__capacity
                                                   (us_split_discrs1 b))))
                         (= (us_main_eq
                            (rec__algorithm__gap_vectors__list
                            (us_split_fields5 a))
                            (rec__algorithm__gap_vectors__list
                            (us_split_fields5 b))) true))
                    true false))

(declare-fun user_eq8 (us_rep2 us_rep2) Bool)

(declare-fun value__size2 () Int)

(declare-fun object__size2 (us_rep2) Int)

(declare-fun value__alignment2 () Int)

(declare-fun object__alignment2 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))

(declare-fun algorithm__gap_vectors__list__capacity__first__bit () Int)

(declare-fun algorithm__gap_vectors__list__capacity__last__bit () Int)

(declare-fun algorithm__gap_vectors__list__capacity__position () Int)

;; algorithm__gap_vectors__list__capacity__first__bit_axiom
  (assert (<= 0 algorithm__gap_vectors__list__capacity__first__bit))

;; algorithm__gap_vectors__list__capacity__last__bit_axiom
  (assert
  (< algorithm__gap_vectors__list__capacity__first__bit algorithm__gap_vectors__list__capacity__last__bit))

;; algorithm__gap_vectors__list__capacity__position_axiom
  (assert (<= 0 algorithm__gap_vectors__list__capacity__position))

(declare-fun dummy8 () us_rep2)

(declare-datatypes () ((list__ref (mk_list__ref (list__content us_rep2)))))
(define-fun list__ref___projection ((a list__ref)) us_rep2 (list__content a))

(declare-fun length (us_rep2) Int)

(declare-fun length__function_guard (Int us_rep2) Bool)

(define-fun dynamic_invariant2 ((temp___expr_324 Int)
  (temp___is_init_321 Bool) (temp___skip_constant_322 Bool)
  (temp___do_toplevel_323 Bool)) Bool (=>
                                      (or (= temp___is_init_321 true)
                                      (<= 0 2147483647)) (in_range6
                                      temp___expr_324)))

;; length__post_axiom
  (assert
  (forall ((container us_rep2))
  (! (let ((result (length container)))
     (and
     (<= result (to_rep4
                (rec__algorithm__gap_vectors__list__capacity
                (us_split_discrs1 container))))
     (dynamic_invariant2 result true false true))) :pattern ((length
                                                             container)) )))

(declare-datatypes ()
((element_type__ref (mk_element_type__ref (element_type__content us_rep1)))))
(define-fun element_type__ref___projection ((a element_type__ref)) us_rep1
  (element_type__content a))

(declare-datatypes ()
((us_split_fields6
 (mk___split_fields3 (rec__algorithm__gap_vectors__cursor__node count_type)))))
(define-fun us_split_fields_Node__projection ((a us_split_fields6)) count_type
  (rec__algorithm__gap_vectors__cursor__node a))

(declare-datatypes ()
((us_split_fields__ref3
 (mk___split_fields__ref3 (us_split_fields__content3 us_split_fields6)))))
(define-fun us_split_fields__ref_10__projection ((a us_split_fields__ref3)) us_split_fields6
  (us_split_fields__content3 a))

(declare-datatypes ()
((us_rep3 (mk___rep3 (us_split_fields7 us_split_fields6)))))
(define-fun us_rep_15__projection ((a us_rep3)) us_split_fields6 (us_split_fields7
                                                                 a))

(define-fun bool_eq3 ((a us_rep3)
  (b us_rep3)) Bool (ite (= (to_rep4
                            (rec__algorithm__gap_vectors__cursor__node
                            (us_split_fields7 a))) (to_rep4
                                                   (rec__algorithm__gap_vectors__cursor__node
                                                   (us_split_fields7 b))))
                    true false))

(declare-fun user_eq9 (us_rep3 us_rep3) Bool)

(declare-fun value__size3 () Int)

(declare-fun object__size3 (us_rep3) Int)

(declare-fun value__alignment3 () Int)

(declare-fun object__alignment3 (us_rep3) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__alignment3 a))))

(declare-fun algorithm__gap_vectors__cursor__node__first__bit () Int)

(declare-fun algorithm__gap_vectors__cursor__node__last__bit () Int)

(declare-fun algorithm__gap_vectors__cursor__node__position () Int)

;; algorithm__gap_vectors__cursor__node__first__bit_axiom
  (assert (<= 0 algorithm__gap_vectors__cursor__node__first__bit))

;; algorithm__gap_vectors__cursor__node__last__bit_axiom
  (assert
  (< algorithm__gap_vectors__cursor__node__first__bit algorithm__gap_vectors__cursor__node__last__bit))

;; algorithm__gap_vectors__cursor__node__position_axiom
  (assert (<= 0 algorithm__gap_vectors__cursor__node__position))

(declare-fun dummy9 () us_rep3)

(declare-datatypes ()
((cursor__ref (mk_cursor__ref (cursor__content us_rep3)))))
(define-fun cursor__ref___projection ((a cursor__ref)) us_rep3 (cursor__content
                                                               a))

(declare-datatypes ()
((element_type__ref1
 (mk_element_type__ref1 (element_type__content1 us_rep1)))))
(define-fun element_type__ref_2__projection ((a element_type__ref1)) us_rep1
  (element_type__content1 a))

(declare-sort us_main_type1 0)

(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)

(declare-sort us_rep4 0)

(declare-fun bool_eq4 (us_rep4 us_rep4) Bool)

(declare-fun user_eq10 (us_rep4 us_rep4) Bool)

(declare-fun value__size4 () Int)

(declare-fun object__size4 (us_rep4) Int)

(declare-fun value__alignment4 () Int)

(declare-fun object__alignment4 (us_rep4) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a us_rep4)) (<= 0 (object__size4 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a us_rep4)) (<= 0 (object__alignment4 a))))

(declare-fun dummy10 () us_rep4)

(declare-datatypes ()
((sequence__ref (mk_sequence__ref (sequence__content us_rep4)))))
(define-fun sequence__ref___projection ((a sequence__ref)) us_rep4 (sequence__content
                                                                   a))

(declare-fun get (us_rep4 Int) us_rep1)

(declare-fun get__function_guard (us_rep1 us_rep4 Int) Bool)

(declare-fun length1 (us_rep4) Int)

(declare-fun length__function_guard1 (Int us_rep4) Bool)

(define-fun last ((container us_rep4)) Int (+ 0 (length1 container)))

(declare-fun last__function_guard (Int us_rep4) Bool)

(define-fun ole ((left us_rep4)
  (right us_rep4)) Bool (and (<= (length1 left) (length1 right)) (ite
                                                                 (forall
                                                                 ((n Int))
                                                                 (=>
                                                                 (and
                                                                 (<= 1 n)
                                                                 (<= n
                                                                 (last left)))
                                                                 (= (bool_eq1
                                                                    (get left
                                                                    n)
                                                                    (get
                                                                    right n)) true)))
                                                                 true false)))

(declare-fun ole__function_guard (Bool us_rep4 us_rep4) Bool)

(declare-sort us_main_type2 0)

(declare-fun us_main_eq2 (us_main_type2 us_main_type2) Bool)

(declare-sort us_rep5 0)

(declare-fun bool_eq5 (us_rep5 us_rep5) Bool)

(declare-fun user_eq11 (us_rep5 us_rep5) Bool)

(declare-fun value__size5 () Int)

(declare-fun object__size5 (us_rep5) Int)

(declare-fun value__alignment5 () Int)

(declare-fun object__alignment5 (us_rep5) Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (forall ((a us_rep5)) (<= 0 (object__size5 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment5))

;; object__alignment_axiom
  (assert (forall ((a us_rep5)) (<= 0 (object__alignment5 a))))

(declare-fun dummy11 () us_rep5)

(declare-datatypes () ((map__ref (mk_map__ref (map__content us_rep5)))))
(define-fun map__ref___projection ((a map__ref)) us_rep5 (map__content a))

(declare-datatypes ()
((key_type__ref (mk_key_type__ref (key_type__content us_rep3)))))
(define-fun key_type__ref___projection ((a key_type__ref)) us_rep3 (key_type__content
                                                                   a))

(declare-fun get1 (us_rep5 us_rep3) Int)

(declare-fun get__function_guard1 (Int us_rep5 us_rep3) Bool)

(declare-fun ole1 (us_rep5 us_rep5) Bool)

(declare-fun ole__function_guard1 (Bool us_rep5 us_rep5) Bool)

(declare-fun keys_included_except (us_rep5 us_rep5 us_rep3) Bool)

(declare-fun keys_included_except__function_guard (Bool us_rep5 us_rep5
  us_rep3) Bool)

(declare-fun model__ (us_rep2) us_rep4)

(declare-fun model____function_guard (us_rep4 us_rep2) Bool)

(declare-fun positions (us_rep2) us_rep5)

(declare-fun positions__function_guard (us_rep5 us_rep2) Bool)

(declare-fun last1 (us_rep2) us_rep3)

(declare-fun last__function_guard1 (us_rep3 us_rep2) Bool)

(define-fun in_range7 ((rec__algorithm__gap_vectors__list__capacity1 Int)
  (a us_rep2)) Bool (= rec__algorithm__gap_vectors__list__capacity1 (to_rep4
                                                                    (rec__algorithm__gap_vectors__list__capacity
                                                                    (us_split_discrs1
                                                                    a)))))

(declare-fun value__size6 () Int)

(declare-fun object__size6 (us_rep2) Int)

(declare-fun value__alignment6 () Int)

(declare-fun object__alignment6 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size6 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment6))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment6 a))))

(declare-fun algorithm__gap_vectors__list__capacity__first__bit1 () Int)

(declare-fun algorithm__gap_vectors__list__capacity__last__bit1 () Int)

(declare-fun algorithm__gap_vectors__list__capacity__position1 () Int)

;; algorithm__gap_vectors__list__capacity__first__bit_axiom
  (assert (<= 0 algorithm__gap_vectors__list__capacity__first__bit1))

;; algorithm__gap_vectors__list__capacity__last__bit_axiom
  (assert
  (< algorithm__gap_vectors__list__capacity__first__bit1 algorithm__gap_vectors__list__capacity__last__bit1))

;; algorithm__gap_vectors__list__capacity__position_axiom
  (assert (<= 0 algorithm__gap_vectors__list__capacity__position1))

(declare-fun dummy12 () us_rep2)

(declare-datatypes ()
((list__ref1 (mk_list__ref1 (list__content1 us_rep2)))))
(define-fun list__ref_2__projection ((a list__ref1)) us_rep2 (list__content1
                                                             a))

(declare-fun is_empty (us_rep2) Bool)

(declare-fun is_empty__function_guard (Bool us_rep2) Bool)

(define-fun dynamic_invariant3 ((temp___expr_577 us_rep2)
  (temp___is_init_574 Bool) (temp___skip_constant_575 Bool)
  (temp___do_toplevel_576 Bool)) Bool (=>
                                      (not (= temp___skip_constant_575 true))
                                      (in_range7 1000 temp___expr_577)))

(define-fun default_initial_assumption ((temp___expr_579 us_rep2)
  (temp___skip_top_level_580 Bool)) Bool (and
                                         (= (to_rep4
                                            (rec__algorithm__gap_vectors__list__capacity
                                            (us_split_discrs1
                                            temp___expr_579))) 1000)
                                         (=>
                                         (not
                                         (= temp___skip_top_level_580 true))
                                         (= (is_empty temp___expr_579) true))))

(declare-datatypes ()
((us_split_fields8
 (mk___split_fields4
 (rec__algorithm__laser_scan_data__first nonnegative_float)(rec__algorithm__laser_scan_data__second us_rep)))))
(define-fun us_split_fields_second__projection ((a us_split_fields8)) us_rep
  (rec__algorithm__laser_scan_data__second a))

(declare-datatypes ()
((us_split_fields__ref4
 (mk___split_fields__ref4 (us_split_fields__content4 us_split_fields8)))))
(define-fun us_split_fields__ref_11__projection ((a us_split_fields__ref4)) us_split_fields8
  (us_split_fields__content4 a))

(declare-datatypes ()
((us_rep6 (mk___rep4 (us_split_fields9 us_split_fields8)))))
(define-fun us_rep_16__projection ((a us_rep6)) us_split_fields8 (us_split_fields9
                                                                 a))

(define-fun bool_eq6 ((a us_rep6)
  (b us_rep6)) Bool (ite (and
                         (= (to_rep
                            (rec__algorithm__laser_scan_data__first
                            (us_split_fields9 a))) (to_rep
                                                   (rec__algorithm__laser_scan_data__first
                                                   (us_split_fields9 b))))
                         (= (bool_eq
                            (rec__algorithm__laser_scan_data__second
                            (us_split_fields9 a))
                            (rec__algorithm__laser_scan_data__second
                            (us_split_fields9 b))) true))
                    true false))

(declare-fun user_eq12 (us_rep6 us_rep6) Bool)

(declare-fun value__size7 () Int)

(declare-fun object__size7 (us_rep6) Int)

(declare-fun value__alignment7 () Int)

(declare-fun object__alignment7 (us_rep6) Int)

;; value__size_axiom
  (assert (<= 0 value__size7))

;; object__size_axiom
  (assert (forall ((a us_rep6)) (<= 0 (object__size7 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment7))

;; object__alignment_axiom
  (assert (forall ((a us_rep6)) (<= 0 (object__alignment7 a))))

(declare-fun algorithm__laser_scan_data__first__first__bit () Int)

(declare-fun algorithm__laser_scan_data__first__last__bit () Int)

(declare-fun algorithm__laser_scan_data__first__position () Int)

;; algorithm__laser_scan_data__first__first__bit_axiom
  (assert (<= 0 algorithm__laser_scan_data__first__first__bit))

;; algorithm__laser_scan_data__first__last__bit_axiom
  (assert
  (< algorithm__laser_scan_data__first__first__bit algorithm__laser_scan_data__first__last__bit))

;; algorithm__laser_scan_data__first__position_axiom
  (assert (<= 0 algorithm__laser_scan_data__first__position))

(declare-fun algorithm__laser_scan_data__second__first__bit () Int)

(declare-fun algorithm__laser_scan_data__second__last__bit () Int)

(declare-fun algorithm__laser_scan_data__second__position () Int)

;; algorithm__laser_scan_data__second__first__bit_axiom
  (assert (<= 0 algorithm__laser_scan_data__second__first__bit))

;; algorithm__laser_scan_data__second__last__bit_axiom
  (assert
  (< algorithm__laser_scan_data__second__first__bit algorithm__laser_scan_data__second__last__bit))

;; algorithm__laser_scan_data__second__position_axiom
  (assert (<= 0 algorithm__laser_scan_data__second__position))

(declare-fun dummy13 () us_rep6)

(declare-datatypes ()
((laser_scan_data__ref
 (mk_laser_scan_data__ref (laser_scan_data__content us_rep6)))))
(define-fun laser_scan_data__ref___projection ((a laser_scan_data__ref)) us_rep6
  (laser_scan_data__content a))

(declare-datatypes ()
((map__ref1 (mk_map__ref1 (map__content1 (Array Int us_rep6))))))
(declare-fun slide ((Array Int us_rep6) Int Int) (Array Int us_rep6))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep6)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep6)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int us_rep6) Int Int (Array Int us_rep6) Int
  Int) (Array Int us_rep6))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep6)) (b (Array Int us_rep6)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (us_rep6 Int) (Array Int us_rep6))

;; singleton_def
  (assert
  (forall ((v us_rep6))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq7 ((a (Array Int us_rep6)) (a__first Int) (a__last Int)
  (b (Array Int us_rep6)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_133 Int))
                           (=>
                           (and (<= a__first temp___idx_133)
                           (<= temp___idx_133 a__last))
                           (= (bool_eq6 (select a temp___idx_133)
                              (select b (+ (- b__first a__first) temp___idx_133))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep6)) (b (Array Int us_rep6)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq7 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_133 Int))
  (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last))
  (= (bool_eq6 (select a temp___idx_133)
     (select b (+ (- b__first a__first) temp___idx_133))) true))))))))

(declare-fun gapvec__split_discrs () us_split_discrs)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun laserscan () (Array Int us_rep6))

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun robotradius () Float32)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun mingapwidth () Float32)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun fmaxrange () Float32)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(declare-fun dist () Float32)

(declare-fun attr__ATTRIBUTE_ADDRESS7 () Int)

(declare-sort t27b 0)

(define-fun in_range8 ((x Int)) Bool (and (<= 2 x) (<= x 999)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq13 (t27b t27b) Bool)

(declare-fun dummy14 () t27b)

(declare-datatypes () ((t27b__ref (mk_t27b__ref (t27b__content t27b)))))
(define-fun t27b__ref___projection ((a t27b__ref)) t27b (t27b__content a))

(declare-fun attr__ATTRIBUTE_ADDRESS8 () Int)

(declare-fun dist1 () Float32)

(declare-fun attr__ATTRIBUTE_ADDRESS9 () Int)

(declare-fun dist2 () Float32)

(declare-fun attr__ATTRIBUTE_ADDRESS10 () Int)

(define-fun dynamic_invariant4 ((temp___expr_146 Float32)
  (temp___is_init_143 Bool) (temp___skip_constant_144 Bool)
  (temp___do_toplevel_145 Bool)) Bool (=>
                                      (or (= temp___is_init_143 true)
                                      (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b11111110 #b11111111111111111111111)))
                                      (in_range3 temp___expr_146)))

(define-fun dynamic_invariant5 ((temp___expr_170 Float32)
  (temp___is_init_167 Bool) (temp___skip_constant_168 Bool)
  (temp___do_toplevel_169 Bool)) Bool (=>
                                      (or (= temp___is_init_167 true)
                                      (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000001 #b10010010000111111011011)))
                                      (in_range4 temp___expr_170)))

(define-fun dynamic_invariant6 ((temp___expr_286 Int)
  (temp___is_init_283 Bool) (temp___skip_constant_284 Bool)
  (temp___do_toplevel_285 Bool)) Bool (=>
                                      (or (= temp___is_init_283 true)
                                      (<= (- 1) 1)) (in_range5
                                      temp___expr_286)))

(define-fun default_initial_assumption1 ((temp___expr_413 us_rep3)
  (temp___skip_top_level_414 Bool)) Bool (= (to_rep4
                                            (rec__algorithm__gap_vectors__cursor__node
                                            (us_split_fields7
                                            temp___expr_413))) 0))

(declare-fun no_element () us_rep3)

(declare-fun attr__ATTRIBUTE_ADDRESS11 () Int)

;; no_element__def_axiom
  (assert (= no_element (mk___rep3 (mk___split_fields3 (of_rep4 0)))))

(define-fun oeq ((left us_rep4)
  (right us_rep4)) Bool (and (= (length1 left) (length1 right)) (ite
                                                                (forall
                                                                ((n Int))
                                                                (=>
                                                                (and (<= 1 n)
                                                                (<= n
                                                                (last left)))
                                                                (= (bool_eq1
                                                                   (get left
                                                                   n)
                                                                   (get right
                                                                   n)) true)))
                                                                true false)))

(declare-fun oeq__function_guard (Bool us_rep4 us_rep4) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep4) (b us_rep4))
  (! (= (user_eq10 a b) (oeq a b)) :pattern ((user_eq10 a b)) )))

(define-fun default_initial_assumption2 ((temp___expr_449 us_rep4)
  (temp___skip_top_level_450 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_450 true))
                                         (= (length1 temp___expr_449) 0)))

;; model____post_axiom
  (assert
  (forall ((container us_rep2))
  (! (= (length1 (model__ container)) (length container)) :pattern ((model__
                                                                    container)) )))

(declare-fun length2 (us_rep5) Int)

(declare-fun length__function_guard2 (Int us_rep5) Bool)

(declare-fun is_empty1 (us_rep5) Bool)

(declare-fun is_empty__function_guard1 (Bool us_rep5) Bool)

(define-fun default_initial_assumption3 ((temp___expr_468 us_rep5)
  (temp___skip_top_level_469 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_469 true))
                                         (and
                                         (= (is_empty1 temp___expr_468) true)
                                         (= (length2 temp___expr_468) 0))))

(declare-fun has_key (us_rep5 us_rep3) Bool)

(declare-fun has_key__function_guard (Bool us_rep5 us_rep3) Bool)

(define-fun default_initial_assumption4 ((temp___expr_456 us_rep3)
  (temp___skip_top_level_457 Bool)) Bool (= (to_rep4
                                            (rec__algorithm__gap_vectors__cursor__node
                                            (us_split_fields7
                                            temp___expr_456))) 0))

;; positions__post_axiom
  (assert
  (forall ((container us_rep2))
  (! (let ((result (positions container)))
     (and (not (= (has_key result no_element) true))
     (forall ((i us_rep3))
     (=> (= (has_key result i) true)
     (and
     (and (<= 1 (get1 result i)) (<= (get1 result i) (length container)))
     (forall ((j us_rep3))
     (=> (= (has_key result j) true)
     (=> (= (get1 result i) (get1 result j)) (= (bool_eq3 i j) true))))))))) :pattern (
  (positions container)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep2))
  (! (= (= (is_empty container) true) (= (length container) 0)) :pattern (
  (is_empty container)) )))

(define-fun has_element ((container us_rep2)
  (position us_rep3)) Bool (has_key (positions container) position))

(declare-fun has_element__function_guard (Bool us_rep2 us_rep3) Bool)

;; last__post_axiom
  (assert
  (forall ((container us_rep2))
  (! (let ((result (last1 container)))
     (ite (= (length container) 0) (= (bool_eq3 result no_element) true)
     (and (= (has_element container result) true)
     (= (get1 (positions container) result) (length container))))) :pattern (
  (last1 container)) )))

(declare-sort extended_index 0)

(define-fun in_range9 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq14 (extended_index extended_index) Bool)

(declare-fun dummy15 () extended_index)

(declare-datatypes ()
((extended_index__ref
 (mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref___projection ((a extended_index__ref)) extended_index
  (extended_index__content a))

(define-fun dynamic_invariant7 ((temp___expr_442 Int)
  (temp___is_init_439 Bool) (temp___skip_constant_440 Bool)
  (temp___do_toplevel_441 Bool)) Bool (=>
                                      (or (= temp___is_init_439 true)
                                      (<= 0 2147483647)) (in_range9
                                      temp___expr_442)))

;; length__post_axiom
  (assert
  (forall ((container us_rep4))
  (! (let ((result (length1 container)))
     (and (<= (+ 0 result) 2147483647) (dynamic_invariant2 result true false
     true))) :pattern ((length1 container)) )))

;; get__post_axiom
  (assert true)

;; has_key__post_axiom
  (assert
  (forall ((container us_rep5))
  (forall ((key us_rep3))
  (! (=> (= (of_int1 0) true)
     (=>
     (exists ((k us_rep3))
     (and (= (has_key container k) true) (= (bool_eq3 k key) true)))
     (= (has_key container key) true))) :pattern ((has_key container key)) ))))

(declare-sort element_type 0)

(define-fun in_range10 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq15 (element_type element_type) Bool)

(declare-fun dummy16 () element_type)

(declare-datatypes ()
((element_type__ref2
 (mk_element_type__ref2 (element_type__content2 element_type)))))
(define-fun element_type__ref_3__projection ((a element_type__ref2)) element_type
  (element_type__content2 a))

(define-fun dynamic_invariant8 ((temp___expr_461 Int)
  (temp___is_init_458 Bool) (temp___skip_constant_459 Bool)
  (temp___do_toplevel_460 Bool)) Bool (=>
                                      (or (= temp___is_init_458 true)
                                      (<= 1 2147483647)) (in_range10
                                      temp___expr_461)))

(declare-fun witness (us_rep5 us_rep3) Int)

(declare-fun witness__function_guard (Int us_rep5 us_rep3) Bool)

(declare-fun w_get (us_rep5 Int) Int)

(declare-fun w_get__function_guard (Int us_rep5 Int) Bool)

;; get__post_axiom
  (assert
  (forall ((container us_rep5))
  (forall ((key us_rep3))
  (! (=> (= (has_key container key) true)
     (let ((result (get1 container key)))
     (and
     (=> (= (of_int1 0) true)
     (and (= result (w_get container (witness container key)))
     (forall ((k us_rep3))
     (=> (= (has_key container k) true)
     (= (= (bool_eq3 k key) true)
     (= (witness container key) (witness container k)))))))
     (dynamic_invariant8 result true false true)))) :pattern ((get1 container
                                                              key)) ))))

;; length__post_axiom
  (assert
  (forall ((container us_rep5)) (! (dynamic_invariant2 (length2 container)
  true false true) :pattern ((length2 container)) )))

;; ole__post_axiom
  (assert
  (forall ((left us_rep5) (right us_rep5))
  (! (= (= (ole1 left right) true)
     (forall ((key us_rep3))
     (=> (= (has_key left key) true)
     (and (= (has_key right key) true) (= (get1 right key) (get1 left key)))))) :pattern (
  (ole1 left right)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep5))
  (! (= (= (is_empty1 container) true)
     (forall ((key us_rep3)) (not (= (has_key container key) true)))) :pattern (
  (is_empty1 container)) )))

;; keys_included_except__post_axiom
  (assert
  (forall ((left us_rep5) (right us_rep5))
  (forall ((new_key us_rep3))
  (! (= (= (keys_included_except left right new_key) true)
     (forall ((key us_rep3))
     (=> (= (has_key left key) true)
     (=> (not (= (bool_eq3 key new_key) true)) (= (has_key right key) true))))) :pattern (
  (keys_included_except left right new_key)) ))))

(declare-fun has_witness (us_rep5 Int) Bool)

(declare-fun has_witness__function_guard (Bool us_rep5 Int) Bool)

;; has_witness__post_axiom
  (assert true)

;; witness__post_axiom
  (assert
  (forall ((container us_rep5))
  (forall ((key us_rep3))
  (! (=> (= (has_key container key) true)
     (let ((result (witness container key)))
     (and (= (has_witness container result) true) (dynamic_invariant2 result
     true false true)))) :pattern ((witness container key)) ))))

;; w_get__post_axiom
  (assert
  (forall ((container us_rep5))
  (forall ((witness1 Int))
  (! (=>
     (and (dynamic_invariant2 witness1 true true true)
     (= (has_witness container witness1) true)) (dynamic_invariant8
     (w_get container witness1) true false true)) :pattern ((w_get container
                                                            witness1)) ))))

(declare-fun gapvec__split_fields () us_main_type)

(declare-fun rayr__split_fields () nonnegative_float)

(declare-fun rayr__split_fields1 () normalized2pi)

(declare-fun rayl__split_fields () nonnegative_float)

(declare-fun rayl__split_fields1 () normalized2pi)

(declare-fun o () Float32)

(declare-fun o1 () Float32)

(declare-fun o2 () Float32)

(declare-fun o3 () Float32)

(declare-fun o4 () Float32)

(declare-fun o5 () Float32)

(declare-fun o6 () Float32)

(declare-fun algorithm__gap_vectors__clear__container__fields () us_split_fields4)

(declare-fun result () us_split_fields__ref2)

(declare-fun gapvec__split_fields1 () us_split_fields4)

(declare-fun result1 () us_split_fields__ref4)

(declare-fun rayr__split_fields2 () us_split_fields8)

(declare-fun result2 () us_split_fields__ref4)

(declare-fun rayl__split_fields2 () us_split_fields8)

;; H
  (assert
  (= 1000 (to_rep4
          (rec__algorithm__gap_vectors__list__capacity gapvec__split_discrs))))

;; H
  (assert (in_range2 robotradius))

;; H
  (assert (in_range2 mingapwidth))

;; H
  (assert (in_range2 fmaxrange))

;; H
  (assert
  (= (to_rep4
     (rec__algorithm__gap_vectors__list__capacity gapvec__split_discrs)) 1000))

;; H
  (assert
  (= (length
     (mk___rep2 gapvec__split_discrs
     algorithm__gap_vectors__clear__container__fields)) 0))

;; H
  (assert
  (= result (mk___split_fields__ref2
            (mk___split_fields2 gapvec__split_fields))))

;; H
  (assert
  (= gapvec__split_fields1 algorithm__gap_vectors__clear__container__fields))

;; H
  (assert
  (= result1 (mk___split_fields__ref4
             (mk___split_fields4 rayr__split_fields
             (mk___rep (mk___split_fields rayr__split_fields1))))))

;; H
  (assert (= rayr__split_fields2 (us_split_fields9 (select laserscan 1000))))

;; H
  (assert
  (= result2 (mk___split_fields__ref4
             (mk___split_fields4 rayl__split_fields
             (mk___rep (mk___split_fields rayl__split_fields1))))))

;; H
  (assert (= rayl__split_fields2 (us_split_fields9 (select laserscan 1))))

;; H
  (assert
  (and
  (= o2 (ccwdiff
        (rec__algorithm__laser_scan_data__second rayr__split_fields2)
        (rec__algorithm__laser_scan_data__second rayl__split_fields2)))
  (not (or (fp.isInfinite o2) (fp.isNaN o2)))))

;; H
  (assert
  (and (= o3 (cos1 o2))
  (and (not (or (fp.isInfinite o3) (fp.isNaN o3)))
  (and
  (and (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000))
  o3) (fp.leq o3 (fp #b0 #b01111111 #b00000000000000000000000)))
  (=> (fp.eq o2 (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq o3 (fp #b0 #b01111111 #b00000000000000000000000)))))))

;; H
  (assert
  (and
  (= o (fp.mul RNE (fp #b0 #b10000000 #b00000000000000000000000) (to_rep
                                                                 (rec__algorithm__laser_scan_data__first
                                                                 rayr__split_fields2))))
  (not (or (fp.isInfinite (fp.mul RNE (fp #b0 #b10000000 #b00000000000000000000000)
  (to_rep (rec__algorithm__laser_scan_data__first rayr__split_fields2)))) (fp.isNaN (fp.mul RNE (fp #b0 #b10000000 #b00000000000000000000000)
  (to_rep (rec__algorithm__laser_scan_data__first rayr__split_fields2))))))))

;; H
  (assert
  (= o1 (fp.mul RNE o (to_rep
                      (rec__algorithm__laser_scan_data__first
                      rayl__split_fields2)))))

;; H
  (assert (and (= o4 o1) (not (or (fp.isInfinite o1) (fp.isNaN o1)))))

;; H
  (assert (= o5 (fp.mul RNE o4 o3)))

;; H
  (assert (and (= o6 o5) (not (or (fp.isInfinite o5) (fp.isNaN o5)))))

(assert
;; WP_parameter_def
 ;; File "algorithm.adb", line 132, characters 0-0
  (not
  (not (or (fp.isInfinite (fp.mul RNE (to_rep
                                      (rec__algorithm__laser_scan_data__first
                                      rayl__split_fields2)) (to_rep
                                                            (rec__algorithm__laser_scan_data__first
                                                            rayl__split_fields2)))) (fp.isNaN (fp.mul RNE
  (to_rep (rec__algorithm__laser_scan_data__first rayl__split_fields2))
  (to_rep (rec__algorithm__laser_scan_data__first rayl__split_fields2))))))))
(check-sat)
(exit)
