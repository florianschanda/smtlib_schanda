;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unsat)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite64 ((x Float64)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral64 ((x Float64)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun pow2 (Int) Int)

(define-fun is_plus_infinity ((x Float64)) Bool (and (fp.isInfinite x)
                                                (fp.isPositive x)))

(define-fun is_minus_infinity ((x Float64)) Bool (and (fp.isInfinite x)
                                                 (fp.isNegative x)))

(define-fun is_plus_zero ((x Float64)) Bool (and (fp.isZero x)
                                            (fp.isPositive x)))

(define-fun is_minus_zero ((x Float64)) Bool (and (fp.isZero x)
                                             (fp.isNegative x)))

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 9007199254740992) i)
                                             (<= i 9007199254740992)))

(define-fun same_sign ((x Float64)
  (y Float64)) Bool (or (and (fp.isPositive x) (fp.isPositive y))
                    (and (fp.isNegative x) (fp.isNegative y))))

(define-fun diff_sign ((x Float64)
  (y Float64)) Bool (or (and (fp.isPositive x) (fp.isNegative y))
                    (and (fp.isNegative x) (fp.isPositive y))))

(define-fun product_sign ((z Float64) (x Float64)
  (y Float64)) Bool (and (=> (same_sign x y) (fp.isPositive z))
                    (=> (diff_sign x y) (fp.isNegative z))))

(define-fun sqr ((x Real)) Real (* x x))

(declare-fun sqrt1 (Real) Real)

(define-fun same_sign_real ((x Float64)
  (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r))
                 (and (fp.isNegative x) (< r 0.0))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content Float64)))))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort tfloat64B 0)

(declare-fun user_eq (tfloat64B tfloat64B) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE1 (Float64) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Float64)

(declare-const dummy tfloat64B)

(declare-datatypes ()
((tfloat64B__ref (mk_tfloat64B__ref (tfloat64B__content tfloat64B)))))
(define-fun tfloat64B__ref___projection ((a tfloat64B__ref)) tfloat64B
  (tfloat64B__content a))

(declare-sort inv_t 0)

(define-fun in_range1 ((x Float64)) Bool (and (fp.isFinite64 x)
                                         (and
                                         (fp.leq (fp.neg (fp #b0 #b10000000111 #b1001000000000000000000000000000000000000000000000000)) x)
                                         (fp.leq x (fp #b0 #b10000000111 #b1001000000000000000000000000000000000000000000000000)))))

(declare-fun user_eq1 (inv_t inv_t) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE2 (Float64) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Float64)

(declare-const dummy1 inv_t)

(declare-datatypes () ((inv_t__ref (mk_inv_t__ref (inv_t__content inv_t)))))
(define-fun inv_t__ref___projection ((a inv_t__ref)) inv_t (inv_t__content a))

(define-fun dynamic_invariant ((temp___expr_172 Float64)
  (temp___is_init_168 Bool) (temp___skip_constant_169 Bool)
  (temp___do_toplevel_170 Bool)
  (temp___do_typ_inv_171 Bool)) Bool (=>
                                     (or (= temp___is_init_168 true)
                                     (fp.leq (fp.neg (fp #b0 #b10000000111 #b1001000000000000000000000000000000000000000000000000)) (fp #b0 #b10000000111 #b1001000000000000000000000000000000000000000000000000)))
                                     (in_range1 temp___expr_172)))

(declare-sort safe_unit_t 0)

(define-fun in_range2 ((x Float64)) Bool (and (fp.isFinite64 x)
                                         (and
                                         (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) x)
                                         (fp.leq x (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))))

(declare-fun user_eq2 (safe_unit_t safe_unit_t) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE3 (Float64) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Float64)

(declare-const dummy2 safe_unit_t)

(declare-datatypes ()
((safe_unit_t__ref (mk_safe_unit_t__ref (safe_unit_t__content safe_unit_t)))))
(define-fun safe_unit_t__ref___projection ((a safe_unit_t__ref)) safe_unit_t
  (safe_unit_t__content a))

(define-fun dynamic_invariant1 ((temp___expr_179 Float64)
  (temp___is_init_175 Bool) (temp___skip_constant_176 Bool)
  (temp___do_toplevel_177 Bool)
  (temp___do_typ_inv_178 Bool)) Bool (and
                                     (=>
                                     (or (= temp___is_init_175 true)
                                     (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))
                                     (in_range2 temp___expr_179))
                                     (=> (= temp___do_toplevel_177 true)
                                     (=> (= temp___is_init_175 true)
                                     (= (not (and (ite (fp.leq (fp.neg (fp #b0 #b01111110110 #b0100011110101110000101000111101011100001010001111011)) temp___expr_179)
                                                  true false) (ite (fp.leq temp___expr_179 (fp #b0 #b01111110110 #b0100011110101110000101000111101011100001010001111011))
                                                              true false))) true)))))

(define-fun dynamic_predicate ((temp___183 Float64)) Bool (= (not (and
  (ite (fp.leq (fp.neg (fp #b0 #b01111110110 #b0100011110101110000101000111101011100001010001111011)) temp___183)
  true false) (ite (fp.leq temp___183 (fp #b0 #b01111110110 #b0100011110101110000101000111101011100001010001111011))
              true false))) true))

(declare-const i2b Float64)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const x Float64)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const y Float64)

;; H
  (assert (dynamic_invariant1 i2b true false true true))

;; H
  (assert (dynamic_invariant1 x true false true true))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b10000000111 #b1001000000000000000000000000000000000000000000000000)) (fp #b0 #b10000000111 #b1001000000000000000000000000000000000000000000000000))
  (in_range1 y)))

;; H
  (assert
  (fp.leq (fp.neg (fp #b0 #b01111110110 #b0100011110101110000101000111101011100001010001111011))
  x))

(assert
;; WP_parameter_def
 ;; File "foo.adb", line 13, characters 0-0
  (not
  (not
  (fp.leq x (fp #b0 #b01111110110 #b0100011110101110000101000111101011100001010001111011)))))
(check-sat)
(exit)
