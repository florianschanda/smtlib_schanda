(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic comp_div: int, int -> int
axiom comp_div_def: forall x, y:int. x >= 0 and y > 0 -> comp_div(x,y) = x / y
logic comp_mod: int, int -> int
axiom comp_mod_def: forall x, y:int. x >= 0 and y > 0 -> comp_mod(x,y) = x % y
(* this is a prelude for Alt-Ergo real arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic abs : int -> int

axiom abs_def :
  (forall x:int [abs(x)]. (((0 <= x) -> (abs(x) = x)) and ((not (0 <= x)) ->
  (abs(x) = (-x)))))

axiom Abs_le :
  (forall x:int. forall y:int. ((abs(x) <= y) <-> (((-y) <= x) and
  (x <= y))))

axiom Abs_pos : (forall x:int. (0 <= abs(x)))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * comp_div(x,y)) + comp_mod(x,y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= comp_div(x,y)) and (comp_div(x,y) <= x))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (((-abs(y)) <  comp_mod(x,y)) and (comp_mod(x,y) <  abs(y)))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  (0 <= comp_div(x,y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) ->
  (comp_div(x,y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) ->
  (0 <= comp_mod(x,y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) ->
  (comp_mod(x,y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (abs((comp_div(x,y) * y)) <= abs(x))))

axiom Div_1 : (forall x:int. (comp_div(x,1) = x))

axiom Mod_1 : (forall x:int. (comp_mod(x,1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_div(x,y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_mod(x,y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [comp_div(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_div(((x * y) + z),x) = (y + comp_div(z,x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [comp_mod(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_mod(((x * y) + z),x) = comp_mod(z,x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic mod : int, int -> int

axiom mod_def :
  (forall x:int. forall y:int [mod(x, y)]. (((0 <  y) -> (mod(x,
  y) = (x % y))) and ((not (0 <  y)) -> (mod(x, y) = ((x % y) + y)))))

axiom add_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x + y) / z) = ((x / z) + (y / z)))))

axiom sub_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x - y) / z) = ((x / z) - (y / z)))))

axiom neg_div :
  (forall x:real. forall y:real. ((not (y = 0.0)) ->
  (((-x) / y) = (-(x / y)))))

axiom assoc_mul_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x * y) / z) = (x * (y / z)))))

axiom assoc_div_mul :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> (((x / y) / z) = (x / (y * z)))))

axiom assoc_div_div :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> ((x / (y / z)) = ((x * z) / y))))

type t

logic tqtreal : t -> real

logic tqtisFinite : t -> prop

axiom tqtaxiom :
  (forall x:t. (tqtisFinite(x) -> (((-0xFFFFFF.0p104) <= tqtreal(x)) and
  (tqtreal(x) <= 0xFFFFFF.0p104))))

logic pow2 : int -> int

axiom Power_0 : (pow2(0) = 1)

axiom Power_s : (forall n:int. ((0 <= n) -> (pow2((n + 1)) = (2 * pow2(n)))))

axiom Power_1 : (pow2(1) = 2)

axiom Power_sum :
  (forall n:int. forall m:int. (((0 <= n) and (0 <= m)) ->
  (pow2((n + m)) = (pow2(n) * pow2(m)))))

axiom pow2pos : (forall i:int. ((0 <= i) -> (0 <  pow2(i))))

axiom pow2_0 : (pow2(0) = 1)

axiom pow2_1 : (pow2(1) = 2)

axiom pow2_2 : (pow2(2) = 4)

axiom pow2_3 : (pow2(3) = 8)

axiom pow2_4 : (pow2(4) = 16)

axiom pow2_5 : (pow2(5) = 32)

axiom pow2_6 : (pow2(6) = 64)

axiom pow2_7 : (pow2(7) = 128)

axiom pow2_8 : (pow2(8) = 256)

axiom pow2_9 : (pow2(9) = 512)

axiom pow2_10 : (pow2(10) = 1024)

axiom pow2_11 : (pow2(11) = 2048)

axiom pow2_12 : (pow2(12) = 4096)

axiom pow2_13 : (pow2(13) = 8192)

axiom pow2_14 : (pow2(14) = 16384)

axiom pow2_15 : (pow2(15) = 32768)

axiom pow2_16 : (pow2(16) = 65536)

axiom pow2_17 : (pow2(17) = 131072)

axiom pow2_18 : (pow2(18) = 262144)

axiom pow2_19 : (pow2(19) = 524288)

axiom pow2_20 : (pow2(20) = 1048576)

axiom pow2_21 : (pow2(21) = 2097152)

axiom pow2_22 : (pow2(22) = 4194304)

axiom pow2_23 : (pow2(23) = 8388608)

axiom pow2_24 : (pow2(24) = 16777216)

axiom pow2_25 : (pow2(25) = 33554432)

axiom pow2_26 : (pow2(26) = 67108864)

axiom pow2_27 : (pow2(27) = 134217728)

axiom pow2_28 : (pow2(28) = 268435456)

axiom pow2_29 : (pow2(29) = 536870912)

axiom pow2_30 : (pow2(30) = 1073741824)

axiom pow2_31 : (pow2(31) = 2147483648)

axiom pow2_32 : (pow2(32) = 4294967296)

axiom pow2_33 : (pow2(33) = 8589934592)

axiom pow2_34 : (pow2(34) = 17179869184)

axiom pow2_35 : (pow2(35) = 34359738368)

axiom pow2_36 : (pow2(36) = 68719476736)

axiom pow2_37 : (pow2(37) = 137438953472)

axiom pow2_38 : (pow2(38) = 274877906944)

axiom pow2_39 : (pow2(39) = 549755813888)

axiom pow2_40 : (pow2(40) = 1099511627776)

axiom pow2_41 : (pow2(41) = 2199023255552)

axiom pow2_42 : (pow2(42) = 4398046511104)

axiom pow2_43 : (pow2(43) = 8796093022208)

axiom pow2_44 : (pow2(44) = 17592186044416)

axiom pow2_45 : (pow2(45) = 35184372088832)

axiom pow2_46 : (pow2(46) = 70368744177664)

axiom pow2_47 : (pow2(47) = 140737488355328)

axiom pow2_48 : (pow2(48) = 281474976710656)

axiom pow2_49 : (pow2(49) = 562949953421312)

axiom pow2_50 : (pow2(50) = 1125899906842624)

axiom pow2_51 : (pow2(51) = 2251799813685248)

axiom pow2_52 : (pow2(52) = 4503599627370496)

axiom pow2_53 : (pow2(53) = 9007199254740992)

axiom pow2_54 : (pow2(54) = 18014398509481984)

axiom pow2_55 : (pow2(55) = 36028797018963968)

axiom pow2_56 : (pow2(56) = 72057594037927936)

axiom pow2_57 : (pow2(57) = 144115188075855872)

axiom pow2_58 : (pow2(58) = 288230376151711744)

axiom pow2_59 : (pow2(59) = 576460752303423488)

axiom pow2_60 : (pow2(60) = 1152921504606846976)

axiom pow2_61 : (pow2(61) = 2305843009213693952)

axiom pow2_62 : (pow2(62) = 4611686018427387904)

axiom pow2_63 : (pow2(63) = 9223372036854775808)

axiom pow2_64 : (pow2(64) = 18446744073709551616)

logic abs1 : real -> real

axiom abs_def1 :
  (forall x:real [abs1(x)]. (((0.0 <= x) -> (abs1(x) = x)) and
  ((not (0.0 <= x)) -> (abs1(x) = (-x)))))

axiom Abs_le1 :
  (forall x:real. forall y:real. ((abs1(x) <= y) <-> (((-y) <= x) and
  (x <= y))))

axiom Abs_pos1 : (forall x:real. (0.0 <= abs1(x)))

axiom Abs_sum :
  (forall x:real. forall y:real. (abs1((x + y)) <= (abs1(x) + abs1(y))))

axiom Abs_prod :
  (forall x:real. forall y:real. (abs1((x * y)) = (abs1(x) * abs1(y))))

axiom triangular_inequality :
  (forall x:real. forall y:real. forall z:real.
  (abs1((x - z)) <= (abs1((x - y)) + abs1((y - z)))))

logic from_int : int -> real

axiom Zero : (from_int(0) = 0.0)

axiom One : (from_int(1) = 1.0)

axiom Add :
  (forall x:int. forall y:int.
  (from_int((x + y)) = (from_int(x) + from_int(y))))

axiom Sub :
  (forall x:int. forall y:int.
  (from_int((x - y)) = (from_int(x) - from_int(y))))

axiom Mul :
  (forall x:int. forall y:int.
  (from_int((x * y)) = (from_int(x) * from_int(y))))

axiom Neg : (forall x:int. (from_int((-x)) = (-from_int(x))))

axiom Monotonic :
  (forall x:int. forall y:int. ((x <= y) -> (from_int(x) <= from_int(y))))

logic truncate : real -> int

axiom Truncate_int : (forall i:int. (truncate(from_int(i)) = i))

axiom Truncate_down_pos :
  (forall x:real. ((0.0 <= x) -> ((from_int(truncate(x)) <= x) and
  (x <  from_int((truncate(x) + 1))))))

axiom Truncate_up_neg :
  (forall x:real. ((x <= 0.0) -> ((from_int((truncate(x) - 1)) <  x) and
  (x <= from_int(truncate(x))))))

axiom Real_of_truncate :
  (forall x:real. (((x - 1.0) <= from_int(truncate(x))) and
  (from_int(truncate(x)) <= (x + 1.0))))

axiom Truncate_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (truncate(x) <= truncate(y))))

axiom Truncate_monotonic_int1 :
  (forall x:real. forall i:int. ((x <= from_int(i)) -> (truncate(x) <= i)))

axiom Truncate_monotonic_int2 :
  (forall x:real. forall i:int. ((from_int(i) <= x) -> (i <= truncate(x))))

logic floor : real -> int

logic ceil : real -> int

axiom Floor_int : (forall i:int. (floor(from_int(i)) = i))

axiom Ceil_int : (forall i:int. (ceil(from_int(i)) = i))

axiom Floor_down :
  (forall x:real. ((from_int(floor(x)) <= x) and
  (x <  from_int((floor(x) + 1)))))

axiom Ceil_up :
  (forall x:real. ((from_int((ceil(x) - 1)) <  x) and
  (x <= from_int(ceil(x)))))

axiom Floor_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (floor(x) <= floor(y))))

axiom Ceil_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (ceil(x) <= ceil(y))))

type mode = RNE | RNA | RTP | RTN | RTZ

logic match_mode : mode, 'a, 'a, 'a, 'a, 'a -> 'a

axiom match_mode_RNE :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(RNE, z, z1, z2, z3, z4) = z))

axiom match_mode_RNA :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(RNA, z, z1, z2, z3, z4) = z1))

axiom match_mode_RTP :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(RTP, z, z1, z2, z3, z4) = z2))

axiom match_mode_RTN :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(RTN, z, z1, z2, z3, z4) = z3))

axiom match_mode_RTZ :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(RTZ, z, z1, z2, z3, z4) = z4))

predicate to_nearest(m: mode) = ((m = RNE) or (m = RNA))

logic zeroF : t

logic add : mode, t, t -> t

logic sub : mode, t, t -> t

logic mul : mode, t, t -> t

logic div : mode, t, t -> t

logic abs2 : t -> t

logic neg : t -> t

logic fma : mode, t, t, t -> t

logic sqrt : mode, t -> t

logic roundToIntegral : mode, t -> t

logic min : t, t -> t

logic max : t, t -> t

logic le : t, t -> prop

logic lt : t, t -> prop

logic eq : t, t -> prop

logic is_normal : t -> prop

logic is_subnormal : t -> prop

logic is_zero : t -> prop

logic is_infinite : t -> prop

logic is_nan : t -> prop

logic is_positive : t -> prop

logic is_negative : t -> prop

predicate is_plus_infinity(x: t) = (is_infinite(x) and is_positive(x))

predicate is_minus_infinity(x: t) = (is_infinite(x) and is_negative(x))

predicate is_plus_zero(x: t) = (is_zero(x) and is_positive(x))

predicate is_minus_zero(x: t) = (is_zero(x) and is_negative(x))

predicate is_not_nan(x: t) = (tqtisFinite(x) or is_infinite(x))

axiom is_not_nan1 : (forall x:t. (is_not_nan(x) <-> (not is_nan(x))))

axiom is_not_finite :
  (forall x:t. ((not tqtisFinite(x)) <-> (is_infinite(x) or is_nan(x))))

axiom zeroF_is_positive : is_positive(zeroF)

axiom zeroF_is_zero : is_zero(zeroF)

axiom zero_to_real :
  (forall x:t [is_zero(x)]. (is_zero(x) <-> (tqtisFinite(x) and
  (tqtreal(x) = 0.0))))

logic of_int : mode, int -> t

logic to_int : mode, t -> int

axiom zero_of_int : (forall m:mode. (zeroF = of_int(m, 0)))

logic round : mode, real -> real

logic max_int1 : int

axiom max_real_int : (0x1.FFFFFEp127 = from_int(max_int1))

predicate in_range(x: real) = (((-0x1.FFFFFEp127) <= x) and
  (x <= 0x1.FFFFFEp127))

predicate in_int_range(i: int) = (((-max_int1) <= i) and (i <= max_int1))

axiom is_finite : (forall x:t. (tqtisFinite(x) -> in_range(tqtreal(x))))

predicate no_overflow(m: mode, x: real) = in_range(round(m, x))

axiom Bounded_real_no_overflow :
  (forall m:mode. forall x:real. (in_range(x) -> in_range(round(m, x))))

axiom Round_monotonic :
  (forall m:mode. forall x:real. forall y:real. ((x <= y) -> (round(m,
  x) <= round(m, y))))

axiom Round_idempotent :
  (forall m1:mode. forall m2:mode. forall x:real. (round(m1, round(m2,
  x)) = round(m2, x)))

axiom Round_to_real :
  (forall m:mode. forall x:t. (tqtisFinite(x) -> (round(m,
  tqtreal(x)) = tqtreal(x))))

axiom Round_down_le : (forall x:real. (round(RTN, x) <= x))

axiom Round_up_ge : (forall x:real. (x <= round(RTP, x)))

axiom Round_down_neg : (forall x:real. (round(RTN, (-x)) = (-round(RTP, x))))

axiom Round_up_neg : (forall x:real. (round(RTP, (-x)) = (-round(RTN, x))))

predicate in_safe_int_range(i: int) = (((-16777216) <= i) and
  (i <= 16777216))

axiom Exact_rounding_for_integers :
  (forall m:mode. forall i:int. (in_safe_int_range(i) -> (round(m,
  from_int(i)) = from_int(i))))

predicate same_sign(x: t, y: t) = ((is_positive(x) and is_positive(y)) or
  (is_negative(x) and is_negative(y)))

predicate diff_sign(x: t, y: t) = ((is_positive(x) and is_negative(y)) or
  (is_negative(x) and is_positive(y)))

axiom feq_eq :
  (forall x:t. forall y:t. (tqtisFinite(x) -> (tqtisFinite(y) ->
  ((not is_zero(x)) -> (eq(x, y) -> (x = y))))))

axiom eq_feq :
  (forall x:t. forall y:t. (tqtisFinite(x) -> (tqtisFinite(y) -> ((x = y) ->
  eq(x, y)))))

axiom eq_refl : (forall x:t. (tqtisFinite(x) -> eq(x, x)))

axiom eq_sym : (forall x:t. forall y:t. (eq(x, y) -> eq(y, x)))

axiom eq_trans :
  (forall x:t. forall y:t. forall z:t. (eq(x, y) -> (eq(y, z) -> eq(x, z))))

axiom eq_zero : eq(zeroF, neg(zeroF))

axiom eq_to_real_finite :
  (forall x:t. forall y:t. ((tqtisFinite(x) and tqtisFinite(y)) -> (eq(x,
  y) <-> (tqtreal(x) = tqtreal(y)))))

axiom lt_finite :
  (forall x:t. forall y:t [lt(x, y)]. ((tqtisFinite(x) and tqtisFinite(y)) ->
  (lt(x, y) <-> (tqtreal(x) <  tqtreal(y)))))

axiom le_finite :
  (forall x:t. forall y:t [le(x, y)]. ((tqtisFinite(x) and tqtisFinite(y)) ->
  (le(x, y) <-> (tqtreal(x) <= tqtreal(y)))))

axiom le_lt_trans :
  (forall x:t. forall y:t. forall z:t. ((le(x, y) and lt(y, z)) -> lt(x, z)))

axiom lt_le_trans :
  (forall x:t. forall y:t. forall z:t. ((lt(x, y) and le(y, z)) -> lt(x, z)))

axiom le_ge_asym :
  (forall x:t. forall y:t. ((le(x, y) and le(y, x)) -> eq(x, y)))

axiom not_lt_ge :
  (forall x:t. forall y:t. (((not lt(x, y)) and (is_not_nan(x) and
  is_not_nan(y))) -> le(y, x)))

axiom not_gt_le :
  (forall x:t. forall y:t. (((not lt(y, x)) and (is_not_nan(x) and
  is_not_nan(y))) -> le(x, y)))

axiom lt_lt_finite :
  (forall x:t. forall y:t. forall z:t. (lt(x, y) -> (lt(y, z) ->
  tqtisFinite(y))))

axiom positive_to_real :
  (forall x:t [is_positive(x)]. (tqtisFinite(x) -> (is_positive(x) ->
  (0.0 <= tqtreal(x)))))

axiom to_real_positive :
  (forall x:t [is_positive(x)]. (tqtisFinite(x) -> ((0.0 <  tqtreal(x)) ->
  is_positive(x))))

axiom negative_to_real :
  (forall x:t [is_negative(x)]. (tqtisFinite(x) -> (is_negative(x) ->
  (tqtreal(x) <= 0.0))))

axiom to_real_negative :
  (forall x:t [is_negative(x)]. (tqtisFinite(x) -> ((tqtreal(x) <  0.0) ->
  is_negative(x))))

axiom negative_xor_positive :
  (forall x:t. (not (is_positive(x) and is_negative(x))))

axiom negative_or_positive :
  (forall x:t. (is_not_nan(x) -> (is_positive(x) or is_negative(x))))

axiom diff_sign_trans :
  (forall x:t. forall y:t. forall z:t. ((diff_sign(x, y) and diff_sign(y,
  z)) -> same_sign(x, z)))

axiom diff_sign_product :
  (forall x:t. forall y:t. ((tqtisFinite(x) and (tqtisFinite(y) and
  ((tqtreal(x) * tqtreal(y)) <  0.0))) -> diff_sign(x, y)))

axiom same_sign_product :
  (forall x:t. forall y:t. ((tqtisFinite(x) and (tqtisFinite(y) and
  same_sign(x, y))) -> (0.0 <= (tqtreal(x) * tqtreal(y)))))

predicate product_sign(z: t, x: t, y: t) = ((same_sign(x, y) ->
  is_positive(z)) and (diff_sign(x, y) -> is_negative(z)))

predicate overflow_value(m: mode, x: t) = ((((((m = RNE) ->
  is_infinite(x)) and ((m = RNA) -> is_infinite(x))) and ((m = RTP) ->
  ((is_positive(x) -> is_infinite(x)) and ((not is_positive(x)) ->
  (tqtisFinite(x) and (tqtreal(x) = (-0x1.FFFFFEp127))))))) and ((m = RTN) ->
  ((is_positive(x) -> (tqtisFinite(x) and (tqtreal(x) = 0x1.FFFFFEp127))) and
  ((not is_positive(x)) -> is_infinite(x))))) and ((m = RTZ) ->
  ((is_positive(x) -> (tqtisFinite(x) and (tqtreal(x) = 0x1.FFFFFEp127))) and
  ((not is_positive(x)) -> (tqtisFinite(x) and
  (tqtreal(x) = (-0x1.FFFFFEp127)))))))

predicate sign_zero_result(m: mode, x: t) = (is_zero(x) -> ((((((m = RNE) ->
  is_positive(x)) and ((m = RNA) -> is_positive(x))) and ((m = RTP) ->
  is_positive(x))) and ((m = RTN) -> is_negative(x))) and ((m = RTZ) ->
  is_positive(x))))

axiom add_finite :
  (forall m:mode. forall x:t. forall y:t [add(m, x, y)]. (tqtisFinite(x) ->
  (tqtisFinite(y) -> (in_range(round(m, (tqtreal(x) + tqtreal(y)))) ->
  (tqtisFinite(add(m, x, y)) and (tqtreal(add(m, x, y)) = round(m,
  (tqtreal(x) + tqtreal(y)))))))))

axiom add_finite_rev :
  (forall m:mode. forall x:t. forall y:t [add(m, x, y)]. (tqtisFinite(add(m,
  x, y)) -> (tqtisFinite(x) and tqtisFinite(y))))

axiom add_finite_rev_n :
  (forall m:mode. forall x:t. forall y:t [add(m, x, y)]. (to_nearest(m) ->
  (tqtisFinite(add(m, x, y)) -> (in_range(round(m,
  (tqtreal(x) + tqtreal(y)))) and (tqtreal(add(m, x, y)) = round(m,
  (tqtreal(x) + tqtreal(y))))))))

axiom sub_finite :
  (forall m:mode. forall x:t. forall y:t [sub(m, x, y)]. (tqtisFinite(x) ->
  (tqtisFinite(y) -> (in_range(round(m, (tqtreal(x) - tqtreal(y)))) ->
  (tqtisFinite(sub(m, x, y)) and (tqtreal(sub(m, x, y)) = round(m,
  (tqtreal(x) - tqtreal(y)))))))))

axiom sub_finite_rev :
  (forall m:mode. forall x:t. forall y:t [sub(m, x, y)]. (tqtisFinite(sub(m,
  x, y)) -> (tqtisFinite(x) and tqtisFinite(y))))

axiom sub_finite_rev_n :
  (forall m:mode. forall x:t. forall y:t [sub(m, x, y)]. (to_nearest(m) ->
  (tqtisFinite(sub(m, x, y)) -> (in_range(round(m,
  (tqtreal(x) - tqtreal(y)))) and (tqtreal(sub(m, x, y)) = round(m,
  (tqtreal(x) - tqtreal(y))))))))

axiom mul_finite :
  (forall m:mode. forall x:t. forall y:t [mul(m, x, y)]. (tqtisFinite(x) ->
  (tqtisFinite(y) -> (in_range(round(m, (tqtreal(x) * tqtreal(y)))) ->
  (tqtisFinite(mul(m, x, y)) and (tqtreal(mul(m, x, y)) = round(m,
  (tqtreal(x) * tqtreal(y)))))))))

axiom mul_finite_rev :
  (forall m:mode. forall x:t. forall y:t [mul(m, x, y)]. (tqtisFinite(mul(m,
  x, y)) -> (tqtisFinite(x) and tqtisFinite(y))))

axiom mul_finite_rev_n :
  (forall m:mode. forall x:t. forall y:t [mul(m, x, y)]. (to_nearest(m) ->
  (tqtisFinite(mul(m, x, y)) -> (in_range(round(m,
  (tqtreal(x) * tqtreal(y)))) and (tqtreal(mul(m, x, y)) = round(m,
  (tqtreal(x) * tqtreal(y))))))))

axiom div_finite :
  (forall m:mode. forall x:t. forall y:t [div(m, x, y)]. (tqtisFinite(x) ->
  (tqtisFinite(y) -> ((not is_zero(y)) -> (in_range(round(m,
  (tqtreal(x) / tqtreal(y)))) -> (tqtisFinite(div(m, x, y)) and
  (tqtreal(div(m, x, y)) = round(m, (tqtreal(x) / tqtreal(y))))))))))

axiom div_finite_rev :
  (forall m:mode. forall x:t. forall y:t [div(m, x, y)]. (tqtisFinite(div(m,
  x, y)) -> ((tqtisFinite(x) and (tqtisFinite(y) and (not is_zero(y)))) or
  (tqtisFinite(x) and (is_infinite(y) and (tqtreal(div(m, x, y)) = 0.0))))))

axiom div_finite_rev_n :
  (forall m:mode. forall x:t. forall y:t [div(m, x, y)]. (to_nearest(m) ->
  (tqtisFinite(div(m, x, y)) -> (tqtisFinite(y) -> (in_range(round(m,
  (tqtreal(x) / tqtreal(y)))) and (tqtreal(div(m, x, y)) = round(m,
  (tqtreal(x) / tqtreal(y)))))))))

axiom neg_finite :
  (forall x:t [neg(x)]. (tqtisFinite(x) -> (tqtisFinite(neg(x)) and
  (tqtreal(neg(x)) = (-tqtreal(x))))))

axiom neg_finite_rev :
  (forall x:t [neg(x)]. (tqtisFinite(neg(x)) -> (tqtisFinite(x) and
  (tqtreal(neg(x)) = (-tqtreal(x))))))

axiom abs_finite :
  (forall x:t [abs2(x)]. (tqtisFinite(x) -> (tqtisFinite(abs2(x)) and
  ((tqtreal(abs2(x)) = abs1(tqtreal(x))) and is_positive(abs2(x))))))

axiom abs_finite_rev :
  (forall x:t [abs2(x)]. (tqtisFinite(abs2(x)) -> (tqtisFinite(x) and
  (tqtreal(abs2(x)) = abs1(tqtreal(x))))))

axiom abs_universal : (forall x:t [abs2(x)]. (not is_negative(abs2(x))))

axiom fma_finite_rev :
  (forall m:mode. forall x:t. forall y:t. forall z:t [fma(m, x, y, z)].
  (tqtisFinite(fma(m, x, y, z)) -> (tqtisFinite(x) and (tqtisFinite(y) and
  tqtisFinite(z)))))

axiom fma_finite_rev_n :
  (forall m:mode. forall x:t. forall y:t. forall z:t [fma(m, x, y, z)].
  (to_nearest(m) -> (tqtisFinite(fma(m, x, y, z)) -> (in_range(round(m,
  ((tqtreal(x) * tqtreal(y)) + tqtreal(z)))) and (tqtreal(fma(m, x, y,
  z)) = round(m, ((tqtreal(x) * tqtreal(y)) + tqtreal(z))))))))

function sqr(x: real) : real = (x * x)

logic sqrt1 : real -> real

axiom sqrt_finite_rev :
  (forall m:mode. forall x:t [sqrt(m, x)]. (tqtisFinite(sqrt(m, x)) ->
  (tqtisFinite(x) and ((0.0 <= tqtreal(x)) and (tqtreal(sqrt(m,
  x)) = round(m, sqrt1(tqtreal(x))))))))

predicate same_sign_real(x: t, r: real) = ((is_positive(x) and (0.0 <  r)) or
  (is_negative(x) and (r <  0.0)))

axiom of_int_add_exact :
  (forall m:mode. forall n:mode. forall i:int. forall j:int.
  (in_safe_int_range(i) -> (in_safe_int_range(j) ->
  (in_safe_int_range((i + j)) -> eq(of_int(m, (i + j)), add(n, of_int(m, i),
  of_int(m, j)))))))

axiom of_int_sub_exact :
  (forall m:mode. forall n:mode. forall i:int. forall j:int.
  (in_safe_int_range(i) -> (in_safe_int_range(j) ->
  (in_safe_int_range((i - j)) -> eq(of_int(m, (i - j)), sub(n, of_int(m, i),
  of_int(m, j)))))))

axiom of_int_mul_exact :
  (forall m:mode. forall n:mode. forall i:int. forall j:int.
  (in_safe_int_range(i) -> (in_safe_int_range(j) ->
  (in_safe_int_range((i * j)) -> eq(of_int(m, (i * j)), mul(n, of_int(m, i),
  of_int(m, j)))))))

axiom Min_r : (forall x:t. forall y:t. (le(y, x) -> eq(min(x, y), y)))

axiom Min_l : (forall x:t. forall y:t. (le(x, y) -> eq(min(x, y), x)))

axiom Max_r : (forall x:t. forall y:t. (le(y, x) -> eq(max(x, y), x)))

axiom Max_l : (forall x:t. forall y:t. (le(x, y) -> eq(max(x, y), y)))

logic is_int : t -> prop

axiom zeroF_is_int : is_int(zeroF)

axiom of_int_is_int :
  (forall m:mode. forall x:int. (in_int_range(x) -> is_int(of_int(m, x))))

axiom big_float_is_int :
  (forall m:mode. forall i:t. (tqtisFinite(i) -> ((le(i, neg(of_int(m,
  16777216))) or le(of_int(m, 16777216), i)) -> is_int(i))))

axiom roundToIntegral_is_int :
  (forall m:mode. forall x:t. (tqtisFinite(x) -> is_int(roundToIntegral(m,
  x))))

axiom eq_is_int :
  (forall x:t. forall y:t. (eq(x, y) -> (is_int(x) -> is_int(y))))

axiom add_int :
  (forall x:t. forall y:t. forall m:mode. (is_int(x) -> (is_int(y) ->
  (tqtisFinite(add(m, x, y)) -> is_int(add(m, x, y))))))

axiom sub_int :
  (forall x:t. forall y:t. forall m:mode. (is_int(x) -> (is_int(y) ->
  (tqtisFinite(sub(m, x, y)) -> is_int(sub(m, x, y))))))

axiom mul_int :
  (forall x:t. forall y:t. forall m:mode. (is_int(x) -> (is_int(y) ->
  (tqtisFinite(mul(m, x, y)) -> is_int(mul(m, x, y))))))

axiom fma_int :
  (forall x:t. forall y:t. forall z:t. forall m:mode. (is_int(x) ->
  (is_int(y) -> (is_int(z) -> (tqtisFinite(fma(m, x, y, z)) -> is_int(fma(m,
  x, y, z)))))))

axiom neg_int : (forall x:t. (is_int(x) -> is_int(neg(x))))

axiom abs_int1 : (forall x:t. (is_int(x) -> is_int(abs2(x))))

axiom is_int_of_int :
  (forall x:t. forall m:mode. forall mqt:mode. (is_int(x) -> eq(x,
  of_int(mqt, to_int(m, x)))))

axiom is_int_to_int :
  (forall m:mode. forall x:t. (is_int(x) -> in_int_range(to_int(m, x))))

axiom is_int_is_finite : (forall x:t. (is_int(x) -> tqtisFinite(x)))

axiom int_to_real :
  (forall m:mode. forall x:t. (is_int(x) -> (tqtreal(x) = from_int(to_int(m,
  x)))))

axiom truncate_int :
  (forall m:mode. forall i:t. (is_int(i) -> eq(roundToIntegral(m, i), i)))

axiom truncate_neg :
  (forall x:t. (tqtisFinite(x) -> (is_negative(x) -> (roundToIntegral(RTZ,
  x) = roundToIntegral(RTP, x)))))

axiom truncate_pos :
  (forall x:t. (tqtisFinite(x) -> (is_positive(x) -> (roundToIntegral(RTZ,
  x) = roundToIntegral(RTN, x)))))

axiom ceil_le :
  (forall x:t. (tqtisFinite(x) -> le(x, roundToIntegral(RTP, x))))

axiom ceil_lest :
  (forall x:t. forall y:t. ((le(x, y) and is_int(y)) ->
  le(roundToIntegral(RTP, x), y)))

axiom ceil_to_real :
  (forall x:t. (tqtisFinite(x) -> (tqtreal(roundToIntegral(RTP,
  x)) = from_int(ceil(tqtreal(x))))))

axiom ceil_to_int :
  (forall m:mode. forall x:t. (tqtisFinite(x) -> (to_int(m,
  roundToIntegral(RTP, x)) = ceil(tqtreal(x)))))

axiom floor_le :
  (forall x:t. (tqtisFinite(x) -> le(roundToIntegral(RTN, x), x)))

axiom floor_lest :
  (forall x:t. forall y:t. ((le(y, x) and is_int(y)) -> le(y,
  roundToIntegral(RTN, x))))

axiom floor_to_real :
  (forall x:t. (tqtisFinite(x) -> (tqtreal(roundToIntegral(RTN,
  x)) = from_int(floor(tqtreal(x))))))

axiom floor_to_int :
  (forall m:mode. forall x:t. (tqtisFinite(x) -> (to_int(m,
  roundToIntegral(RTN, x)) = floor(tqtreal(x)))))

axiom RNA_down :
  (forall x:t. (lt(sub(RNE, x, roundToIntegral(RTN, x)), sub(RNE,
  roundToIntegral(RTP, x), x)) -> (roundToIntegral(RNA,
  x) = roundToIntegral(RTN, x))))

axiom RNA_up :
  (forall x:t. (lt(sub(RNE, roundToIntegral(RTP, x), x), sub(RNE, x,
  roundToIntegral(RTN, x))) -> (roundToIntegral(RNA,
  x) = roundToIntegral(RTP, x))))

axiom RNA_down_tie :
  (forall x:t. (eq(sub(RNE, x, roundToIntegral(RTN, x)), sub(RNE,
  roundToIntegral(RTP, x), x)) -> (is_negative(x) -> (roundToIntegral(RNA,
  x) = roundToIntegral(RTN, x)))))

axiom RNA_up_tie :
  (forall x:t. (eq(sub(RNE, roundToIntegral(RTP, x), x), sub(RNE, x,
  roundToIntegral(RTN, x))) -> (is_positive(x) -> (roundToIntegral(RNA,
  x) = roundToIntegral(RTP, x)))))

axiom to_int_roundToIntegral :
  (forall m:mode. forall x:t. (to_int(m, x) = to_int(m, roundToIntegral(m,
  x))))

axiom to_int_monotonic :
  (forall m:mode. forall x:t. forall y:t. (tqtisFinite(x) ->
  (tqtisFinite(y) -> (le(x, y) -> (to_int(m, x) <= to_int(m, y))))))

axiom to_int_of_int :
  (forall m:mode. forall i:int. (in_safe_int_range(i) -> (to_int(m, of_int(m,
  i)) = i)))

axiom eq_to_int :
  (forall m:mode. forall x:t. forall y:t. (tqtisFinite(x) -> (eq(x, y) ->
  (to_int(m, x) = to_int(m, y)))))

axiom neg_to_int :
  (forall m:mode. forall x:t. (is_int(x) -> (to_int(m, neg(x)) = (-to_int(m,
  x)))))

axiom roundToIntegral_is_finite :
  (forall m:mode. forall x:t. (tqtisFinite(x) ->
  tqtisFinite(roundToIntegral(m, x))))

axiom round_bound_ne :
  (forall x:real [round(RNE, x)]. (in_range(round(RNE, x)) ->
  ((((x - (0x1.0p-24 * abs1(x))) - 0x1.0p-150) <= round(RNE, x)) and
  (round(RNE, x) <= ((x + (0x1.0p-24 * abs1(x))) + 0x1.0p-150)))))

predicate neq(x: t, y: t) = (not eq(x, y))

logic bool_lt : t, t -> bool

axiom bool_lt_def :
  (forall x:t. forall y:t [bool_lt(x, y)]. ((lt(x, y) -> (bool_lt(x,
  y) = true)) and ((not lt(x, y)) -> (bool_lt(x, y) = false))))

logic bool_le : t, t -> bool

axiom bool_le_def :
  (forall x:t. forall y:t [bool_le(x, y)]. ((le(x, y) -> (bool_le(x,
  y) = true)) and ((not le(x, y)) -> (bool_le(x, y) = false))))

logic bool_gt : t, t -> bool

axiom bool_gt_def :
  (forall x:t. forall y:t [bool_gt(x, y)]. ((lt(y, x) -> (bool_gt(x,
  y) = true)) and ((not lt(y, x)) -> (bool_gt(x, y) = false))))

logic bool_ge : t, t -> bool

axiom bool_ge_def :
  (forall x:t. forall y:t [bool_ge(x, y)]. ((le(y, x) -> (bool_ge(x,
  y) = true)) and ((not le(y, x)) -> (bool_ge(x, y) = false))))

logic bool_eq : t, t -> bool

axiom bool_eq_def :
  (forall x:t. forall y:t [bool_eq(x, y)]. ((eq(x, y) -> (bool_eq(x,
  y) = true)) and ((not eq(x, y)) -> (bool_eq(x, y) = false))))

logic bool_neq : t, t -> bool

axiom bool_neq_def :
  (forall x:t. forall y:t [bool_neq(x, y)]. (((not eq(x, y)) -> (bool_neq(x,
  y) = true)) and (eq(x, y) -> (bool_neq(x, y) = false))))

logic rem : t, t -> t

logic fliteral : t

axiom fliteral_axiom : (tqtisFinite(fliteral) and (tqtreal(fliteral) = 1.0))

axiom one_is_int : is_int(fliteral)

axiom one_of_int : (fliteral = of_int(RNA, 1))

type t__ref = { t__content : t
}

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int1 : bool -> int

axiom to_int_def :
  (forall b:bool [to_int1(b)]. (((b = true) -> (to_int1(b) = 1)) and
  ((not (b = true)) -> (to_int1(b) = 0))))

logic of_int1 : int -> bool

axiom of_int_def :
  (forall i:int [of_int1(i)]. (((i = 0) -> (of_int1(i) = false)) and
  ((not (i = 0)) -> (of_int1(i) = true))))

logic bool_eq1 : bool, bool -> bool

axiom bool_eq_def1 :
  (forall x:bool. forall y:bool [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

predicate in_range1(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range2(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt1 : int, int -> bool

logic bool_le1 : int, int -> bool

logic bool_gt1 : int, int -> bool

logic bool_ge1 : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq2(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt1(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le1(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt1(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge1(x, y) = true) <-> (y <= x))))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type float1

logic bool_eq4 : t, t -> bool

axiom bool_eq_def3 :
  (forall x:t. forall y:t [bool_eq4(x, y)]. ((eq(x, y) -> (bool_eq4(x,
  y) = true)) and ((not eq(x, y)) -> (bool_eq4(x, y) = false))))

logic user_eq1 : float1, float1 -> bool

logic attr__ATTRIBUTE_IMAGE2 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> t

logic dummy1 : float1

type float__ref = { float__content : float1
}

function float__ref___projection(a: float__ref) : float1 = (a).float__content

type character

predicate in_range3(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

type field

predicate in_range4(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : field, field -> bool

logic dummy3 : field

type field__ref = { field__content : field
}

function field__ref___projection(a: field__ref) : field = (a).field__content

type number_base

predicate in_range5(x: int) = ((2 <= x) and (x <= 16))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq4 : number_base, number_base -> bool

logic dummy4 : number_base

type number_base__ref = { number_base__content : number_base
}

function number_base__ref___projection(a: number_base__ref) : number_base =
  (a).number_base__content

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

type num

predicate in_range6(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq5 : num, num -> bool

logic dummy5 : num

type num__ref = { num__content : num
}

function num__ref___projection(a: num__ref) : num = (a).num__content

logic sqrt2 : t -> t

logic sqrt__function_guard : t, t -> prop

logic fliteral1 : t

axiom fliteral_axiom1 : (tqtisFinite(fliteral1) and
  (tqtreal(fliteral1) = 0.0e-1))

logic fliteral2 : t

axiom fliteral_axiom2 : (tqtisFinite(fliteral2) and
  (tqtreal(fliteral2) = 0.0000000000000000000000000000000000000000000014012984643248170709237295832899161312802619418765157717570682838897910826858606014866381883621215820312500000000000000000000000))

axiom sqrt__post_axiom :
  (forall x:t [sqrt2(x)]. ((tqtisFinite(x) and le(fliteral1, x)) ->
  ((le(fliteral1, sqrt2(x)) and ((eq(x, fliteral1) -> eq(sqrt2(x),
  fliteral1)) and ((eq(x, fliteral) -> eq(sqrt2(x), fliteral)) and
  (le(fliteral2, x) -> lt(fliteral1, sqrt2(x)))))) and
  tqtisFinite(sqrt2(x)))))

type uppercase

predicate in_range7(x: int) = ((65 <= x) and (x <= 90))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq6 : uppercase, uppercase -> bool

logic dummy6 : uppercase

type uppercase__ref = { uppercase__content : uppercase
}

function uppercase__ref___projection(a: uppercase__ref) : uppercase =
  (a).uppercase__content

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic attr__ATTRIBUTE_ADDRESS9 : int

logic attr__ATTRIBUTE_ADDRESS10 : int

logic attr__ATTRIBUTE_ADDRESS11 : int

logic attr__ATTRIBUTE_ADDRESS12 : int

logic attr__ATTRIBUTE_ADDRESS13 : int

logic attr__ATTRIBUTE_ADDRESS14 : int

logic attr__ATTRIBUTE_ADDRESS15 : int

logic attr__ATTRIBUTE_ADDRESS16 : int

logic attr__ATTRIBUTE_ADDRESS17 : int

logic attr__ATTRIBUTE_ADDRESS18 : int

logic tolerance : t

logic attr__ATTRIBUTE_ADDRESS19 : int

logic attr__ATTRIBUTE_ADDRESS20 : int

logic attr__ATTRIBUTE_ADDRESS21 : int

logic attr__ATTRIBUTE_ADDRESS22 : int

logic r4b : int

logic attr__ATTRIBUTE_ADDRESS23 : int

logic r5b : int

logic attr__ATTRIBUTE_ADDRESS24 : int

logic attr__ATTRIBUTE_ADDRESS25 : int

logic r7b : int

logic attr__ATTRIBUTE_ADDRESS26 : int

logic r8b : int

logic attr__ATTRIBUTE_ADDRESS27 : int

logic attr__ATTRIBUTE_ADDRESS28 : int

logic c10b : int

logic attr__ATTRIBUTE_ADDRESS29 : int

logic fliteral3 : t

axiom fliteral_axiom3 : (tqtisFinite(fliteral3) and
  (tqtreal(fliteral3) = 0.0000999999974737875163555145263671875))

axiom tolerance__def_axiom : (tolerance = fliteral3)

logic fliteral4 : t

axiom fliteral_axiom4 : (tqtisFinite(fliteral4) and
  (tqtreal(fliteral4) = 340282346638528859811704183484516925440.0))

logic fliteral5 : t

axiom fliteral_axiom5 : (tqtisFinite(fliteral5) and
  (tqtreal(fliteral5) = 123.45459747314453125))

logic fliteral6 : t

axiom fliteral_axiom6 : (tqtisFinite(fliteral6) and
  (tqtreal(fliteral6) = 2.0))

logic fliteral7 : t

axiom fliteral_axiom7 : (tqtisFinite(fliteral7) and
  (tqtreal(fliteral7) = 0.500000000000000000000000))

 (* File "control_structures.adb", line 29, characters 0-0 *)
goal WP_parameter_def :
  (forall default_width:int. forall default_base:int. forall a:int.
  forall b:int. forall c:int. forall d:int. forall e:int. forall f:int.
  forall g:int. forall h:int. forall ch:int. forall temperature:int.
  forall valve_setting:int. forall value:int. forall sum:int.
  forall success:bool. forall approx:t. forall x:t. forall y:t.
  forall letter:int. forall count:int. forall count1:int. forall o:int.
  forall o1:int. forall o2:int. forall o3:int. forall o4:int. forall o5:int.
  forall o6:t. forall o7:t. forall o8:t. forall o9:t. forall o10:t.
  forall o11:t. forall o12:t. forall o13:int. forall o14:int. forall o15:int.
  forall temp___598:int. forall temp___597:int. forall o16:t. forall o17:t.
  forall o18:t. forall o19:t. forall temp___599:t. forall o20:t.
  forall o21:t. forall o22:t. forall o23:t. forall o24:t. forall o25:t.
  forall o26:t. forall o27:t. forall o28:bool. forall g1:int.
  forall result:int. forall letter1:int. forall result1:int. forall a1:int.
  forall result2:int. forall b1:int. forall result3:int. forall c1:int.
  forall result4:int. forall d1:int. forall result5:int. forall e1:int.
  forall result6:int. forall ch1:int. forall result7:t. forall x1:t.
  forall result8:int. forall a2:int. forall result9:int. forall d2:int.
  forall result10:int. forall b2:int. forall result11:int. forall e2:int.
  forall result12:int. forall f1:int. forall result13:int. forall e3:int.
  forall result14:int. forall f2:int. forall result15:int. forall f3:int.
  forall result16:int. forall f4:int. forall result17:int. forall f5:int.
  forall result18:int__ref. forall g2:int. forall result19:int__ref.
  forall g3:int. forall result20:int__ref. forall g4:int.
  forall result21:bool__ref. forall success1:bool. forall result22:int__ref.
  forall h1:int. forall result23:int__ref. forall h2:int.
  forall result24:int__ref. forall h3:int. forall result25:int__ref.
  forall h4:int. forall result26:int__ref. forall h5:int.
  forall result27:bool__ref. forall success2:bool. forall result28:int__ref.
  forall c2:int. forall result29:int__ref. forall c3:int.
  forall result30:int__ref. forall c4:int. forall result31:int__ref.
  forall c5:int. forall result32:int__ref. forall c6:int.
  forall result33:int__ref. forall c7:int. forall result34:int__ref.
  forall c8:int. forall result35:t__ref. forall y1:t. forall result36:t__ref.
  forall y2:t. forall result37:t__ref. forall y3:t. forall result38:bool.
  forall result39:bool. forall result40:bool. forall result41:bool.
  forall result42:bool. forall result43:int__ref. forall value1:int.
  forall result44:int__ref. forall sum1:int. forall value2:int.
  forall sum2:int. forall ada__integer_text_io__get__2__item:int.
  forall result45:int__ref. forall value3:int. forall sum3:int__ref.
  forall sum4:int. forall value4:int__ref. forall sum5:int__ref.
  forall value5:int. forall sum6:int. forall value6:int__ref.
  forall sum7:int__ref. forall value7:int. forall sum8:int.
  forall result46:t__ref. forall approx1:t. forall result47:bool.
  forall approx2:t. forall result48:t__ref. forall approx3:t.
  forall result49:bool. forall approx4:t__ref. forall approx5:t.
  forall approx6:t__ref. forall approx7:t. forall result50:int__ref.
  forall count2:int. forall result51:int__ref. forall count3:int.
  forall result52:int__ref. forall count4:int. forall result53:int__ref.
  forall count5:int. forall result54:int__ref. forall count6:int.
  forall result55:int__ref. forall count7:int. forall result56:int__ref.
  forall count8:int. forall result57:int__ref. forall count9:int.
  forall result58:int__ref. forall a3:int. forall result59:int__ref.
  forall b3:int. (in_range4(default_width) -> (in_range5(default_base) ->
  ((((- 2147483648) <= 2147483647) -> in_range2(a)) ->
  ((((- 2147483648) <= 2147483647) -> in_range2(b)) ->
  ((((- 2147483648) <= 2147483647) -> in_range2(c)) ->
  ((((- 2147483648) <= 2147483647) -> in_range2(d)) ->
  ((((- 2147483648) <= 2147483647) -> in_range2(e)) ->
  ((((- 2147483648) <= 2147483647) -> in_range2(f)) ->
  ((((- 2147483648) <= 2147483647) -> in_range2(g)) ->
  ((((- 2147483648) <= 2147483647) -> in_range2(h)) -> (((0 <= 255) ->
  in_range3(ch)) -> ((((- 2147483648) <= 2147483647) ->
  in_range2(temperature)) -> ((((- 2147483648) <= 2147483647) ->
  in_range2(valve_setting)) -> ((((- 2147483648) <= 2147483647) ->
  in_range2(value)) -> ((((- 2147483648) <= 2147483647) -> in_range2(sum)) ->
  ((le(neg(fliteral4), fliteral4) -> tqtisFinite(approx)) ->
  ((le(neg(fliteral4), fliteral4) -> tqtisFinite(x)) -> ((le(neg(fliteral4),
  fliteral4) -> tqtisFinite(y)) -> (tqtisFinite(tolerance) ->
  (((result = letter) and (letter1 = 81)) -> (in_range7(letter1) ->
  (((result1 = a) and (a1 = 1)) -> (((result2 = b) and (b1 = 2)) ->
  (((result3 = c) and (c1 = 3)) -> (((result4 = d) and (d1 = 3)) ->
  (((result5 = e) and (e1 = 4)) -> (((result6 = ch) and (ch1 = 68)) ->
  (((result7 = x) and (x1 = fliteral5)) -> ((((a1 <  0) and
  ((((o = (-a1)) and in_range2((-a1))) and ((result8 = a1) and (a2 = o))) and
  ((result9 = d1) and (d2 = 1)))) or ((not (a1 <  0)) and ((d2 = d1) and
  (a2 = a1)))) -> (((((1 <= a2) and (a2 <= 12)) and ((result10 = b1) and
  (b2 = 17))) or ((not ((1 <= a2) and (a2 <= 12))) and (b2 = b1))) ->
  ((((b2 <  a2) and (((result11 = e1) and (e2 = 1)) and ((result12 = f) and
  (f1 = a2)))) or ((not (b2 <  a2)) and ((((result13 = e1) and (e3 = 2)) and
  ((result14 = f) and (f2 = b2))) and ((f1 = f2) and (e2 = e3))))) ->
  ((((a2 = b2) and ((result15 = f1) and (f3 = 3))) or ((not (a2 = b2)) and
  ((((b2 <  a2) and ((result16 = f1) and (f4 = 4))) or ((not (b2 <  a2)) and
  (((result17 = f1) and (f5 = 5)) and (f4 = f5)))) and (f3 = f4)))) ->
  (((((b2 <  a2) and (c1 <  a2)) and ((result18 = { int__content = g }) and
  (g2 = 6))) or ((not ((b2 <  a2) and (c1 <  a2))) and (((((a2 <  b2) and
  (c1 <  b2)) and ((result19 = { int__content = g }) and (g3 = 7))) or
  ((not ((a2 <  b2) and (c1 <  b2))) and (((((a2 <  c1) and (b2 <  c1)) and
  ((result20 = { int__content = g }) and (g4 = 8))) or ((not ((a2 <  c1) and
  (b2 <  c1))) and ((g4 = g) and (g4 = g1)))) and (g3 = g4)))) and
  (g2 = g3)))) -> (((result21 = { bool__content = success }) and
  (success1 = of_int1(1))) -> (((((97 <= ch1) and (ch1 <= 122)) and
  (((result22 = { int__content = h }) and (h1 = 1)) and
  (success2 = success1))) or ((not ((97 <= ch1) and (ch1 <= 122))) and
  (((((65 <= ch1) and (ch1 <= 90)) and (((result23 = { int__content = h
  }) and (h2 = 2)) and (success2 = success1))) or ((not ((65 <= ch1) and
  (ch1 <= 90))) and (((((48 <= ch1) and (ch1 <= 57)) and (((result24 = {
  int__content = h }) and (h3 = 3)) and (success2 = success1))) or
  ((not ((48 <= ch1) and (ch1 <= 57))) and (((((not (ch1 = 46)) ->
  ((not (ch1 = 33)) -> (ch1 = 63))) and (((result25 = { int__content = h
  }) and (h4 = 4)) and (success2 = success1))) or ((not ((not (ch1 = 46)) ->
  ((not (ch1 = 33)) -> (ch1 = 63)))) and ((((result26 = { int__content = h
  }) and (h5 = 5)) and ((result27 = { bool__content = success1 }) and
  (success2 = of_int1(0)))) and (h4 = h5)))) and (h3 = h4)))) and
  (h2 = h3)))) and (h1 = h2)))) -> ((((b2 <  a2) and (((o1 = (d2 + 5)) and
  in_range2((d2 + 5))) and ((result28 = { int__content = c1 }) and
  (c2 = o1)))) or ((not (b2 <  a2)) and (((result29 = { int__content = c1
  }) and (c3 = comp_div(f3,2))) and (c2 = c3)))) -> (((((b2 <  a2) and
  ((o2 = (d2 + 5)) and in_range2((d2 + 5)))) or ((not (b2 <  a2)) and
  (o2 = comp_div(f3,2)))) and ((result30 = { int__content = c2 }) and
  (c4 = o2))) -> ((((b2 <  a2) and (((o3 = (d2 + 5)) and
  in_range2((d2 + 5))) and ((result31 = { int__content = c4 }) and
  (c5 = o3)))) or ((not (b2 <  a2)) and ((((a2 = b2) and
  (((o4 = (2 * a2)) and in_range2((2 * a2))) and ((result32 = {
  int__content = c4 }) and (c6 = o4)))) or ((not (a2 = b2)) and
  (((result33 = { int__content = c4 }) and (c7 = comp_div(f3,2))) and
  (c6 = c7)))) and (c5 = c6)))) -> (((((b2 <  a2) and ((o5 = (d2 + 5)) and
  in_range2((d2 + 5)))) or ((not (b2 <  a2)) and (((a2 = b2) and
  ((o5 = (2 * a2)) and in_range2((2 * a2)))) or ((not (a2 = b2)) and
  (o5 = comp_div(f3,2)))))) and ((result34 = { int__content = c5 }) and
  (c8 = o5))) -> (((le(fliteral1, x1) and (((o6 = sqrt2(x1)) and
  (tqtisFinite(o6) and (le(fliteral1, o6) and ((eq(x1, fliteral1) -> eq(o6,
  fliteral1)) and ((eq(x1, fliteral) -> eq(o6, fliteral)) and (le(fliteral2,
  x1) -> lt(fliteral1, o6))))))) and ((result35 = { t__content = y }) and
  (y1 = o6)))) or ((not le(fliteral1, x1)) and ((((((o7 = mul(RNE, fliteral6,
  x1)) and tqtisFinite(mul(RNE, fliteral6, x1))) and (o8 = neg(o7))) and
  ((o9 = sqrt2(o8)) and (tqtisFinite(o9) and (le(fliteral1, o9) and ((eq(o8,
  fliteral1) -> eq(o9, fliteral1)) and ((eq(o8, fliteral) -> eq(o9,
  fliteral)) and (le(fliteral2, o8) -> lt(fliteral1, o9)))))))) and
  ((result36 = { t__content = y }) and (y2 = o9))) and (y1 = y2)))) ->
  (((((le(fliteral1, x1) and (o11 = x1)) or ((not le(fliteral1, x1)) and
  (((o10 = mul(RNE, fliteral6, x1)) and tqtisFinite(mul(RNE, fliteral6,
  x1))) and (o11 = neg(o10))))) and ((o12 = sqrt2(o11)) and
  (tqtisFinite(o12) and (le(fliteral1, o12) and ((eq(o11, fliteral1) ->
  eq(o12, fliteral1)) and ((eq(o11, fliteral) -> eq(o12, fliteral)) and
  (le(fliteral2, o11) -> lt(fliteral1, o12)))))))) and ((result37 = {
  t__content = y1 }) and (y3 = o12))) -> (((((o13 = (c8 - d2)) and
  in_range2((c8 - d2))) and (((o13 = 0) and (result39 = true)) or
  ((not (o13 = 0)) and (result39 = false)))) and (((result39 = true) and
  (((2 <  e2) and (result38 = true)) or ((not (2 <  e2)) and
  (result38 = false)))) or ((not (result39 = true)) and
  (result38 = of_int1(1))))) -> (((((o14 = (c8 - d2)) and
  in_range2((c8 - d2))) and (((o14 = 0) and (result41 = true)) or
  ((not (o14 = 0)) and (result41 = false)))) and (((result41 = true) and
  (((2 <  e2) and (result40 = true)) or ((not (2 <  e2)) and
  (result40 = false)))) or ((not (result41 = true)) and
  (result40 = of_int1(1))))) -> ((((a2 <  0) and (((b2 <  0) and
  (result42 = true)) or ((not (b2 <  0)) and (result42 = false)))) or
  ((not (a2 <  0)) and (result42 = of_int1(1)))) ->
  ((((((not (letter1 = 65)) -> ((not (letter1 = 69)) ->
  ((not (letter1 = 73)) -> ((not (letter1 = 76)) -> ((not (letter1 = 85)) ->
  ((not (letter1 = 78)) -> ((not (letter1 = 79)) -> ((not (letter1 = 82)) ->
  ((not (letter1 = 83)) -> (letter1 = 84)))))))))) and (o15 = 1)) or
  ((not ((not (letter1 = 65)) -> ((not (letter1 = 69)) ->
  ((not (letter1 = 73)) -> ((not (letter1 = 76)) -> ((not (letter1 = 85)) ->
  ((not (letter1 = 78)) -> ((not (letter1 = 79)) -> ((not (letter1 = 82)) ->
  ((not (letter1 = 83)) -> (letter1 = 84))))))))))) and
  ((((not (letter1 = 68)) -> (letter1 = 71)) and (o15 = 2)) or
  ((not ((not (letter1 = 68)) -> (letter1 = 71))) and
  ((((not (letter1 = 66)) -> ((not (letter1 = 67)) ->
  ((not (letter1 = 77)) -> (letter1 = 80)))) and (o15 = 3)) or
  ((not ((not (letter1 = 66)) -> ((not (letter1 = 67)) ->
  ((not (letter1 = 77)) -> (letter1 = 80))))) and ((((not (letter1 = 70)) ->
  ((not (letter1 = 72)) -> ((not (letter1 = 86)) -> ((not (letter1 = 87)) ->
  (letter1 = 89))))) and (o15 = 4)) or ((not ((not (letter1 = 70)) ->
  ((not (letter1 = 72)) -> ((not (letter1 = 86)) -> ((not (letter1 = 87)) ->
  (letter1 = 89)))))) and (((letter1 = 75) and (o15 = 5)) or
  ((not (letter1 = 75)) and ((((not (letter1 = 74)) -> (letter1 = 88)) and
  (o15 = 8)) or ((not ((not (letter1 = 74)) -> (letter1 = 88))) and
  (o15 = 10))))))))))))) and ((result43 = { int__content = value }) and
  (value1 = o15))) -> (((result44 = { int__content = sum }) and
  (sum1 = 0)) -> (((((temp___598 = sum1) and ((temp___597 = value1) and
  (((((- 2147483648) <= 2147483647) -> in_range2(value2)) and
  (((- 2147483648) <= 2147483647) -> in_range2(sum2))) and
  ((in_range6(ada__integer_text_io__get__2__item) and ((result45 = {
  int__content = value2 }) and
  (value3 = ada__integer_text_io__get__2__item))) and (((sum3 = {
  int__content = sum2 }) and (sum4 = sum2)) and (value3 <  0)))))) and
  (((sum5 = sum3) and (value4 = { int__content = value3 })) and
  ((sum6 = sum4) and (value5 = value3)))) and (((sum7 = sum5) and
  (value6 = value4)) and ((sum8 = sum6) and (value7 = value5)))) ->
  (((result46 = { t__content = approx }) and (approx1 = div(RNE, x1,
  fliteral6))) -> ((((((((o16 = mul(RNE, approx1, approx1)) and
  tqtisFinite(mul(RNE, approx1, approx1))) and (o17 = sub(RNE, x1, o16))) and
  ((o18 = o17) and tqtisFinite(o17))) and (o19 = abs2(o18))) and
  ((lt(fliteral3, o19) and (result47 = true)) or ((not lt(fliteral3,
  o19)) and (result47 = false)))) and (((result47 = true) and
  ((((temp___599 = approx1) and (((le(neg(fliteral4), fliteral4) ->
  tqtisFinite(approx2)) and lt(fliteral3, abs2(sub(RNE, x1, mul(RNE, approx2,
  approx2))))) and (((((((o20 = div(RNE, x1, approx2)) and
  tqtisFinite(div(RNE, x1, approx2))) and (o21 = add(RNE, approx2, o20))) and
  ((o22 = o21) and tqtisFinite(o21))) and (o23 = mul(RNE, fliteral7,
  o22))) and ((result48 = { t__content = approx2 }) and (approx3 = o23))) and
  ((((((((o24 = mul(RNE, approx3, approx3)) and tqtisFinite(mul(RNE, approx3,
  approx3))) and (o25 = sub(RNE, x1, o24))) and ((o26 = o25) and
  tqtisFinite(o25))) and (o27 = abs2(o26))) and ((lt(fliteral3, o27) and
  (o28 = true)) or ((not lt(fliteral3, o27)) and (o28 = false)))) and
  (((not (o28 = true)) and (result49 = true)) or ((o28 = true) and
  (result49 = false)))) and (result49 = true))))) and ((approx4 = {
  t__content = approx3 }) and (approx5 = approx3))) and
  ((approx6 = approx4) and (approx7 = approx5)))) or
  ((not (result47 = true)) and ((approx6 = { t__content = approx1 }) and
  (approx7 = approx1))))) -> ((((result50 = { int__content = count }) and
  (count2 = 5)) and (((result51 = { int__content = count2 }) and
  (count3 = 6)) and (((result52 = { int__content = count3 }) and
  (count4 = 7)) and ((result53 = { int__content = count4 }) and
  (count5 = 8))))) -> ((((result54 = { int__content = count1 }) and
  (count6 = 8)) and (((result55 = { int__content = count6 }) and
  (count7 = 7)) and (((result56 = { int__content = count7 }) and
  (count8 = 6)) and ((result57 = { int__content = count8 }) and
  (count9 = 5))))) -> (((result58 = { int__content = a2 }) and (a3 = 9)) ->
  (((result59 = { int__content = b2 }) and (b3 = 2)) -> (((a3 = r4b) and
  in_range2(r4b)) -> (((b3 = r5b) and in_range2(r5b)) -> ((r4b <= r5b) ->
  ((- 2147483648) <= r4b))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
