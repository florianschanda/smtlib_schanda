(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type natural

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep : natural -> int

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type integer

predicate in_range2(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : integer, integer -> bool

logic dummy1 : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map__ref = { map__content : (int,natural) farray
}

logic slide : (int,natural) farray, int, int -> (int,natural) farray

axiom slide_eq :
  (forall a:(int,natural) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,natural) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> (int,natural) farray

axiom concat_def :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : natural, int -> (int,natural) farray

axiom singleton_def :
  (forall v:natural.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq4 : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> bool

axiom bool_eq_def3 :
  (forall a:(int,natural) farray. forall a__first:int. forall a__last:int.
  forall b:(int,natural) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq4(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq4(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq4(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

predicate dynamic_property(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : integer, integer -> bool

logic dummy2 : integer

type t5s__ref = { t5s__content : integer
}

function t5s__ref___projection(a: t5s__ref) : integer = (a).t5s__content

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range2(f) -> (in_range2(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property1(range_first: int, range_last: int, low: int,
  high: int) = (in_range2(low) and (in_range2(high) and ((low <= high) ->
  (dynamic_property(range_first, range_last, low) and
  dynamic_property(range_first, range_last, high)))))

type us_t = { elts : (int,natural) farray; rt : t
}

function to_array(a: us_t) : (int,natural) farray = (a).elts

function of_array(a: (int,natural) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,natural) farray -> int

logic value__component__size : int

logic object__component__size : (int,natural) farray -> int

logic value__alignment : int

logic object__alignment : (int,natural) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,natural) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,natural) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,natural) farray. (0 <= object__alignment(a)))

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq4((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,natural) farray

logic dummy4 : t

type t6s__ref = { t6s__content : us_t
}

function t6s__ref___projection(a: t6s__ref) : us_t = (a).t6s__content

type us_split_discrs = { rec__rec__sub_arr__f : natural; rec__rec__sub_arr__l
: natural
}

function us_split_discrs_4__projection(a: us_split_discrs) : natural =
  (a).rec__rec__sub_arr__f

function us_split_discrs_5__projection(a: us_split_discrs) : natural =
  (a).rec__rec__sub_arr__l

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref_4__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__rec__sub_arr__content : us_t
}

function us_split_fields_Content__projection(a: us_split_fields) : us_t =
  (a).rec__rec__sub_arr__content

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref_4__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep_7__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep_8__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq7 : us_rep, us_rep -> bool

axiom bool_eq_def5 :
  (forall a:us_rep. forall b:us_rep [bool_eq7(a, b)].
  (((((to_rep(((a).us_split_discrs1).rec__rec__sub_arr__f) = to_rep(((b).us_split_discrs1).rec__rec__sub_arr__f)) and
  (to_rep(((a).us_split_discrs1).rec__rec__sub_arr__l) = to_rep(((b).us_split_discrs1).rec__rec__sub_arr__l))) and
  (bool_eq6(((a).us_split_fields1).rec__rec__sub_arr__content,
  ((b).us_split_fields1).rec__rec__sub_arr__content) = true)) -> (bool_eq7(a,
  b) = true)) and
  ((not (((to_rep(((a).us_split_discrs1).rec__rec__sub_arr__f) = to_rep(((b).us_split_discrs1).rec__rec__sub_arr__f)) and
  (to_rep(((a).us_split_discrs1).rec__rec__sub_arr__l) = to_rep(((b).us_split_discrs1).rec__rec__sub_arr__l))) and
  (bool_eq6(((a).us_split_fields1).rec__rec__sub_arr__content,
  ((b).us_split_fields1).rec__rec__sub_arr__content) = true))) ->
  (bool_eq7(a, b) = false))))

logic user_eq4 : us_rep, us_rep -> bool

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:natural. forall a1:natural. forall a2:(int,natural) farray.
  forall a3:t. (0 <= object__size1({ us_split_discrs1 = {
  rec__rec__sub_arr__f = a; rec__rec__sub_arr__l = a1 }; us_split_fields1 = {
  rec__rec__sub_arr__content = { elts = a2; rt = a3 } } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:natural. forall a1:natural. forall a2:(int,natural) farray.
  forall a3:t. (0 <= object__alignment1({ us_split_discrs1 = {
  rec__rec__sub_arr__f = a; rec__rec__sub_arr__l = a1 }; us_split_fields1 = {
  rec__rec__sub_arr__content = { elts = a2; rt = a3 } } })))

logic rec__sub_arr__f__first__bit : int

logic rec__sub_arr__f__last__bit : int

logic rec__sub_arr__f__position : int

axiom rec__sub_arr__f__first__bit_axiom : (0 <= rec__sub_arr__f__first__bit)

axiom rec__sub_arr__f__last__bit_axiom :
  (rec__sub_arr__f__first__bit <  rec__sub_arr__f__last__bit)

axiom rec__sub_arr__f__position_axiom : (0 <= rec__sub_arr__f__position)

logic rec__sub_arr__l__first__bit : int

logic rec__sub_arr__l__last__bit : int

logic rec__sub_arr__l__position : int

axiom rec__sub_arr__l__first__bit_axiom : (0 <= rec__sub_arr__l__first__bit)

axiom rec__sub_arr__l__last__bit_axiom :
  (rec__sub_arr__l__first__bit <  rec__sub_arr__l__last__bit)

axiom rec__sub_arr__l__position_axiom : (0 <= rec__sub_arr__l__position)

logic rec__sub_arr__content__first__bit : int

logic rec__sub_arr__content__last__bit : int

logic rec__sub_arr__content__position : int

axiom rec__sub_arr__content__first__bit_axiom :
  (0 <= rec__sub_arr__content__first__bit)

axiom rec__sub_arr__content__last__bit_axiom :
  (rec__sub_arr__content__first__bit <  rec__sub_arr__content__last__bit)

axiom rec__sub_arr__content__position_axiom :
  (0 <= rec__sub_arr__content__position)

logic dummy5 : natural

logic dummy6 : natural

logic dummy7 : (int,natural) farray

logic dummy8 : t

type sub_arr__ref = { sub_arr__content : us_rep
}

function sub_arr__ref___projection(a: sub_arr__ref) : us_rep =
  (a).sub_arr__content

logic f : int

logic attr__ATTRIBUTE_ADDRESS : int

logic l : int

logic attr__ATTRIBUTE_ADDRESS1 : int

predicate dynamic_property2(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq5 : integer, integer -> bool

logic dummy9 : integer

type tT8bP1__ref = { tT8bP1__content : integer
}

function tT8bP1__ref___projection(a: tT8bP1__ref) : integer =
  (a).tT8bP1__content

type t1

logic first2 : t1 -> integer

logic last2 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def1 :
  (forall f1:int. forall l1:int [mk1(f1, l1)]. (in_range2(f1) ->
  (in_range2(l1) -> ((to_rep1(first2(mk1(f1, l1))) = f1) and
  (to_rep1(last2(mk1(f1, l1))) = l1)))))

predicate dynamic_property3(range_first: int, range_last: int, low: int,
  high: int) = (in_range2(low) and (in_range2(high) and ((low <= high) ->
  (dynamic_property2(range_first, range_last, low) and
  dynamic_property2(range_first, range_last, high)))))

type us_t1 = { elts1 : (int,natural) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,natural) farray = (a).elts1

function of_array1(a: (int,natural) farray, f1: int, l1: int) : us_t1 = {
  elts1 = a; rt1 = mk1(f1, l1) }

function first3(a: us_t1) : int = to_rep1(first2((a).rt1))

function last3(a: us_t1) : int = to_rep1(last2((a).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a:us_t1 [length1(a)]. (((first3(a) <= last3(a)) ->
  (length1(a) = ((last3(a) - first3(a)) + 1))) and
  ((not (first3(a) <= last3(a))) -> (length1(a) = 0))))

logic value__size2 : int

logic object__size2 : (int,natural) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,natural) farray -> int

logic value__alignment2 : int

logic object__alignment2 : (int,natural) farray -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,natural) farray. (0 <= object__size2(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,natural) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,natural) farray. (0 <= object__alignment2(a)))

function bool_eq9(x: us_t1, y: us_t1) : bool = bool_eq4((x).elts1,
  to_rep1(first2((x).rt1)), to_rep1(last2((x).rt1)), (y).elts1,
  to_rep1(first2((y).rt1)), to_rep1(last2((y).rt1)))

logic user_eq6 : us_t1, us_t1 -> bool

logic dummy10 : (int,natural) farray

logic dummy11 : t1

type t8b__ref = { t8b__content : us_t1
}

function t8b__ref___projection(a: t8b__ref) : us_t1 = (a).t8b__content

type us_split_fields2 = { rec__rec__sub_arr__content1 : us_t1
}

function us_split_fields_Content3__projection(a: us_split_fields2) : us_t1 =
  (a).rec__rec__sub_arr__content1

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref_8__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_discrs2 : us_split_discrs; us_split_fields3 :
us_split_fields2
}

function us_rep_15__projection(a: us_rep1) : us_split_discrs =
  (a).us_split_discrs2

function us_rep_16__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function to_base(a: us_rep1) : us_rep = { us_split_discrs1 =
  (a).us_split_discrs2; us_split_fields1 = { rec__rec__sub_arr__content =
  of_array(to_array1(((a).us_split_fields3).rec__rec__sub_arr__content1),
  first3(((a).us_split_fields3).rec__rec__sub_arr__content1),
  last3(((a).us_split_fields3).rec__rec__sub_arr__content1)) } }

function of_base(r: us_rep) : us_rep1 = { us_split_discrs2 =
  (r).us_split_discrs1; us_split_fields3 = { rec__rec__sub_arr__content1 =
  of_array1(to_array(((r).us_split_fields1).rec__rec__sub_arr__content),
  first1(((r).us_split_fields1).rec__rec__sub_arr__content),
  last1(((r).us_split_fields1).rec__rec__sub_arr__content)) } }

logic bool_eq10 : us_rep1, us_rep1 -> bool

axiom bool_eq_def7 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq10(a, b)].
  (((((to_rep(((a).us_split_discrs2).rec__rec__sub_arr__f) = to_rep(((b).us_split_discrs2).rec__rec__sub_arr__f)) and
  (to_rep(((a).us_split_discrs2).rec__rec__sub_arr__l) = to_rep(((b).us_split_discrs2).rec__rec__sub_arr__l))) and
  (bool_eq9(((a).us_split_fields3).rec__rec__sub_arr__content1,
  ((b).us_split_fields3).rec__rec__sub_arr__content1) = true)) ->
  (bool_eq10(a, b) = true)) and
  ((not (((to_rep(((a).us_split_discrs2).rec__rec__sub_arr__f) = to_rep(((b).us_split_discrs2).rec__rec__sub_arr__f)) and
  (to_rep(((a).us_split_discrs2).rec__rec__sub_arr__l) = to_rep(((b).us_split_discrs2).rec__rec__sub_arr__l))) and
  (bool_eq9(((a).us_split_fields3).rec__rec__sub_arr__content1,
  ((b).us_split_fields3).rec__rec__sub_arr__content1) = true))) ->
  (bool_eq10(a, b) = false))))

logic user_eq7 : us_rep1, us_rep1 -> bool

predicate in_range3(rec__rec__sub_arr__f1: int, rec__rec__sub_arr__l1: int,
  a: us_rep) =
  ((rec__rec__sub_arr__f1 = to_rep(((a).us_split_discrs1).rec__rec__sub_arr__f)) and
  (rec__rec__sub_arr__l1 = to_rep(((a).us_split_discrs1).rec__rec__sub_arr__l)))

logic value__size3 : int

logic object__size3 : us_rep1 -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep1 -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:natural. forall a1:natural. forall a2:(int,natural) farray.
  forall a3:t1. (0 <= object__size3({ us_split_discrs2 = {
  rec__rec__sub_arr__f = a; rec__rec__sub_arr__l = a1 }; us_split_fields3 = {
  rec__rec__sub_arr__content1 = { elts1 = a2; rt1 = a3 } } })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:natural. forall a1:natural. forall a2:(int,natural) farray.
  forall a3:t1. (0 <= object__alignment3({ us_split_discrs2 = {
  rec__rec__sub_arr__f = a; rec__rec__sub_arr__l = a1 }; us_split_fields3 = {
  rec__rec__sub_arr__content1 = { elts1 = a2; rt1 = a3 } } })))

logic rec__sub_arr__f__first__bit1 : int

logic rec__sub_arr__f__last__bit1 : int

logic rec__sub_arr__f__position1 : int

axiom rec__sub_arr__f__first__bit_axiom1 :
  (0 <= rec__sub_arr__f__first__bit1)

axiom rec__sub_arr__f__last__bit_axiom1 :
  (rec__sub_arr__f__first__bit1 <  rec__sub_arr__f__last__bit1)

axiom rec__sub_arr__f__position_axiom1 : (0 <= rec__sub_arr__f__position1)

logic rec__sub_arr__l__first__bit1 : int

logic rec__sub_arr__l__last__bit1 : int

logic rec__sub_arr__l__position1 : int

axiom rec__sub_arr__l__first__bit_axiom1 :
  (0 <= rec__sub_arr__l__first__bit1)

axiom rec__sub_arr__l__last__bit_axiom1 :
  (rec__sub_arr__l__first__bit1 <  rec__sub_arr__l__last__bit1)

axiom rec__sub_arr__l__position_axiom1 : (0 <= rec__sub_arr__l__position1)

logic rec__sub_arr__content__first__bit1 : int

logic rec__sub_arr__content__last__bit1 : int

logic rec__sub_arr__content__position1 : int

axiom rec__sub_arr__content__first__bit_axiom1 :
  (0 <= rec__sub_arr__content__first__bit1)

axiom rec__sub_arr__content__last__bit_axiom1 :
  (rec__sub_arr__content__first__bit1 <  rec__sub_arr__content__last__bit1)

axiom rec__sub_arr__content__position_axiom1 :
  (0 <= rec__sub_arr__content__position1)

logic dummy12 : natural

logic dummy13 : natural

logic dummy14 : (int,natural) farray

logic dummy15 : t1

type tzS__ref = { tzS__content : us_rep1
}

function tzS__ref_3__projection(a: tzS__ref) : us_rep1 = (a).tzS__content

logic z__split_discrs : natural

logic z__split_discrs1 : natural

logic attr__ATTRIBUTE_ADDRESS2 : int

 (* File "rec.ads", line 30, characters 0-0 *)
goal WP_parameter_def : (in_range1(f) -> (in_range1(l) -> in_range1(l)))
