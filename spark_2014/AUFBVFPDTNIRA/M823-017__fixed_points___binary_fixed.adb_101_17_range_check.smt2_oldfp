;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort t 0)

(declare-fun tqtreal (t) Real)

(declare-fun tqtisFinite (t) Bool)

;; t'axiom
  (assert
  (forall ((x t))
  (=> (tqtisFinite x)
  (and (<= (- (* 16777215.0 20282409603651670423947251286016.0)) (tqtreal x))
  (<= (tqtreal x) (* 16777215.0 20282409603651670423947251286016.0))))))

(declare-fun pow2 (Int) Int)

(declare-datatypes () ((mode (RNE1) (RNA1) (RTP1) (RTN1) (RTZ1))))
(define-fun to_nearest ((m mode)) Bool (or (= m RNE1) (= m RNA1)))

(declare-const zeroF t)

(declare-fun add (mode t t) t)

(declare-fun sub (mode t t) t)

(declare-fun mul (mode t t) t)

(declare-fun div1 (mode t t) t)

(declare-fun abs1 (t) t)

(declare-fun neg (t) t)

(declare-fun fma (mode t t t) t)

(declare-fun sqrt (mode t) t)

(declare-fun roundToIntegral (mode t) t)

(declare-fun min (t t) t)

(declare-fun max (t t) t)

(declare-fun le (t t) Bool)

(declare-fun lt (t t) Bool)

(declare-fun eq (t t) Bool)

(declare-fun is_normal (t) Bool)

(declare-fun is_subnormal (t) Bool)

(declare-fun is_zero (t) Bool)

(declare-fun is_infinite (t) Bool)

(declare-fun is_nan (t) Bool)

(declare-fun is_positive (t) Bool)

(declare-fun is_negative (t) Bool)

(define-fun is_plus_infinity ((x t)) Bool (and (is_infinite x) (is_positive
                                          x)))

(define-fun is_minus_infinity ((x t)) Bool (and (is_infinite x) (is_negative
                                           x)))

(define-fun is_plus_zero ((x t)) Bool (and (is_zero x) (is_positive x)))

(define-fun is_minus_zero ((x t)) Bool (and (is_zero x) (is_negative x)))

(define-fun is_not_nan ((x t)) Bool (or (tqtisFinite x) (is_infinite x)))

;; is_not_nan
  (assert (forall ((x t)) (= (is_not_nan x) (not (is_nan x)))))

;; is_not_finite
  (assert
  (forall ((x t)) (= (not (tqtisFinite x)) (or (is_infinite x) (is_nan x)))))

;; zeroF_is_positive
  (assert (is_positive zeroF))

;; zeroF_is_zero
  (assert (is_zero zeroF))

;; zero_to_real
  (assert
  (forall ((x t))
  (! (= (is_zero x) (and (tqtisFinite x) (= (tqtreal x) 0.0))) :pattern ((is_zero
  x)) )))

(declare-fun of_int (mode Int) t)

(declare-fun to_int1 (mode t) Int)

;; zero_of_int
  (assert (forall ((m mode)) (= zeroF (of_int m 0))))

(declare-fun round (mode Real) Real)

(declare-const max_int Int)

;; max_real_int
  (assert
  (= (* 33554430.0 10141204801825835211973625643008.0) (to_real max_int)))

(define-fun in_range ((x Real)) Bool (and
                                     (<= (- (* 33554430.0 10141204801825835211973625643008.0)) x)
                                     (<= x (* 33554430.0 10141204801825835211973625643008.0))))

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

;; is_finite
  (assert (forall ((x t)) (=> (tqtisFinite x) (in_range (tqtreal x)))))

(define-fun no_overflow ((m mode) (x Real)) Bool (in_range (round m x)))

;; Bounded_real_no_overflow
  (assert (forall ((m mode) (x Real)) (=> (in_range x) (no_overflow m x))))

;; Round_monotonic
  (assert
  (forall ((m mode) (x Real) (y Real))
  (=> (<= x y) (<= (round m x) (round m y)))))

;; Round_idempotent
  (assert
  (forall ((m1 mode) (m2 mode) (x Real))
  (= (round m1 (round m2 x)) (round m2 x))))

;; Round_to_real
  (assert
  (forall ((m mode) (x t))
  (=> (tqtisFinite x) (= (round m (tqtreal x)) (tqtreal x)))))

;; Round_down_le
  (assert (forall ((x Real)) (<= (round RTN1 x) x)))

;; Round_up_ge
  (assert (forall ((x Real)) (<= x (round RTP1 x))))

;; Round_down_neg
  (assert (forall ((x Real)) (= (round RTN1 (- x)) (- (round RTP1 x)))))

;; Round_up_neg
  (assert (forall ((x Real)) (= (round RTP1 (- x)) (- (round RTN1 x)))))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

;; Exact_rounding_for_integers
  (assert
  (forall ((m mode) (i Int))
  (=> (in_safe_int_range i) (= (round m (to_real i)) (to_real i)))))

(define-fun same_sign ((x t)
  (y t)) Bool (or (and (is_positive x) (is_positive y))
              (and (is_negative x) (is_negative y))))

(define-fun diff_sign ((x t)
  (y t)) Bool (or (and (is_positive x) (is_negative y))
              (and (is_negative x) (is_positive y))))

;; feq_eq
  (assert
  (forall ((x t) (y t))
  (=> (tqtisFinite x)
  (=> (tqtisFinite y) (=> (not (is_zero x)) (=> (eq x y) (= x y)))))))

;; eq_feq
  (assert
  (forall ((x t) (y t))
  (=> (tqtisFinite x) (=> (tqtisFinite y) (=> (= x y) (eq x y))))))

;; eq_refl
  (assert (forall ((x t)) (=> (tqtisFinite x) (eq x x))))

;; eq_sym
  (assert (forall ((x t) (y t)) (=> (eq x y) (eq y x))))

;; eq_trans
  (assert (forall ((x t) (y t) (z t)) (=> (eq x y) (=> (eq y z) (eq x z)))))

;; eq_zero
  (assert (eq zeroF (neg zeroF)))

;; eq_to_real_finite
  (assert
  (forall ((x t) (y t))
  (=> (and (tqtisFinite x) (tqtisFinite y))
  (= (eq x y) (= (tqtreal x) (tqtreal y))))))

;; eq_special
  (assert
  (forall ((x t) (y t))
  (=> (eq x y)
  (and (is_not_nan x)
  (and (is_not_nan y)
  (or (and (tqtisFinite x) (tqtisFinite y))
  (and (is_infinite x) (and (is_infinite y) (same_sign x y)))))))))

;; lt_finite
  (assert
  (forall ((x t) (y t))
  (! (=> (and (tqtisFinite x) (tqtisFinite y))
     (= (lt x y) (< (tqtreal x) (tqtreal y)))) :pattern ((lt
  x y)) )))

;; le_finite
  (assert
  (forall ((x t) (y t))
  (! (=> (and (tqtisFinite x) (tqtisFinite y))
     (= (le x y) (<= (tqtreal x) (tqtreal y)))) :pattern ((le
  x y)) )))

;; le_lt_trans
  (assert (forall ((x t) (y t) (z t)) (=> (and (le x y) (lt y z)) (lt x z))))

;; lt_le_trans
  (assert (forall ((x t) (y t) (z t)) (=> (and (lt x y) (le y z)) (lt x z))))

;; le_ge_asym
  (assert (forall ((x t) (y t)) (=> (and (le x y) (le y x)) (eq x y))))

;; not_lt_ge
  (assert
  (forall ((x t) (y t))
  (=> (and (not (lt x y)) (and (is_not_nan x) (is_not_nan y))) (le y x))))

;; not_gt_le
  (assert
  (forall ((x t) (y t))
  (=> (and (not (lt y x)) (and (is_not_nan x) (is_not_nan y))) (le x y))))

;; le_special
  (assert
  (forall ((x t) (y t))
  (! (=> (le x y)
     (or (and (tqtisFinite x) (tqtisFinite y))
     (or (and (is_minus_infinity x) (is_not_nan y))
     (and (is_not_nan x) (is_plus_infinity y))))) :pattern ((le
  x y)) )))

;; lt_special
  (assert
  (forall ((x t) (y t))
  (! (=> (lt x y)
     (or (and (tqtisFinite x) (tqtisFinite y))
     (or
     (and (is_minus_infinity x)
     (and (is_not_nan y) (not (is_minus_infinity y))))
     (and (is_not_nan x)
     (and (not (is_plus_infinity x)) (is_plus_infinity y)))))) :pattern ((lt
  x y)) )))

;; lt_lt_finite
  (assert
  (forall ((x t) (y t) (z t)) (=> (lt x y) (=> (lt y z) (tqtisFinite y)))))

;; positive_to_real
  (assert
  (forall ((x t))
  (! (=> (tqtisFinite x) (=> (is_positive x) (<= 0.0 (tqtreal x)))) :pattern ((is_positive
  x)) :pattern ((<= 0.0 (tqtreal x))) )))

;; to_real_positive
  (assert
  (forall ((x t))
  (! (=> (tqtisFinite x) (=> (< 0.0 (tqtreal x)) (is_positive x))) :pattern ((is_positive
  x)) )))

;; negative_to_real
  (assert
  (forall ((x t))
  (! (=> (tqtisFinite x) (=> (is_negative x) (<= (tqtreal x) 0.0))) :pattern ((is_negative
  x)) :pattern ((<= (tqtreal x) 0.0)) )))

;; to_real_negative
  (assert
  (forall ((x t))
  (! (=> (tqtisFinite x) (=> (< (tqtreal x) 0.0) (is_negative x))) :pattern ((is_negative
  x)) )))

;; negative_xor_positive
  (assert (forall ((x t)) (not (and (is_positive x) (is_negative x)))))

;; negative_or_positive
  (assert
  (forall ((x t)) (=> (is_not_nan x) (or (is_positive x) (is_negative x)))))

;; diff_sign_trans
  (assert
  (forall ((x t) (y t) (z t))
  (=> (and (diff_sign x y) (diff_sign y z)) (same_sign x z))))

;; diff_sign_product
  (assert
  (forall ((x t) (y t))
  (=>
  (and (tqtisFinite x)
  (and (tqtisFinite y) (< (* (tqtreal x) (tqtreal y)) 0.0))) (diff_sign x y))))

;; same_sign_product
  (assert
  (forall ((x t) (y t))
  (=> (and (tqtisFinite x) (and (tqtisFinite y) (same_sign x y)))
  (<= 0.0 (* (tqtreal x) (tqtreal y))))))

(define-fun product_sign ((z t) (x t)
  (y t)) Bool (and (=> (same_sign x y) (is_positive z))
              (=> (diff_sign x y) (is_negative z))))

(define-fun overflow_value ((m mode)
  (x t)) Bool (ite (is-RTN1 m) (ite (is_positive x)
                               (and (tqtisFinite x)
                               (= (tqtreal x) (* 33554430.0 10141204801825835211973625643008.0)))
                               (is_infinite x)) (ite (is-RTP1 m) (ite (is_positive
                                                                 x)
                                                                 (is_infinite
                                                                 x)
                                                                 (and
                                                                 (tqtisFinite
                                                                 x)
                                                                 (= (tqtreal
                                                                    x) (- (* 33554430.0 10141204801825835211973625643008.0)))))
                                                (ite (is-RTZ1 m) (ite (is_positive
                                                                 x)
                                                                 (and
                                                                 (tqtisFinite
                                                                 x)
                                                                 (= (tqtreal
                                                                    x) (* 33554430.0 10141204801825835211973625643008.0)))
                                                                 (and
                                                                 (tqtisFinite
                                                                 x)
                                                                 (= (tqtreal
                                                                    x) (- (* 33554430.0 10141204801825835211973625643008.0)))))
                                                (ite (is-RNA1 m) (is_infinite
                                                x) (is_infinite x))))))

(define-fun sign_zero_result ((m mode)
  (x t)) Bool (=> (is_zero x)
              (ite (is-RTN1 m) (is_negative x) (is_positive x))))

;; add_finite
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (tqtisFinite x)
     (=> (tqtisFinite y)
     (=> (no_overflow m (+ (tqtreal x) (tqtreal y)))
     (and (tqtisFinite (add m x y))
     (= (tqtreal (add m x y)) (round m (+ (tqtreal x) (tqtreal y)))))))) :pattern (
  (add m x y)) )))

;; add_finite_rev
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (tqtisFinite (add m x y)) (and (tqtisFinite x) (tqtisFinite y))) :pattern (
  (add m x y)) )))

;; add_finite_rev_n
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (to_nearest m)
     (=> (tqtisFinite (add m x y))
     (and (no_overflow m (+ (tqtreal x) (tqtreal y)))
     (= (tqtreal (add m x y)) (round m (+ (tqtreal x) (tqtreal y))))))) :pattern (
  (add m x y)) )))

;; sub_finite
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (tqtisFinite x)
     (=> (tqtisFinite y)
     (=> (no_overflow m (- (tqtreal x) (tqtreal y)))
     (and (tqtisFinite (sub m x y))
     (= (tqtreal (sub m x y)) (round m (- (tqtreal x) (tqtreal y)))))))) :pattern (
  (sub m x y)) )))

;; sub_finite_rev
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (tqtisFinite (sub m x y)) (and (tqtisFinite x) (tqtisFinite y))) :pattern (
  (sub m x y)) )))

;; sub_finite_rev_n
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (to_nearest m)
     (=> (tqtisFinite (sub m x y))
     (and (no_overflow m (- (tqtreal x) (tqtreal y)))
     (= (tqtreal (sub m x y)) (round m (- (tqtreal x) (tqtreal y))))))) :pattern (
  (sub m x y)) )))

;; mul_finite
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (tqtisFinite x)
     (=> (tqtisFinite y)
     (=> (no_overflow m (* (tqtreal x) (tqtreal y)))
     (and (tqtisFinite (mul m x y))
     (= (tqtreal (mul m x y)) (round m (* (tqtreal x) (tqtreal y)))))))) :pattern (
  (mul m x y)) )))

;; mul_finite_rev
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (tqtisFinite (mul m x y)) (and (tqtisFinite x) (tqtisFinite y))) :pattern (
  (mul m x y)) )))

;; mul_finite_rev_n
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (to_nearest m)
     (=> (tqtisFinite (mul m x y))
     (and (no_overflow m (* (tqtreal x) (tqtreal y)))
     (= (tqtreal (mul m x y)) (round m (* (tqtreal x) (tqtreal y))))))) :pattern (
  (mul m x y)) )))

;; div_finite
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (tqtisFinite x)
     (=> (tqtisFinite y)
     (=> (not (is_zero y))
     (=> (no_overflow m (/ (tqtreal x) (tqtreal y)))
     (and (tqtisFinite (div1 m x y))
     (= (tqtreal (div1 m x y)) (round m (/ (tqtreal x) (tqtreal y))))))))) :pattern (
  (div1 m x y)) )))

;; div_finite_rev
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (tqtisFinite (div1 m x y))
     (or (and (tqtisFinite x) (and (tqtisFinite y) (not (is_zero y))))
     (and (tqtisFinite x)
     (and (is_infinite y) (= (tqtreal (div1 m x y)) 0.0))))) :pattern (
  (div1 m x y)) )))

;; div_finite_rev_n
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (to_nearest m)
     (=> (tqtisFinite (div1 m x y))
     (=> (tqtisFinite y)
     (and (no_overflow m (/ (tqtreal x) (tqtreal y)))
     (= (tqtreal (div1 m x y)) (round m (/ (tqtreal x) (tqtreal y)))))))) :pattern (
  (div1 m x y)) )))

;; neg_finite
  (assert
  (forall ((x t))
  (! (=> (tqtisFinite x)
     (and (tqtisFinite (neg x)) (= (tqtreal (neg x)) (- (tqtreal x))))) :pattern (
  (neg x)) )))

;; neg_finite_rev
  (assert
  (forall ((x t))
  (! (=> (tqtisFinite (neg x))
     (and (tqtisFinite x) (= (tqtreal (neg x)) (- (tqtreal x))))) :pattern (
  (neg x)) )))

;; abs_finite
  (assert
  (forall ((x t))
  (! (=> (tqtisFinite x)
     (and (tqtisFinite (abs1 x))
     (and
     (= (tqtreal (abs1 x)) (ite (>= (tqtreal x) 0.0) (tqtreal x) (- (tqtreal
                                                                    x))))
     (is_positive (abs1 x))))) :pattern ((abs1 x)) )))

;; abs_finite_rev
  (assert
  (forall ((x t))
  (! (=> (tqtisFinite (abs1 x))
     (and (tqtisFinite x)
     (= (tqtreal (abs1 x)) (ite (>= (tqtreal x) 0.0) (tqtreal x) (- (tqtreal
                                                                    x)))))) :pattern (
  (abs1 x)) )))

;; abs_universal
  (assert
  (forall ((x t)) (! (not (is_negative (abs1 x))) :pattern ((abs1 x)) )))

;; fma_finite
  (assert
  (forall ((m mode) (x t) (y t) (z t))
  (! (=> (tqtisFinite x)
     (=> (tqtisFinite y)
     (=> (tqtisFinite z)
     (=> (no_overflow m (+ (* (tqtreal x) (tqtreal y)) (tqtreal z)))
     (and (tqtisFinite (fma m x y z))
     (= (tqtreal (fma m x y z)) (round m
                                (+ (* (tqtreal x) (tqtreal y)) (tqtreal z))))))))) :pattern (
  (fma m x y z)) )))

;; fma_finite_rev
  (assert
  (forall ((m mode) (x t) (y t) (z t))
  (! (=> (tqtisFinite (fma m x y z))
     (and (tqtisFinite x) (and (tqtisFinite y) (tqtisFinite z)))) :pattern (
  (fma m x y z)) )))

;; fma_finite_rev_n
  (assert
  (forall ((m mode) (x t) (y t) (z t))
  (! (=> (to_nearest m)
     (=> (tqtisFinite (fma m x y z))
     (and (no_overflow m (+ (* (tqtreal x) (tqtreal y)) (tqtreal z)))
     (= (tqtreal (fma m x y z)) (round m
                                (+ (* (tqtreal x) (tqtreal y)) (tqtreal z))))))) :pattern (
  (fma m x y z)) )))

(define-fun sqr ((x Real)) Real (* x x))

(declare-fun sqrt1 (Real) Real)

;; Sqrt_positive
  (assert (forall ((x Real)) (=> (<= 0.0 x) (<= 0.0 (sqrt1 x)))))

;; Sqrt_square
  (assert (forall ((x Real)) (=> (<= 0.0 x) (= (sqr (sqrt1 x)) x))))

;; Square_sqrt
  (assert (forall ((x Real)) (=> (<= 0.0 x) (= (sqrt1 (* x x)) x))))

;; Sqrt_mul
  (assert
  (forall ((x Real) (y Real))
  (=> (and (<= 0.0 x) (<= 0.0 y))
  (= (sqrt1 (* x y)) (* (sqrt1 x) (sqrt1 y))))))

;; Sqrt_le
  (assert
  (forall ((x Real) (y Real))
  (=> (and (<= 0.0 x) (<= x y)) (<= (sqrt1 x) (sqrt1 y)))))

;; sqrt_finite
  (assert
  (forall ((m mode) (x t))
  (! (=> (tqtisFinite x)
     (=> (<= 0.0 (tqtreal x))
     (and (tqtisFinite (sqrt m x))
     (= (tqtreal (sqrt m x)) (round m (sqrt1 (tqtreal x))))))) :pattern (
  (sqrt m x)) )))

;; sqrt_finite_rev
  (assert
  (forall ((m mode) (x t))
  (! (=> (tqtisFinite (sqrt m x))
     (and (tqtisFinite x)
     (and (<= 0.0 (tqtreal x))
     (= (tqtreal (sqrt m x)) (round m (sqrt1 (tqtreal x))))))) :pattern (
  (sqrt m x)) )))

(define-fun same_sign_real ((x t)
  (r Real)) Bool (or (and (is_positive x) (< 0.0 r))
                 (and (is_negative x) (< r 0.0))))

;; add_special
  (assert
  (forall ((m mode) (x t) (y t))
  (! (let ((r (add m x y)))
     (and (=> (or (is_nan x) (is_nan y)) (is_nan r))
     (and
     (=> (and (tqtisFinite x) (is_infinite y))
     (and (is_infinite r) (same_sign r y)))
     (and
     (=> (and (is_infinite x) (tqtisFinite y))
     (and (is_infinite r) (same_sign r x)))
     (and
     (=> (and (is_infinite x) (and (is_infinite y) (same_sign x y)))
     (and (is_infinite r) (same_sign r x)))
     (and
     (=> (and (is_infinite x) (and (is_infinite y) (diff_sign x y))) (is_nan
     r))
     (and
     (=>
     (and (tqtisFinite x)
     (and (tqtisFinite y) (not (no_overflow m (+ (tqtreal x) (tqtreal y))))))
     (and (same_sign_real r (+ (tqtreal x) (tqtreal y))) (overflow_value m
     r)))
     (=> (and (tqtisFinite x) (tqtisFinite y))
     (ite (same_sign x y) (same_sign r x) (sign_zero_result m r)))))))))) :pattern (
  (add m x y)) )))

;; sub_special
  (assert
  (forall ((m mode) (x t) (y t))
  (! (let ((r (sub m x y)))
     (and (=> (or (is_nan x) (is_nan y)) (is_nan r))
     (and
     (=> (and (tqtisFinite x) (is_infinite y))
     (and (is_infinite r) (diff_sign r y)))
     (and
     (=> (and (is_infinite x) (tqtisFinite y))
     (and (is_infinite r) (same_sign r x)))
     (and
     (=> (and (is_infinite x) (and (is_infinite y) (same_sign x y))) (is_nan
     r))
     (and
     (=> (and (is_infinite x) (and (is_infinite y) (diff_sign x y)))
     (and (is_infinite r) (same_sign r x)))
     (and
     (=>
     (and (tqtisFinite x)
     (and (tqtisFinite y) (not (no_overflow m (- (tqtreal x) (tqtreal y))))))
     (and (same_sign_real r (- (tqtreal x) (tqtreal y))) (overflow_value m
     r)))
     (=> (and (tqtisFinite x) (tqtisFinite y))
     (ite (diff_sign x y) (same_sign r x) (sign_zero_result m r)))))))))) :pattern (
  (sub m x y)) )))

;; mul_special
  (assert
  (forall ((m mode) (x t) (y t))
  (! (let ((r (mul m x y)))
     (and (=> (or (is_nan x) (is_nan y)) (is_nan r))
     (and (=> (and (is_zero x) (is_infinite y)) (is_nan r))
     (and
     (=> (and (tqtisFinite x) (and (is_infinite y) (not (is_zero x))))
     (is_infinite r))
     (and (=> (and (is_infinite x) (is_zero y)) (is_nan r))
     (and
     (=> (and (is_infinite x) (and (tqtisFinite y) (not (is_zero y))))
     (is_infinite r))
     (and (=> (and (is_infinite x) (is_infinite y)) (is_infinite r))
     (and
     (=>
     (and (tqtisFinite x)
     (and (tqtisFinite y) (not (no_overflow m (* (tqtreal x) (tqtreal y))))))
     (overflow_value m r)) (=> (not (is_nan r)) (product_sign r x y)))))))))) :pattern (
  (mul m x y)) )))

;; div_special
  (assert
  (forall ((m mode) (x t) (y t))
  (! (let ((r (div1 m x y)))
     (and (=> (or (is_nan x) (is_nan y)) (is_nan r))
     (and (=> (and (tqtisFinite x) (is_infinite y)) (is_zero r))
     (and (=> (and (is_infinite x) (tqtisFinite y)) (is_infinite r))
     (and (=> (and (is_infinite x) (is_infinite y)) (is_nan r))
     (and
     (=>
     (and (tqtisFinite x)
     (and (tqtisFinite y)
     (and (not (is_zero y))
     (not (no_overflow m (/ (tqtreal x) (tqtreal y))))))) (overflow_value m
     r))
     (and
     (=> (and (tqtisFinite x) (and (is_zero y) (not (is_zero x))))
     (is_infinite r))
     (and (=> (and (is_zero x) (is_zero y)) (is_nan r))
     (=> (not (is_nan r)) (product_sign r x y)))))))))) :pattern ((div1 m x
                                                                  y)) )))

;; neg_special
  (assert
  (forall ((x t))
  (! (and (=> (is_nan x) (is_nan (neg x)))
     (and (=> (is_infinite x) (is_infinite (neg x)))
     (=> (not (is_nan x)) (diff_sign x (neg x))))) :pattern ((neg x)) )))

;; abs_special
  (assert
  (forall ((x t))
  (! (and (=> (is_nan x) (is_nan (abs1 x)))
     (and (=> (is_infinite x) (is_infinite (abs1 x)))
     (=> (not (is_nan x)) (is_positive (abs1 x))))) :pattern ((abs1 x)) )))

;; fma_special
  (assert
  (forall ((m mode) (x t) (y t) (z t))
  (! (let ((r (fma m x y z)))
     (and (=> (or (is_nan x) (or (is_nan y) (is_nan z))) (is_nan r))
     (and (=> (and (is_zero x) (is_infinite y)) (is_nan r))
     (and (=> (and (is_infinite x) (is_zero y)) (is_nan r))
     (and
     (=>
     (and (tqtisFinite x)
     (and (not (is_zero x)) (and (is_infinite y) (tqtisFinite z))))
     (and (is_infinite r) (product_sign r x y)))
     (and
     (=>
     (and (tqtisFinite x)
     (and (not (is_zero x)) (and (is_infinite y) (is_infinite z))))
     (ite (product_sign z x y) (and (is_infinite r) (same_sign r z)) (is_nan
     r)))
     (and
     (=>
     (and (is_infinite x)
     (and (tqtisFinite y) (and (not (is_zero y)) (tqtisFinite z))))
     (and (is_infinite r) (product_sign r x y)))
     (and
     (=>
     (and (is_infinite x)
     (and (tqtisFinite y) (and (not (is_zero y)) (is_infinite z))))
     (ite (product_sign z x y) (and (is_infinite r) (same_sign r z)) (is_nan
     r)))
     (and
     (=> (and (is_infinite x) (and (is_infinite y) (tqtisFinite z)))
     (and (is_infinite r) (product_sign r x y)))
     (and
     (=> (and (tqtisFinite x) (and (tqtisFinite y) (is_infinite z)))
     (and (is_infinite r) (same_sign r z)))
     (and
     (=> (and (is_infinite x) (and (is_infinite y) (is_infinite z)))
     (ite (product_sign z x y) (and (is_infinite r) (same_sign r z)) (is_nan
     r)))
     (and
     (=>
     (and (tqtisFinite x)
     (and (tqtisFinite y)
     (and (tqtisFinite z)
     (not (no_overflow m (+ (* (tqtreal x) (tqtreal y)) (tqtreal z)))))))
     (and (same_sign_real r (+ (* (tqtreal x) (tqtreal y)) (tqtreal z)))
     (overflow_value m r)))
     (=> (and (tqtisFinite x) (and (tqtisFinite y) (tqtisFinite z)))
     (ite (product_sign z x y) (same_sign r z)
     (=> (= (+ (* (tqtreal x) (tqtreal y)) (tqtreal z)) 0.0)
     (ite (= m RTN1) (is_negative r) (is_positive r))))))))))))))))) :pattern (
  (fma m x y z)) )))

;; sqrt_special
  (assert
  (forall ((m mode) (x t))
  (! (let ((r (sqrt m x)))
     (and (=> (is_nan x) (is_nan r))
     (and (=> (is_plus_infinity x) (is_plus_infinity r))
     (and (=> (is_minus_infinity x) (is_nan r))
     (and (=> (and (tqtisFinite x) (< (tqtreal x) 0.0)) (is_nan r))
     (and (=> (is_zero x) (same_sign r x))
     (=> (and (tqtisFinite x) (< 0.0 (tqtreal x))) (is_positive r)))))))) :pattern (
  (sqrt m x)) )))

;; of_int_add_exact
  (assert
  (forall ((m mode) (n mode) (i Int) (j Int))
  (=> (in_safe_int_range i)
  (=> (in_safe_int_range j)
  (=> (in_safe_int_range (+ i j)) (eq (of_int m (+ i j))
  (add n (of_int m i) (of_int m j))))))))

;; of_int_sub_exact
  (assert
  (forall ((m mode) (n mode) (i Int) (j Int))
  (=> (in_safe_int_range i)
  (=> (in_safe_int_range j)
  (=> (in_safe_int_range (- i j)) (eq (of_int m (- i j))
  (sub n (of_int m i) (of_int m j))))))))

;; of_int_mul_exact
  (assert
  (forall ((m mode) (n mode) (i Int) (j Int))
  (=> (in_safe_int_range i)
  (=> (in_safe_int_range j)
  (=> (in_safe_int_range (* i j)) (eq (of_int m (* i j))
  (mul n (of_int m i) (of_int m j))))))))

;; Min_r
  (assert (forall ((x t) (y t)) (=> (le y x) (eq (min x y) y))))

;; Min_l
  (assert (forall ((x t) (y t)) (=> (le x y) (eq (min x y) x))))

;; Max_r
  (assert (forall ((x t) (y t)) (=> (le y x) (eq (max x y) x))))

;; Max_l
  (assert (forall ((x t) (y t)) (=> (le x y) (eq (max x y) y))))

(declare-fun is_int1 (t) Bool)

;; zeroF_is_int
  (assert (is_int1 zeroF))

;; of_int_is_int
  (assert
  (forall ((m mode) (x Int)) (=> (in_int_range x) (is_int1 (of_int m x)))))

;; big_float_is_int
  (assert
  (forall ((m mode) (i t))
  (=> (tqtisFinite i)
  (=> (or (le i (neg (of_int m 16777216))) (le (of_int m 16777216) i))
  (is_int1 i)))))

;; roundToIntegral_is_int
  (assert
  (forall ((m mode) (x t))
  (=> (tqtisFinite x) (is_int1 (roundToIntegral m x)))))

;; eq_is_int
  (assert (forall ((x t) (y t)) (=> (eq x y) (=> (is_int1 x) (is_int1 y)))))

;; add_int
  (assert
  (forall ((x t) (y t) (m mode))
  (=> (is_int1 x)
  (=> (is_int1 y) (=> (tqtisFinite (add m x y)) (is_int1 (add m x y)))))))

;; sub_int
  (assert
  (forall ((x t) (y t) (m mode))
  (=> (is_int1 x)
  (=> (is_int1 y) (=> (tqtisFinite (sub m x y)) (is_int1 (sub m x y)))))))

;; mul_int
  (assert
  (forall ((x t) (y t) (m mode))
  (=> (is_int1 x)
  (=> (is_int1 y) (=> (tqtisFinite (mul m x y)) (is_int1 (mul m x y)))))))

;; fma_int
  (assert
  (forall ((x t) (y t) (z t) (m mode))
  (=> (is_int1 x)
  (=> (is_int1 y)
  (=> (is_int1 z) (=> (tqtisFinite (fma m x y z)) (is_int1 (fma m x y z))))))))

;; neg_int
  (assert (forall ((x t)) (=> (is_int1 x) (is_int1 (neg x)))))

;; abs_int
  (assert (forall ((x t)) (=> (is_int1 x) (is_int1 (abs1 x)))))

;; is_int_of_int
  (assert
  (forall ((x t) (m mode) (mqt mode))
  (=> (is_int1 x) (eq x (of_int mqt (to_int1 m x))))))

;; is_int_to_int
  (assert
  (forall ((m mode) (x t)) (=> (is_int1 x) (in_int_range (to_int1 m x)))))

;; is_int_is_finite
  (assert (forall ((x t)) (=> (is_int1 x) (tqtisFinite x))))

;; int_to_real
  (assert
  (forall ((m mode) (x t))
  (=> (is_int1 x) (= (tqtreal x) (to_real (to_int1 m x))))))

;; truncate_int
  (assert
  (forall ((m mode) (i t)) (=> (is_int1 i) (eq (roundToIntegral m i) i))))

;; truncate_neg
  (assert
  (forall ((x t))
  (=> (tqtisFinite x)
  (=> (is_negative x) (= (roundToIntegral RTZ1 x) (roundToIntegral RTP1 x))))))

;; truncate_pos
  (assert
  (forall ((x t))
  (=> (tqtisFinite x)
  (=> (is_positive x) (= (roundToIntegral RTZ1 x) (roundToIntegral RTN1 x))))))

;; ceil_le
  (assert
  (forall ((x t)) (=> (tqtisFinite x) (le x (roundToIntegral RTP1 x)))))

;; ceil_lest
  (assert
  (forall ((x t) (y t))
  (=> (and (le x y) (is_int1 y)) (le (roundToIntegral RTP1 x) y))))

;; ceil_to_real
  (assert
  (forall ((x t))
  (=> (tqtisFinite x)
  (= (tqtreal (roundToIntegral RTP1 x)) (to_real (- 1 (to_int (- 1.0
  (tqtreal x)))))))))

;; ceil_to_int
  (assert
  (forall ((m mode) (x t))
  (=> (tqtisFinite x)
  (= (to_int1 m (roundToIntegral RTP1 x)) (- 1 (to_int (- 1.0 (tqtreal x))))))))

;; floor_le
  (assert
  (forall ((x t)) (=> (tqtisFinite x) (le (roundToIntegral RTN1 x) x))))

;; floor_lest
  (assert
  (forall ((x t) (y t))
  (=> (and (le y x) (is_int1 y)) (le y (roundToIntegral RTN1 x)))))

;; floor_to_real
  (assert
  (forall ((x t))
  (=> (tqtisFinite x)
  (= (tqtreal (roundToIntegral RTN1 x)) (to_real (to_int (tqtreal x)))))))

;; floor_to_int
  (assert
  (forall ((m mode) (x t))
  (=> (tqtisFinite x)
  (= (to_int1 m (roundToIntegral RTN1 x)) (to_int (tqtreal x))))))

;; RNA_down
  (assert
  (forall ((x t))
  (=> (lt (sub RNE1 x (roundToIntegral RTN1 x))
  (sub RNE1 (roundToIntegral RTP1 x) x))
  (= (roundToIntegral RNA1 x) (roundToIntegral RTN1 x)))))

;; RNA_up
  (assert
  (forall ((x t))
  (=> (lt (sub RNE1 (roundToIntegral RTP1 x) x)
  (sub RNE1 x (roundToIntegral RTN1 x)))
  (= (roundToIntegral RNA1 x) (roundToIntegral RTP1 x)))))

;; RNA_down_tie
  (assert
  (forall ((x t))
  (=> (eq (sub RNE1 x (roundToIntegral RTN1 x))
  (sub RNE1 (roundToIntegral RTP1 x) x))
  (=> (is_negative x) (= (roundToIntegral RNA1 x) (roundToIntegral RTN1 x))))))

;; RNA_up_tie
  (assert
  (forall ((x t))
  (=> (eq (sub RNE1 (roundToIntegral RTP1 x) x)
  (sub RNE1 x (roundToIntegral RTN1 x)))
  (=> (is_positive x) (= (roundToIntegral RNA1 x) (roundToIntegral RTP1 x))))))

;; to_int_roundToIntegral
  (assert
  (forall ((m mode) (x t))
  (= (to_int1 m x) (to_int1 m (roundToIntegral m x)))))

;; to_int_monotonic
  (assert
  (forall ((m mode) (x t) (y t))
  (=> (tqtisFinite x)
  (=> (tqtisFinite y) (=> (le x y) (<= (to_int1 m x) (to_int1 m y)))))))

;; to_int_of_int
  (assert
  (forall ((m mode) (i Int))
  (=> (in_safe_int_range i) (= (to_int1 m (of_int m i)) i))))

;; eq_to_int
  (assert
  (forall ((m mode) (x t) (y t))
  (=> (tqtisFinite x) (=> (eq x y) (= (to_int1 m x) (to_int1 m y))))))

;; neg_to_int
  (assert
  (forall ((m mode) (x t))
  (=> (is_int1 x) (= (to_int1 m (neg x)) (- (to_int1 m x))))))

;; roundToIntegral_is_finite
  (assert
  (forall ((m mode) (x t))
  (=> (tqtisFinite x) (tqtisFinite (roundToIntegral m x)))))

;; round_bound_ne
  (assert
  (forall ((x Real))
  (! (=> (no_overflow RNE1 x)
     (and
     (<= (- (- x (* (/ 1.0 16777216.0) (ite (>= x 0.0) x (- x)))) (/ 1.0 1427247692705959881058285969449495136382746624.0))
     (round RNE1 x))
     (<= (round RNE1 x) (+ (+ x (* (/ 1.0 16777216.0) (ite (>= x 0.0) x (- x)))) (/ 1.0 1427247692705959881058285969449495136382746624.0))))) :pattern (
  (round RNE1 x)) )))

;; round_bound
  (assert
  (forall ((m mode) (x Real))
  (! (=> (no_overflow m x)
     (and
     (<= (- (- x (* (/ 1.0 8388608.0) (ite (>= x 0.0) x (- x)))) (/ 1.0 713623846352979940529142984724747568191373312.0))
     (round m x))
     (<= (round m x) (+ (+ x (* (/ 1.0 8388608.0) (ite (>= x 0.0) x (- x)))) (/ 1.0 713623846352979940529142984724747568191373312.0))))) :pattern (
  (round m x)) )))

(define-fun neq ((x t) (y t)) Bool (not (eq x y)))

(define-fun bool_lt ((x t) (y t)) Bool (ite (lt x y) true false))

(define-fun bool_le ((x t) (y t)) Bool (ite (le x y) true false))

(define-fun bool_gt ((x t) (y t)) Bool (ite (lt y x) true false))

(define-fun bool_ge ((x t) (y t)) Bool (ite (le y x) true false))

(define-fun bool_eq ((x t) (y t)) Bool (ite (eq x y) true false))

(define-fun bool_neq ((x t) (y t)) Bool (ite (not (eq x y)) true false))

(declare-fun rem1 (t t) t)

(declare-const fliteral t)

;; fliteral_axiom
  (assert (and (tqtisFinite fliteral) (= (tqtreal fliteral) 1.0)))

;; one_is_int
  (assert (is_int1 fliteral))

;; one_of_int
  (assert (= fliteral (of_int RNA1 1)))

(declare-datatypes () ((t__ref (mk_t__ref (t__content t)))))
(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int1 ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range1 ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort t1 0)

(declare-fun tqtreal1 (t1) Real)

(declare-fun tqtisFinite1 (t1) Bool)

;; t'axiom
  (assert
  (forall ((x t1))
  (=> (tqtisFinite1 x)
  (and
  (<= (- (* 9007199254740991.0 19958403095347198116563727130368385660674512604354575415025472424372118918689640657849579654926357010893424468441924952439724379883935936607391717982848314203200056729510856765175377214443629871826533567445439239933308104551208703888888552684480441575071209068757560416423584952303440099278848.0))
  (tqtreal1 x))
  (<= (tqtreal1 x) (* 9007199254740991.0 19958403095347198116563727130368385660674512604354575415025472424372118918689640657849579654926357010893424468441924952439724379883935936607391717982848314203200056729510856765175377214443629871826533567445439239933308104551208703888888552684480441575071209068757560416423584952303440099278848.0))))))

(declare-const zeroF1 t1)

(declare-fun add1 (mode t1 t1) t1)

(declare-fun sub1 (mode t1 t1) t1)

(declare-fun mul1 (mode t1 t1) t1)

(declare-fun div2 (mode t1 t1) t1)

(declare-fun abs2 (t1) t1)

(declare-fun neg1 (t1) t1)

(declare-fun fma1 (mode t1 t1 t1) t1)

(declare-fun sqrt2 (mode t1) t1)

(declare-fun roundToIntegral1 (mode t1) t1)

(declare-fun min1 (t1 t1) t1)

(declare-fun max1 (t1 t1) t1)

(declare-fun le1 (t1 t1) Bool)

(declare-fun lt1 (t1 t1) Bool)

(declare-fun eq1 (t1 t1) Bool)

(declare-fun is_normal1 (t1) Bool)

(declare-fun is_subnormal1 (t1) Bool)

(declare-fun is_zero1 (t1) Bool)

(declare-fun is_infinite1 (t1) Bool)

(declare-fun is_nan1 (t1) Bool)

(declare-fun is_positive1 (t1) Bool)

(declare-fun is_negative1 (t1) Bool)

(define-fun is_plus_infinity1 ((x t1)) Bool (and (is_infinite1 x)
                                            (is_positive1 x)))

(define-fun is_minus_infinity1 ((x t1)) Bool (and (is_infinite1 x)
                                             (is_negative1 x)))

(define-fun is_plus_zero1 ((x t1)) Bool (and (is_zero1 x) (is_positive1 x)))

(define-fun is_minus_zero1 ((x t1)) Bool (and (is_zero1 x) (is_negative1 x)))

(define-fun is_not_nan1 ((x t1)) Bool (or (tqtisFinite1 x) (is_infinite1 x)))

;; is_not_nan
  (assert (forall ((x t1)) (= (is_not_nan1 x) (not (is_nan1 x)))))

;; is_not_finite
  (assert
  (forall ((x t1))
  (= (not (tqtisFinite1 x)) (or (is_infinite1 x) (is_nan1 x)))))

;; zeroF_is_positive
  (assert (is_positive1 zeroF1))

;; zeroF_is_zero
  (assert (is_zero1 zeroF1))

;; zero_to_real
  (assert
  (forall ((x t1))
  (! (= (is_zero1 x) (and (tqtisFinite1 x) (= (tqtreal1 x) 0.0))) :pattern ((is_zero1
  x)) )))

(declare-fun of_int2 (mode Int) t1)

(declare-fun to_int3 (mode t1) Int)

;; zero_of_int
  (assert (forall ((m mode)) (= zeroF1 (of_int2 m 0))))

(declare-fun round1 (mode Real) Real)

(declare-const max_int1 Int)

;; max_real_int
  (assert
  (= (* 9007199254740991.0 19958403095347198116563727130368385660674512604354575415025472424372118918689640657849579654926357010893424468441924952439724379883935936607391717982848314203200056729510856765175377214443629871826533567445439239933308104551208703888888552684480441575071209068757560416423584952303440099278848.0) (to_real
  max_int1)))

(define-fun in_range2 ((x Real)) Bool (and
                                      (<= (- (* 9007199254740991.0 19958403095347198116563727130368385660674512604354575415025472424372118918689640657849579654926357010893424468441924952439724379883935936607391717982848314203200056729510856765175377214443629871826533567445439239933308104551208703888888552684480441575071209068757560416423584952303440099278848.0)) x)
                                      (<= x (* 9007199254740991.0 19958403095347198116563727130368385660674512604354575415025472424372118918689640657849579654926357010893424468441924952439724379883935936607391717982848314203200056729510856765175377214443629871826533567445439239933308104551208703888888552684480441575071209068757560416423584952303440099278848.0))))

(define-fun in_int_range1 ((i Int)) Bool (and (<= (- max_int1) i)
                                         (<= i max_int1)))

;; is_finite
  (assert (forall ((x t1)) (=> (tqtisFinite1 x) (in_range2 (tqtreal1 x)))))

(define-fun no_overflow1 ((m mode) (x Real)) Bool (in_range2 (round1 m x)))

;; Bounded_real_no_overflow
  (assert (forall ((m mode) (x Real)) (=> (in_range2 x) (no_overflow1 m x))))

;; Round_monotonic
  (assert
  (forall ((m mode) (x Real) (y Real))
  (=> (<= x y) (<= (round1 m x) (round1 m y)))))

;; Round_idempotent
  (assert
  (forall ((m1 mode) (m2 mode) (x Real))
  (= (round1 m1 (round1 m2 x)) (round1 m2 x))))

;; Round_to_real
  (assert
  (forall ((m mode) (x t1))
  (=> (tqtisFinite1 x) (= (round1 m (tqtreal1 x)) (tqtreal1 x)))))

;; Round_down_le
  (assert (forall ((x Real)) (<= (round1 RTN1 x) x)))

;; Round_up_ge
  (assert (forall ((x Real)) (<= x (round1 RTP1 x))))

;; Round_down_neg
  (assert (forall ((x Real)) (= (round1 RTN1 (- x)) (- (round1 RTP1 x)))))

;; Round_up_neg
  (assert (forall ((x Real)) (= (round1 RTP1 (- x)) (- (round1 RTN1 x)))))

(define-fun in_safe_int_range1 ((i Int)) Bool (and
                                              (<= (- 9007199254740992) i)
                                              (<= i 9007199254740992)))

;; Exact_rounding_for_integers
  (assert
  (forall ((m mode) (i Int))
  (=> (in_safe_int_range1 i) (= (round1 m (to_real i)) (to_real i)))))

(define-fun same_sign1 ((x t1)
  (y t1)) Bool (or (and (is_positive1 x) (is_positive1 y))
               (and (is_negative1 x) (is_negative1 y))))

(define-fun diff_sign1 ((x t1)
  (y t1)) Bool (or (and (is_positive1 x) (is_negative1 y))
               (and (is_negative1 x) (is_positive1 y))))

;; feq_eq
  (assert
  (forall ((x t1) (y t1))
  (=> (tqtisFinite1 x)
  (=> (tqtisFinite1 y) (=> (not (is_zero1 x)) (=> (eq1 x y) (= x y)))))))

;; eq_feq
  (assert
  (forall ((x t1) (y t1))
  (=> (tqtisFinite1 x) (=> (tqtisFinite1 y) (=> (= x y) (eq1 x y))))))

;; eq_refl
  (assert (forall ((x t1)) (=> (tqtisFinite1 x) (eq1 x x))))

;; eq_sym
  (assert (forall ((x t1) (y t1)) (=> (eq1 x y) (eq1 y x))))

;; eq_trans
  (assert
  (forall ((x t1) (y t1) (z t1)) (=> (eq1 x y) (=> (eq1 y z) (eq1 x z)))))

;; eq_zero
  (assert (eq1 zeroF1 (neg1 zeroF1)))

;; eq_to_real_finite
  (assert
  (forall ((x t1) (y t1))
  (=> (and (tqtisFinite1 x) (tqtisFinite1 y))
  (= (eq1 x y) (= (tqtreal1 x) (tqtreal1 y))))))

;; eq_special
  (assert
  (forall ((x t1) (y t1))
  (=> (eq1 x y)
  (and (is_not_nan1 x)
  (and (is_not_nan1 y)
  (or (and (tqtisFinite1 x) (tqtisFinite1 y))
  (and (is_infinite1 x) (and (is_infinite1 y) (same_sign1 x y)))))))))

;; lt_finite
  (assert
  (forall ((x t1) (y t1))
  (! (=> (and (tqtisFinite1 x) (tqtisFinite1 y))
     (= (lt1 x y) (< (tqtreal1 x) (tqtreal1 y)))) :pattern ((lt1
  x y)) )))

;; le_finite
  (assert
  (forall ((x t1) (y t1))
  (! (=> (and (tqtisFinite1 x) (tqtisFinite1 y))
     (= (le1 x y) (<= (tqtreal1 x) (tqtreal1 y)))) :pattern ((le1
  x y)) )))

;; le_lt_trans
  (assert
  (forall ((x t1) (y t1) (z t1)) (=> (and (le1 x y) (lt1 y z)) (lt1 x z))))

;; lt_le_trans
  (assert
  (forall ((x t1) (y t1) (z t1)) (=> (and (lt1 x y) (le1 y z)) (lt1 x z))))

;; le_ge_asym
  (assert (forall ((x t1) (y t1)) (=> (and (le1 x y) (le1 y x)) (eq1 x y))))

;; not_lt_ge
  (assert
  (forall ((x t1) (y t1))
  (=> (and (not (lt1 x y)) (and (is_not_nan1 x) (is_not_nan1 y))) (le1 y x))))

;; not_gt_le
  (assert
  (forall ((x t1) (y t1))
  (=> (and (not (lt1 y x)) (and (is_not_nan1 x) (is_not_nan1 y))) (le1 x y))))

;; le_special
  (assert
  (forall ((x t1) (y t1))
  (! (=> (le1 x y)
     (or (and (tqtisFinite1 x) (tqtisFinite1 y))
     (or (and (is_minus_infinity1 x) (is_not_nan1 y))
     (and (is_not_nan1 x) (is_plus_infinity1 y))))) :pattern ((le1
  x y)) )))

;; lt_special
  (assert
  (forall ((x t1) (y t1))
  (! (=> (lt1 x y)
     (or (and (tqtisFinite1 x) (tqtisFinite1 y))
     (or
     (and (is_minus_infinity1 x)
     (and (is_not_nan1 y) (not (is_minus_infinity1 y))))
     (and (is_not_nan1 x)
     (and (not (is_plus_infinity1 x)) (is_plus_infinity1 y)))))) :pattern ((lt1
  x y)) )))

;; lt_lt_finite
  (assert
  (forall ((x t1) (y t1) (z t1))
  (=> (lt1 x y) (=> (lt1 y z) (tqtisFinite1 y)))))

;; positive_to_real
  (assert
  (forall ((x t1))
  (! (=> (tqtisFinite1 x) (=> (is_positive1 x) (<= 0.0 (tqtreal1 x)))) :pattern ((is_positive1
  x)) :pattern ((<= 0.0 (tqtreal1 x))) )))

;; to_real_positive
  (assert
  (forall ((x t1))
  (! (=> (tqtisFinite1 x) (=> (< 0.0 (tqtreal1 x)) (is_positive1 x))) :pattern ((is_positive1
  x)) )))

;; negative_to_real
  (assert
  (forall ((x t1))
  (! (=> (tqtisFinite1 x) (=> (is_negative1 x) (<= (tqtreal1 x) 0.0))) :pattern ((is_negative1
  x)) :pattern ((<= (tqtreal1 x) 0.0)) )))

;; to_real_negative
  (assert
  (forall ((x t1))
  (! (=> (tqtisFinite1 x) (=> (< (tqtreal1 x) 0.0) (is_negative1 x))) :pattern ((is_negative1
  x)) )))

;; negative_xor_positive
  (assert (forall ((x t1)) (not (and (is_positive1 x) (is_negative1 x)))))

;; negative_or_positive
  (assert
  (forall ((x t1))
  (=> (is_not_nan1 x) (or (is_positive1 x) (is_negative1 x)))))

;; diff_sign_trans
  (assert
  (forall ((x t1) (y t1) (z t1))
  (=> (and (diff_sign1 x y) (diff_sign1 y z)) (same_sign1 x z))))

;; diff_sign_product
  (assert
  (forall ((x t1) (y t1))
  (=>
  (and (tqtisFinite1 x)
  (and (tqtisFinite1 y) (< (* (tqtreal1 x) (tqtreal1 y)) 0.0))) (diff_sign1 x
  y))))

;; same_sign_product
  (assert
  (forall ((x t1) (y t1))
  (=> (and (tqtisFinite1 x) (and (tqtisFinite1 y) (same_sign1 x y)))
  (<= 0.0 (* (tqtreal1 x) (tqtreal1 y))))))

(define-fun product_sign1 ((z t1) (x t1)
  (y t1)) Bool (and (=> (same_sign1 x y) (is_positive1 z))
               (=> (diff_sign1 x y) (is_negative1 z))))

(define-fun overflow_value1 ((m mode)
  (x t1)) Bool (ite (is-RTN1 m) (ite (is_positive1 x)
                                (and (tqtisFinite1 x)
                                (= (tqtreal1 x) (* 9007199254740991.0 19958403095347198116563727130368385660674512604354575415025472424372118918689640657849579654926357010893424468441924952439724379883935936607391717982848314203200056729510856765175377214443629871826533567445439239933308104551208703888888552684480441575071209068757560416423584952303440099278848.0)))
                                (is_infinite1 x)) (ite (is-RTP1 m) (ite (is_positive1
                                                                   x)
                                                                   (is_infinite1
                                                                   x)
                                                                   (and
                                                                   (tqtisFinite1
                                                                   x)
                                                                   (=
                                                                   (tqtreal1
                                                                   x) (- (* 9007199254740991.0 19958403095347198116563727130368385660674512604354575415025472424372118918689640657849579654926357010893424468441924952439724379883935936607391717982848314203200056729510856765175377214443629871826533567445439239933308104551208703888888552684480441575071209068757560416423584952303440099278848.0)))))
                                                  (ite (is-RTZ1 m) (ite (is_positive1
                                                                   x)
                                                                   (and
                                                                   (tqtisFinite1
                                                                   x)
                                                                   (=
                                                                   (tqtreal1
                                                                   x) (* 9007199254740991.0 19958403095347198116563727130368385660674512604354575415025472424372118918689640657849579654926357010893424468441924952439724379883935936607391717982848314203200056729510856765175377214443629871826533567445439239933308104551208703888888552684480441575071209068757560416423584952303440099278848.0)))
                                                                   (and
                                                                   (tqtisFinite1
                                                                   x)
                                                                   (=
                                                                   (tqtreal1
                                                                   x) (- (* 9007199254740991.0 19958403095347198116563727130368385660674512604354575415025472424372118918689640657849579654926357010893424468441924952439724379883935936607391717982848314203200056729510856765175377214443629871826533567445439239933308104551208703888888552684480441575071209068757560416423584952303440099278848.0)))))
                                                  (ite (is-RNA1 m) (is_infinite1
                                                  x) (is_infinite1 x))))))

(define-fun sign_zero_result1 ((m mode)
  (x t1)) Bool (=> (is_zero1 x)
               (ite (is-RTN1 m) (is_negative1 x) (is_positive1 x))))

;; add_finite
  (assert
  (forall ((m mode) (x t1) (y t1))
  (! (=> (tqtisFinite1 x)
     (=> (tqtisFinite1 y)
     (=> (no_overflow1 m (+ (tqtreal1 x) (tqtreal1 y)))
     (and (tqtisFinite1 (add1 m x y))
     (= (tqtreal1 (add1 m x y)) (round1 m (+ (tqtreal1 x) (tqtreal1 y)))))))) :pattern (
  (add1 m x y)) )))

;; add_finite_rev
  (assert
  (forall ((m mode) (x t1) (y t1))
  (! (=> (tqtisFinite1 (add1 m x y)) (and (tqtisFinite1 x) (tqtisFinite1 y))) :pattern (
  (add1 m x y)) )))

;; add_finite_rev_n
  (assert
  (forall ((m mode) (x t1) (y t1))
  (! (=> (to_nearest m)
     (=> (tqtisFinite1 (add1 m x y))
     (and (no_overflow1 m (+ (tqtreal1 x) (tqtreal1 y)))
     (= (tqtreal1 (add1 m x y)) (round1 m (+ (tqtreal1 x) (tqtreal1 y))))))) :pattern (
  (add1 m x y)) )))

;; sub_finite
  (assert
  (forall ((m mode) (x t1) (y t1))
  (! (=> (tqtisFinite1 x)
     (=> (tqtisFinite1 y)
     (=> (no_overflow1 m (- (tqtreal1 x) (tqtreal1 y)))
     (and (tqtisFinite1 (sub1 m x y))
     (= (tqtreal1 (sub1 m x y)) (round1 m (- (tqtreal1 x) (tqtreal1 y)))))))) :pattern (
  (sub1 m x y)) )))

;; sub_finite_rev
  (assert
  (forall ((m mode) (x t1) (y t1))
  (! (=> (tqtisFinite1 (sub1 m x y)) (and (tqtisFinite1 x) (tqtisFinite1 y))) :pattern (
  (sub1 m x y)) )))

;; sub_finite_rev_n
  (assert
  (forall ((m mode) (x t1) (y t1))
  (! (=> (to_nearest m)
     (=> (tqtisFinite1 (sub1 m x y))
     (and (no_overflow1 m (- (tqtreal1 x) (tqtreal1 y)))
     (= (tqtreal1 (sub1 m x y)) (round1 m (- (tqtreal1 x) (tqtreal1 y))))))) :pattern (
  (sub1 m x y)) )))

;; mul_finite
  (assert
  (forall ((m mode) (x t1) (y t1))
  (! (=> (tqtisFinite1 x)
     (=> (tqtisFinite1 y)
     (=> (no_overflow1 m (* (tqtreal1 x) (tqtreal1 y)))
     (and (tqtisFinite1 (mul1 m x y))
     (= (tqtreal1 (mul1 m x y)) (round1 m (* (tqtreal1 x) (tqtreal1 y)))))))) :pattern (
  (mul1 m x y)) )))

;; mul_finite_rev
  (assert
  (forall ((m mode) (x t1) (y t1))
  (! (=> (tqtisFinite1 (mul1 m x y)) (and (tqtisFinite1 x) (tqtisFinite1 y))) :pattern (
  (mul1 m x y)) )))

;; mul_finite_rev_n
  (assert
  (forall ((m mode) (x t1) (y t1))
  (! (=> (to_nearest m)
     (=> (tqtisFinite1 (mul1 m x y))
     (and (no_overflow1 m (* (tqtreal1 x) (tqtreal1 y)))
     (= (tqtreal1 (mul1 m x y)) (round1 m (* (tqtreal1 x) (tqtreal1 y))))))) :pattern (
  (mul1 m x y)) )))

;; div_finite
  (assert
  (forall ((m mode) (x t1) (y t1))
  (! (=> (tqtisFinite1 x)
     (=> (tqtisFinite1 y)
     (=> (not (is_zero1 y))
     (=> (no_overflow1 m (/ (tqtreal1 x) (tqtreal1 y)))
     (and (tqtisFinite1 (div2 m x y))
     (= (tqtreal1 (div2 m x y)) (round1 m (/ (tqtreal1 x) (tqtreal1 y))))))))) :pattern (
  (div2 m x y)) )))

;; div_finite_rev
  (assert
  (forall ((m mode) (x t1) (y t1))
  (! (=> (tqtisFinite1 (div2 m x y))
     (or (and (tqtisFinite1 x) (and (tqtisFinite1 y) (not (is_zero1 y))))
     (and (tqtisFinite1 x)
     (and (is_infinite1 y) (= (tqtreal1 (div2 m x y)) 0.0))))) :pattern (
  (div2 m x y)) )))

;; div_finite_rev_n
  (assert
  (forall ((m mode) (x t1) (y t1))
  (! (=> (to_nearest m)
     (=> (tqtisFinite1 (div2 m x y))
     (=> (tqtisFinite1 y)
     (and (no_overflow1 m (/ (tqtreal1 x) (tqtreal1 y)))
     (= (tqtreal1 (div2 m x y)) (round1 m (/ (tqtreal1 x) (tqtreal1 y)))))))) :pattern (
  (div2 m x y)) )))

;; neg_finite
  (assert
  (forall ((x t1))
  (! (=> (tqtisFinite1 x)
     (and (tqtisFinite1 (neg1 x)) (= (tqtreal1 (neg1 x)) (- (tqtreal1 x))))) :pattern (
  (neg1 x)) )))

;; neg_finite_rev
  (assert
  (forall ((x t1))
  (! (=> (tqtisFinite1 (neg1 x))
     (and (tqtisFinite1 x) (= (tqtreal1 (neg1 x)) (- (tqtreal1 x))))) :pattern (
  (neg1 x)) )))

;; abs_finite
  (assert
  (forall ((x t1))
  (! (=> (tqtisFinite1 x)
     (and (tqtisFinite1 (abs2 x))
     (and
     (= (tqtreal1 (abs2 x)) (ite (>= (tqtreal1 x) 0.0) (tqtreal1 x) (-
     (tqtreal1 x)))) (is_positive1 (abs2 x))))) :pattern ((abs2 x)) )))

;; abs_finite_rev
  (assert
  (forall ((x t1))
  (! (=> (tqtisFinite1 (abs2 x))
     (and (tqtisFinite1 x)
     (= (tqtreal1 (abs2 x)) (ite (>= (tqtreal1 x) 0.0) (tqtreal1 x) (-
     (tqtreal1 x)))))) :pattern ((abs2 x)) )))

;; abs_universal
  (assert
  (forall ((x t1)) (! (not (is_negative1 (abs2 x))) :pattern ((abs2 x)) )))

;; fma_finite
  (assert
  (forall ((m mode) (x t1) (y t1) (z t1))
  (! (=> (tqtisFinite1 x)
     (=> (tqtisFinite1 y)
     (=> (tqtisFinite1 z)
     (=> (no_overflow1 m (+ (* (tqtreal1 x) (tqtreal1 y)) (tqtreal1 z)))
     (and (tqtisFinite1 (fma1 m x y z))
     (= (tqtreal1 (fma1 m x y z)) (round1 m
                                  (+ (* (tqtreal1 x) (tqtreal1 y)) (tqtreal1
                                                                   z))))))))) :pattern (
  (fma1 m x y z)) )))

;; fma_finite_rev
  (assert
  (forall ((m mode) (x t1) (y t1) (z t1))
  (! (=> (tqtisFinite1 (fma1 m x y z))
     (and (tqtisFinite1 x) (and (tqtisFinite1 y) (tqtisFinite1 z)))) :pattern (
  (fma1 m x y z)) )))

;; fma_finite_rev_n
  (assert
  (forall ((m mode) (x t1) (y t1) (z t1))
  (! (=> (to_nearest m)
     (=> (tqtisFinite1 (fma1 m x y z))
     (and (no_overflow1 m (+ (* (tqtreal1 x) (tqtreal1 y)) (tqtreal1 z)))
     (= (tqtreal1 (fma1 m x y z)) (round1 m
                                  (+ (* (tqtreal1 x) (tqtreal1 y)) (tqtreal1
                                                                   z))))))) :pattern (
  (fma1 m x y z)) )))

;; sqrt_finite
  (assert
  (forall ((m mode) (x t1))
  (! (=> (tqtisFinite1 x)
     (=> (<= 0.0 (tqtreal1 x))
     (and (tqtisFinite1 (sqrt2 m x))
     (= (tqtreal1 (sqrt2 m x)) (round1 m (sqrt1 (tqtreal1 x))))))) :pattern (
  (sqrt2 m x)) )))

;; sqrt_finite_rev
  (assert
  (forall ((m mode) (x t1))
  (! (=> (tqtisFinite1 (sqrt2 m x))
     (and (tqtisFinite1 x)
     (and (<= 0.0 (tqtreal1 x))
     (= (tqtreal1 (sqrt2 m x)) (round1 m (sqrt1 (tqtreal1 x))))))) :pattern (
  (sqrt2 m x)) )))

(define-fun same_sign_real1 ((x t1)
  (r Real)) Bool (or (and (is_positive1 x) (< 0.0 r))
                 (and (is_negative1 x) (< r 0.0))))

;; add_special
  (assert
  (forall ((m mode) (x t1) (y t1))
  (! (let ((r (add1 m x y)))
     (and (=> (or (is_nan1 x) (is_nan1 y)) (is_nan1 r))
     (and
     (=> (and (tqtisFinite1 x) (is_infinite1 y))
     (and (is_infinite1 r) (same_sign1 r y)))
     (and
     (=> (and (is_infinite1 x) (tqtisFinite1 y))
     (and (is_infinite1 r) (same_sign1 r x)))
     (and
     (=> (and (is_infinite1 x) (and (is_infinite1 y) (same_sign1 x y)))
     (and (is_infinite1 r) (same_sign1 r x)))
     (and
     (=> (and (is_infinite1 x) (and (is_infinite1 y) (diff_sign1 x y)))
     (is_nan1 r))
     (and
     (=>
     (and (tqtisFinite1 x)
     (and (tqtisFinite1 y)
     (not (no_overflow1 m (+ (tqtreal1 x) (tqtreal1 y))))))
     (and (same_sign_real1 r (+ (tqtreal1 x) (tqtreal1 y))) (overflow_value1
     m r)))
     (=> (and (tqtisFinite1 x) (tqtisFinite1 y))
     (ite (same_sign1 x y) (same_sign1 r x) (sign_zero_result1 m r)))))))))) :pattern (
  (add1 m x y)) )))

;; sub_special
  (assert
  (forall ((m mode) (x t1) (y t1))
  (! (let ((r (sub1 m x y)))
     (and (=> (or (is_nan1 x) (is_nan1 y)) (is_nan1 r))
     (and
     (=> (and (tqtisFinite1 x) (is_infinite1 y))
     (and (is_infinite1 r) (diff_sign1 r y)))
     (and
     (=> (and (is_infinite1 x) (tqtisFinite1 y))
     (and (is_infinite1 r) (same_sign1 r x)))
     (and
     (=> (and (is_infinite1 x) (and (is_infinite1 y) (same_sign1 x y)))
     (is_nan1 r))
     (and
     (=> (and (is_infinite1 x) (and (is_infinite1 y) (diff_sign1 x y)))
     (and (is_infinite1 r) (same_sign1 r x)))
     (and
     (=>
     (and (tqtisFinite1 x)
     (and (tqtisFinite1 y)
     (not (no_overflow1 m (- (tqtreal1 x) (tqtreal1 y))))))
     (and (same_sign_real1 r (- (tqtreal1 x) (tqtreal1 y))) (overflow_value1
     m r)))
     (=> (and (tqtisFinite1 x) (tqtisFinite1 y))
     (ite (diff_sign1 x y) (same_sign1 r x) (sign_zero_result1 m r)))))))))) :pattern (
  (sub1 m x y)) )))

;; mul_special
  (assert
  (forall ((m mode) (x t1) (y t1))
  (! (let ((r (mul1 m x y)))
     (and (=> (or (is_nan1 x) (is_nan1 y)) (is_nan1 r))
     (and (=> (and (is_zero1 x) (is_infinite1 y)) (is_nan1 r))
     (and
     (=> (and (tqtisFinite1 x) (and (is_infinite1 y) (not (is_zero1 x))))
     (is_infinite1 r))
     (and (=> (and (is_infinite1 x) (is_zero1 y)) (is_nan1 r))
     (and
     (=> (and (is_infinite1 x) (and (tqtisFinite1 y) (not (is_zero1 y))))
     (is_infinite1 r))
     (and (=> (and (is_infinite1 x) (is_infinite1 y)) (is_infinite1 r))
     (and
     (=>
     (and (tqtisFinite1 x)
     (and (tqtisFinite1 y)
     (not (no_overflow1 m (* (tqtreal1 x) (tqtreal1 y)))))) (overflow_value1
     m r)) (=> (not (is_nan1 r)) (product_sign1 r x y)))))))))) :pattern (
  (mul1 m x y)) )))

;; div_special
  (assert
  (forall ((m mode) (x t1) (y t1))
  (! (let ((r (div2 m x y)))
     (and (=> (or (is_nan1 x) (is_nan1 y)) (is_nan1 r))
     (and (=> (and (tqtisFinite1 x) (is_infinite1 y)) (is_zero1 r))
     (and (=> (and (is_infinite1 x) (tqtisFinite1 y)) (is_infinite1 r))
     (and (=> (and (is_infinite1 x) (is_infinite1 y)) (is_nan1 r))
     (and
     (=>
     (and (tqtisFinite1 x)
     (and (tqtisFinite1 y)
     (and (not (is_zero1 y))
     (not (no_overflow1 m (/ (tqtreal1 x) (tqtreal1 y))))))) (overflow_value1
     m r))
     (and
     (=> (and (tqtisFinite1 x) (and (is_zero1 y) (not (is_zero1 x))))
     (is_infinite1 r))
     (and (=> (and (is_zero1 x) (is_zero1 y)) (is_nan1 r))
     (=> (not (is_nan1 r)) (product_sign1 r x y)))))))))) :pattern ((div2 m x
                                                                    y)) )))

;; neg_special
  (assert
  (forall ((x t1))
  (! (and (=> (is_nan1 x) (is_nan1 (neg1 x)))
     (and (=> (is_infinite1 x) (is_infinite1 (neg1 x)))
     (=> (not (is_nan1 x)) (diff_sign1 x (neg1 x))))) :pattern ((neg1 x)) )))

;; abs_special
  (assert
  (forall ((x t1))
  (! (and (=> (is_nan1 x) (is_nan1 (abs2 x)))
     (and (=> (is_infinite1 x) (is_infinite1 (abs2 x)))
     (=> (not (is_nan1 x)) (is_positive1 (abs2 x))))) :pattern ((abs2 x)) )))

;; fma_special
  (assert
  (forall ((m mode) (x t1) (y t1) (z t1))
  (! (let ((r (fma1 m x y z)))
     (and (=> (or (is_nan1 x) (or (is_nan1 y) (is_nan1 z))) (is_nan1 r))
     (and (=> (and (is_zero1 x) (is_infinite1 y)) (is_nan1 r))
     (and (=> (and (is_infinite1 x) (is_zero1 y)) (is_nan1 r))
     (and
     (=>
     (and (tqtisFinite1 x)
     (and (not (is_zero1 x)) (and (is_infinite1 y) (tqtisFinite1 z))))
     (and (is_infinite1 r) (product_sign1 r x y)))
     (and
     (=>
     (and (tqtisFinite1 x)
     (and (not (is_zero1 x)) (and (is_infinite1 y) (is_infinite1 z))))
     (ite (product_sign1 z x y) (and (is_infinite1 r) (same_sign1 r z))
     (is_nan1 r)))
     (and
     (=>
     (and (is_infinite1 x)
     (and (tqtisFinite1 y) (and (not (is_zero1 y)) (tqtisFinite1 z))))
     (and (is_infinite1 r) (product_sign1 r x y)))
     (and
     (=>
     (and (is_infinite1 x)
     (and (tqtisFinite1 y) (and (not (is_zero1 y)) (is_infinite1 z))))
     (ite (product_sign1 z x y) (and (is_infinite1 r) (same_sign1 r z))
     (is_nan1 r)))
     (and
     (=> (and (is_infinite1 x) (and (is_infinite1 y) (tqtisFinite1 z)))
     (and (is_infinite1 r) (product_sign1 r x y)))
     (and
     (=> (and (tqtisFinite1 x) (and (tqtisFinite1 y) (is_infinite1 z)))
     (and (is_infinite1 r) (same_sign1 r z)))
     (and
     (=> (and (is_infinite1 x) (and (is_infinite1 y) (is_infinite1 z)))
     (ite (product_sign1 z x y) (and (is_infinite1 r) (same_sign1 r z))
     (is_nan1 r)))
     (and
     (=>
     (and (tqtisFinite1 x)
     (and (tqtisFinite1 y)
     (and (tqtisFinite1 z)
     (not (no_overflow1 m (+ (* (tqtreal1 x) (tqtreal1 y)) (tqtreal1 z)))))))
     (and (same_sign_real1 r (+ (* (tqtreal1 x) (tqtreal1 y)) (tqtreal1 z)))
     (overflow_value1 m r)))
     (=> (and (tqtisFinite1 x) (and (tqtisFinite1 y) (tqtisFinite1 z)))
     (ite (product_sign1 z x y) (same_sign1 r z)
     (=> (= (+ (* (tqtreal1 x) (tqtreal1 y)) (tqtreal1 z)) 0.0)
     (ite (= m RTN1) (is_negative1 r) (is_positive1 r))))))))))))))))) :pattern (
  (fma1 m x y z)) )))

;; sqrt_special
  (assert
  (forall ((m mode) (x t1))
  (! (let ((r (sqrt2 m x)))
     (and (=> (is_nan1 x) (is_nan1 r))
     (and (=> (is_plus_infinity1 x) (is_plus_infinity1 r))
     (and (=> (is_minus_infinity1 x) (is_nan1 r))
     (and (=> (and (tqtisFinite1 x) (< (tqtreal1 x) 0.0)) (is_nan1 r))
     (and (=> (is_zero1 x) (same_sign1 r x))
     (=> (and (tqtisFinite1 x) (< 0.0 (tqtreal1 x))) (is_positive1 r)))))))) :pattern (
  (sqrt2 m x)) )))

;; of_int_add_exact
  (assert
  (forall ((m mode) (n mode) (i Int) (j Int))
  (=> (in_safe_int_range1 i)
  (=> (in_safe_int_range1 j)
  (=> (in_safe_int_range1 (+ i j)) (eq1 (of_int2 m (+ i j))
  (add1 n (of_int2 m i) (of_int2 m j))))))))

;; of_int_sub_exact
  (assert
  (forall ((m mode) (n mode) (i Int) (j Int))
  (=> (in_safe_int_range1 i)
  (=> (in_safe_int_range1 j)
  (=> (in_safe_int_range1 (- i j)) (eq1 (of_int2 m (- i j))
  (sub1 n (of_int2 m i) (of_int2 m j))))))))

;; of_int_mul_exact
  (assert
  (forall ((m mode) (n mode) (i Int) (j Int))
  (=> (in_safe_int_range1 i)
  (=> (in_safe_int_range1 j)
  (=> (in_safe_int_range1 (* i j)) (eq1 (of_int2 m (* i j))
  (mul1 n (of_int2 m i) (of_int2 m j))))))))

;; Min_r
  (assert (forall ((x t1) (y t1)) (=> (le1 y x) (eq1 (min1 x y) y))))

;; Min_l
  (assert (forall ((x t1) (y t1)) (=> (le1 x y) (eq1 (min1 x y) x))))

;; Max_r
  (assert (forall ((x t1) (y t1)) (=> (le1 y x) (eq1 (max1 x y) x))))

;; Max_l
  (assert (forall ((x t1) (y t1)) (=> (le1 x y) (eq1 (max1 x y) y))))

(declare-fun is_int2 (t1) Bool)

;; zeroF_is_int
  (assert (is_int2 zeroF1))

;; of_int_is_int
  (assert
  (forall ((m mode) (x Int)) (=> (in_int_range1 x) (is_int2 (of_int2 m x)))))

;; big_float_is_int
  (assert
  (forall ((m mode) (i t1))
  (=> (tqtisFinite1 i)
  (=>
  (or (le1 i (neg1 (of_int2 m 9007199254740992))) (le1
  (of_int2 m 9007199254740992) i)) (is_int2 i)))))

;; roundToIntegral_is_int
  (assert
  (forall ((m mode) (x t1))
  (=> (tqtisFinite1 x) (is_int2 (roundToIntegral1 m x)))))

;; eq_is_int
  (assert
  (forall ((x t1) (y t1)) (=> (eq1 x y) (=> (is_int2 x) (is_int2 y)))))

;; add_int
  (assert
  (forall ((x t1) (y t1) (m mode))
  (=> (is_int2 x)
  (=> (is_int2 y) (=> (tqtisFinite1 (add1 m x y)) (is_int2 (add1 m x y)))))))

;; sub_int
  (assert
  (forall ((x t1) (y t1) (m mode))
  (=> (is_int2 x)
  (=> (is_int2 y) (=> (tqtisFinite1 (sub1 m x y)) (is_int2 (sub1 m x y)))))))

;; mul_int
  (assert
  (forall ((x t1) (y t1) (m mode))
  (=> (is_int2 x)
  (=> (is_int2 y) (=> (tqtisFinite1 (mul1 m x y)) (is_int2 (mul1 m x y)))))))

;; fma_int
  (assert
  (forall ((x t1) (y t1) (z t1) (m mode))
  (=> (is_int2 x)
  (=> (is_int2 y)
  (=> (is_int2 z)
  (=> (tqtisFinite1 (fma1 m x y z)) (is_int2 (fma1 m x y z))))))))

;; neg_int
  (assert (forall ((x t1)) (=> (is_int2 x) (is_int2 (neg1 x)))))

;; abs_int
  (assert (forall ((x t1)) (=> (is_int2 x) (is_int2 (abs2 x)))))

;; is_int_of_int
  (assert
  (forall ((x t1) (m mode) (mqt mode))
  (=> (is_int2 x) (eq1 x (of_int2 mqt (to_int3 m x))))))

;; is_int_to_int
  (assert
  (forall ((m mode) (x t1)) (=> (is_int2 x) (in_int_range1 (to_int3 m x)))))

;; is_int_is_finite
  (assert (forall ((x t1)) (=> (is_int2 x) (tqtisFinite1 x))))

;; int_to_real
  (assert
  (forall ((m mode) (x t1))
  (=> (is_int2 x) (= (tqtreal1 x) (to_real (to_int3 m x))))))

;; truncate_int
  (assert
  (forall ((m mode) (i t1)) (=> (is_int2 i) (eq1 (roundToIntegral1 m i) i))))

;; truncate_neg
  (assert
  (forall ((x t1))
  (=> (tqtisFinite1 x)
  (=> (is_negative1 x)
  (= (roundToIntegral1 RTZ1 x) (roundToIntegral1 RTP1 x))))))

;; truncate_pos
  (assert
  (forall ((x t1))
  (=> (tqtisFinite1 x)
  (=> (is_positive1 x)
  (= (roundToIntegral1 RTZ1 x) (roundToIntegral1 RTN1 x))))))

;; ceil_le
  (assert
  (forall ((x t1)) (=> (tqtisFinite1 x) (le1 x (roundToIntegral1 RTP1 x)))))

;; ceil_lest
  (assert
  (forall ((x t1) (y t1))
  (=> (and (le1 x y) (is_int2 y)) (le1 (roundToIntegral1 RTP1 x) y))))

;; ceil_to_real
  (assert
  (forall ((x t1))
  (=> (tqtisFinite1 x)
  (= (tqtreal1 (roundToIntegral1 RTP1 x)) (to_real (- 1 (to_int (- 1.0
  (tqtreal1 x)))))))))

;; ceil_to_int
  (assert
  (forall ((m mode) (x t1))
  (=> (tqtisFinite1 x)
  (= (to_int3 m (roundToIntegral1 RTP1 x)) (- 1 (to_int (- 1.0 (tqtreal1 x))))))))

;; floor_le
  (assert
  (forall ((x t1)) (=> (tqtisFinite1 x) (le1 (roundToIntegral1 RTN1 x) x))))

;; floor_lest
  (assert
  (forall ((x t1) (y t1))
  (=> (and (le1 y x) (is_int2 y)) (le1 y (roundToIntegral1 RTN1 x)))))

;; floor_to_real
  (assert
  (forall ((x t1))
  (=> (tqtisFinite1 x)
  (= (tqtreal1 (roundToIntegral1 RTN1 x)) (to_real (to_int (tqtreal1 x)))))))

;; floor_to_int
  (assert
  (forall ((m mode) (x t1))
  (=> (tqtisFinite1 x)
  (= (to_int3 m (roundToIntegral1 RTN1 x)) (to_int (tqtreal1 x))))))

;; RNA_down
  (assert
  (forall ((x t1))
  (=> (lt1 (sub1 RNE1 x (roundToIntegral1 RTN1 x))
  (sub1 RNE1 (roundToIntegral1 RTP1 x) x))
  (= (roundToIntegral1 RNA1 x) (roundToIntegral1 RTN1 x)))))

;; RNA_up
  (assert
  (forall ((x t1))
  (=> (lt1 (sub1 RNE1 (roundToIntegral1 RTP1 x) x)
  (sub1 RNE1 x (roundToIntegral1 RTN1 x)))
  (= (roundToIntegral1 RNA1 x) (roundToIntegral1 RTP1 x)))))

;; RNA_down_tie
  (assert
  (forall ((x t1))
  (=> (eq1 (sub1 RNE1 x (roundToIntegral1 RTN1 x))
  (sub1 RNE1 (roundToIntegral1 RTP1 x) x))
  (=> (is_negative1 x)
  (= (roundToIntegral1 RNA1 x) (roundToIntegral1 RTN1 x))))))

;; RNA_up_tie
  (assert
  (forall ((x t1))
  (=> (eq1 (sub1 RNE1 (roundToIntegral1 RTP1 x) x)
  (sub1 RNE1 x (roundToIntegral1 RTN1 x)))
  (=> (is_positive1 x)
  (= (roundToIntegral1 RNA1 x) (roundToIntegral1 RTP1 x))))))

;; to_int_roundToIntegral
  (assert
  (forall ((m mode) (x t1))
  (= (to_int3 m x) (to_int3 m (roundToIntegral1 m x)))))

;; to_int_monotonic
  (assert
  (forall ((m mode) (x t1) (y t1))
  (=> (tqtisFinite1 x)
  (=> (tqtisFinite1 y) (=> (le1 x y) (<= (to_int3 m x) (to_int3 m y)))))))

;; to_int_of_int
  (assert
  (forall ((m mode) (i Int))
  (=> (in_safe_int_range1 i) (= (to_int3 m (of_int2 m i)) i))))

;; eq_to_int
  (assert
  (forall ((m mode) (x t1) (y t1))
  (=> (tqtisFinite1 x) (=> (eq1 x y) (= (to_int3 m x) (to_int3 m y))))))

;; neg_to_int
  (assert
  (forall ((m mode) (x t1))
  (=> (is_int2 x) (= (to_int3 m (neg1 x)) (- (to_int3 m x))))))

;; roundToIntegral_is_finite
  (assert
  (forall ((m mode) (x t1))
  (=> (tqtisFinite1 x) (tqtisFinite1 (roundToIntegral1 m x)))))

;; round_bound_ne
  (assert
  (forall ((x Real))
  (! (=> (no_overflow1 RNE1 x)
     (and
     (<= (- (- x (* (/ 1.0 9007199254740992.0) (ite (>= x 0.0) x (- x)))) (/ 1.0 404804506614621236704990693437834614099113299528284236713802716054860679135990693783920767402874248990374155728633623822779617474771586953734026799881477019843034848553132722728933815484186432682479535356945490137124014966849385397236206711298319112681620113024717539104666829230461005064372655017292012526615415482186989568.0))
     (round1 RNE1 x))
     (<= (round1 RNE1 x) (+ (+ x (* (/ 1.0 9007199254740992.0) (ite (>= x 0.0) x (- x)))) (/ 1.0 404804506614621236704990693437834614099113299528284236713802716054860679135990693783920767402874248990374155728633623822779617474771586953734026799881477019843034848553132722728933815484186432682479535356945490137124014966849385397236206711298319112681620113024717539104666829230461005064372655017292012526615415482186989568.0))))) :pattern (
  (round1 RNE1 x)) )))

;; round_bound
  (assert
  (forall ((m mode) (x Real))
  (! (=> (no_overflow1 m x)
     (and
     (<= (- (- x (* (/ 1.0 4503599627370496.0) (ite (>= x 0.0) x (- x)))) (/ 1.0 202402253307310618352495346718917307049556649764142118356901358027430339567995346891960383701437124495187077864316811911389808737385793476867013399940738509921517424276566361364466907742093216341239767678472745068562007483424692698618103355649159556340810056512358769552333414615230502532186327508646006263307707741093494784.0))
     (round1 m x))
     (<= (round1 m x) (+ (+ x (* (/ 1.0 4503599627370496.0) (ite (>= x 0.0) x (- x)))) (/ 1.0 202402253307310618352495346718917307049556649764142118356901358027430339567995346891960383701437124495187077864316811911389808737385793476867013399940738509921517424276566361364466907742093216341239767678472745068562007483424692698618103355649159556340810056512358769552333414615230502532186327508646006263307707741093494784.0))))) :pattern (
  (round1 m x)) )))

(define-fun neq1 ((x t1) (y t1)) Bool (not (eq1 x y)))

(define-fun bool_lt1 ((x t1) (y t1)) Bool (ite (lt1 x y) true false))

(define-fun bool_le1 ((x t1) (y t1)) Bool (ite (le1 x y) true false))

(define-fun bool_gt1 ((x t1) (y t1)) Bool (ite (lt1 y x) true false))

(define-fun bool_ge1 ((x t1) (y t1)) Bool (ite (le1 y x) true false))

(define-fun bool_eq1 ((x t1) (y t1)) Bool (ite (eq1 x y) true false))

(define-fun bool_neq1 ((x t1) (y t1)) Bool (ite (not (eq1 x y)) true false))

(declare-fun rem2 (t1 t1) t1)

(declare-const fliteral1 t1)

;; fliteral_axiom
  (assert (and (tqtisFinite1 fliteral1) (= (tqtreal1 fliteral1) 1.0)))

;; one_is_int
  (assert (is_int2 fliteral1))

;; one_of_int
  (assert (= fliteral1 (of_int2 RNA1 1)))

(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 t1)))))
(declare-fun to_float32 (Int) t)

(declare-fun of_float32 (t) Int)

(declare-fun to_float64 (Int) t1)

(declare-fun of_float64 (t1) Int)

(declare-sort integer 0)

(define-fun in_range3 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range3 temp___expr_15)))

(declare-sort float 0)

(define-fun bool_eq2 ((x t) (y t)) Bool (ite (eq x y) true false))

(declare-fun user_eq1 (float float) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE2 (t) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) t)

(declare-const dummy1 float)

(declare-datatypes () ((float__ref (mk_float__ref (float__content float)))))
(define-fun float__ref___projection ((a float__ref)) float (float__content a))

(declare-const fliteral2 t)

;; fliteral_axiom
  (assert
  (and (tqtisFinite fliteral2)
  (= (tqtreal fliteral2) 340282346638528859811704183484516925440.0)))

(define-fun dynamic_invariant1 ((temp___expr_51 t) (temp___is_init_48 Bool)
  (temp___skip_constant_49 Bool)
  (temp___do_toplevel_50 Bool)) Bool (=>
                                     (or (= temp___is_init_48 true) (le
                                     (neg fliteral2) fliteral2)) (tqtisFinite
                                     temp___expr_51)))

(declare-sort ttB 0)

(define-fun in_range4 ((x Int)) Bool (and (<= (- 32768) x) (<= x 32767)))

(declare-fun div3 (Int Int) Int)

(declare-fun mod1 (Int Int) Int)

;; Div_mod
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (= x (+ (* y (div3 x y)) (mod1 x y))))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div3 x y)) (<= (div3 x y) x)))))

;; Mod_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))

;; Div_sign_pos
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div3 x y)))))

;; Div_sign_neg
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div3 x y) 0))))

;; Mod_sign_pos
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))

;; Mod_sign_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))

;; Rounds_toward_zero
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (<= (abs (* (div3 x y) y)) (abs x)))))

;; Div_1
  (assert (forall ((x Int)) (= (div3 x 1) x)))

;; Mod_1
  (assert (forall ((x Int)) (= (mod1 x 1) 0)))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div3 x y) 0))))

;; Mod_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (div3 (+ (* x y) z) x) (+ y (div3 z x)))) :pattern ((div3
                                                            (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)) )))

(define-fun mod2 ((x Int)
  (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))

(declare-const dummy2 ttB)

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun to_fixed (ttB) Int)

(declare-fun of_fixed (Int) ttB)

(declare-fun user_eq2 (ttB ttB) Bool)

(define-fun pos_div_relation ((res Int) (num Int)
  (den Int)) Bool (let ((exact (div3 num den)))
                  (ite (= num 0) (= res 0)
                  (ite (= num (* exact den)) (= res exact)
                  (and (<= exact res) (<= res (+ exact 1)))))))

(define-fun pos_div_relation_rna ((res Int) (num Int)
  (den Int)) Bool (let ((exact (div3 num den)))
                  (ite (= num 0) (= res 0)
                  (ite (= num (* exact den)) (= res exact)
                  (ite (< (- num (* exact den)) (- (* (+ exact 1) den) num))
                  (= res exact) (= res (+ exact 1)))))))

(declare-fun fxp_mult (Int Int) Int)

;; fxp_mult_def
  (assert
  (forall ((x Int))
  (forall ((y Int))
  (! (ite (or (= x 0) (= y 0)) (= (fxp_mult x y) 0)
     (ite (or (and (< 0 x) (< 0 y)) (and (< x 0) (< y 0))) (pos_div_relation
     (fxp_mult x y) (* x y) 256) (pos_div_relation (- (fxp_mult x y))
     (- (* x y)) 256))) :pattern ((fxp_mult x y)) ))))

(declare-fun fxp_div (Int Int) Int)

;; fxp_div_def
  (assert
  (forall ((x Int))
  (forall ((y Int))
  (! (ite (= x 0) (= (fxp_div x y) 0)
     (ite (and (< 0 x) (< 0 y)) (pos_div_relation (fxp_div x y) (* x 256) y)
     (ite (and (< x 0) (< y 0)) (pos_div_relation (fxp_div x y) (* (- x) 256)
     (- y))
     (ite (and (< x 0) (< 0 y)) (pos_div_relation (- (fxp_div x y))
     (* (- x) 256) y)
     (=> (and (< 0 x) (< y 0)) (pos_div_relation (- (fxp_div x y)) (* x 256)
     (- y))))))) :pattern ((fxp_div x y)) ))))

(declare-fun fxp_div_int (Int Int) Int)

;; fxp_div_int_def
  (assert
  (forall ((x Int))
  (forall ((y Int))
  (! (ite (= x 0) (= (fxp_div_int x y) 0)
     (ite (and (< 0 x) (< 0 y)) (pos_div_relation (fxp_div_int x y) x y)
     (ite (and (< x 0) (< y 0)) (pos_div_relation (fxp_div_int x y) (- x)
     (- y))
     (ite (and (< x 0) (< 0 y)) (pos_div_relation (- (fxp_div_int x y)) (- x)
     y)
     (=> (and (< 0 x) (< y 0)) (pos_div_relation (- (fxp_div_int x y)) x
     (- y))))))) :pattern ((fxp_div_int x y)) ))))

(declare-fun fxp_div_result_int (Int Int) Int)

;; fxp_div_result_int_def
  (assert
  (forall ((x Int))
  (forall ((y Int))
  (! (ite (= x 0) (= (fxp_div_result_int x y) 0)
     (ite (and (< 0 x) (< 0 y)) (pos_div_relation_rna
     (fxp_div_result_int x y) x y)
     (ite (and (< x 0) (< y 0)) (pos_div_relation_rna
     (fxp_div_result_int x y) (- x) (- y))
     (ite (and (< x 0) (< 0 y)) (pos_div_relation_rna
     (- (fxp_div_result_int x y)) (- x) y)
     (=> (and (< 0 x) (< y 0)) (pos_div_relation_rna
     (- (fxp_div_result_int x y)) x (- y))))))) :pattern ((fxp_div_result_int
                                                          x y)) ))))

(declare-fun to_int4 (Int) Int)

;; to_int_def
  (assert
  (forall ((x Int))
  (! (ite (= x 0) (= (to_int4 x) 0)
     (ite (< 0 x) (pos_div_relation (to_int4 x) x 256) (pos_div_relation
     (- (to_int4 x)) (- x) 256))) :pattern ((to_int4 x)) )))

(declare-fun of_real (Real) Int)

;; inversion_axiom
  (assert
  (forall ((x ttB))
  (! (= (of_fixed (to_fixed x)) x) :pattern ((to_fixed x)) )))

;; range_axiom
  (assert (forall ((x ttB)) (in_range4 (to_fixed x))))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_fixed (of_fixed x)) x)) :pattern ((to_fixed
                                                                (of_fixed x))) )))

(declare-datatypes () ((ttB__ref (mk_ttB__ref (ttB__content ttB)))))
(define-fun ttB__ref___projection ((a ttB__ref)) ttB (ttB__content a))

(declare-sort t2 0)

(define-fun in_range5 ((x Int)) Bool (and (<= (- 2560) x) (<= x 2560)))

(declare-const dummy3 t2)

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun to_fixed1 (t2) Int)

(declare-fun of_fixed1 (Int) t2)

(declare-fun user_eq3 (t2 t2) Bool)

(define-fun pos_div_relation1 ((res Int) (num Int)
  (den Int)) Bool (let ((exact (div3 num den)))
                  (ite (= num 0) (= res 0)
                  (ite (= num (* exact den)) (= res exact)
                  (and (<= exact res) (<= res (+ exact 1)))))))

(define-fun pos_div_relation_rna1 ((res Int) (num Int)
  (den Int)) Bool (let ((exact (div3 num den)))
                  (ite (= num 0) (= res 0)
                  (ite (= num (* exact den)) (= res exact)
                  (ite (< (- num (* exact den)) (- (* (+ exact 1) den) num))
                  (= res exact) (= res (+ exact 1)))))))

(declare-fun fxp_mult1 (Int Int) Int)

;; fxp_mult_def
  (assert
  (forall ((x Int))
  (forall ((y Int))
  (! (ite (or (= x 0) (= y 0)) (= (fxp_mult1 x y) 0)
     (ite (or (and (< 0 x) (< 0 y)) (and (< x 0) (< y 0))) (pos_div_relation1
     (fxp_mult1 x y) (* x y) 256) (pos_div_relation1 (- (fxp_mult1 x y))
     (- (* x y)) 256))) :pattern ((fxp_mult1 x y)) ))))

(declare-fun fxp_div1 (Int Int) Int)

;; fxp_div_def
  (assert
  (forall ((x Int))
  (forall ((y Int))
  (! (ite (= x 0) (= (fxp_div1 x y) 0)
     (ite (and (< 0 x) (< 0 y)) (pos_div_relation1 (fxp_div1 x y) (* x 256)
     y)
     (ite (and (< x 0) (< y 0)) (pos_div_relation1 (fxp_div1 x y)
     (* (- x) 256) (- y))
     (ite (and (< x 0) (< 0 y)) (pos_div_relation1 (- (fxp_div1 x y))
     (* (- x) 256) y)
     (=> (and (< 0 x) (< y 0)) (pos_div_relation1 (- (fxp_div1 x y))
     (* x 256) (- y))))))) :pattern ((fxp_div1 x y)) ))))

(declare-fun fxp_div_int1 (Int Int) Int)

;; fxp_div_int_def
  (assert
  (forall ((x Int))
  (forall ((y Int))
  (! (ite (= x 0) (= (fxp_div_int1 x y) 0)
     (ite (and (< 0 x) (< 0 y)) (pos_div_relation1 (fxp_div_int1 x y) x y)
     (ite (and (< x 0) (< y 0)) (pos_div_relation1 (fxp_div_int1 x y) (- x)
     (- y))
     (ite (and (< x 0) (< 0 y)) (pos_div_relation1 (- (fxp_div_int1 x y))
     (- x) y)
     (=> (and (< 0 x) (< y 0)) (pos_div_relation1 (- (fxp_div_int1 x y)) x
     (- y))))))) :pattern ((fxp_div_int1 x y)) ))))

(declare-fun fxp_div_result_int1 (Int Int) Int)

;; fxp_div_result_int_def
  (assert
  (forall ((x Int))
  (forall ((y Int))
  (! (ite (= x 0) (= (fxp_div_result_int1 x y) 0)
     (ite (and (< 0 x) (< 0 y)) (pos_div_relation_rna1
     (fxp_div_result_int1 x y) x y)
     (ite (and (< x 0) (< y 0)) (pos_div_relation_rna1
     (fxp_div_result_int1 x y) (- x) (- y))
     (ite (and (< x 0) (< 0 y)) (pos_div_relation_rna1
     (- (fxp_div_result_int1 x y)) (- x) y)
     (=> (and (< 0 x) (< y 0)) (pos_div_relation_rna1
     (- (fxp_div_result_int1 x y)) x (- y))))))) :pattern ((fxp_div_result_int1
                                                           x y)) ))))

(declare-fun to_int5 (Int) Int)

;; to_int_def
  (assert
  (forall ((x Int))
  (! (ite (= x 0) (= (to_int5 x) 0)
     (ite (< 0 x) (pos_div_relation1 (to_int5 x) x 256) (pos_div_relation1
     (- (to_int5 x)) (- x) 256))) :pattern ((to_int5 x)) )))

(declare-fun of_real1 (Real) Int)

;; inversion_axiom
  (assert
  (forall ((x t2))
  (! (= (of_fixed1 (to_fixed1 x)) x) :pattern ((to_fixed1 x)) )))

;; range_axiom
  (assert (forall ((x t2)) (in_range5 (to_fixed1 x))))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_fixed1 (of_fixed1 x)) x)) :pattern ((to_fixed1
                                                                  (of_fixed1
                                                                  x))) )))

(declare-datatypes () ((t__ref2 (mk_t__ref2 (t__content2 t2)))))
(define-fun t__ref___projection ((a t__ref2)) t2 (t__content2 a))

(declare-const x t2)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-sort ty2S 0)

(define-fun in_range6 ((x1 Int)) Bool (and (<= 0 x1) (<= x1 10)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq4 (ty2S ty2S) Bool)

(declare-const dummy4 ty2S)

(declare-datatypes () ((ty2S__ref (mk_ty2S__ref (ty2S__content ty2S)))))
(define-fun ty2S__ref___projection ((a ty2S__ref)) ty2S (ty2S__content a))

(define-fun dynamic_invariant2 ((temp___expr_141 Int)
  (temp___is_init_138 Bool) (temp___skip_constant_139 Bool)
  (temp___do_toplevel_140 Bool)) Bool (=>
                                      (or (= temp___is_init_138 true)
                                      (<= 0 10)) (in_range6 temp___expr_141)))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-sort t3 0)

(define-fun in_range7 ((x1 Int)) Bool (and (<= 0 x1) (<= x1 10)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq5 (t3 t3) Bool)

(declare-const dummy5 t3)

(declare-datatypes () ((t3__ref (mk_t3__ref (t3__content t3)))))
(define-fun t3__ref___projection ((a t3__ref)) t3 (t3__content a))

(define-fun dynamic_invariant3 ((temp___expr_147 Int)
  (temp___is_init_144 Bool) (temp___skip_constant_145 Bool)
  (temp___do_toplevel_146 Bool)) Bool (=>
                                      (or (= temp___is_init_144 true)
                                      (<= 0 10)) (in_range7 temp___expr_147)))

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-sort tz2S 0)

(declare-const fliteral3 t)

;; fliteral_axiom
  (assert (and (tqtisFinite fliteral3) (= (tqtreal fliteral3) (/ 0.0 10.0))))

(declare-const fliteral4 t)

;; fliteral_axiom
  (assert (and (tqtisFinite fliteral4) (= (tqtreal fliteral4) 10.0)))

(define-fun in_range8 ((x1 t)) Bool (and (tqtisFinite x1)
                                    (and (le fliteral3 x1) (le x1 fliteral4))))

(define-fun bool_eq3 ((x1 t) (y t)) Bool (ite (eq x1 y) true false))

(declare-fun user_eq6 (tz2S tz2S) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE7 (t) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) t)

(declare-const dummy6 tz2S)

(declare-datatypes () ((tz2S__ref (mk_tz2S__ref (tz2S__content tz2S)))))
(define-fun tz2S__ref___projection ((a tz2S__ref)) tz2S (tz2S__content a))

(define-fun dynamic_invariant4 ((temp___expr_153 t) (temp___is_init_150 Bool)
  (temp___skip_constant_151 Bool)
  (temp___do_toplevel_152 Bool)) Bool (=>
                                      (or (= temp___is_init_150 true) (le
                                      fliteral3 fliteral4)) (in_range8
                                      temp___expr_153)))

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-sort tt3 0)

(define-fun in_range9 ((x1 t)) Bool (and (tqtisFinite x1)
                                    (and (le fliteral3 x1) (le x1 fliteral4))))

(define-fun bool_eq4 ((x1 t) (y t)) Bool (ite (eq x1 y) true false))

(declare-fun user_eq7 (tt3 tt3) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE8 (t) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) t)

(declare-const dummy7 tt3)

(declare-datatypes () ((tt3__ref (mk_tt3__ref (tt3__content tt3)))))
(define-fun tt3__ref___projection ((a tt3__ref)) tt3 (tt3__content a))

(define-fun dynamic_invariant5 ((temp___expr_159 t) (temp___is_init_156 Bool)
  (temp___skip_constant_157 Bool)
  (temp___do_toplevel_158 Bool)) Bool (=>
                                      (or (= temp___is_init_156 true) (le
                                      fliteral3 fliteral4)) (in_range9
                                      temp___expr_159)))

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const y1 Int)

(declare-const y2 Int)

(declare-const y3 Int)

(declare-const z1 t)

(declare-const z2 t)

(declare-const z3 t)

(declare-const u t2)

(declare-const o Int)

(declare-const o1 Int)

(declare-const o2 Int)

(declare-const o3 Int)

(declare-const o4 Int)

(declare-const o5 Int)

(declare-const o6 t2)

(declare-const o7 t2)

(declare-const o8 t2)

(declare-const result t)

(declare-const z11 t)

(declare-const result1 t)

(declare-const z21 t)

(declare-const result2 t)

(declare-const z31 t)

(declare-const result3 Int)

(declare-const y11 Int)

(declare-const result4 Int)

(declare-const y21 Int)

(declare-const result5 Int)

(declare-const y31 Int)

(declare-const result6 Int)

(declare-const y32 Int)

(declare-const result7 t2)

(declare-const u1 t2)

(declare-const result8 t2)

(declare-const u2 t2)

(declare-const result9 t2)

(declare-const u3 t2)

;; H
  (assert (and (<= (- 1280) (to_fixed1 x)) (<= (to_fixed1 x) 1280)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range3 y1)))

;; H
  (assert (=> (<= 0 10) (in_range6 y2)))

;; H
  (assert (=> (<= 0 10) (in_range7 y3)))

;; H
  (assert (= result z1))

;; H
  (assert (= z11 fliteral))

;; H
  (assert (tqtisFinite z11))

;; H
  (assert (= result1 z2))

;; H
  (assert (= z21 fliteral))

;; H
  (assert (in_range8 z21))

;; H
  (assert (= result2 z3))

;; H
  (assert (= z31 fliteral))

;; H
  (assert (in_range9 z31))

;; H
  (assert
  (and (= o (to_int5 (to_fixed1 x))) (in_range3 (to_int5 (to_fixed1 x)))))

;; H
  (assert (= result3 y1))

;; H
  (assert (= y11 o))

;; H
  (assert (<= 0 (to_fixed1 x)))

;; H
  (assert
  (and (= o1 (to_int5 (to_fixed1 x))) (in_range3 (to_int5 (to_fixed1 x)))))

;; H
  (assert (and (= o2 o1) (in_range6 o1)))

;; H
  (assert (= result4 y2))

;; H
  (assert (= y21 o2))

;; H
  (assert
  (and (= o3 (to_int4 (+ (to_fixed1 x) (to_fixed1 x)))) (in_range3
  (to_int4 (+ (to_fixed1 x) (to_fixed1 x))))))

;; H
  (assert (and (= o4 o3) (in_range7 o3)))

;; H
  (assert (= result5 y3))

;; H
  (assert (= y31 o4))

;; H
  (assert
  (and (= o5 (to_int4 (- (+ (to_fixed1 x) (to_fixed1 x)) (to_fixed1 x))))
  (in_range7 (to_int4 (- (+ (to_fixed1 x) (to_fixed1 x)) (to_fixed1 x))))))

;; H
  (assert (= result6 y31))

;; H
  (assert (= y32 o5))

;; H
  (assert (= (to_fixed1 o6) (* y11 256)))

;; H
  (assert (= result7 u))

;; H
  (assert (= u1 o6))

;; H
  (assert (= (to_fixed1 o7) (* y21 256)))

;; H
  (assert (= result8 u1))

;; H
  (assert (= u2 o7))

;; H
  (assert (= (to_fixed1 o8) (* y32 256)))

;; H
  (assert (= result9 u2))

;; H
  (assert (= u3 o8))

(assert
;; WP_parameter_def
 ;; File "binary_fixed.adb", line 57, characters 0-0
  (not (in_range5 (of_float32 z11))))
(check-sat)
(exit)
