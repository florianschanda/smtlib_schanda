;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun pow2 (Int) Int)

(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                (fp.isPositive x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                 (fp.isNegative x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x)
                                            (fp.isPositive x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x)
                                             (fp.isNegative x)))

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y))
                    (and (fp.isNegative x) (fp.isNegative y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y))
                    (and (fp.isNegative x) (fp.isPositive y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z))
                    (=> (diff_sign x y) (fp.isNegative z))))

(define-fun sqr ((x Real)) Real (* x x))

(declare-fun sqrt1 (Real) Real)

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r))
                 (and (fp.isNegative x) (< r 0.0))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content Float32)))))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort float 0)

(declare-fun user_eq (float float) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE1 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Float32)

(declare-const dummy float)

(declare-datatypes () ((float__ref (mk_float__ref (float__content float)))))
(define-fun float__ref___projection ((a float__ref)) float (float__content a))

(declare-fun to_rep (float) Float32)

(declare-fun of_rep (Float32) float)

;; inversion_axiom
  (assert
  (forall ((x float)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x float)) (! (fp.isFinite32 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Float32))
  (! (=> (fp.isFinite32 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                                (of_rep x))) )))

(define-fun dynamic_invariant ((temp___expr_60 Float32)
  (temp___is_init_56 Bool) (temp___skip_constant_57 Bool)
  (temp___do_toplevel_58 Bool)
  (temp___do_typ_inv_59 Bool)) Bool (=>
                                    (or (= temp___is_init_56 true)
                                    (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                    (fp.isFinite32 temp___expr_60)))

(declare-fun adjust2triangle (Float32 Float32 Float32) Float32)

(declare-fun adjust2triangle__function_guard (Float32 Float32 Float32
  Float32) Bool)

;; adjust2triangle__post_axiom
  (assert
  (forall ((d Float32) (kv Float32) (ka Float32))
  (! (=>
     (and
     (and
     (and (dynamic_invariant d true true true true) (dynamic_invariant kv
     true true true true)) (dynamic_invariant ka true true true true))
     (and
     (and (not (fp.eq d (fp #b0 #b00000000 #b00000000000000000000000)))
     (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) kv))
     (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) ka)))
     (let ((result (adjust2triangle d kv ka)))
     (and
     (and (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) result)
     (fp.leq result kv)) (dynamic_invariant result true false true true)))) :pattern (
  (adjust2triangle d kv ka)) )))

(declare-sort joint_index 0)

(declare-fun joint_indexqtint (joint_index) Int)

;; joint_index'axiom
  (assert
  (forall ((i joint_index))
  (and (<= 1 (joint_indexqtint i)) (<= (joint_indexqtint i) 2))))

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (joint_index joint_index) Bool)

(declare-const dummy1 joint_index)

(declare-datatypes ()
((joint_index__ref (mk_joint_index__ref (joint_index__content joint_index)))))
(define-fun joint_index__ref___projection ((a joint_index__ref)) joint_index
  (joint_index__content a))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int float))))))
(declare-fun slide ((Array Int float) Int Int) (Array Int float))

;; slide_eq
  (assert
  (forall ((a (Array Int float)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int float)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int float)) (a__first Int) (a__last Int)
  (b (Array Int float)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_154 Int))
                           (=>
                           (and (<= a__first temp___idx_154)
                           (<= temp___idx_154 a__last))
                           (= (to_rep (select a temp___idx_154)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_154)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int float)) (b (Array Int float)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_154 Int))
  (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last))
  (= (to_rep (select a temp___idx_154)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_154)))))))))))

(declare-const d (Array Int float))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const kv (Array Int float))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const ka (Array Int float))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-sort t11b 0)

(declare-fun t11bqtint (t11b) Int)

;; t11b'axiom
  (assert
  (forall ((i t11b)) (and (<= 1 (t11bqtint i)) (<= (t11bqtint i) 2))))

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (t11b t11b) Bool)

(declare-const dummy2 t11b)

(declare-datatypes () ((t11b__ref (mk_t11b__ref (t11b__content t11b)))))
(define-fun t11b__ref___projection ((a t11b__ref)) t11b (t11b__content a))

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(declare-fun homothetical__homothetical__lambda__aggregate_def (Float32) (Array Int float))

(declare-fun homothetical__homothetical__upsilon__aggregate_def (Float32) (Array Int float))

(declare-fun homothetical__homothetical__kvp__aggregate_def (Float32) (Array Int float))

(declare-fun temp_____aggregate_def_198 (Float32) (Array Int float))

(declare-fun temp_____aggregate_def_202 (Float32) (Array Int float))

;; def_axiom
  (assert
  (forall ((temp___185 Float32))
  (=> (dynamic_invariant temp___185 true true true true)
  (forall ((temp___186 Int))
  (= (to_rep
     (select (homothetical__homothetical__lambda__aggregate_def temp___185) temp___186)) temp___185)))))

;; def_axiom
  (assert
  (forall ((temp___188 Float32))
  (=> (dynamic_invariant temp___188 true true true true)
  (forall ((temp___189 Int))
  (= (to_rep
     (select (homothetical__homothetical__upsilon__aggregate_def temp___188) temp___189)) temp___188)))))

;; def_axiom
  (assert
  (forall ((temp___191 Float32))
  (=> (dynamic_invariant temp___191 true true true true)
  (forall ((temp___192 Int))
  (= (to_rep
     (select (homothetical__homothetical__kvp__aggregate_def temp___191) temp___192)) temp___191)))))

;; def_axiom
  (assert
  (forall ((temp___200 Float32))
  (=> (dynamic_invariant temp___200 true true true true)
  (forall ((temp___201 Int))
  (= (to_rep (select (temp_____aggregate_def_198 temp___200) temp___201)) temp___200)))))

;; def_axiom
  (assert
  (forall ((temp___204 Float32))
  (=> (dynamic_invariant temp___204 true true true true)
  (forall ((temp___205 Int))
  (= (to_rep (select (temp_____aggregate_def_202 temp___204) temp___205)) temp___204)))))

(define-fun dynamic_invariant1 ((temp___expr_166 Int)
  (temp___is_init_162 Bool) (temp___skip_constant_163 Bool)
  (temp___do_toplevel_164 Bool)
  (temp___do_typ_inv_165 Bool)) Bool (=>
                                     (or (= temp___is_init_162 true)
                                     (<= 1 2)) (in_range1 temp___expr_166)))

(declare-const lambda (Array Int float))

(declare-const upsilon (Array Int float))

(declare-const kvp (Array Int float))

(declare-const i Int)

(declare-const j Int)

(declare-const o Float32)

(declare-const o1 Float32)

(declare-const result (Array Int float))

(declare-const lambda1 (Array Int float))

(declare-const result1 (Array Int float))

(declare-const upsilon1 (Array Int float))

(declare-const result2 (Array Int float))

(declare-const kvp1 (Array Int float))

(declare-const kvp2 (Array Int float))

(declare-const result3 int__ref)

(declare-const i1 Int)

(declare-const result4 int__ref)

(declare-const j1 Int)

;; H
  (assert
  (forall ((j2 Int))
  (=> (and (<= 1 j2) (<= j2 2))
  (and
  (and
  (not (fp.eq (to_rep (select d j2)) (fp #b0 #b00000000 #b00000000000000000000000)))
  (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) (to_rep
                                                       (select kv j2))))
  (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) (to_rep
                                                       (select ka j2)))))))

;; H
  (assert (= (mk_map__ref result) (mk_map__ref lambda)))

;; H
  (assert
  (= lambda1 (homothetical__homothetical__lambda__aggregate_def
             (fp #b0 #b01111111 #b00000000000000000000000))))

;; H
  (assert (= (mk_map__ref result1) (mk_map__ref upsilon)))

;; H
  (assert
  (= upsilon1 (homothetical__homothetical__upsilon__aggregate_def
              (fp #b0 #b01111111 #b00000000000000000000000))))

;; H
  (assert (= (mk_map__ref result2) (mk_map__ref kvp)))

;; H
  (assert
  (= kvp1 (homothetical__homothetical__kvp__aggregate_def
          (fp #b0 #b00000000 #b00000000000000000000000))))

;; H
  (assert
  (forall ((i2 Int))
  (=> (and (<= 1 i2) (<= i2 2))
  (and
  (and
  (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) (to_rep
                                                       (select ka i2)))
  (not (fp.eq (to_rep (select kvp2 i2)) (fp #b0 #b00000000 #b00000000000000000000000))))
  (not (fp.eq (to_rep (select d i2)) (fp #b0 #b00000000 #b00000000000000000000000)))))))

;; H
  (assert (= result3 (mk_int__ref i)))

;; H
  (assert (= i1 1))

;; H
  (assert (= result4 (mk_int__ref j)))

;; H
  (assert (= j1 1))

;; H
  (assert (not (= i1 j1)))

;; H
  (assert
  (and
  (= o1 (fp.mul RNE (to_rep (select kvp2 i1)) (fp.abs (to_rep (select d j1)))))
  (fp.isFinite32 (fp.mul RNE (to_rep (select kvp2 i1)) (fp.abs (to_rep
                                                               (select
                                                               d j1)))))))

;; H
  (assert
  (and
  (= o (fp.mul RNE (to_rep (select kvp2 j1)) (fp.abs (to_rep (select d i1)))))
  (fp.isFinite32 (fp.mul RNE (to_rep (select kvp2 j1)) (fp.abs (to_rep
                                                               (select
                                                               d i1)))))))

(assert
;; WP_parameter_def
 ;; File "homothetical.adb", line 48, characters 0-0
  (not (not (fp.isZero o1))))
(check-sat)
(exit)
