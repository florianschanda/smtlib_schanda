;; produced by cvc4_14.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-fun pow2 (Int) Int)

(define-fun to_nearest ((m RoundingMode)) Bool (or (= m RNE) (= m RNA)))

(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(define-fun is_not_nan ((x Float32)) Bool (or
                                          (not (or (fp.isInfinite x) (fp.isNaN x)))
                                          (fp.isInfinite  x)))

(declare-fun of_int (RoundingMode Int) Float32)

(declare-fun to_int1 (RoundingMode Float32) Int)

(declare-fun round (RoundingMode Real) Real)

(declare-fun max_int () Int)

(define-fun in_range ((x Real)) Bool (and
                                     (<= (- (* 33554430.0 10141204801825835211973625643008.0)) x)
                                     (<= x (* 33554430.0 10141204801825835211973625643008.0))))

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun no_overflow ((m RoundingMode) (x Real)) Bool (in_range
  (round m x)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(declare-fun sqrt (Real) Real)

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(declare-fun is_int1 (Float32) Bool)

(define-fun neq ((x Float32) (y Float32)) Bool (not (fp.eq x y)))

(define-fun bool_lt ((x Float32)
  (y Float32)) Bool (ite (fp.lt x y) true false))

(define-fun bool_le ((x Float32)
  (y Float32)) Bool (ite (fp.leq x y) true false))

(define-fun bool_gt ((x Float32)
  (y Float32)) Bool (ite (fp.lt y x) true false))

(define-fun bool_ge ((x Float32)
  (y Float32)) Bool (ite (fp.leq y x) true false))

(define-fun bool_eq ((x Float32)
  (y Float32)) Bool (ite (fp.eq x y) true false))

(define-fun bool_neq ((x Float32)
  (y Float32)) Bool (ite (not (fp.eq x y)) true false))

(declare-datatypes () ((t__ref (mk_t__ref (t__content Float32)))))
(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int1 ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range1 ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort float 0)

(define-fun bool_eq1 ((x Float32)
  (y Float32)) Bool (ite (fp.eq x y) true false))

(declare-fun user_eq (float float) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE1 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Float32)

(declare-fun dummy () float)

(declare-datatypes () ((float__ref (mk_float__ref (float__content float)))))
(define-fun float__ref___projection ((a float__ref)) float (float__content a))

(define-fun dynamic_invariant ((temp___expr_51 Float32)
  (temp___is_init_48 Bool) (temp___skip_constant_49 Bool)
  (temp___do_toplevel_50 Bool)) Bool (=>
                                     (or (= temp___is_init_48 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                     (not (or (fp.isInfinite temp___expr_51) (fp.isNaN temp___expr_51)))))

(declare-sort tsmall_arrayP1 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 10)))

(define-fun bool_eq2 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (tsmall_arrayP1 tsmall_arrayP1) Bool)

(declare-fun dummy1 () tsmall_arrayP1)

(declare-datatypes ()
((tsmall_arrayP1__ref
 (mk_tsmall_arrayP1__ref (tsmall_arrayP1__content tsmall_arrayP1)))))
(define-fun tsmall_arrayP1__ref___projection ((a tsmall_arrayP1__ref)) tsmall_arrayP1 
  (tsmall_arrayP1__content a))

(declare-fun to_rep (float) Float32)

(declare-fun of_rep (Float32) float)

;; inversion_axiom
  (assert
  (forall ((x float)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x float))
  (! (not (or (fp.isInfinite (to_rep x)) (fp.isNaN (to_rep x)))) :pattern (
  (to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Float32))
  (! (=> (not (or (fp.isInfinite x) (fp.isNaN x))) (= (to_rep (of_rep x)) x)) :pattern (
  (to_rep (of_rep x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int float))))))
(declare-fun slide ((Array Int float) Int Int) (Array Int float))

;; slide_eq
  (assert
  (forall ((a (Array Int float)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int float)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int float) Int Int (Array Int float) Int
  Int) (Array Int float))

;; concat_def
  (assert
  (forall ((a (Array Int float)) (b (Array Int float)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (float Int) (Array Int float))

;; singleton_def
  (assert
  (forall ((v float))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq3 ((a (Array Int float)) (a__first Int) (a__last Int)
  (b (Array Int float)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep (select a temp___idx_132)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int float)) (b (Array Int float)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq3 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-sort row_range 0)

(define-fun in_range3 ((x Int)) Bool (and (<= (- 1) x) (<= x 1)))

(define-fun bool_eq4 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (row_range row_range) Bool)

(declare-fun dummy2 () row_range)

(declare-datatypes ()
((row_range__ref (mk_row_range__ref (row_range__content row_range)))))
(define-fun row_range__ref___projection ((a row_range__ref)) row_range 
  (row_range__content a))

(declare-sort col_range 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 4)))

(define-fun bool_eq5 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (col_range col_range) Bool)

(declare-fun dummy3 () col_range)

(declare-datatypes ()
((col_range__ref (mk_col_range__ref (col_range__content col_range)))))
(define-fun col_range__ref___projection ((a col_range__ref)) col_range 
  (col_range__content a))

(declare-sort integer 0)

(define-fun in_range5 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun bool_eq6 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq4 (integer integer) Bool)

(declare-fun dummy4 () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-fun to_rep1 (integer) Int)

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range5 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort map1 0)

(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 map1)))))
(declare-fun get (map1 Int Int) integer)

(declare-fun set (map1 Int Int integer) map1)

;; Select_eq
  (assert
  (forall ((m map1))
  (forall ((i Int))
  (forall ((j Int))
  (forall ((a integer))
  (! (= (get (set m i j a) i j) a) :pattern ((set m i j a)) ))))))

;; Select_neq
  (assert
  (forall ((m map1))
  (forall ((i Int) (i2 Int))
  (forall ((j Int) (j2 Int))
  (forall ((a integer))
  (! (=> (not (and (= i i2) (= j j2)))
     (= (get (set m i j a) i2 j2) (get m i2 j2))) :pattern ((get
                                                            (set m i j a) i2
                                                            j2)) :pattern (
  (set m i j a) (get m i2 j2)) ))))))

(declare-fun slide1 (map1 Int Int Int Int) map1)

;; slide_def
  (assert
  (forall ((a map1))
  (forall ((new_first Int) (old_first Int))
  (forall ((new_first_2 Int) (old_first_2 Int))
  (forall ((i Int))
  (forall ((j Int))
  (! (= (get (slide1 a old_first new_first old_first_2 new_first_2) i j) 
  (get a (- i (- new_first old_first)) (- j (- new_first_2 old_first_2)))) :pattern (
  (get (slide1 a old_first new_first old_first_2 new_first_2) i j)) )))))))

(define-fun bool_eq7 ((a map1) (a__first Int) (a__last Int) (a__first_2 Int)
  (a__last_2 Int) (b map1) (b__first Int) (b__last Int) (b__first_2 Int)
  (b__last_2 Int)) Bool (ite (and
                             (and
                             (ite (<= a__first a__last)
                             (and (<= b__first b__last)
                             (= (- a__last a__first) (- b__last b__first)))
                             (< b__last b__first))
                             (ite (<= a__first_2 a__last_2)
                             (and (<= b__first_2 b__last_2)
                             (= (- a__last_2 a__first_2) (- b__last_2 b__first_2)))
                             (< b__last_2 b__first_2)))
                             (forall ((temp___idx_133 Int)
                             (temp___idx_134 Int))
                             (=>
                             (and
                             (and (<= a__first temp___idx_133)
                             (<= temp___idx_133 a__last))
                             (and (<= a__first_2 temp___idx_134)
                             (<= temp___idx_134 a__last_2)))
                             (= (to_rep1
                                (get a temp___idx_133 temp___idx_134)) 
                             (to_rep1
                             (get b (+ (- b__first a__first) temp___idx_133)
                             (+ (- b__first_2 a__first_2) temp___idx_134)))))))
                        true false))

;; bool_eq_rev
  (assert
  (forall ((a map1) (b map1))
  (forall ((a__first Int) (a__last Int) (a__first_2 Int) (a__last_2 Int)
  (b__first Int) (b__last Int) (b__first_2 Int) (b__last_2 Int))
  (=>
  (= (bool_eq7 b b__first b__last b__first_2 b__last_2 a a__first a__last
     a__first_2 a__last_2) true)
  (and
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (ite (<= a__first_2 a__last_2)
  (and (<= b__first_2 b__last_2)
  (= (- a__last_2 a__first_2) (- b__last_2 b__first_2)))
  (< b__last_2 b__first_2)))
  (forall ((temp___idx_133 Int) (temp___idx_134 Int))
  (=>
  (and (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last))
  (and (<= a__first_2 temp___idx_134) (<= temp___idx_134 a__last_2)))
  (= (to_rep1 (get a temp___idx_133 temp___idx_134)) (to_rep1
                                                     (get b
                                                     (+ (- b__first a__first) temp___idx_133)
                                                     (+ (- b__first_2 a__first_2) temp___idx_134)))))))))))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-sort t5b 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 10)))

(define-fun bool_eq8 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq5 (t5b t5b) Bool)

(declare-fun dummy5 () t5b)

(declare-datatypes () ((t5b__ref (mk_t5b__ref (t5b__content t5b)))))
(define-fun t5b__ref___projection ((a t5b__ref)) t5b (t5b__content a))

(declare-sort t7b 0)

(define-fun in_range7 ((x Int)) Bool (and (<= 1 x) (<= x 10)))

(define-fun bool_eq9 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq6 (t7b t7b) Bool)

(declare-fun dummy6 () t7b)

(declare-datatypes () ((t7b__ref (mk_t7b__ref (t7b__content t7b)))))
(define-fun t7b__ref___projection ((a t7b__ref)) t7b (t7b__content a))

(declare-sort t9b 0)

(define-fun in_range8 ((x Int)) Bool (and (<= 1 x) (<= x 10)))

(define-fun bool_eq10 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq7 (t9b t9b) Bool)

(declare-fun dummy7 () t9b)

(declare-datatypes () ((t9b__ref (mk_t9b__ref (t9b__content t9b)))))
(define-fun t9b__ref___projection ((a t9b__ref)) t9b (t9b__content a))

(declare-sort t11b 0)

(define-fun in_range9 ((x Int)) Bool (and (<= 1 x) (<= x 10)))

(define-fun bool_eq11 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq8 (t11b t11b) Bool)

(declare-fun dummy8 () t11b)

(declare-datatypes () ((t11b__ref (mk_t11b__ref (t11b__content t11b)))))
(define-fun t11b__ref___projection ((a t11b__ref)) t11b (t11b__content a))

(declare-fun c13b () Float32)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(declare-fun tolerance () Float32)

(declare-fun attr__ATTRIBUTE_ADDRESS7 () Int)

(declare-sort t17b 0)

(define-fun in_range10 ((x Int)) Bool (and (<= 1 x) (<= x 10)))

(define-fun bool_eq12 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)

(declare-fun user_eq9 (t17b t17b) Bool)

(declare-fun dummy9 () t17b)

(declare-datatypes () ((t17b__ref (mk_t17b__ref (t17b__content t17b)))))
(define-fun t17b__ref___projection ((a t17b__ref)) t17b (t17b__content a))

(declare-sort t19b 0)

(define-fun in_range11 ((x Int)) Bool (and (<= (- 1) x) (<= x 1)))

(define-fun bool_eq13 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE11 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) Int)

(declare-fun user_eq10 (t19b t19b) Bool)

(declare-fun dummy10 () t19b)

(declare-datatypes () ((t19b__ref (mk_t19b__ref (t19b__content t19b)))))
(define-fun t19b__ref___projection ((a t19b__ref)) t19b (t19b__content a))

(declare-sort t20b 0)

(define-fun in_range12 ((x Int)) Bool (and (<= 1 x) (<= x 4)))

(define-fun bool_eq14 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE12 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check12 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE12 (us_image) Int)

(declare-fun user_eq11 (t20b t20b) Bool)

(declare-fun dummy11 () t20b)

(declare-datatypes () ((t20b__ref (mk_t20b__ref (t20b__content t20b)))))
(define-fun t20b__ref___projection ((a t20b__ref)) t20b (t20b__content a))

(declare-sort t22b 0)

(define-fun in_range13 ((x Int)) Bool (and (<= (- 1) x) (<= x 1)))

(define-fun bool_eq15 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE13 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check13 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE13 (us_image) Int)

(declare-fun user_eq12 (t22b t22b) Bool)

(declare-fun dummy12 () t22b)

(declare-datatypes () ((t22b__ref (mk_t22b__ref (t22b__content t22b)))))
(define-fun t22b__ref___projection ((a t22b__ref)) t22b (t22b__content a))

(declare-sort t23b 0)

(define-fun in_range14 ((x Int)) Bool (and (<= 1 x) (<= x 4)))

(define-fun bool_eq16 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE14 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check14 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE14 (us_image) Int)

(declare-fun user_eq13 (t23b t23b) Bool)

(declare-fun dummy13 () t23b)

(declare-datatypes () ((t23b__ref (mk_t23b__ref (t23b__content t23b)))))
(define-fun t23b__ref___projection ((a t23b__ref)) t23b (t23b__content a))

(declare-sort t25b 0)

(define-fun in_range15 ((x Int)) Bool (and (<= (- 1) x) (<= x 1)))

(define-fun bool_eq17 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE15 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check15 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE15 (us_image) Int)

(declare-fun user_eq14 (t25b t25b) Bool)

(declare-fun dummy14 () t25b)

(declare-datatypes () ((t25b__ref (mk_t25b__ref (t25b__content t25b)))))
(define-fun t25b__ref___projection ((a t25b__ref)) t25b (t25b__content a))

(declare-sort t26b 0)

(define-fun in_range16 ((x Int)) Bool (and (<= 1 x) (<= x 4)))

(define-fun bool_eq18 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE16 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check16 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE16 (us_image) Int)

(declare-fun user_eq15 (t26b t26b) Bool)

(declare-fun dummy15 () t26b)

(declare-datatypes () ((t26b__ref (mk_t26b__ref (t26b__content t26b)))))
(define-fun t26b__ref___projection ((a t26b__ref)) t26b (t26b__content a))

(declare-sort t28b 0)

(define-fun in_range17 ((x Int)) Bool (and (<= (- 1) x) (<= x 1)))

(define-fun bool_eq19 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE17 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check17 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE17 (us_image) Int)

(declare-fun user_eq16 (t28b t28b) Bool)

(declare-fun dummy16 () t28b)

(declare-datatypes () ((t28b__ref (mk_t28b__ref (t28b__content t28b)))))
(define-fun t28b__ref___projection ((a t28b__ref)) t28b (t28b__content a))

(declare-sort t29b 0)

(define-fun in_range18 ((x Int)) Bool (and (<= 1 x) (<= x 4)))

(define-fun bool_eq20 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE18 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check18 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE18 (us_image) Int)

(declare-fun user_eq17 (t29b t29b) Bool)

(declare-fun dummy17 () t29b)

(declare-datatypes () ((t29b__ref (mk_t29b__ref (t29b__content t29b)))))
(define-fun t29b__ref___projection ((a t29b__ref)) t29b (t29b__content a))

(declare-sort t31b 0)

(define-fun in_range19 ((x Int)) Bool (and (<= (- 1) x) (<= x 1)))

(define-fun bool_eq21 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE19 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check19 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE19 (us_image) Int)

(declare-fun user_eq18 (t31b t31b) Bool)

(declare-fun dummy18 () t31b)

(declare-datatypes () ((t31b__ref (mk_t31b__ref (t31b__content t31b)))))
(define-fun t31b__ref___projection ((a t31b__ref)) t31b (t31b__content a))

(declare-sort t32b 0)

(define-fun in_range20 ((x Int)) Bool (and (<= 1 x) (<= x 4)))

(define-fun bool_eq22 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE20 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check20 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE20 (us_image) Int)

(declare-fun user_eq19 (t32b t32b) Bool)

(declare-fun dummy19 () t32b)

(declare-datatypes () ((t32b__ref (mk_t32b__ref (t32b__content t32b)))))
(define-fun t32b__ref___projection ((a t32b__ref)) t32b (t32b__content a))

(declare-fun temp___208 (Float32 Float32 Float32 Float32 Float32 Float32
  Float32 Float32 Float32 Float32) (Array Int float))

;; def_axiom
  (assert
  (forall ((temp___210 Float32) (temp___211 Float32) (temp___212 Float32)
  (temp___213 Float32) (temp___214 Float32) (temp___215 Float32)
  (temp___216 Float32) (temp___217 Float32) (temp___218 Float32)
  (temp___219 Float32))
  (let ((temp___209 (temp___208 temp___210 temp___211 temp___212 temp___213
                    temp___214 temp___215 temp___216 temp___217 temp___218
                    temp___219)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and (= (select temp___209 1) (of_rep temp___210))
  (= (select temp___209 2) (of_rep temp___211)))
  (= (select temp___209 3) (of_rep temp___212)))
  (= (select temp___209 4) (of_rep temp___213)))
  (= (select temp___209 5) (of_rep temp___214)))
  (= (select temp___209 6) (of_rep temp___215)))
  (= (select temp___209 7) (of_rep temp___216)))
  (= (select temp___209 8) (of_rep temp___217)))
  (= (select temp___209 9) (of_rep temp___218)))
  (= (select temp___209 10) (of_rep temp___219))))))

(declare-fun temp___221 (Float32) (Array Int float))

;; def_axiom
  (assert
  (forall ((temp___223 Float32))
  (forall ((temp___224 Int))
  (= (select (temp___221 temp___223) temp___224) (of_rep temp___223)))))

(declare-fun temp___225 (Float32 Float32) (Array Int float))

;; def_axiom
  (assert
  (forall ((temp___227 Float32) (temp___228 Float32))
  (let ((temp___226 (temp___225 temp___227 temp___228)))
  (forall ((temp___229 Int))
  (ite (and (<= 6 temp___229) (<= temp___229 10))
  (= (select temp___226 temp___229) (of_rep temp___228))
  (=> (and (<= 1 temp___229) (<= temp___229 5))
  (= (select temp___226 temp___229) (of_rep temp___227))))))))

(declare-fun temp___230 (Float32 Float32) (Array Int float))

;; def_axiom
  (assert
  (forall ((temp___232 Float32) (temp___233 Float32))
  (let ((temp___231 (temp___230 temp___232 temp___233)))
  (forall ((temp___234 Int))
  (ite (or
       (or (or (or (= temp___234 1) (= temp___234 3)) (= temp___234 5))
       (= temp___234 7)) (= temp___234 9))
  (= (select temp___231 temp___234) (of_rep temp___232))
  (= (select temp___231 temp___234) (of_rep temp___233)))))))

(declare-fun temp___236 (Float32) (Array Int float))

;; def_axiom
  (assert
  (forall ((temp___238 Float32))
  (forall ((temp___239 Int))
  (= (select (temp___236 temp___238) temp___239) (of_rep temp___238)))))

(declare-fun temp___240 (Int Int Int Int Int Int Int Int Int Int Int
  Int) map1)

;; def_axiom
  (assert
  (forall ((temp___242 Int) (temp___243 Int) (temp___244 Int)
  (temp___245 Int) (temp___246 Int) (temp___247 Int) (temp___248 Int)
  (temp___249 Int) (temp___250 Int) (temp___251 Int) (temp___252 Int)
  (temp___253 Int))
  (let ((temp___241 (temp___240 temp___242 temp___243 temp___244 temp___245
                    temp___246 temp___247 temp___248 temp___249 temp___250
                    temp___251 temp___252 temp___253)))
  (and
  (and
  (and
  (and
  (and (= (get temp___241 (- 1) 1) (of_rep1 temp___242))
  (= (get temp___241 (- 1) 2) (of_rep1 temp___243)))
  (= (get temp___241 (- 1) 3) (of_rep1 temp___244)))
  (= (get temp___241 (- 1) 4) (of_rep1 temp___245)))
  (and
  (and
  (and (= (get temp___241 0 1) (of_rep1 temp___246))
  (= (get temp___241 0 2) (of_rep1 temp___247)))
  (= (get temp___241 0 3) (of_rep1 temp___248)))
  (= (get temp___241 0 4) (of_rep1 temp___249))))
  (and
  (and
  (and (= (get temp___241 1 1) (of_rep1 temp___250))
  (= (get temp___241 1 2) (of_rep1 temp___251)))
  (= (get temp___241 1 3) (of_rep1 temp___252)))
  (= (get temp___241 1 4) (of_rep1 temp___253)))))))

(declare-fun temp___256 (Int Int Int Int Int Int Int Int Int Int Int
  Int) map1)

;; def_axiom
  (assert
  (forall ((temp___258 Int) (temp___259 Int) (temp___260 Int)
  (temp___261 Int) (temp___262 Int) (temp___263 Int) (temp___264 Int)
  (temp___265 Int) (temp___266 Int) (temp___267 Int) (temp___268 Int)
  (temp___269 Int))
  (let ((temp___257 (temp___256 temp___258 temp___259 temp___260 temp___261
                    temp___262 temp___263 temp___264 temp___265 temp___266
                    temp___267 temp___268 temp___269)))
  (and
  (and
  (and
  (and
  (and (= (get temp___257 (- 1) 1) (of_rep1 temp___258))
  (= (get temp___257 (- 1) 2) (of_rep1 temp___259)))
  (= (get temp___257 (- 1) 3) (of_rep1 temp___260)))
  (= (get temp___257 (- 1) 4) (of_rep1 temp___261)))
  (and
  (and
  (and (= (get temp___257 0 1) (of_rep1 temp___262))
  (= (get temp___257 0 2) (of_rep1 temp___263)))
  (= (get temp___257 0 3) (of_rep1 temp___264)))
  (= (get temp___257 0 4) (of_rep1 temp___265))))
  (and
  (and
  (and (= (get temp___257 1 1) (of_rep1 temp___266))
  (= (get temp___257 1 2) (of_rep1 temp___267)))
  (= (get temp___257 1 3) (of_rep1 temp___268)))
  (= (get temp___257 1 4) (of_rep1 temp___269)))))))

(declare-fun temp___272 (Int Int Int Int Int) map1)

;; def_axiom
  (assert
  (forall ((temp___274 Int) (temp___275 Int) (temp___276 Int)
  (temp___277 Int) (temp___278 Int))
  (let ((temp___273 (temp___272 temp___274 temp___275 temp___276 temp___277
                    temp___278)))
  (forall ((temp___279 Int) (temp___280 Int))
  (ite (= temp___279 1)
  (ite (= temp___280 2)
  (= (get temp___273 temp___279 temp___280) (of_rep1 temp___277))
  (= (get temp___273 temp___279 temp___280) (of_rep1 temp___278)))
  (ite (= temp___279 0)
  (ite (= temp___280 4)
  (= (get temp___273 temp___279 temp___280) (of_rep1 temp___276))
  (=> (and (<= 1 temp___280) (<= temp___280 3))
  (= (get temp___273 temp___279 temp___280) (of_rep1 temp___275))))
  (=> (= temp___279 (- 1))
  (= (get temp___273 temp___279 temp___280) (of_rep1 temp___274)))))))))

(declare-fun temp___281 (Int) map1)

;; def_axiom
  (assert
  (forall ((temp___283 Int))
  (forall ((temp___284 Int) (temp___285 Int))
  (= (get (temp___281 temp___283) temp___284 temp___285) (of_rep1 temp___283)))))

(declare-fun temp___286 (Int) map1)

;; def_axiom
  (assert
  (forall ((temp___288 Int))
  (forall ((temp___289 Int) (temp___290 Int))
  (= (get (temp___286 temp___288) temp___289 temp___290) (of_rep1 temp___288)))))

(define-fun dynamic_invariant1 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range5 temp___expr_15)))

(define-fun dynamic_invariant2 ((temp___expr_188 Int)
  (temp___is_init_185 Bool) (temp___skip_constant_186 Bool)
  (temp___do_toplevel_187 Bool)) Bool (=>
                                      (or (= temp___is_init_185 true)
                                      (<= (- 1) 1)) (in_range3
                                      temp___expr_188)))

(define-fun dynamic_invariant3 ((temp___expr_194 Int)
  (temp___is_init_191 Bool) (temp___skip_constant_192 Bool)
  (temp___do_toplevel_193 Bool)) Bool (=>
                                      (or (= temp___is_init_191 true)
                                      (<= 1 4)) (in_range4 temp___expr_194)))

(declare-fun small () (Array Int float))

(declare-fun a () Float32)

(declare-fun b () Float32)

(declare-fun c14b () Float32)

(declare-fun approx () Float32)

(declare-fun o () (Array Int float))

(declare-fun o1 () (Array Int float))

(declare-fun o2 () (Array Int float))

(declare-fun o3 () (Array Int float))

(declare-fun o4 () Float32)

(declare-fun o5 () Float32)

(declare-fun o6 () Float32)

(declare-fun o7 () Float32)

(declare-fun result () Float32)

(declare-fun a1 () Float32)

(declare-fun result1 () Float32)

(declare-fun b1 () Float32)

(declare-fun result2 () (Array Int float))

(declare-fun small1 () (Array Int float))

(declare-fun result3 () (Array Int float))

(declare-fun small2 () (Array Int float))

(declare-fun result4 () (Array Int float))

(declare-fun small3 () (Array Int float))

(declare-fun result5 () (Array Int float))

(declare-fun small4 () (Array Int float))

(declare-fun result6 () Float32)

(declare-fun approx1 () Float32)

(declare-fun result7 () Bool)

(declare-fun approx2 () Float32)

;; H
  (assert (= result a))

;; H
  (assert (= a1 (fp #b0 #b10000011 #b01110110011001100110011)))

;; H
  (assert (not (or (fp.isInfinite a1) (fp.isNaN a1))))

;; H
  (assert (= result1 b))

;; H
  (assert (= b1 (fp #b0 #b10000011 #b00111110011001100110011)))

;; H
  (assert (not (or (fp.isInfinite b1) (fp.isNaN b1))))

;; H
  (assert
  (= o (temp___208 (fp #b0 #b00000000 #b00000000000000000000000)
       (fp #b0 #b01111111 #b00000000000000000000000)
       (fp #b0 #b10000000 #b00000000000000000000000)
       (fp #b0 #b10000000 #b10000000000000000000000)
       (fp #b0 #b10000001 #b00000000000000000000000)
       (fp #b0 #b10000001 #b01000000000000000000000)
       (fp #b0 #b10000001 #b00000000000000000000000)
       (fp #b0 #b10000000 #b10000000000000000000000)
       (fp #b0 #b10000000 #b00000000000000000000000)
       (fp #b0 #b01111111 #b00000000000000000000000))))

;; H
  (assert (= result2 small))

;; H
  (assert (= small1 o))

;; H
  (assert (= o1 (temp___221 (fp #b0 #b00000000 #b00000000000000000000000))))

;; H
  (assert (= result3 small1))

;; H
  (assert (= small2 o1))

;; H
  (assert
  (= o2 (temp___225 (fp #b0 #b00000000 #b00000000000000000000000)
        (fp #b0 #b01111111 #b00000000000000000000000))))

;; H
  (assert (= result4 small2))

;; H
  (assert (= small3 o2))

;; H
  (assert
  (= o3 (temp___230 (fp #b0 #b00000000 #b00000000000000000000000)
        (fp #b0 #b01111111 #b00000000000000000000000))))

;; H
  (assert (= result5 small3))

;; H
  (assert (= small4 o3))

;; H
  (assert (= b1 c13b))

;; H
  (assert (not (or (fp.isInfinite c13b) (fp.isNaN c13b))))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (not (or (fp.isInfinite c14b) (fp.isNaN c14b)))))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (not (or (fp.isInfinite approx) (fp.isNaN approx)))))

;; H
  (assert
  (= (fp.mul RNE (fp #b0 #b01101011 #b00001100011011110111101) c13b) 
  tolerance))

;; H
  (assert (not (or (fp.isInfinite tolerance) (fp.isNaN tolerance))))

;; H
  (assert (= (mk_t__ref result6) (mk_t__ref approx)))

;; H
  (assert
  (= approx1 (fp.div RNE c13b (fp #b0 #b10000000 #b00000000000000000000000))))

;; H
  (assert
  (and (= o4 (fp.mul RNE approx1 approx1))
  (not (or (fp.isInfinite (fp.mul RNE approx1 approx1)) (fp.isNaN (fp.mul RNE 
  approx1 approx1))))))

;; H
  (assert (= o5 (fp.sub RNE c13b o4)))

;; H
  (assert (and (= o6 o5) (not (or (fp.isInfinite o5) (fp.isNaN o5)))))

;; H
  (assert (= o7 (fp.abs o6)))

;; H
  (assert (= result7 (ite (fp.lt tolerance o7) true false)))

;; H
  (assert (= result7 true))

;; H
  (assert
  (and
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (not (or (fp.isInfinite approx2) (fp.isNaN approx2))))
  (fp.lt tolerance (fp.abs (fp.sub RNE c13b (fp.mul RNE approx2 approx2))))))

(assert
;; WP_parameter_def
 ;; File "aggregates.adb", line 1, characters 0-0
  (not
  (not (or (fp.isInfinite (fp.div RNE c13b approx2)) (fp.isNaN (fp.div RNE 
  c13b approx2))))))
(check-sat)
