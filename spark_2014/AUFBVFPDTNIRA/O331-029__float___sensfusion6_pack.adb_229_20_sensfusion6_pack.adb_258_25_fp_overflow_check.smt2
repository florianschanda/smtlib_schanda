;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun pow2 (Int) Int)

(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(declare-fun sqrt (Real) Real)

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(declare-fun is_int1 (Float32) Bool)

(declare-datatypes () ((t__ref (mk_t__ref (t__content Float32)))))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort float 0)

(declare-fun user_eq (float float) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE1 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Float32)

(declare-const dummy float)

(declare-datatypes () ((float__ref (mk_float__ref (float__content float)))))
(define-fun float__ref___projection ((a float__ref)) float (float__content a))

(define-fun dynamic_invariant ((temp___expr_51 Float32)
  (temp___is_init_48 Bool) (temp___skip_constant_49 Bool)
  (temp___do_toplevel_50 Bool)) Bool (=>
                                     (or (= temp___is_init_48 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                     (fp.isFinite32 temp___expr_51)))

(declare-sort t_rate 0)

(define-fun in_range1 ((x Float32)) Bool (and (fp.isFinite32 x)
                                         (and
                                         (fp.leq (fp.neg (fp #b0 #b10001010 #b01110111000000000000000)) x)
                                         (fp.leq x (fp #b0 #b10001010 #b01110111000000000000000)))))

(declare-fun user_eq1 (t_rate t_rate) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE2 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Float32)

(declare-const dummy1 t_rate)

(declare-datatypes ()
((t_rate__ref (mk_t_rate__ref (t_rate__content t_rate)))))
(define-fun t_rate__ref___projection ((a t_rate__ref)) t_rate (t_rate__content
                                                              a))

(define-fun dynamic_invariant1 ((temp___expr_140 Float32)
  (temp___is_init_137 Bool) (temp___skip_constant_138 Bool)
  (temp___do_toplevel_139 Bool)) Bool (=>
                                      (or (= temp___is_init_137 true)
                                      (fp.leq (fp.neg (fp #b0 #b10001010 #b01110111000000000000000)) (fp #b0 #b10001010 #b01110111000000000000000)))
                                      (in_range1 temp___expr_140)))

(declare-sort t_acc 0)

(define-fun in_range2 ((x Float32)) Bool (and (fp.isFinite32 x)
                                         (and
                                         (fp.leq (fp.neg (fp #b0 #b10000011 #b00000000000000000000000)) x)
                                         (fp.leq x (fp #b0 #b10000011 #b00000000000000000000000)))))

(declare-fun user_eq2 (t_acc t_acc) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE3 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Float32)

(declare-const dummy2 t_acc)

(declare-datatypes () ((t_acc__ref (mk_t_acc__ref (t_acc__content t_acc)))))
(define-fun t_acc__ref___projection ((a t_acc__ref)) t_acc (t_acc__content a))

(define-fun dynamic_invariant2 ((temp___expr_146 Float32)
  (temp___is_init_143 Bool) (temp___skip_constant_144 Bool)
  (temp___do_toplevel_145 Bool)) Bool (=>
                                      (or (= temp___is_init_143 true)
                                      (fp.leq (fp.neg (fp #b0 #b10000011 #b00000000000000000000000)) (fp #b0 #b10000011 #b00000000000000000000000)))
                                      (in_range2 temp___expr_146)))

(declare-sort t_acc_lifted 0)

(define-fun in_range3 ((x Float32)) Bool (and (fp.isFinite32 x)
                                         (and
                                         (fp.leq (fp.neg (fp #b0 #b10000011 #b00000000000000000000000)) x)
                                         (fp.leq x (fp #b0 #b10000011 #b00000000000000000000000)))))

(declare-fun user_eq3 (t_acc_lifted t_acc_lifted) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE4 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Float32)

(declare-const dummy3 t_acc_lifted)

(declare-datatypes ()
((t_acc_lifted__ref
 (mk_t_acc_lifted__ref (t_acc_lifted__content t_acc_lifted)))))
(define-fun t_acc_lifted__ref___projection ((a t_acc_lifted__ref)) t_acc_lifted
  (t_acc_lifted__content a))

(define-fun dynamic_invariant3 ((temp___expr_158 Float32)
  (temp___is_init_155 Bool) (temp___skip_constant_156 Bool)
  (temp___do_toplevel_157 Bool)) Bool (=>
                                      (or (= temp___is_init_155 true)
                                      (fp.leq (fp.neg (fp #b0 #b10000011 #b00000000000000000000000)) (fp #b0 #b10000011 #b00000000000000000000000)))
                                      (in_range3 temp___expr_158)))

(declare-sort positive_float 0)

(define-fun in_range4 ((x Float32)) Bool (and (fp.isFinite32 x)
                                         (and
                                         (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x)
                                         (fp.leq x (fp #b0 #b11111110 #b11111111111111111111111)))))

(declare-fun user_eq4 (positive_float positive_float) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE5 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Float32)

(declare-const dummy4 positive_float)

(declare-datatypes ()
((positive_float__ref
 (mk_positive_float__ref (positive_float__content positive_float)))))
(define-fun positive_float__ref___projection ((a positive_float__ref)) positive_float
  (positive_float__content a))

(define-fun dynamic_invariant4 ((temp___expr_1294 Float32)
  (temp___is_init_1291 Bool) (temp___skip_constant_1292 Bool)
  (temp___do_toplevel_1293 Bool)) Bool (=>
                                       (or (= temp___is_init_1291 true)
                                       (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b11111110 #b11111111111111111111111)))
                                       (in_range4 temp___expr_1294)))

(declare-sort t_delta_time 0)

(define-fun in_range5 ((x Float32)) Bool (and (fp.isFinite32 x)
                                         (and
                                         (fp.leq (fp #b0 #b01110101 #b00000110001001001101111) x)
                                         (fp.leq x (fp #b0 #b01111111 #b00000000000000000000000)))))

(declare-fun user_eq5 (t_delta_time t_delta_time) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE6 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Float32)

(declare-const dummy5 t_delta_time)

(declare-datatypes ()
((t_delta_time__ref
 (mk_t_delta_time__ref (t_delta_time__content t_delta_time)))))
(define-fun t_delta_time__ref___projection ((a t_delta_time__ref)) t_delta_time
  (t_delta_time__content a))

(define-fun dynamic_invariant5 ((temp___expr_1300 Float32)
  (temp___is_init_1297 Bool) (temp___skip_constant_1298 Bool)
  (temp___do_toplevel_1299 Bool)) Bool (=>
                                       (or (= temp___is_init_1297 true)
                                       (fp.leq (fp #b0 #b01110101 #b00000110001001001101111) (fp #b0 #b01111111 #b00000000000000000000000)))
                                       (in_range5 temp___expr_1300)))

(declare-sort t_alpha 0)

(define-fun in_range6 ((x Float32)) Bool (and (fp.isFinite32 x)
                                         (and
                                         (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x)
                                         (fp.leq x (fp #b0 #b01111111 #b00000000000000000000000)))))

(declare-fun user_eq6 (t_alpha t_alpha) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE7 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Float32)

(declare-const dummy6 t_alpha)

(declare-datatypes ()
((t_alpha__ref (mk_t_alpha__ref (t_alpha__content t_alpha)))))
(define-fun t_alpha__ref___projection ((a t_alpha__ref)) t_alpha (t_alpha__content
                                                                 a))

(define-fun dynamic_invariant6 ((temp___expr_1306 Float32)
  (temp___is_init_1303 Bool) (temp___skip_constant_1304 Bool)
  (temp___do_toplevel_1305 Bool)) Bool (=>
                                       (or (= temp___is_init_1303 true)
                                       (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b01111111 #b00000000000000000000000)))
                                       (in_range6 temp___expr_1306)))

(declare-sort t_quaternion 0)

(define-fun in_range7 ((x Float32)) Bool (and (fp.isFinite32 x)
                                         (and
                                         (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) x)
                                         (fp.leq x (fp #b0 #b01111111 #b00000000000000000000000)))))

(declare-fun user_eq7 (t_quaternion t_quaternion) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE8 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Float32)

(declare-const dummy7 t_quaternion)

(declare-datatypes ()
((t_quaternion__ref
 (mk_t_quaternion__ref (t_quaternion__content t_quaternion)))))
(define-fun t_quaternion__ref___projection ((a t_quaternion__ref)) t_quaternion
  (t_quaternion__content a))

(define-fun dynamic_invariant7 ((temp___expr_1336 Float32)
  (temp___is_init_1333 Bool) (temp___skip_constant_1334 Bool)
  (temp___do_toplevel_1335 Bool)) Bool (=>
                                       (or (= temp___is_init_1333 true)
                                       (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) (fp #b0 #b01111111 #b00000000000000000000000)))
                                       (in_range7 temp___expr_1336)))

(declare-fun inv_sqrt (Float32) Float32)

(declare-fun inv_sqrt__function_guard (Float32 Float32) Bool)

;; inv_sqrt__post_axiom
  (assert
  (forall ((x Float32))
  (! (=>
     (and (dynamic_invariant x true true true)
     (fp.leq (fp #b0 #b00000000 #b00000000000000000000001) x))
     (let ((result (inv_sqrt x)))
     (and
     (and (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) result)
     (fp.lt result (fp #b0 #b11000010 #b01011010111100011101100)))
     (dynamic_invariant result true false true)))) :pattern ((inv_sqrt x)) )))

(declare-fun saturate (Float32 Float32 Float32) Float32)

(declare-fun saturate__function_guard (Float32 Float32 Float32 Float32) Bool)

;; saturate__post_axiom
  (assert
  (forall ((value Float32) (min_value Float32) (max_value Float32))
  (! (=>
     (and
     (and (dynamic_invariant value true true true) (dynamic_invariant
     min_value true true true)) (dynamic_invariant max_value true true true))
     (let ((result (saturate value min_value max_value)))
     (and
     (ite (fp.lt value min_value) (fp.eq result min_value)
     (ite (fp.lt max_value value) (fp.eq result max_value)
     (fp.eq result value))) (dynamic_invariant result true false true)))) :pattern (
  (saturate value min_value max_value)) )))

(declare-fun lift_away_from_zero (Float32) Float32)

(declare-fun lift_away_from_zero__function_guard (Float32 Float32) Bool)

;; lift_away_from_zero__post_axiom
  (assert
  (forall ((x Float32))
  (! (=> (dynamic_invariant2 x true true true)
     (let ((result (lift_away_from_zero x)))
     (and
     (ite (fp.eq x (fp #b0 #b00000000 #b00000000000000000000000))
     (fp.eq result (fp #b0 #b00000000 #b00000000000000000000000))
     (=> (not (fp.eq x (fp #b0 #b00000000 #b00000000000000000000000)))
     (not (fp.eq result (fp #b0 #b00000000 #b00000000000000000000000)))))
     (dynamic_invariant3 result true false true)))) :pattern ((lift_away_from_zero
                                                              x)) )))

(declare-const gx Float32)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const gy Float32)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const gz Float32)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const ax Float32)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const ay Float32)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const az Float32)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const dt Float32)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(declare-const attr__ATTRIBUTE_ADDRESS11 Int)

(declare-const attr__ATTRIBUTE_ADDRESS12 Int)

(declare-const attr__ATTRIBUTE_ADDRESS13 Int)

(declare-const attr__ATTRIBUTE_ADDRESS14 Int)

(declare-const attr__ATTRIBUTE_ADDRESS15 Int)

(declare-const attr__ATTRIBUTE_ADDRESS16 Int)

(declare-const c3b Float32)

(declare-const attr__ATTRIBUTE_ADDRESS17 Int)

(declare-const c4b Float32)

(declare-const attr__ATTRIBUTE_ADDRESS18 Int)

(declare-const c5b Float32)

(declare-const attr__ATTRIBUTE_ADDRESS19 Int)

(declare-const c6b Float32)

(declare-const attr__ATTRIBUTE_ADDRESS20 Int)

(declare-const c7b Float32)

(declare-const attr__ATTRIBUTE_ADDRESS21 Int)

(declare-const c8b Float32)

(declare-const attr__ATTRIBUTE_ADDRESS22 Int)

(declare-const c9b Float32)

(declare-const attr__ATTRIBUTE_ADDRESS23 Int)

(declare-const attr__ATTRIBUTE_ADDRESS24 Int)

(declare-const attr__ATTRIBUTE_ADDRESS25 Int)

(declare-const attr__ATTRIBUTE_ADDRESS26 Int)

(declare-const attr__ATTRIBUTE_ADDRESS27 Int)

(declare-const attr__ATTRIBUTE_ADDRESS28 Int)

(declare-const attr__ATTRIBUTE_ADDRESS29 Int)

(declare-const attr__ATTRIBUTE_ADDRESS30 Int)

(declare-const attr__ATTRIBUTE_ADDRESS31 Int)

(declare-const attr__ATTRIBUTE_ADDRESS32 Int)

(declare-const attr__ATTRIBUTE_ADDRESS33 Int)

(declare-const attr__ATTRIBUTE_ADDRESS34 Int)

(declare-const attr__ATTRIBUTE_ADDRESS35 Int)

(declare-const attr__ATTRIBUTE_ADDRESS36 Int)

(declare-const attr__ATTRIBUTE_ADDRESS37 Int)

(declare-const attr__ATTRIBUTE_ADDRESS38 Int)

(declare-const attr__ATTRIBUTE_ADDRESS39 Int)

(declare-const attr__ATTRIBUTE_ADDRESS40 Int)

(declare-const attr__ATTRIBUTE_ADDRESS41 Int)

(declare-const attr__ATTRIBUTE_ADDRESS42 Int)

(declare-const attr__ATTRIBUTE_ADDRESS43 Int)

(declare-const c11b Float32)

(declare-const attr__ATTRIBUTE_ADDRESS44 Int)

(declare-const c12b Float32)

(declare-const attr__ATTRIBUTE_ADDRESS45 Int)

(declare-const c13b Float32)

(declare-const attr__ATTRIBUTE_ADDRESS46 Int)

(declare-const c14b Float32)

(declare-const attr__ATTRIBUTE_ADDRESS47 Int)

(declare-const c15b Float32)

(declare-const attr__ATTRIBUTE_ADDRESS48 Int)

(declare-const c16b Float32)

(declare-const attr__ATTRIBUTE_ADDRESS49 Int)

(declare-const c17b Float32)

(declare-const attr__ATTRIBUTE_ADDRESS50 Int)

(declare-const attr__ATTRIBUTE_ADDRESS51 Int)

(declare-const attr__ATTRIBUTE_ADDRESS52 Int)

(declare-const attr__ATTRIBUTE_ADDRESS53 Int)

(declare-const attr__ATTRIBUTE_ADDRESS54 Int)

(declare-const attr__ATTRIBUTE_ADDRESS55 Int)

(declare-const attr__ATTRIBUTE_ADDRESS56 Int)

(declare-const attr__ATTRIBUTE_ADDRESS57 Int)

(declare-const attr__ATTRIBUTE_ADDRESS58 Int)

(declare-const attr__ATTRIBUTE_ADDRESS59 Int)

(declare-const attr__ATTRIBUTE_ADDRESS60 Int)

(declare-const attr__ATTRIBUTE_ADDRESS61 Int)

(declare-const attr__ATTRIBUTE_ADDRESS62 Int)

(declare-const attr__ATTRIBUTE_ADDRESS63 Int)

(declare-const attr__ATTRIBUTE_ADDRESS64 Int)

(declare-const attr__ATTRIBUTE_ADDRESS65 Int)

(declare-const attr__ATTRIBUTE_ADDRESS66 Int)

(declare-const attr__ATTRIBUTE_ADDRESS67 Int)

(declare-const attr__ATTRIBUTE_ADDRESS68 Int)

(declare-const attr__ATTRIBUTE_ADDRESS69 Int)

(declare-const attr__ATTRIBUTE_ADDRESS70 Int)

(declare-const attr__ATTRIBUTE_ADDRESS71 Int)

(declare-const attr__ATTRIBUTE_ADDRESS72 Int)

(declare-const attr__ATTRIBUTE_ADDRESS73 Int)

(declare-const attr__ATTRIBUTE_ADDRESS74 Int)

(declare-const attr__ATTRIBUTE_ADDRESS75 Int)

(declare-const attr__ATTRIBUTE_ADDRESS76 Int)

(declare-const attr__ATTRIBUTE_ADDRESS77 Int)

(declare-const attr__ATTRIBUTE_ADDRESS78 Int)

(declare-const attr__ATTRIBUTE_ADDRESS79 Int)

(declare-const attr__ATTRIBUTE_ADDRESS80 Int)

(declare-const attr__ATTRIBUTE_ADDRESS81 Int)

(declare-const attr__ATTRIBUTE_ADDRESS82 Int)

(declare-const attr__ATTRIBUTE_ADDRESS83 Int)

(declare-const q0 Float32)

(declare-const q1 Float32)

(declare-const q2 Float32)

(declare-const q3 Float32)

(declare-const two_kp Float32)

(declare-const two_ki Float32)

(declare-const integral_fbx Float32)

(declare-const integral_fby Float32)

(declare-const integral_fbz Float32)

(declare-const beta Float32)

(declare-const recip_norm Float32)

(declare-const norm_ax Float32)

(declare-const norm_ay Float32)

(declare-const norm_az Float32)

(declare-const rad_gx Float32)

(declare-const rad_gy Float32)

(declare-const rad_gz Float32)

(declare-const half_vx Float32)

(declare-const half_vy Float32)

(declare-const half_vz Float32)

(declare-const half_ex Float32)

(declare-const half_ey t__ref)

(declare-const half_ez t__ref)

(declare-const q0_tmp t__ref)

(declare-const q1_tmp t__ref)

(declare-const q2_tmp t__ref)

(declare-const q3_tmp t__ref)

(declare-const qa t__ref)

(declare-const qb t__ref)

(declare-const qc t__ref)

(declare-const o Float32)

(declare-const o1 Float32)

(declare-const o2 Float32)

(declare-const o3 Float32)

(declare-const o4 Float32)

(declare-const o5 Float32)

(declare-const o6 Float32)

(declare-const o7 Float32)

(declare-const o8 Float32)

(declare-const o9 Float32)

(declare-const o10 Float32)

(declare-const o11 Float32)

(declare-const o12 Float32)

(declare-const o13 Float32)

(declare-const o14 Float32)

(declare-const o15 Float32)

(declare-const o16 Float32)

(declare-const o17 Float32)

(declare-const o18 Float32)

(declare-const o19 Float32)

(declare-const o20 Float32)

(declare-const o21 Float32)

(declare-const o22 Float32)

(declare-const o23 Float32)

(declare-const o24 Float32)

(declare-const o25 Float32)

(declare-const o26 Float32)

(declare-const o27 Float32)

(declare-const o28 Float32)

(declare-const o29 Float32)

(declare-const o30 Float32)

(declare-const o31 Float32)

(declare-const o32 Float32)

(declare-const o33 Float32)

(declare-const o34 Float32)

(declare-const o35 Float32)

(declare-const o36 Float32)

(declare-const o37 Float32)

(declare-const o38 Float32)

(declare-const o39 Float32)

(declare-const o40 Float32)

(declare-const o41 Float32)

(declare-const o42 Float32)

(declare-const o43 Float32)

(declare-const o44 Float32)

(declare-const o45 Float32)

(declare-const o46 Float32)

(declare-const o47 Float32)

(declare-const o48 Float32)

(declare-const o49 Float32)

(declare-const o50 Float32)

(declare-const o51 Float32)

(declare-const o52 Float32)

(declare-const o53 Float32)

(declare-const o54 Float32)

(declare-const o55 Float32)

(declare-const o56 Float32)

(declare-const o57 Float32)

(declare-const o58 Float32)

(declare-const o59 Float32)

(declare-const o60 Float32)

(declare-const o61 Float32)

(declare-const o62 Float32)

(declare-const o63 Float32)

(declare-const o64 Float32)

(declare-const o65 Float32)

(declare-const o66 Float32)

(declare-const o67 Float32)

(declare-const o68 Float32)

(declare-const o69 Float32)

(declare-const o70 Float32)

(declare-const o71 Float32)

(declare-const o72 Float32)

(declare-const o73 Float32)

(declare-const o74 Float32)

(declare-const o75 Float32)

(declare-const o76 Float32)

(declare-const o77 Float32)

(declare-const o78 Float32)

(declare-const o79 Float32)

(declare-const o80 Float32)

(declare-const o81 Float32)

(declare-const o82 Float32)

(declare-const o83 Float32)

(declare-const o84 Float32)

(declare-const integral_fbx1 Float32)

(declare-const integral_fby1 Float32)

(declare-const integral_fbz1 Float32)

(declare-const recip_norm1 Float32)

(declare-const norm_ax1 Float32)

(declare-const norm_ay1 Float32)

(declare-const norm_az1 Float32)

(declare-const half_ex1 Float32)

(declare-const half_ey1 Float32)

(declare-const half_ez1 Float32)

(declare-const result t__ref)

(declare-const rad_gx1 Float32)

(declare-const result1 t__ref)

(declare-const rad_gy1 Float32)

(declare-const result2 t__ref)

(declare-const rad_gz1 Float32)

(declare-const result3 t__ref)

(declare-const half_vx1 Float32)

(declare-const result4 t__ref)

(declare-const half_vy1 Float32)

(declare-const result5 t__ref)

(declare-const half_vz1 Float32)

(declare-const result6 t__ref)

(declare-const qa1 Float32)

(declare-const result7 t__ref)

(declare-const qb1 Float32)

(declare-const result8 t__ref)

(declare-const qc1 Float32)

(declare-const result9 t__ref)

(declare-const recip_norm2 Float32)

(declare-const result10 t__ref)

(declare-const norm_ax2 Float32)

(declare-const result11 t__ref)

(declare-const norm_ay2 Float32)

(declare-const result12 t__ref)

(declare-const norm_az2 Float32)

(declare-const result13 t__ref)

(declare-const half_ex2 Float32)

(declare-const result14 t__ref)

(declare-const half_ey2 Float32)

(declare-const result15 t__ref)

(declare-const half_ez2 Float32)

(declare-const result16 t__ref)

(declare-const integral_fbx2 Float32)

(declare-const result17 t__ref)

(declare-const integral_fby2 Float32)

(declare-const result18 t__ref)

(declare-const integral_fbz2 Float32)

(declare-const result19 t__ref)

(declare-const rad_gx2 Float32)

(declare-const result20 t__ref)

(declare-const rad_gy2 Float32)

(declare-const result21 t__ref)

(declare-const rad_gz2 Float32)

(declare-const result22 t__ref)

(declare-const integral_fbx3 Float32)

(declare-const result23 t__ref)

(declare-const integral_fby3 Float32)

(declare-const result24 t__ref)

(declare-const integral_fbz3 Float32)

(declare-const result25 t__ref)

(declare-const rad_gx3 Float32)

(declare-const result26 t__ref)

(declare-const rad_gy3 Float32)

(declare-const result27 t__ref)

(declare-const rad_gz3 Float32)

(declare-const result28 t__ref)

(declare-const rad_gx4 Float32)

(declare-const result29 t__ref)

(declare-const rad_gy4 Float32)

(declare-const result30 t__ref)

(declare-const rad_gz4 Float32)

(declare-const result31 t__ref)

(declare-const q0_tmp1 Float32)

(declare-const result32 t__ref)

(declare-const q1_tmp1 Float32)

(declare-const result33 t__ref)

(declare-const q2_tmp1 Float32)

(define-fun integral_fbz4 () t__ref (mk_t__ref integral_fbz))

(define-fun integral_fby4 () t__ref (mk_t__ref integral_fby))

(define-fun integral_fbx4 () t__ref (mk_t__ref integral_fbx))

;; H
  (assert (in_range1 gx))

;; H
  (assert (in_range1 gy))

;; H
  (assert (in_range1 gz))

;; H
  (assert (in_range2 ax))

;; H
  (assert (in_range2 ay))

;; H
  (assert (in_range2 az))

;; H
  (assert (in_range5 dt))

;; H
  (assert (in_range7 q0))

;; H
  (assert (in_range7 q1))

;; H
  (assert (in_range7 q2))

;; H
  (assert (in_range7 q3))

;; H
  (assert (fp.isFinite32 two_kp))

;; H
  (assert (fp.isFinite32 two_ki))

;; H
  (assert (fp.isFinite32 integral_fbx))

;; H
  (assert (fp.isFinite32 integral_fby))

;; H
  (assert (fp.isFinite32 integral_fbz))

;; H
  (assert (in_range6 beta))

;; H
  (assert (= gx c3b))

;; H
  (assert (in_range1 c3b))

;; H
  (assert (= gy c4b))

;; H
  (assert (in_range1 c4b))

;; H
  (assert (= gz c5b))

;; H
  (assert (in_range1 c5b))

;; H
  (assert (= ax c6b))

;; H
  (assert (in_range2 c6b))

;; H
  (assert (= ay c7b))

;; H
  (assert (in_range2 c7b))

;; H
  (assert (= az c8b))

;; H
  (assert (in_range2 c8b))

;; H
  (assert (= dt c9b))

;; H
  (assert (in_range5 c9b))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (fp.isFinite32 recip_norm)))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b10000011 #b00000000000000000000000)) (fp #b0 #b10000011 #b00000000000000000000000))
  (in_range2 norm_ax)))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b10000011 #b00000000000000000000000)) (fp #b0 #b10000011 #b00000000000000000000000))
  (in_range2 norm_ay)))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b10000011 #b00000000000000000000000)) (fp #b0 #b10000011 #b00000000000000000000000))
  (in_range2 norm_az)))

;; H
  (assert (= result (mk_t__ref rad_gx)))

;; H
  (assert
  (= rad_gx1 (fp.div RNE (fp.mul RNE c3b (fp #b0 #b10000000 #b10010010000111111011011)) (fp #b0 #b10000110 #b01101000000000000000000))))

;; H
  (assert (fp.isFinite32 rad_gx1))

;; H
  (assert (= result1 (mk_t__ref rad_gy)))

;; H
  (assert
  (= rad_gy1 (fp.div RNE (fp.mul RNE c4b (fp #b0 #b10000000 #b10010010000111111011011)) (fp #b0 #b10000110 #b01101000000000000000000))))

;; H
  (assert (fp.isFinite32 rad_gy1))

;; H
  (assert (= result2 (mk_t__ref rad_gz)))

;; H
  (assert
  (= rad_gz1 (fp.div RNE (fp.mul RNE c5b (fp #b0 #b10000000 #b10010010000111111011011)) (fp #b0 #b10000110 #b01101000000000000000000))))

;; H
  (assert (fp.isFinite32 rad_gz1))

;; H
  (assert (= result3 (mk_t__ref half_vx)))

;; H
  (assert (= half_vx1 (fp.sub RNE (fp.mul RNE q1 q3) (fp.mul RNE q0 q2))))

;; H
  (assert (fp.isFinite32 half_vx1))

;; H
  (assert (= result4 (mk_t__ref half_vy)))

;; H
  (assert (= half_vy1 (fp.add RNE (fp.mul RNE q0 q1) (fp.mul RNE q2 q3))))

;; H
  (assert (fp.isFinite32 half_vy1))

;; H
  (assert (= result5 (mk_t__ref half_vz)))

;; H
  (assert
  (= half_vz1 (fp.add RNE (fp.sub RNE (fp.mul RNE q0 q0) (fp #b0 #b01111110 #b00000000000000000000000)) (fp.mul RNE
  q3 q3))))

;; H
  (assert (fp.isFinite32 half_vz1))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (fp.isFinite32 half_ex)))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (fp.isFinite32 (t__content half_ey))))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (fp.isFinite32 (t__content half_ez))))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (fp.isFinite32 (t__content q0_tmp))))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (fp.isFinite32 (t__content q1_tmp))))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (fp.isFinite32 (t__content q2_tmp))))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (fp.isFinite32 (t__content q3_tmp))))

;; H
  (assert (= result6 qa))

;; H
  (assert (= (let ((subject qa)) qa1) q0))

;; H
  (assert (in_range7 (let ((subject qa)) qa1)))

;; H
  (assert (= result7 qb))

;; H
  (assert (= (let ((subject qb)) qb1) q1))

;; H
  (assert (in_range7 (let ((subject qb)) qb1)))

;; H
  (assert (= result8 qc))

;; H
  (assert (= (let ((subject qc)) qc1) q2))

;; H
  (assert (in_range7 (let ((subject qc)) qc1)))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (and
  (= o (inv_sqrt
       (fp.add RNE (fp.add RNE (fp.mul RNE c6b c6b) (fp.mul RNE c7b c7b)) (fp.mul RNE
       c8b c8b))))
  (and (fp.isFinite32 o)
  (and (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) o)
  (fp.lt o (fp #b0 #b11000010 #b01011010111100011101100)))))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (= result9 (mk_t__ref recip_norm))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (= recip_norm2 o)))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (and (= o1 (fp.mul RNE c6b recip_norm2))
  (fp.isFinite32 (fp.mul RNE c6b recip_norm2)))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (and
  (= o2 (saturate o1 (fp.neg (fp #b0 #b01111111 #b00000000000000000000000))
        (fp #b0 #b01111111 #b00000000000000000000000)))
  (and (fp.isFinite32 o2)
  (ite (fp.lt o1 (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)))
  (fp.eq o2 (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)))
  (ite (fp.lt (fp #b0 #b01111111 #b00000000000000000000000) o1)
  (fp.eq o2 (fp #b0 #b01111111 #b00000000000000000000000)) (fp.eq o2
  o1)))))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (and (= o3 o2) (fp.isFinite32 o2))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (= result10 (mk_t__ref norm_ax))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (= norm_ax2 o3)))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (and (= o4 (fp.mul RNE c7b recip_norm2))
  (fp.isFinite32 (fp.mul RNE c7b recip_norm2)))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (and
  (= o5 (saturate o4 (fp.neg (fp #b0 #b01111111 #b00000000000000000000000))
        (fp #b0 #b01111111 #b00000000000000000000000)))
  (and (fp.isFinite32 o5)
  (ite (fp.lt o4 (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)))
  (fp.eq o5 (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)))
  (ite (fp.lt (fp #b0 #b01111111 #b00000000000000000000000) o4)
  (fp.eq o5 (fp #b0 #b01111111 #b00000000000000000000000)) (fp.eq o5
  o4)))))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (and (= o6 o5) (fp.isFinite32 o5))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (= result11 (mk_t__ref norm_ay))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (= norm_ay2 o6)))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (and (= o7 (fp.mul RNE c8b recip_norm2))
  (fp.isFinite32 (fp.mul RNE c8b recip_norm2)))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (and
  (= o8 (saturate o7 (fp.neg (fp #b0 #b01111111 #b00000000000000000000000))
        (fp #b0 #b01111111 #b00000000000000000000000)))
  (and (fp.isFinite32 o8)
  (ite (fp.lt o7 (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)))
  (fp.eq o8 (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)))
  (ite (fp.lt (fp #b0 #b01111111 #b00000000000000000000000) o7)
  (fp.eq o8 (fp #b0 #b01111111 #b00000000000000000000000)) (fp.eq o8
  o7)))))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (and (= o9 o8) (fp.isFinite32 o8))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (= result12 (mk_t__ref norm_az))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (= norm_az2 o9)))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (and (= o10 (fp.mul RNE norm_az2 half_vy1))
  (fp.isFinite32 (fp.mul RNE norm_az2 half_vy1)))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (and (= o11 (fp.mul RNE norm_ay2 half_vz1))
  (fp.isFinite32 (fp.mul RNE norm_ay2 half_vz1)))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (= o12 (fp.sub RNE o11 o10))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (and (= o13 o12) (fp.isFinite32 o12))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (= result13 (mk_t__ref half_ex))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (= half_ex2 o13)))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (and (= o14 (fp.mul RNE norm_ax2 half_vz1))
  (fp.isFinite32 (fp.mul RNE norm_ax2 half_vz1)))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (and (= o15 (fp.mul RNE norm_az2 half_vx1))
  (fp.isFinite32 (fp.mul RNE norm_az2 half_vx1)))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (= o16 (fp.sub RNE o15 o14))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (and (= o17 o16) (fp.isFinite32 o16))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (= result14 half_ey)))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (= (let ((subject half_ey)) half_ey2) o17)))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (and (= o18 (fp.mul RNE norm_ay2 half_vx1))
  (fp.isFinite32 (fp.mul RNE norm_ay2 half_vx1)))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (and (= o19 (fp.mul RNE norm_ax2 half_vy1))
  (fp.isFinite32 (fp.mul RNE norm_ax2 half_vy1)))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (= o20 (fp.sub RNE o19 o18))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (and (= o21 o20) (fp.isFinite32 o20))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (= result15 half_ez)))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (= (let ((subject half_ez)) half_ez2) o21)))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (=> (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki)
  (and (= o22 (fp.mul RNE two_ki half_ex2))
  (fp.isFinite32 (fp.mul RNE two_ki half_ex2))))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (=> (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki)
  (= o23 (fp.mul RNE o22 c9b)))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (=> (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki)
  (and (= o24 o23) (fp.isFinite32 o23)))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (=> (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki)
  (= o25 (fp.add RNE integral_fbx o24)))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (=> (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki)
  (and (= o26 o25) (fp.isFinite32 o25)))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (=> (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki)
  (= result16 integral_fbx4))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (=> (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki)
  (= integral_fbx2 o26))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (=> (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki)
  (and (= o27 (fp.mul RNE two_ki (let ((subject half_ey)) half_ey2)))
  (fp.isFinite32 (fp.mul RNE two_ki (let ((subject half_ey)) half_ey2)))))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (=> (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki)
  (= o28 (fp.mul RNE o27 c9b)))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (=> (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki)
  (and (= o29 o28) (fp.isFinite32 o28)))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (=> (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki)
  (= o30 (fp.add RNE integral_fby o29)))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (=> (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki)
  (and (= o31 o30) (fp.isFinite32 o30)))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (=> (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki)
  (= result17 integral_fby4))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (=> (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki)
  (= integral_fby2 o31))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (=> (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki)
  (and (= o32 (fp.mul RNE two_ki (let ((subject half_ez)) half_ez2)))
  (fp.isFinite32 (fp.mul RNE two_ki (let ((subject half_ez)) half_ez2)))))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (=> (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki)
  (= o33 (fp.mul RNE o32 c9b)))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (=> (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki)
  (and (= o34 o33) (fp.isFinite32 o33)))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (=> (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki)
  (= o35 (fp.add RNE integral_fbz o34)))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (=> (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki)
  (and (= o36 o35) (fp.isFinite32 o35)))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (=> (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki)
  (= result18 integral_fbz4))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (=> (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki)
  (= integral_fbz2 o36))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (=> (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki)
  (and (= o37 (fp.add RNE rad_gx1 integral_fbx2))
  (fp.isFinite32 (fp.add RNE rad_gx1 integral_fbx2))))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (=> (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki)
  (= result19 (mk_t__ref rad_gx1)))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (=> (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki)
  (= rad_gx2 o37))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (=> (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki)
  (and (= o38 (fp.add RNE rad_gy1 integral_fby2))
  (fp.isFinite32 (fp.add RNE rad_gy1 integral_fby2))))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (=> (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki)
  (= result20 (mk_t__ref rad_gy1)))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (=> (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki)
  (= rad_gy2 o38))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (=> (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki)
  (and (= o39 (fp.add RNE rad_gz1 integral_fbz2))
  (fp.isFinite32 (fp.add RNE rad_gz1 integral_fbz2))))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (=> (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki)
  (= result21 (mk_t__ref rad_gz1)))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (=> (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki)
  (= rad_gz2 o39))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (=> (not (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki))
  (= result22 integral_fbx4))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (=> (not (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki))
  (= integral_fbx3 (fp #b0 #b00000000 #b00000000000000000000000)))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (=> (not (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki))
  (= result23 integral_fby4))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (=> (not (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki))
  (= integral_fby3 (fp #b0 #b00000000 #b00000000000000000000000)))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (=> (not (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki))
  (= result24 integral_fbz4))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (=> (not (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki))
  (= integral_fbz3 (fp #b0 #b00000000 #b00000000000000000000000)))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (=> (not (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki))
  (= rad_gz2 rad_gz1))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (=> (not (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki))
  (= rad_gy2 rad_gy1))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (=> (not (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki))
  (= rad_gx2 rad_gx1))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (=> (not (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki))
  (= integral_fbz2 integral_fbz3))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (=> (not (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki))
  (= integral_fby2 integral_fby3))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (=> (not (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki))
  (= integral_fbx2 integral_fbx3))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (and (= o40 (fp.mul RNE two_kp half_ex2))
  (fp.isFinite32 (fp.mul RNE two_kp half_ex2)))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (= o41 (fp.add RNE rad_gx2 o40))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (and (= o42 o41) (fp.isFinite32 o41))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (= result25 (mk_t__ref rad_gx2))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (= rad_gx3 o42)))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (and (= o43 (fp.mul RNE two_kp (let ((subject half_ey)) half_ey2)))
  (fp.isFinite32 (fp.mul RNE two_kp (let ((subject half_ey)) half_ey2))))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (= o44 (fp.add RNE rad_gy2 o43))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (and (= o45 o44) (fp.isFinite32 o44))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (= result26 (mk_t__ref rad_gy2))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (= rad_gy3 o45)))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (and (= o46 (fp.mul RNE two_kp (let ((subject half_ez)) half_ez2)))
  (fp.isFinite32 (fp.mul RNE two_kp (let ((subject half_ez)) half_ez2))))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (= o47 (fp.add RNE rad_gz2 o46))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (and (= o48 o47) (fp.isFinite32 o47))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (= result27 (mk_t__ref rad_gz2))))

;; H
  (assert
  (=>
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000)))))
  (= rad_gz3 o48)))

;; H
  (assert
  (=>
  (not
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000))))))
  (= (let ((subject half_ez)) (mk_t__ref half_ez2)) half_ez)))

;; H
  (assert
  (=>
  (not
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000))))))
  (= (let ((subject half_ey)) (mk_t__ref half_ey2)) half_ey)))

;; H
  (assert
  (=>
  (not
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000))))))
  (= half_ex2 half_ex)))

;; H
  (assert
  (=>
  (not
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000))))))
  (= rad_gz3 rad_gz1)))

;; H
  (assert
  (=>
  (not
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000))))))
  (= rad_gy3 rad_gy1)))

;; H
  (assert
  (=>
  (not
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000))))))
  (= rad_gx3 rad_gx1)))

;; H
  (assert
  (=>
  (not
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000))))))
  (= norm_az2 norm_az)))

;; H
  (assert
  (=>
  (not
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000))))))
  (= norm_ay2 norm_ay)))

;; H
  (assert
  (=>
  (not
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000))))))
  (= norm_ax2 norm_ax)))

;; H
  (assert
  (=>
  (not
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000))))))
  (= recip_norm2 recip_norm)))

;; H
  (assert
  (=>
  (not
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000))))))
  (= integral_fbz2 integral_fbz)))

;; H
  (assert
  (=>
  (not
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000))))))
  (= integral_fby2 integral_fby)))

;; H
  (assert
  (=>
  (not
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000))))))
  (= integral_fbx2 integral_fbx)))

;; H
  (assert
  (=>
  (not
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000))))))
  (= half_ez2 half_ez1)))

;; H
  (assert
  (=>
  (not
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000))))))
  (= half_ey2 half_ey1)))

;; H
  (assert
  (=>
  (not
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000))))))
  (= half_ex2 half_ex1)))

;; H
  (assert
  (=>
  (not
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000))))))
  (= rad_gz3 rad_gz1)))

;; H
  (assert
  (=>
  (not
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000))))))
  (= rad_gy3 rad_gy1)))

;; H
  (assert
  (=>
  (not
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000))))))
  (= rad_gx3 rad_gx1)))

;; H
  (assert
  (=>
  (not
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000))))))
  (= norm_az2 norm_az1)))

;; H
  (assert
  (=>
  (not
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000))))))
  (= norm_ay2 norm_ay1)))

;; H
  (assert
  (=>
  (not
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000))))))
  (= norm_ax2 norm_ax1)))

;; H
  (assert
  (=>
  (not
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000))))))
  (= recip_norm2 recip_norm1)))

;; H
  (assert
  (=>
  (not
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000))))))
  (= integral_fbz2 integral_fbz1)))

;; H
  (assert
  (=>
  (not
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000))))))
  (= integral_fby2 integral_fby1)))

;; H
  (assert
  (=>
  (not
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000))))))
  (= integral_fbx2 integral_fbx1)))

;; H
  (assert (= result28 (mk_t__ref rad_gx3)))

;; H
  (assert
  (= rad_gx4 (fp.mul RNE rad_gx3 (fp.mul RNE (fp #b0 #b01111110 #b00000000000000000000000)
  c9b))))

;; H
  (assert (= result29 (mk_t__ref rad_gy3)))

;; H
  (assert
  (= rad_gy4 (fp.mul RNE rad_gy3 (fp.mul RNE (fp #b0 #b01111110 #b00000000000000000000000)
  c9b))))

;; H
  (assert (= result30 (mk_t__ref rad_gz3)))

;; H
  (assert
  (= rad_gz4 (fp.mul RNE rad_gz3 (fp.mul RNE (fp #b0 #b01111110 #b00000000000000000000000)
  c9b))))

;; H
  (assert
  (and (= o53 (fp.mul RNE q3 rad_gz4))
  (fp.isFinite32 (fp.mul RNE q3 rad_gz4))))

;; H
  (assert
  (and (= o50 (fp.mul RNE (let ((subject qc)) qc1) rad_gy4))
  (fp.isFinite32 (fp.mul RNE (let ((subject qc)) qc1) rad_gy4))))

;; H
  (assert
  (and (= o49 (fp.mul RNE (let ((subject qb)) qb1) rad_gx4))
  (fp.isFinite32 (fp.mul RNE (let ((subject qb)) qb1) rad_gx4))))

;; H
  (assert (= o51 (fp.neg o49)))

;; H
  (assert (= o52 (fp.sub RNE o51 o50)))

;; H
  (assert (and (= o54 o52) (fp.isFinite32 o52)))

;; H
  (assert (= o55 (fp.sub RNE o54 o53)))

;; H
  (assert (and (= o56 o55) (fp.isFinite32 o55)))

;; H
  (assert (= o57 (fp.add RNE q0 o56)))

;; H
  (assert (and (= o58 o57) (fp.isFinite32 o57)))

;; H
  (assert (= result31 q0_tmp))

;; H
  (assert (= (let ((subject q0_tmp)) q0_tmp1) o58))

;; H
  (assert
  (and (= o62 (fp.mul RNE q3 rad_gy4))
  (fp.isFinite32 (fp.mul RNE q3 rad_gy4))))

;; H
  (assert
  (and (= o59 (fp.mul RNE (let ((subject qc)) qc1) rad_gz4))
  (fp.isFinite32 (fp.mul RNE (let ((subject qc)) qc1) rad_gz4))))

;; H
  (assert
  (and (= o60 (fp.mul RNE (let ((subject qa)) qa1) rad_gx4))
  (fp.isFinite32 (fp.mul RNE (let ((subject qa)) qa1) rad_gx4))))

;; H
  (assert (= o61 (fp.add RNE o60 o59)))

;; H
  (assert (and (= o63 o61) (fp.isFinite32 o61)))

;; H
  (assert (= o64 (fp.sub RNE o63 o62)))

;; H
  (assert (and (= o65 o64) (fp.isFinite32 o64)))

;; H
  (assert (= o66 (fp.add RNE q1 o65)))

;; H
  (assert (and (= o67 o66) (fp.isFinite32 o66)))

;; H
  (assert (= result32 q1_tmp))

;; H
  (assert (= (let ((subject q1_tmp)) q1_tmp1) o67))

;; H
  (assert
  (and (= o71 (fp.mul RNE q3 rad_gx4))
  (fp.isFinite32 (fp.mul RNE q3 rad_gx4))))

;; H
  (assert
  (and (= o68 (fp.mul RNE (let ((subject qb)) qb1) rad_gz4))
  (fp.isFinite32 (fp.mul RNE (let ((subject qb)) qb1) rad_gz4))))

;; H
  (assert
  (and (= o69 (fp.mul RNE (let ((subject qa)) qa1) rad_gy4))
  (fp.isFinite32 (fp.mul RNE (let ((subject qa)) qa1) rad_gy4))))

;; H
  (assert (= o70 (fp.sub RNE o69 o68)))

;; H
  (assert (and (= o72 o70) (fp.isFinite32 o70)))

;; H
  (assert (= o73 (fp.add RNE o72 o71)))

;; H
  (assert (and (= o74 o73) (fp.isFinite32 o73)))

;; H
  (assert (= o75 (fp.add RNE q2 o74)))

;; H
  (assert (and (= o76 o75) (fp.isFinite32 o75)))

;; H
  (assert (= result33 q2_tmp))

;; H
  (assert (= (let ((subject q2_tmp)) q2_tmp1) o76))

;; H
  (assert
  (and (= o80 (fp.mul RNE (let ((subject qc)) qc1) rad_gx4))
  (fp.isFinite32 (fp.mul RNE (let ((subject qc)) qc1) rad_gx4))))

;; H
  (assert
  (and (= o77 (fp.mul RNE (let ((subject qb)) qb1) rad_gy4))
  (fp.isFinite32 (fp.mul RNE (let ((subject qb)) qb1) rad_gy4))))

;; H
  (assert
  (and (= o78 (fp.mul RNE (let ((subject qa)) qa1) rad_gz4))
  (fp.isFinite32 (fp.mul RNE (let ((subject qa)) qa1) rad_gz4))))

;; H
  (assert (= o79 (fp.add RNE o78 o77)))

;; H
  (assert (and (= o81 o79) (fp.isFinite32 o79)))

;; H
  (assert (= o82 (fp.sub RNE o81 o80)))

;; H
  (assert (and (= o83 o82) (fp.isFinite32 o82)))

;; H
  (assert (= o84 (fp.add RNE q3 o83)))

(assert
;; WP_parameter_def
 ;; File "i-cexten.ads", line 59, characters 0-0
  (not (fp.isFinite32 o84)))
(check-sat)
(exit)
