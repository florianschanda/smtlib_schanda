(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic comp_div: int, int -> int
axiom comp_div_def: forall x, y:int. x >= 0 and y > 0 -> comp_div(x,y) = x / y
logic comp_mod: int, int -> int
axiom comp_mod_def: forall x, y:int. x >= 0 and y > 0 -> comp_mod(x,y) = x % y
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic abs : int -> int

axiom abs_def :
  (forall x:int [abs(x)]. (((0 <= x) -> (abs(x) = x)) and ((not (0 <= x)) ->
  (abs(x) = (-x)))))

axiom Abs_le :
  (forall x:int. forall y:int. ((abs(x) <= y) <-> (((-y) <= x) and
  (x <= y))))

axiom Abs_pos : (forall x:int. (0 <= abs(x)))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * comp_div(x,y)) + comp_mod(x,y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= comp_div(x,y)) and (comp_div(x,y) <= x))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (((-abs(y)) <  comp_mod(x,y)) and (comp_mod(x,y) <  abs(y)))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  (0 <= comp_div(x,y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) ->
  (comp_div(x,y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) ->
  (0 <= comp_mod(x,y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) ->
  (comp_mod(x,y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (abs((comp_div(x,y) * y)) <= abs(x))))

axiom Div_1 : (forall x:int. (comp_div(x,1) = x))

axiom Mod_1 : (forall x:int. (comp_mod(x,1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_div(x,y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_mod(x,y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [comp_div(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_div(((x * y) + z),x) = (y + comp_div(z,x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [comp_mod(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_mod(((x * y) + z),x) = comp_mod(z,x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (-1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((-1) / y) = (-1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((-1) % y)]. ((1 <  y) -> (((-1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic mod : int, int -> int

axiom mod_def :
  (forall x:int. forall y:int [mod(x, y)]. (((0 <  y) -> (mod(x,
  y) = (x % y))) and ((not (0 <  y)) -> (mod(x, y) = ((x % y) + y)))))

type integer

predicate in_range(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type natural

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep : natural -> int

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type positive

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : positive, positive -> bool

logic dummy2 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

logic to_rep1 : positive -> int

logic of_rep1 : int -> positive

axiom inversion_axiom1 :
  (forall x:positive [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:positive [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type element_type

predicate in_range3(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : element_type, element_type -> bool

logic dummy3 : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref___projection(a: element_type__ref) : element_type =
  (a).element_type__content

logic to_rep2 : element_type -> int

logic of_rep2 : int -> element_type

axiom inversion_axiom2 :
  (forall x:element_type [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:element_type [to_rep2(x)]. in_range3(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range3(x) ->
  (to_rep2(of_rep2(x)) = x)))

type map__ref = { map__content : (int,element_type) farray
}

logic slide : (int,element_type) farray, int,
  int -> (int,element_type) farray

axiom slide_eq :
  (forall a:(int,element_type) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,element_type) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,element_type) farray, int, int,
  (int,element_type) farray, int, int -> (int,element_type) farray

axiom concat_def :
  (forall a:(int,element_type) farray. forall b:(int,element_type) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : element_type, int -> (int,element_type) farray

axiom singleton_def :
  (forall v:element_type.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq5 : (int,element_type) farray, int, int,
  (int,element_type) farray, int, int -> bool

axiom bool_eq_def4 :
  (forall a:(int,element_type) farray. forall a__first:int.
  forall a__last:int. forall b:(int,element_type) farray.
  forall b__first:int. forall b__last:int [bool_eq5(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_151:int. ((((a__first <= temp___idx_151) and
  (temp___idx_151 <= a__last)) and
  (to_rep2((a[temp___idx_151])) = to_rep2((b[((b__first - a__first) + temp___idx_151)])))) or
  (not ((a__first <= temp___idx_151) and (temp___idx_151 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_151:int. (((a__first <= temp___idx_151) and
  (temp___idx_151 <= a__last)) ->
  (to_rep2((a[temp___idx_151])) = to_rep2((b[((b__first - a__first) + temp___idx_151)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,element_type) farray. forall b:(int,element_type) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_151:int. (((a__first <= temp___idx_151) and
  (temp___idx_151 <= a__last)) ->
  (to_rep2((a[temp___idx_151])) = to_rep2((b[((b__first - a__first) + temp___idx_151)])))))))))

logic compare : (int,element_type) farray, int, int,
  (int,element_type) farray, int, int -> int

axiom compare_def_eq :
  (forall a:(int,element_type) farray. forall b:(int,element_type) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq5(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,element_type) farray. forall b:(int,element_type) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq5(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep2((a[(i + 1)])) <  to_rep2((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,element_type) farray. forall b:(int,element_type) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq5(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep2((b[(i + 1)])) <  to_rep2((a[(j + 1)]))))))))))))

logic to_rep3 : integer -> int

logic of_rep3 : int -> integer

axiom inversion_axiom3 :
  (forall x:integer [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 : (forall x:integer [to_rep3(x)]. in_range(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range(x) ->
  (to_rep3(of_rep3(x)) = x)))

predicate dynamic_property(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : integer, integer -> bool

logic dummy4 : integer

type t14b__ref = { t14b__content : integer
}

function t14b__ref___projection(a: t14b__ref) : integer = (a).t14b__content

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range(f) -> (in_range(l) ->
  ((to_rep3(first(mk(f, l))) = f) and (to_rep3(last(mk(f, l))) = l)))))

predicate dynamic_property1(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (dynamic_property(range_first, range_last, low) and
  dynamic_property(range_first, range_last, high)))))

type us_t = { elts : (int,element_type) farray; rt : t
}

function to_array(a: us_t) : (int,element_type) farray = (a).elts

function of_array(a: (int,element_type) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep3(first((a).rt))

function last1(a: us_t) : int = to_rep3(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,element_type) farray -> int

logic value__component__size : int

logic object__component__size : (int,element_type) farray -> int

logic value__alignment : int

logic object__alignment : (int,element_type) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,element_type) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,element_type) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,element_type) farray. (0 <= object__alignment(a)))

function bool_eq7(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep3(first((x).rt)), to_rep3(last((x).rt)), (y).elts,
  to_rep3(first((y).rt)), to_rep3(last((y).rt)))

logic user_eq5 : us_t, us_t -> bool

logic dummy5 : (int,element_type) farray

logic dummy6 : t

type t15b__ref = { t15b__content : us_t
}

function t15b__ref___projection(a: t15b__ref) : us_t = (a).t15b__content

type us_split_discrs = {
rec__bounded_queue_example__char_queue__queue_type__max_size : positive
}

function us_split_discrs___projection(a: us_split_discrs) : positive =
  (a).rec__bounded_queue_example__char_queue__queue_type__max_size

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = {
rec__bounded_queue_example__char_queue__queue_type__count : natural;
rec__bounded_queue_example__char_queue__queue_type__front : positive;
rec__bounded_queue_example__char_queue__queue_type__rear : positive;
rec__bounded_queue_example__char_queue__queue_type__items : us_t
}

function us_split_fields_Count__projection(a: us_split_fields) : natural =
  (a).rec__bounded_queue_example__char_queue__queue_type__count

function us_split_fields_Front__projection(a: us_split_fields) : positive =
  (a).rec__bounded_queue_example__char_queue__queue_type__front

function us_split_fields_Rear__projection(a: us_split_fields) : positive =
  (a).rec__bounded_queue_example__char_queue__queue_type__rear

function us_split_fields_Items__projection(a: us_split_fields) : us_t =
  (a).rec__bounded_queue_example__char_queue__queue_type__items

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref_2__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep_3__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep_4__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq8 : us_rep, us_rep -> bool

axiom bool_eq_def6 :
  (forall a:us_rep. forall b:us_rep [bool_eq8(a, b)].
  (((((((to_rep1(((a).us_split_discrs1).rec__bounded_queue_example__char_queue__queue_type__max_size) = to_rep1(((b).us_split_discrs1).rec__bounded_queue_example__char_queue__queue_type__max_size)) and
  (to_rep(((a).us_split_fields1).rec__bounded_queue_example__char_queue__queue_type__count) = to_rep(((b).us_split_fields1).rec__bounded_queue_example__char_queue__queue_type__count))) and
  (to_rep1(((a).us_split_fields1).rec__bounded_queue_example__char_queue__queue_type__front) = to_rep1(((b).us_split_fields1).rec__bounded_queue_example__char_queue__queue_type__front))) and
  (to_rep1(((a).us_split_fields1).rec__bounded_queue_example__char_queue__queue_type__rear) = to_rep1(((b).us_split_fields1).rec__bounded_queue_example__char_queue__queue_type__rear))) and
  (bool_eq7(((a).us_split_fields1).rec__bounded_queue_example__char_queue__queue_type__items,
  ((b).us_split_fields1).rec__bounded_queue_example__char_queue__queue_type__items) = true)) ->
  (bool_eq8(a, b) = true)) and
  ((not (((((to_rep1(((a).us_split_discrs1).rec__bounded_queue_example__char_queue__queue_type__max_size) = to_rep1(((b).us_split_discrs1).rec__bounded_queue_example__char_queue__queue_type__max_size)) and
  (to_rep(((a).us_split_fields1).rec__bounded_queue_example__char_queue__queue_type__count) = to_rep(((b).us_split_fields1).rec__bounded_queue_example__char_queue__queue_type__count))) and
  (to_rep1(((a).us_split_fields1).rec__bounded_queue_example__char_queue__queue_type__front) = to_rep1(((b).us_split_fields1).rec__bounded_queue_example__char_queue__queue_type__front))) and
  (to_rep1(((a).us_split_fields1).rec__bounded_queue_example__char_queue__queue_type__rear) = to_rep1(((b).us_split_fields1).rec__bounded_queue_example__char_queue__queue_type__rear))) and
  (bool_eq7(((a).us_split_fields1).rec__bounded_queue_example__char_queue__queue_type__items,
  ((b).us_split_fields1).rec__bounded_queue_example__char_queue__queue_type__items) = true))) ->
  (bool_eq8(a, b) = false))))

logic user_eq6 : us_rep, us_rep -> bool

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:positive. forall a1:natural. forall a2:positive.
  forall a3:positive. forall a4:(int,element_type) farray. forall a5:t.
  (0 <= object__size1({ us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size = a };
  us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count = a1;
  rec__bounded_queue_example__char_queue__queue_type__front = a2;
  rec__bounded_queue_example__char_queue__queue_type__rear = a3;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts = a4;
  rt = a5 } } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:positive. forall a1:natural. forall a2:positive.
  forall a3:positive. forall a4:(int,element_type) farray. forall a5:t.
  (0 <= object__alignment1({ us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size = a };
  us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count = a1;
  rec__bounded_queue_example__char_queue__queue_type__front = a2;
  rec__bounded_queue_example__char_queue__queue_type__rear = a3;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts = a4;
  rt = a5 } } })))

logic bounded_queue_example__char_queue__queue_type__max_size__first__bit : int

logic bounded_queue_example__char_queue__queue_type__max_size__last__bit : int

logic bounded_queue_example__char_queue__queue_type__max_size__position : int

axiom bounded_queue_example__char_queue__queue_type__max_size__first__bit_axiom :
  (0 <= bounded_queue_example__char_queue__queue_type__max_size__first__bit)

axiom bounded_queue_example__char_queue__queue_type__max_size__last__bit_axiom :
  (bounded_queue_example__char_queue__queue_type__max_size__first__bit <  bounded_queue_example__char_queue__queue_type__max_size__last__bit)

axiom bounded_queue_example__char_queue__queue_type__max_size__position_axiom :
  (0 <= bounded_queue_example__char_queue__queue_type__max_size__position)

logic bounded_queue_example__char_queue__queue_type__count__first__bit : int

logic bounded_queue_example__char_queue__queue_type__count__last__bit : int

logic bounded_queue_example__char_queue__queue_type__count__position : int

axiom bounded_queue_example__char_queue__queue_type__count__first__bit_axiom :
  (0 <= bounded_queue_example__char_queue__queue_type__count__first__bit)

axiom bounded_queue_example__char_queue__queue_type__count__last__bit_axiom :
  (bounded_queue_example__char_queue__queue_type__count__first__bit <  bounded_queue_example__char_queue__queue_type__count__last__bit)

axiom bounded_queue_example__char_queue__queue_type__count__position_axiom :
  (0 <= bounded_queue_example__char_queue__queue_type__count__position)

logic bounded_queue_example__char_queue__queue_type__front__first__bit : int

logic bounded_queue_example__char_queue__queue_type__front__last__bit : int

logic bounded_queue_example__char_queue__queue_type__front__position : int

axiom bounded_queue_example__char_queue__queue_type__front__first__bit_axiom :
  (0 <= bounded_queue_example__char_queue__queue_type__front__first__bit)

axiom bounded_queue_example__char_queue__queue_type__front__last__bit_axiom :
  (bounded_queue_example__char_queue__queue_type__front__first__bit <  bounded_queue_example__char_queue__queue_type__front__last__bit)

axiom bounded_queue_example__char_queue__queue_type__front__position_axiom :
  (0 <= bounded_queue_example__char_queue__queue_type__front__position)

logic bounded_queue_example__char_queue__queue_type__rear__first__bit : int

logic bounded_queue_example__char_queue__queue_type__rear__last__bit : int

logic bounded_queue_example__char_queue__queue_type__rear__position : int

axiom bounded_queue_example__char_queue__queue_type__rear__first__bit_axiom :
  (0 <= bounded_queue_example__char_queue__queue_type__rear__first__bit)

axiom bounded_queue_example__char_queue__queue_type__rear__last__bit_axiom :
  (bounded_queue_example__char_queue__queue_type__rear__first__bit <  bounded_queue_example__char_queue__queue_type__rear__last__bit)

axiom bounded_queue_example__char_queue__queue_type__rear__position_axiom :
  (0 <= bounded_queue_example__char_queue__queue_type__rear__position)

logic bounded_queue_example__char_queue__queue_type__items__first__bit : int

logic bounded_queue_example__char_queue__queue_type__items__last__bit : int

logic bounded_queue_example__char_queue__queue_type__items__position : int

axiom bounded_queue_example__char_queue__queue_type__items__first__bit_axiom :
  (0 <= bounded_queue_example__char_queue__queue_type__items__first__bit)

axiom bounded_queue_example__char_queue__queue_type__items__last__bit_axiom :
  (bounded_queue_example__char_queue__queue_type__items__first__bit <  bounded_queue_example__char_queue__queue_type__items__last__bit)

axiom bounded_queue_example__char_queue__queue_type__items__position_axiom :
  (0 <= bounded_queue_example__char_queue__queue_type__items__position)

logic dummy7 : positive

logic dummy8 : natural

logic dummy9 : positive

logic dummy10 : positive

logic dummy11 : (int,element_type) farray

logic dummy12 : t

type queue_type__ref = { queue_type__content : us_rep
}

function queue_type__ref___projection(a: queue_type__ref) : us_rep =
  (a).queue_type__content

logic full : us_rep -> bool

logic full__function_guard : bool, us_rep -> prop

axiom full__post_axiom : true

logic empty : us_rep -> bool

logic empty__function_guard : bool, us_rep -> prop

axiom empty__post_axiom : true

logic size : us_rep -> int

logic size__function_guard : int, us_rep -> prop

axiom size__post_axiom :
  (forall queue:positive. forall queue1:natural. forall queue2:positive.
  forall queue3:positive. forall queue4:(int,element_type) farray.
  forall queue5:t [size({ us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size = queue };
  us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count = queue1;
  rec__bounded_queue_example__char_queue__queue_type__front = queue2;
  rec__bounded_queue_example__char_queue__queue_type__rear = queue3;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts =
  queue4; rt = queue5 } } })]. ((dynamic_property1(1, to_rep1(queue),
  to_rep3(first(queue5)), to_rep3(last(queue5))) and
  ((to_rep3(first(queue5)) = 1) and
  (to_rep3(last(queue5)) = to_rep1(queue)))) -> in_range1(size({
  us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size = queue };
  us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count = queue1;
  rec__bounded_queue_example__char_queue__queue_type__front = queue2;
  rec__bounded_queue_example__char_queue__queue_type__rear = queue3;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts =
  queue4; rt = queue5 } } }))))

logic last_element : us_rep -> int

logic last_element__function_guard : int, us_rep -> prop

axiom last_element__post_axiom :
  (forall queue:positive. forall queue1:natural. forall queue2:positive.
  forall queue3:positive. forall queue4:(int,element_type) farray.
  forall queue5:t [last_element({ us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size = queue };
  us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count = queue1;
  rec__bounded_queue_example__char_queue__queue_type__front = queue2;
  rec__bounded_queue_example__char_queue__queue_type__rear = queue3;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts =
  queue4; rt = queue5 } } })]. (((dynamic_property1(1, to_rep1(queue),
  to_rep3(first(queue5)), to_rep3(last(queue5))) and
  ((to_rep3(first(queue5)) = 1) and
  (to_rep3(last(queue5)) = to_rep1(queue)))) and (not (empty({
  us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size = queue };
  us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count = queue1;
  rec__bounded_queue_example__char_queue__queue_type__front = queue2;
  rec__bounded_queue_example__char_queue__queue_type__rear = queue3;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts =
  queue4; rt = queue5 } } }) = true))) -> in_range3(last_element({
  us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size = queue };
  us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count = queue1;
  rec__bounded_queue_example__char_queue__queue_type__front = queue2;
  rec__bounded_queue_example__char_queue__queue_type__rear = queue3;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts =
  queue4; rt = queue5 } } }))))

logic queue__split_discrs : positive

logic attr__ATTRIBUTE_ADDRESS : int

logic item : int

logic attr__ATTRIBUTE_ADDRESS1 : int

 (* File "bounded_queue.ads", line 23, characters 0-0 *)
goal WP_parameter_def :
  (forall queue__split_fields:natural. forall queue__split_fields1:positive.
  forall queue__split_fields2:positive.
  forall queue__split_fields3:(int,element_type) farray.
  forall queue__split_fields4:t. forall o:int. forall o1:int.
  forall o2:positive. forall o3:natural. forall o4:positive.
  forall o5:positive. forall o6:(int,element_type) farray. forall o7:t.
  forall temp___687:positive. forall temp___6871:natural.
  forall temp___6872:positive. forall temp___6873:positive.
  forall temp___6874:(int,element_type) farray. forall temp___6875:t.
  forall o8:element_type. forall result:natural. forall result1:positive.
  forall result2:positive. forall result3:(int,element_type) farray.
  forall result4:t. forall queue__split_fields5:natural.
  forall queue__split_fields6:positive. forall queue__split_fields7:positive.
  forall queue__split_fields8:(int,element_type) farray.
  forall queue__split_fields9:t. ((dynamic_property1(1,
  to_rep1(queue__split_discrs), to_rep3(first(queue__split_fields4)),
  to_rep3(last(queue__split_fields4))) and
  ((to_rep3(first(queue__split_fields4)) = 1) and
  (to_rep3(last(queue__split_fields4)) = to_rep1(queue__split_discrs)))) ->
  (in_range3(item) -> ((not (full({ us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size =
  queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count =
  queue__split_fields;
  rec__bounded_queue_example__char_queue__queue_type__front =
  queue__split_fields1;
  rec__bounded_queue_example__char_queue__queue_type__rear =
  queue__split_fields2;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts =
  queue__split_fields3; rt = queue__split_fields4 } } }) = true)) ->
  ((((((((o = (comp_mod(to_rep1(queue__split_fields2),to_rep1(queue__split_discrs)) + 1)) and
  in_range((comp_mod(to_rep1(queue__split_fields2),to_rep1(queue__split_discrs)) + 1))) and
  ((o1 = o) and in_range2(o))) and (to_rep1(o2) = o1)) and
  ((queue__split_fields = o3) and ((queue__split_fields1 = o4) and
  ((o2 = o5) and ((queue__split_fields3 = o6) and
  (queue__split_fields4 = o7)))))) and
  ((queue__split_discrs = temp___687) and ((temp___6871 = o3) and
  ((temp___6872 = o4) and ((temp___6873 = o5) and ((temp___6874 = o6) and
  (temp___6875 = o7))))))) and ((((result = queue__split_fields) and
  ((result1 = queue__split_fields1) and ((result2 = queue__split_fields2) and
  ((result3 = queue__split_fields3) and
  (result4 = queue__split_fields4))))) and
  ((temp___6871 = queue__split_fields5) and
  ((temp___6872 = queue__split_fields6) and
  ((temp___6873 = queue__split_fields7) and
  ((temp___6874 = queue__split_fields8) and
  (temp___6875 = queue__split_fields9)))))) and
  (queue__split_discrs = temp___687))) -> ((to_rep2(o8) = item) ->
  (to_rep3(first(queue__split_fields9)) <= to_rep1(queue__split_fields7))))))))
