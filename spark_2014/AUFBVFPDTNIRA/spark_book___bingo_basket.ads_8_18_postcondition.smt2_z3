;; produced by z3_gnatprove.drv ;;
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort bingo_number 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 75)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (bingo_number bingo_number) Bool)

(declare-fun dummy () bingo_number)

(declare-datatypes ()
((bingo_number__ref
 (mk_bingo_number__ref (bingo_number__content bingo_number)))))
(define-fun bingo_number__ref___projection ((a bingo_number__ref)) bingo_number 
  (bingo_number__content a))

(define-fun dynamic_invariant ((temp___expr_136 Int)
  (temp___is_init_133 Bool) (temp___skip_constant_134 Bool)
  (temp___do_toplevel_135 Bool)) Bool (=>
                                      (or (= temp___is_init_133 true)
                                      (<= 0 75)) (in_range1 temp___expr_136)))

(declare-sort callable_number 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 75)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (callable_number callable_number) Bool)

(declare-fun dummy1 () callable_number)

(declare-datatypes ()
((callable_number__ref
 (mk_callable_number__ref (callable_number__content callable_number)))))
(define-fun callable_number__ref___projection ((a callable_number__ref)) callable_number 
  (callable_number__content a))

(define-fun dynamic_invariant1 ((temp___expr_142 Int)
  (temp___is_init_139 Bool) (temp___skip_constant_140 Bool)
  (temp___do_toplevel_141 Bool)) Bool (=>
                                      (or (= temp___is_init_139 true)
                                      (<= 1 75)) (in_range2 temp___expr_142)))

(declare-fun to_rep (callable_number) Int)

(declare-fun of_rep (Int) callable_number)

;; inversion_axiom
  (assert
  (forall ((x callable_number))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x callable_number)) (! (in_range2
  (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun empty (Int) Bool)

(declare-fun empty__function_guard (Bool Int) Bool)

;; empty__post_axiom
  (assert true)

;; empty__def_axiom
  (assert
  (forall ((bingo_basket__the_count Int))
  (! (= (= (empty bingo_basket__the_count) true)
     (= bingo_basket__the_count 0)) :pattern ((empty bingo_basket__the_count)) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int callable_number))))))
(declare-fun slide ((Array Int callable_number) Int
  Int) (Array Int callable_number))

;; slide_eq
  (assert
  (forall ((a (Array Int callable_number)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int callable_number)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int callable_number) Int Int
  (Array Int callable_number) Int Int) (Array Int callable_number))

;; concat_def
  (assert
  (forall ((a (Array Int callable_number)) (b (Array Int callable_number)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (callable_number Int) (Array Int callable_number))

;; singleton_def
  (assert
  (forall ((v callable_number))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int callable_number)) (a__first Int)
  (a__last Int) (b (Array Int callable_number)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep (select a temp___idx_132)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int callable_number)) (b (Array Int callable_number)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int callable_number) Int Int
  (Array Int callable_number) Int Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int callable_number)) (b (Array Int callable_number)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int callable_number)) (b (Array Int callable_number)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int callable_number)) (b (Array Int callable_number)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun random_number (us_private) Int)

(declare-fun random_number__function_guard (Int us_private) Bool)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun r6b () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(declare-fun the_basket () (Array Int callable_number))

(declare-fun the_count () Int)

(declare-fun random_index () Int)

(declare-fun number () Int)

(declare-fun index () Int)

(declare-fun temp () Int)

(declare-fun bingo_gen () us_private)

(declare-fun temp___192 () (Array Int callable_number))

(declare-fun o () callable_number)

(declare-fun o1 () (Array Int callable_number))

(declare-fun temp___197 () (Array Int callable_number))

(declare-fun temp___196 () Int)

(declare-fun o2 () Int)

(declare-fun o3 () callable_number)

(declare-fun o4 () (Array Int callable_number))

(declare-fun o5 () callable_number)

(declare-fun o6 () (Array Int callable_number))

(declare-fun the_basket1 () (Array Int callable_number))

(declare-fun random_index1 () Int)

(declare-fun temp1 () Int)

(declare-fun result () Int)

(declare-fun number1 () Int)

(declare-fun the_basket2 () (Array Int callable_number))

(declare-fun number2 () Int)

(declare-fun result1 () (Array Int callable_number))

(declare-fun the_basket3 () (Array Int callable_number))

(declare-fun the_basket4 () (Array Int callable_number))

(declare-fun number3 () Int)

(declare-fun the_basket5 () (Array Int callable_number))

(declare-fun number4 () Int)

(declare-fun the_basket6 () (Array Int callable_number))

(declare-fun number5 () Int)

(declare-fun the_basket7 () (Array Int callable_number))

(declare-fun number6 () Int)

(declare-fun result2 () Int)

(declare-fun index1 () Int)

(declare-fun the_basket8 () (Array Int callable_number))

(declare-fun random_index2 () Int)

(declare-fun index2 () Int)

(declare-fun temp2 () Int)

(declare-fun result3 () Int)

(declare-fun random_index3 () Int)

(declare-fun result4 () Int)

(declare-fun temp3 () Int)

(declare-fun result5 () (Array Int callable_number))

(declare-fun the_basket9 () (Array Int callable_number))

(declare-fun result6 () (Array Int callable_number))

(declare-fun the_basket10 () (Array Int callable_number))

(declare-fun the_basket11 () map__ref)

(declare-fun random_index4 () int__ref)

(declare-fun index3 () int__ref)

(declare-fun temp4 () int__ref)

(declare-fun the_basket12 () (Array Int callable_number))

(declare-fun random_index5 () Int)

(declare-fun index4 () Int)

(declare-fun temp5 () Int)

(declare-fun the_basket13 () map__ref)

(declare-fun random_index6 () int__ref)

(declare-fun index5 () int__ref)

(declare-fun temp6 () int__ref)

(declare-fun the_basket14 () (Array Int callable_number))

(declare-fun random_index7 () Int)

(declare-fun index6 () Int)

(declare-fun temp7 () Int)

(declare-fun result7 () int__ref)

(declare-fun the_count1 () Int)

(declare-fun the_basket15 () map__ref)

(declare-fun the_count2 () int__ref)

(declare-fun random_index8 () int__ref)

(declare-fun number7 () int__ref)

(declare-fun index7 () int__ref)

(declare-fun temp8 () int__ref)

(declare-fun the_basket16 () (Array Int callable_number))

(declare-fun the_count3 () Int)

(declare-fun random_index9 () Int)

(declare-fun number8 () Int)

(declare-fun index8 () Int)

(declare-fun temp9 () Int)

(define-fun number9 () int__ref (mk_int__ref number5))

(define-fun the_basket17 () map__ref (mk_map__ref the_basket6))

;; H
  (assert (in_range1 the_count))

;; H
  (assert (=> (<= 1 75) (in_range2 random_index)))

;; H
  (assert (= result number))

;; H
  (assert (= number1 1))

;; H
  (assert
  (=> (and (<= 1 number1) (<= number1 75)) (= temp___192 the_basket)))

;; H
  (assert
  (=> (and (<= 1 number1) (<= number1 75))
  (and
  (forall ((temp___193 Int))
  (=> (and (<= 1 temp___193) (<= temp___193 75))
  (=> (<= number2 temp___193)
  (= (select the_basket2 temp___193) (select temp___192 temp___193)))))
  (and (<= 1 number2) (<= number2 75)))))

;; H
  (assert (=> (and (<= 1 number1) (<= number1 75)) (= (to_rep o) number2)))

;; H
  (assert
  (=> (and (<= 1 number1) (<= number1 75))
  (= o1 (store the_basket2 number2 o))))

;; H
  (assert (=> (and (<= 1 number1) (<= number1 75)) (= result1 the_basket2)))

;; H
  (assert (=> (and (<= 1 number1) (<= number1 75)) (= the_basket3 o1)))

;; H
  (assert (=> (and (<= 1 number1) (<= number1 75)) (= number2 75)))

;; H
  (assert (=> (and (<= 1 number1) (<= number1 75)) (= number2 number3)))

;; H
  (assert
  (=> (and (<= 1 number1) (<= number1 75)) (= the_basket3 the_basket4)))

;; H
  (assert (=> (and (<= 1 number1) (<= number1 75)) (= number4 number2)))

;; H
  (assert
  (=> (and (<= 1 number1) (<= number1 75)) (= the_basket5 the_basket3)))

;; H
  (assert
  (=> (and (<= 1 number1) (<= number1 75)) (= number9 (mk_int__ref number3))))

;; H
  (assert
  (=> (and (<= 1 number1) (<= number1 75))
  (= the_basket17 (mk_map__ref the_basket4))))

;; H
  (assert (=> (and (<= 1 number1) (<= number1 75)) (= number6 number4)))

;; H
  (assert
  (=> (and (<= 1 number1) (<= number1 75)) (= the_basket7 the_basket5)))

;; H
  (assert
  (=> (not (and (<= 1 number1) (<= number1 75))) (= number1 number5)))

;; H
  (assert
  (=> (not (and (<= 1 number1) (<= number1 75)))
  (= the_basket17 (mk_map__ref the_basket))))

;; H
  (assert
  (=> (not (and (<= 1 number1) (<= number1 75))) (= number6 number1)))

;; H
  (assert
  (=> (not (and (<= 1 number1) (<= number1 75))) (= the_basket7 the_basket1)))

;; H
  (assert (= result2 index))

;; H
  (assert (= index1 1))

;; H
  (assert (=> (and (<= 1 index1) (<= index1 75)) (= temp___197 the_basket6)))

;; H
  (assert
  (=> (and (<= 1 index1) (<= index1 75)) (= temp___196 random_index)))

;; H
  (assert
  (=> (and (<= 1 index1) (<= index1 75))
  (and (=> (<= 1 75) (in_range2 random_index2))
  (and (<= 1 index2) (<= index2 75)))))

;; H
  (assert
  (=> (and (<= 1 index1) (<= index1 75))
  (and (= o2 (random_number bingo_gen)) (in_range2 o2))))

;; H
  (assert (=> (and (<= 1 index1) (<= index1 75)) (= result3 random_index2)))

;; H
  (assert (=> (and (<= 1 index1) (<= index1 75)) (= random_index3 o2)))

;; H
  (assert (=> (and (<= 1 index1) (<= index1 75)) (= random_index3 r6b)))

;; H
  (assert (=> (and (<= 1 index1) (<= index1 75)) (in_range2 r6b)))

;; H
  (assert
  (=> (and (<= 1 index1) (<= index1 75)) (=> (<= 1 75) (in_range2 temp2))))

;; H
  (assert (=> (and (<= 1 index1) (<= index1 75)) (= result4 temp2)))

;; H
  (assert
  (=> (and (<= 1 index1) (<= index1 75))
  (= temp3 (to_rep (select the_basket8 index2)))))

;; H
  (assert
  (=> (and (<= 1 index1) (<= index1 75))
  (= (to_rep o3) (to_rep (select the_basket8 r6b)))))

;; H
  (assert
  (=> (and (<= 1 index1) (<= index1 75))
  (= o4 (store the_basket8 index2 o3))))

;; H
  (assert (=> (and (<= 1 index1) (<= index1 75)) (= result5 the_basket8)))

;; H
  (assert (=> (and (<= 1 index1) (<= index1 75)) (= the_basket9 o4)))

;; H
  (assert (=> (and (<= 1 index1) (<= index1 75)) (= (to_rep o5) temp3)))

;; H
  (assert
  (=> (and (<= 1 index1) (<= index1 75)) (= o6 (store the_basket9 r6b o5))))

;; H
  (assert (=> (and (<= 1 index1) (<= index1 75)) (= result6 the_basket9)))

;; H
  (assert (=> (and (<= 1 index1) (<= index1 75)) (= the_basket10 o6)))

;; H
  (assert (=> (and (<= 1 index1) (<= index1 75)) (= index2 75)))

;; H
  (assert
  (=> (and (<= 1 index1) (<= index1 75)) (= temp4 (mk_int__ref temp3))))

;; H
  (assert
  (=> (and (<= 1 index1) (<= index1 75)) (= index3 (mk_int__ref index2))))

;; H
  (assert
  (=> (and (<= 1 index1) (<= index1 75))
  (= random_index4 (mk_int__ref random_index3))))

;; H
  (assert
  (=> (and (<= 1 index1) (<= index1 75))
  (= the_basket11 (mk_map__ref the_basket10))))

;; H
  (assert (=> (and (<= 1 index1) (<= index1 75)) (= temp5 temp3)))

;; H
  (assert (=> (and (<= 1 index1) (<= index1 75)) (= index4 index2)))

;; H
  (assert
  (=> (and (<= 1 index1) (<= index1 75)) (= random_index5 random_index3)))

;; H
  (assert
  (=> (and (<= 1 index1) (<= index1 75)) (= the_basket12 the_basket10)))

;; H
  (assert (=> (and (<= 1 index1) (<= index1 75)) (= temp6 temp4)))

;; H
  (assert (=> (and (<= 1 index1) (<= index1 75)) (= index5 index3)))

;; H
  (assert
  (=> (and (<= 1 index1) (<= index1 75)) (= random_index6 random_index4)))

;; H
  (assert
  (=> (and (<= 1 index1) (<= index1 75)) (= the_basket13 the_basket11)))

;; H
  (assert (=> (and (<= 1 index1) (<= index1 75)) (= temp7 temp5)))

;; H
  (assert (=> (and (<= 1 index1) (<= index1 75)) (= index6 index4)))

;; H
  (assert
  (=> (and (<= 1 index1) (<= index1 75)) (= random_index7 random_index5)))

;; H
  (assert
  (=> (and (<= 1 index1) (<= index1 75)) (= the_basket14 the_basket12)))

;; H
  (assert
  (=> (not (and (<= 1 index1) (<= index1 75))) (= temp6 (mk_int__ref temp))))

;; H
  (assert
  (=> (not (and (<= 1 index1) (<= index1 75)))
  (= index5 (mk_int__ref index1))))

;; H
  (assert
  (=> (not (and (<= 1 index1) (<= index1 75)))
  (= random_index6 (mk_int__ref random_index))))

;; H
  (assert
  (=> (not (and (<= 1 index1) (<= index1 75))) (= the_basket13 the_basket17)))

;; H
  (assert (=> (not (and (<= 1 index1) (<= index1 75))) (= temp7 temp1)))

;; H
  (assert (=> (not (and (<= 1 index1) (<= index1 75))) (= index6 index1)))

;; H
  (assert
  (=> (not (and (<= 1 index1) (<= index1 75)))
  (= random_index7 random_index1)))

;; H
  (assert
  (=> (not (and (<= 1 index1) (<= index1 75))) (= the_basket14 the_basket7)))

;; H
  (assert (= result7 (mk_int__ref the_count)))

;; H
  (assert (= the_count1 75))

;; H
  (assert (= temp8 temp6))

;; H
  (assert (= index7 index5))

;; H
  (assert (= number7 number9))

;; H
  (assert (= random_index8 random_index6))

;; H
  (assert (= the_count2 (mk_int__ref the_count1)))

;; H
  (assert (= the_basket15 the_basket13))

;; H
  (assert (= temp9 temp7))

;; H
  (assert (= index8 index6))

;; H
  (assert (= number8 number6))

;; H
  (assert (= random_index9 random_index7))

;; H
  (assert (= the_count3 the_count1))

;; H
  (assert (= the_basket16 the_basket14))

(assert
;; WP_parameter_def
 ;; File "bingo_basket.adb", line 15, characters 0-0
  (not (not (= (empty (int__content the_count2)) true))))
(check-sat)
