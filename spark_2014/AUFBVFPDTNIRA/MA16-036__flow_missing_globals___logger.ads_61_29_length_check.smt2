;; produced by cvc4_14.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-fun nth ((_ BitVec 16) Int) Bool)

(declare-fun lsr ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun asr ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun lsl ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_right1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_left1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun pow2 (Int) Int)

(declare-fun to_int1 ((_ BitVec 16)) Int)

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 65535)))

;; to_uint_of_int
  (assert
  (forall ((i Int))
  (=> (and (<= 0 i) (< i 65536)) (= (bv2nat ((_ int2bv 16) i)) i))))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvlshr x n) (lsr x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvashr x n) (asr x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvshl x n) (lsl x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvor (bvshl v (bvurem n (_ bv16 16))) (bvlshr v (bvsub (_ bv16 16) (bvurem n (_ bv16 16))))) 
  (rotate_left1 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvor (bvlshr v (bvurem n (_ bv16 16))) (bvshl v (bvsub (_ bv16 16) (bvurem n (_ bv16 16))))) 
  (rotate_right1 v (bv2nat n)))))

(declare-fun nth_bv ((_ BitVec 16) (_ BitVec 16)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 16)) (i (_ BitVec 16)))
  (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x0001) #x0000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 16)) (i (_ BitVec 16)))
  (= (nth x (bv2nat i)) (nth_bv x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 16)) (i Int))
  (=> (and (<= 0 i) (< i 65536)) (= (nth_bv x ((_ int2bv 16) i)) (nth x i)))))

(declare-fun eq_sub_bv ((_ BitVec 16) (_ BitVec 16) (_ BitVec 16)
  (_ BitVec 16)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 16)) (b (_ BitVec 16)) (i (_ BitVec 16))
  (n (_ BitVec 16)))
  (let ((mask (bvshl (bvsub (bvshl #x0001 n) #x0001) i)))
  (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub ((a (_ BitVec 16)) (b (_ BitVec 16)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 16)) (b (_ BitVec 16)) (i (_ BitVec 16))
  (n (_ BitVec 16)))
  (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 16))))))
(declare-fun power ((_ BitVec 16) Int) (_ BitVec 16))

(define-fun bv_min ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) y x))

(define-fun to_nearest ((m RoundingMode)) Bool (or (= m RNE) (= m RNA)))

(define-fun is_plus_infinity ((x Float64)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float64)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float64)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float64)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(define-fun is_not_nan ((x Float64)) Bool (or
                                          (not (or (fp.isInfinite x) (fp.isNaN x)))
                                          (fp.isInfinite  x)))

(declare-fun of_int (RoundingMode Int) Float64)

(declare-fun to_int2 (RoundingMode Float64) Int)

(declare-fun round (RoundingMode Real) Real)

(declare-fun max_int () Int)

(define-fun in_range ((x Real)) Bool (and
                                     (<= (- (* 9007199254740991.0 19958403095347198116563727130368385660674512604354575415025472424372118918689640657849579654926357010893424468441924952439724379883935936607391717982848314203200056729510856765175377214443629871826533567445439239933308104551208703888888552684480441575071209068757560416423584952303440099278848.0)) x)
                                     (<= x (* 9007199254740991.0 19958403095347198116563727130368385660674512604354575415025472424372118918689640657849579654926357010893424468441924952439724379883935936607391717982848314203200056729510856765175377214443629871826533567445439239933308104551208703888888552684480441575071209068757560416423584952303440099278848.0))))

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun no_overflow ((m RoundingMode) (x Real)) Bool (in_range
  (round m x)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 9007199254740992) i)
                                             (<= i 9007199254740992)))

(define-fun same_sign ((x Float64)
  (y Float64)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float64)
  (y Float64)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float64) (x Float64)
  (y Float64)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(declare-fun sqrt (Real) Real)

(define-fun same_sign_real ((x Float64)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(declare-fun is_int1 (Float64) Bool)

(define-fun neq ((x Float64) (y Float64)) Bool (not (fp.eq x y)))

(define-fun bool_lt ((x Float64)
  (y Float64)) Bool (ite (fp.lt x y) true false))

(define-fun bool_le ((x Float64)
  (y Float64)) Bool (ite (fp.leq x y) true false))

(define-fun bool_gt ((x Float64)
  (y Float64)) Bool (ite (fp.lt y x) true false))

(define-fun bool_ge ((x Float64)
  (y Float64)) Bool (ite (fp.leq y x) true false))

(define-fun bool_eq ((x Float64)
  (y Float64)) Bool (ite (fp.eq x y) true false))

(define-fun bool_neq ((x Float64)
  (y Float64)) Bool (ite (not (fp.eq x y)) true false))

(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 Float64)))))
(define-fun to_int3 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int1 ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range1 ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort long_float 0)

(define-fun bool_eq1 ((x Float64)
  (y Float64)) Bool (ite (fp.eq x y) true false))

(declare-fun user_eq (long_float long_float) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE1 (Float64) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Float64)

(declare-fun dummy () long_float)

(declare-datatypes ()
((long_float__ref (mk_long_float__ref (long_float__content long_float)))))
(define-fun long_float__ref___projection ((a long_float__ref)) long_float 
  (long_float__content a))

(declare-fun to_rep (long_float) Float64)

(declare-fun of_rep (Float64) long_float)

;; inversion_axiom
  (assert
  (forall ((x long_float))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x long_float))
  (! (not (or (fp.isInfinite (to_rep x)) (fp.isNaN (to_rep x)))) :pattern (
  (to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Float64))
  (! (=> (not (or (fp.isInfinite x) (fp.isNaN x))) (= (to_rep (of_rep x)) x)) :pattern (
  (to_rep (of_rep x))) )))

(declare-sort unsigned_16 0)

(declare-fun attr__ATTRIBUTE_MODULUS () (_ BitVec 16))

(define-fun bool_eq2 ((x (_ BitVec 16))
  (y (_ BitVec 16))) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 16)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 16))

(declare-fun user_eq1 (unsigned_16 unsigned_16) Bool)

(declare-fun dummy1 () unsigned_16)

(declare-datatypes ()
((unsigned_16__ref (mk_unsigned_16__ref (unsigned_16__content unsigned_16)))))
(define-fun unsigned_16__ref___projection ((a unsigned_16__ref)) unsigned_16 
  (unsigned_16__content a))

(declare-fun to_rep1 (unsigned_16) (_ BitVec 16))

(declare-fun of_rep1 ((_ BitVec 16)) unsigned_16)

;; inversion_axiom
  (assert
  (forall ((x unsigned_16))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 16)))
  (! (= (to_rep1 (of_rep1 x)) x) :pattern ((to_rep1 (of_rep1 x))) )))

(define-fun to_int4 ((x unsigned_16)) Int (bv2nat (to_rep1 x)))

;; range_int_axiom
  (assert
  (forall ((x unsigned_16)) (! (uint_in_range
  (to_int4 x)) :pattern ((to_int4 x)) )))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__logger__log_entry__ngrotations unsigned_16)(rec__logger__log_entry__ngclicktime unsigned_16)(rec__logger__log_entry__millisecs unsigned_16)(rec__logger__log_entry__estimatedgroundvelocity long_float)(rec__logger__log_entry__estimatedgroundvelocityisavailable Bool)))))
(define-fun us_split_fields_NGRotations__projection ((a us_split_fields)) unsigned_16 
  (rec__logger__log_entry__ngrotations a))

(define-fun us_split_fields_NGClickTime__projection ((a us_split_fields)) unsigned_16 
  (rec__logger__log_entry__ngclicktime a))

(define-fun us_split_fields_Millisecs__projection ((a us_split_fields)) unsigned_16 
  (rec__logger__log_entry__millisecs a))

(define-fun us_split_fields_EstimatedGroundVelocityIsAvailable__projection ((a us_split_fields)) Bool 
  (rec__logger__log_entry__estimatedgroundvelocityisavailable a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq3 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (and
                        (and
                        (= (to_rep1
                           (rec__logger__log_entry__ngrotations
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__logger__log_entry__ngrotations
                                                  (us_split_fields1 b))))
                        (= (to_rep1
                           (rec__logger__log_entry__ngclicktime
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__logger__log_entry__ngclicktime
                                                  (us_split_fields1 b)))))
                        (= (to_rep1
                           (rec__logger__log_entry__millisecs
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__logger__log_entry__millisecs
                                                  (us_split_fields1 b)))))
                        (= (to_rep
                           (rec__logger__log_entry__estimatedgroundvelocity
                           (us_split_fields1 a))) (to_rep
                                                  (rec__logger__log_entry__estimatedgroundvelocity
                                                  (us_split_fields1 b)))))
                        (= (rec__logger__log_entry__estimatedgroundvelocityisavailable
                           (us_split_fields1 a)) (rec__logger__log_entry__estimatedgroundvelocityisavailable
                                                 (us_split_fields1 b))))
                   true false))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun logger__log_entry__ngrotations__first__bit () Int)

(declare-fun logger__log_entry__ngrotations__last__bit () Int)

(declare-fun logger__log_entry__ngrotations__position () Int)

;; logger__log_entry__ngrotations__first__bit_axiom
  (assert (<= 0 logger__log_entry__ngrotations__first__bit))

;; logger__log_entry__ngrotations__last__bit_axiom
  (assert
  (< logger__log_entry__ngrotations__first__bit logger__log_entry__ngrotations__last__bit))

;; logger__log_entry__ngrotations__position_axiom
  (assert (<= 0 logger__log_entry__ngrotations__position))

(declare-fun logger__log_entry__ngclicktime__first__bit () Int)

(declare-fun logger__log_entry__ngclicktime__last__bit () Int)

(declare-fun logger__log_entry__ngclicktime__position () Int)

;; logger__log_entry__ngclicktime__first__bit_axiom
  (assert (<= 0 logger__log_entry__ngclicktime__first__bit))

;; logger__log_entry__ngclicktime__last__bit_axiom
  (assert
  (< logger__log_entry__ngclicktime__first__bit logger__log_entry__ngclicktime__last__bit))

;; logger__log_entry__ngclicktime__position_axiom
  (assert (<= 0 logger__log_entry__ngclicktime__position))

(declare-fun logger__log_entry__millisecs__first__bit () Int)

(declare-fun logger__log_entry__millisecs__last__bit () Int)

(declare-fun logger__log_entry__millisecs__position () Int)

;; logger__log_entry__millisecs__first__bit_axiom
  (assert (<= 0 logger__log_entry__millisecs__first__bit))

;; logger__log_entry__millisecs__last__bit_axiom
  (assert
  (< logger__log_entry__millisecs__first__bit logger__log_entry__millisecs__last__bit))

;; logger__log_entry__millisecs__position_axiom
  (assert (<= 0 logger__log_entry__millisecs__position))

(declare-fun logger__log_entry__estimatedgroundvelocity__first__bit () Int)

(declare-fun logger__log_entry__estimatedgroundvelocity__last__bit () Int)

(declare-fun logger__log_entry__estimatedgroundvelocity__position () Int)

;; logger__log_entry__estimatedgroundvelocity__first__bit_axiom
  (assert (<= 0 logger__log_entry__estimatedgroundvelocity__first__bit))

;; logger__log_entry__estimatedgroundvelocity__last__bit_axiom
  (assert
  (< logger__log_entry__estimatedgroundvelocity__first__bit logger__log_entry__estimatedgroundvelocity__last__bit))

;; logger__log_entry__estimatedgroundvelocity__position_axiom
  (assert (<= 0 logger__log_entry__estimatedgroundvelocity__position))

(declare-fun logger__log_entry__estimatedgroundvelocityisavailable__first__bit () Int)

(declare-fun logger__log_entry__estimatedgroundvelocityisavailable__last__bit () Int)

(declare-fun logger__log_entry__estimatedgroundvelocityisavailable__position () Int)

;; logger__log_entry__estimatedgroundvelocityisavailable__first__bit_axiom
  (assert
  (<= 0 logger__log_entry__estimatedgroundvelocityisavailable__first__bit))

;; logger__log_entry__estimatedgroundvelocityisavailable__last__bit_axiom
  (assert
  (< logger__log_entry__estimatedgroundvelocityisavailable__first__bit 
  logger__log_entry__estimatedgroundvelocityisavailable__last__bit))

;; logger__log_entry__estimatedgroundvelocityisavailable__position_axiom
  (assert
  (<= 0 logger__log_entry__estimatedgroundvelocityisavailable__position))

(declare-fun dummy2 () us_rep)

(declare-datatypes ()
((log_entry__ref (mk_log_entry__ref (log_entry__content us_rep)))))
(define-fun log_entry__ref___projection ((a log_entry__ref)) us_rep (log_entry__content
                                                                    a))

(declare-sort log_index 0)

(define-fun in_range2 ((x (_ BitVec 16))) Bool (and
                                               (bvule ((_ int2bv 16) 0) x)
                                               (bvule x ((_ int2bv 16) 599))))

(define-fun in_range_int ((x Int)) Bool (and (<= 0 x) (<= x 599)))

(define-fun bool_eq4 ((x (_ BitVec 16))
  (y (_ BitVec 16))) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 16)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 16))

(declare-fun user_eq3 (log_index log_index) Bool)

(declare-fun dummy3 () log_index)

(declare-datatypes ()
((log_index__ref (mk_log_index__ref (log_index__content log_index)))))
(define-fun log_index__ref___projection ((a log_index__ref)) log_index 
  (log_index__content a))

(declare-fun to_rep2 (log_index) (_ BitVec 16))

(declare-fun of_rep2 ((_ BitVec 16)) log_index)

;; inversion_axiom
  (assert
  (forall ((x log_index))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x log_index)) (! (in_range2
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 16)))
  (! (let ((y (bvurem x ((_ int2bv 16) 600))))
     (=> (in_range2 y) (= (to_rep2 (of_rep2 x)) y))) :pattern ((to_rep2
                                                               (of_rep2 x))) )))

(define-fun to_int5 ((x log_index)) Int (bv2nat (to_rep2 x)))

;; range_int_axiom
  (assert
  (forall ((x log_index)) (! (in_range_int
  (to_int5 x)) :pattern ((to_int5 x)) )))

(declare-sort t4s 0)

(define-fun in_range3 ((x (_ BitVec 16))) Bool (and
                                               (bvule ((_ int2bv 16) 0) x)
                                               (bvule x ((_ int2bv 16) 599))))

(define-fun in_range_int1 ((x Int)) Bool (and (<= 0 x) (<= x 599)))

(define-fun bool_eq5 ((x (_ BitVec 16))
  (y (_ BitVec 16))) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE4 ((_ BitVec 16)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) (_ BitVec 16))

(declare-fun user_eq4 (t4s t4s) Bool)

(declare-fun dummy4 () t4s)

(declare-datatypes () ((t4s__ref (mk_t4s__ref (t4s__content t4s)))))
(define-fun t4s__ref___projection ((a t4s__ref)) t4s (t4s__content a))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array (_ BitVec 16) us_rep))))))
(declare-fun slide ((Array (_ BitVec 16) us_rep) (_ BitVec 16)
  (_ BitVec 16)) (Array (_ BitVec 16) us_rep))

;; slide_eq
  (assert
  (forall ((a (Array (_ BitVec 16) us_rep)))
  (forall ((first (_ BitVec 16)))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array (_ BitVec 16) us_rep)))
  (forall ((old_first (_ BitVec 16)))
  (forall ((new_first (_ BitVec 16)))
  (forall ((i (_ BitVec 16)))
  (! (= (select (slide a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array (_ BitVec 16) us_rep) (_ BitVec 16)
  (_ BitVec 16) (Array (_ BitVec 16) us_rep) (_ BitVec 16)
  (_ BitVec 16)) (Array (_ BitVec 16) us_rep))

;; concat_def
  (assert
  (forall ((a (Array (_ BitVec 16) us_rep)) (b (Array (_ BitVec 16) us_rep)))
  (forall ((a_first (_ BitVec 16)) (a_last (_ BitVec 16))
  (b_first (_ BitVec 16)) (b_last (_ BitVec 16)))
  (forall ((i (_ BitVec 16)))
  (! (and
     (=> (and (bvule a_first i) (bvule i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (bvugt i a_last)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (bvadd (bvsub i a_last) (bvsub b_first #x0001)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (us_rep (_ BitVec 16)) (Array (_ BitVec 16) us_rep))

;; singleton_def
  (assert
  (forall ((v us_rep))
  (forall ((i (_ BitVec 16)))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq6 ((a (Array (_ BitVec 16) us_rep))
  (a__first (_ BitVec 16)) (a__last (_ BitVec 16))
  (b (Array (_ BitVec 16) us_rep)) (b__first (_ BitVec 16))
  (b__last (_ BitVec 16))) Bool (ite (and
                                     (ite (bvule a__first a__last)
                                     (and (bvule b__first b__last)
                                     (= (bvsub a__last a__first) (bvsub b__last b__first)))
                                     (bvugt b__first b__last))
                                     (forall ((temp___idx_132 (_ BitVec 16)))
                                     (=>
                                     (and (bvule a__first temp___idx_132)
                                     (bvule temp___idx_132 a__last))
                                     (= (bool_eq3 (select a temp___idx_132)
                                        (select b (bvadd (bvsub b__first a__first) temp___idx_132))) true))))
                                true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array (_ BitVec 16) us_rep)) (b (Array (_ BitVec 16) us_rep)))
  (forall ((a__first (_ BitVec 16)) (a__last (_ BitVec 16))
  (b__first (_ BitVec 16)) (b__last (_ BitVec 16)))
  (=> (= (bool_eq6 b b__first b__last a a__first a__last) true)
  (and
  (ite (bvule a__first a__last)
  (and (bvule b__first b__last)
  (= (bvsub a__last a__first) (bvsub b__last b__first)))
  (bvugt b__first b__last))
  (forall ((temp___idx_132 (_ BitVec 16)))
  (=> (and (bvule a__first temp___idx_132) (bvule temp___idx_132 a__last))
  (= (bool_eq3 (select a temp___idx_132)
     (select b (bvadd (bvsub b__first a__first) temp___idx_132))) true))))))))

(declare-fun dummy5 () (Array (_ BitVec 16) us_rep))

(declare-fun value__size1 () Int)

(declare-fun object__size1 ((Array (_ BitVec 16) us_rep)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array (_ BitVec 16) us_rep)) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 ((Array (_ BitVec 16) us_rep)) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert
  (forall ((a (Array (_ BitVec 16) us_rep))) (<= 0 (object__size1 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array (_ BitVec 16) us_rep)))
  (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert
  (forall ((a (Array (_ BitVec 16) us_rep))) (<= 0 (object__alignment1 a))))

(declare-fun user_eq5 ((Array (_ BitVec 16) us_rep)
  (Array (_ BitVec 16) us_rep)) Bool)

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1
 (rec__logger__log_database__data (Array (_ BitVec 16) us_rep))(rec__logger__log_database__first log_index)(rec__logger__log_database__last log_index)(rec__logger__log_database__empty Bool)))))
(define-fun us_split_fields_Data__projection ((a us_split_fields2)) (Array (_ BitVec 16) us_rep) 
  (rec__logger__log_database__data a))

(define-fun us_split_fields_First__projection ((a us_split_fields2)) log_index 
  (rec__logger__log_database__first a))

(define-fun us_split_fields_Last__projection ((a us_split_fields2)) log_index 
  (rec__logger__log_database__last a))

(define-fun us_split_fields_Empty__projection ((a us_split_fields2)) Bool 
  (rec__logger__log_database__empty a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep_2__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                a))

(define-fun bool_eq7 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (and
                         (and
                         (= (bool_eq6
                            (rec__logger__log_database__data
                            (us_split_fields3 a)) ((_ int2bv 16) 0)
                            ((_ int2bv 16) 599)
                            (rec__logger__log_database__data
                            (us_split_fields3 b)) ((_ int2bv 16) 0)
                            ((_ int2bv 16) 599)) true)
                         (= (to_rep2
                            (rec__logger__log_database__first
                            (us_split_fields3 a))) (to_rep2
                                                   (rec__logger__log_database__first
                                                   (us_split_fields3 b)))))
                         (= (to_rep2
                            (rec__logger__log_database__last
                            (us_split_fields3 a))) (to_rep2
                                                   (rec__logger__log_database__last
                                                   (us_split_fields3 b)))))
                         (= (rec__logger__log_database__empty
                            (us_split_fields3 a)) (rec__logger__log_database__empty
                                                  (us_split_fields3 b))))
                    true false))

(declare-fun user_eq6 (us_rep1 us_rep1) Bool)

(declare-fun value__size2 () Int)

(declare-fun object__size2 (us_rep1) Int)

(declare-fun value__alignment2 () Int)

(declare-fun object__alignment2 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))

(declare-fun logger__log_database__data__first__bit () Int)

(declare-fun logger__log_database__data__last__bit () Int)

(declare-fun logger__log_database__data__position () Int)

;; logger__log_database__data__first__bit_axiom
  (assert (<= 0 logger__log_database__data__first__bit))

;; logger__log_database__data__last__bit_axiom
  (assert
  (< logger__log_database__data__first__bit logger__log_database__data__last__bit))

;; logger__log_database__data__position_axiom
  (assert (<= 0 logger__log_database__data__position))

(declare-fun logger__log_database__first__first__bit () Int)

(declare-fun logger__log_database__first__last__bit () Int)

(declare-fun logger__log_database__first__position () Int)

;; logger__log_database__first__first__bit_axiom
  (assert (<= 0 logger__log_database__first__first__bit))

;; logger__log_database__first__last__bit_axiom
  (assert
  (< logger__log_database__first__first__bit logger__log_database__first__last__bit))

;; logger__log_database__first__position_axiom
  (assert (<= 0 logger__log_database__first__position))

(declare-fun logger__log_database__last__first__bit () Int)

(declare-fun logger__log_database__last__last__bit () Int)

(declare-fun logger__log_database__last__position () Int)

;; logger__log_database__last__first__bit_axiom
  (assert (<= 0 logger__log_database__last__first__bit))

;; logger__log_database__last__last__bit_axiom
  (assert
  (< logger__log_database__last__first__bit logger__log_database__last__last__bit))

;; logger__log_database__last__position_axiom
  (assert (<= 0 logger__log_database__last__position))

(declare-fun logger__log_database__empty__first__bit () Int)

(declare-fun logger__log_database__empty__last__bit () Int)

(declare-fun logger__log_database__empty__position () Int)

;; logger__log_database__empty__first__bit_axiom
  (assert (<= 0 logger__log_database__empty__first__bit))

;; logger__log_database__empty__last__bit_axiom
  (assert
  (< logger__log_database__empty__first__bit logger__log_database__empty__last__bit))

;; logger__log_database__empty__position_axiom
  (assert (<= 0 logger__log_database__empty__position))

(declare-fun dummy6 () us_rep1)

(declare-datatypes ()
((log_database__ref (mk_log_database__ref (log_database__content us_rep1)))))
(define-fun log_database__ref___projection ((a log_database__ref)) us_rep1 
  (log_database__content a))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-sort t6s 0)

(define-fun in_range4 ((x (_ BitVec 16))) Bool (and
                                               (bvule ((_ int2bv 16) 0) x)
                                               (bvule x ((_ int2bv 16) 599))))

(define-fun in_range_int2 ((x Int)) Bool (and (<= 0 x) (<= x 599)))

(define-fun bool_eq8 ((x (_ BitVec 16))
  (y (_ BitVec 16))) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE5 ((_ BitVec 16)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) (_ BitVec 16))

(declare-fun user_eq7 (t6s t6s) Bool)

(declare-fun dummy7 () t6s)

(declare-datatypes () ((t6s__ref (mk_t6s__ref (t6s__content t6s)))))
(define-fun t6s__ref___projection ((a t6s__ref)) t6s (t6s__content a))

(declare-fun temp___265 (us_rep) (Array (_ BitVec 16) us_rep))

;; def_axiom
  (assert
  (forall ((temp___267 us_rep))
  (forall ((temp___268 (_ BitVec 16)))
  (= (select (temp___265 temp___267) temp___268) temp___267))))

(define-fun dynamic_invariant ((temp___expr_57 Float64)
  (temp___is_init_54 Bool) (temp___skip_constant_55 Bool)
  (temp___do_toplevel_56 Bool)) Bool (=>
                                     (or (= temp___is_init_54 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
                                     (not (or (fp.isInfinite temp___expr_57) (fp.isNaN temp___expr_57)))))

(define-fun dynamic_invariant1 ((temp___expr_214 (_ BitVec 16))
  (temp___is_init_211 Bool) (temp___skip_constant_212 Bool)
  (temp___do_toplevel_213 Bool)) Bool (=>
                                      (or (= temp___is_init_211 true)
                                      (bvule ((_ int2bv 16) 0) ((_ int2bv 16) 599)))
                                      (in_range2 temp___expr_214)))

(define-fun dynamic_invariant2 ((temp___expr_167 (_ BitVec 16))
  (temp___is_init_164 Bool) (temp___skip_constant_165 Bool)
  (temp___do_toplevel_166 Bool)) Bool true)

(assert
;; WP_parameter_def
 ;; File "logger.ads", line 60, characters 0-0
  (not true))
(check-sat)
