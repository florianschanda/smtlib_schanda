;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun pow2 (Int) Int)

(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-fun of_int (RoundingMode Int) Float32)

(declare-fun round (RoundingMode Real) Real)

(declare-fun max_int () Int)

(define-fun in_range ((x Real)) Bool (and
                                     (<= (- (* 33554430.0 10141204801825835211973625643008.0)) x)
                                     (<= x (* 33554430.0 10141204801825835211973625643008.0))))

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun no_overflow ((m RoundingMode) (x Real)) Bool (in_range
  (round m x)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(declare-fun sqrt (Real) Real)

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(declare-fun is_int1 (Float32) Bool)

(declare-datatypes () ((t__ref (mk_t__ref (t__content Float32)))))
(declare-sort float 0)

(declare-fun user_eq (float float) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Float32)

(declare-fun dummy () float)

(declare-datatypes () ((float__ref (mk_float__ref (float__content float)))))
(define-fun float__ref___projection ((a float__ref)) float (float__content a))

(define-fun dynamic_invariant ((temp___expr_51 Float32)
  (temp___is_init_48 Bool) (temp___skip_constant_49 Bool)
  (temp___do_toplevel_50 Bool)) Bool (=>
                                     (or (= temp___is_init_48 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                     (not (or (fp.isInfinite temp___expr_51) (fp.isNaN temp___expr_51)))))

(declare-fun value () Float32)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun min_value () Float32)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun max_value () Float32)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun res () Float32)

(declare-fun safety_pack__saturate__result () Float32)

(declare-fun result () Float32)

(declare-fun res1 () Float32)

(declare-fun result1 () Float32)

(declare-fun res2 () Float32)

(declare-fun result2 () Float32)

(declare-fun res3 () Float32)

(declare-fun result3 () Float32)

(declare-fun safety_pack__saturate__result1 () Float32)

(declare-fun safety_pack__saturate__result2 () Float32)

(declare-fun safety_pack__saturate__result3 () Float32)

(declare-fun res4 () Float32)

(declare-fun safety_pack__saturate__result4 () Float32)

(declare-fun res5 () Float32)

(declare-fun safety_pack__saturate__result5 () Float32)

(declare-fun result4 () Float32)

;; H
  (assert (not (or (fp.isInfinite value) (fp.isNaN value))))

;; H
  (assert (not (or (fp.isInfinite min_value) (fp.isNaN min_value))))

;; H
  (assert (not (or (fp.isInfinite max_value) (fp.isNaN max_value))))

;; H
  (assert (= result res))

;; H
  (assert (= res1 value))

;; H
  (assert (not (or (fp.isInfinite res1) (fp.isNaN res1))))

;; H
  (assert (=> (fp.lt value min_value) (= result1 res1)))

;; H
  (assert (=> (fp.lt value min_value) (= res2 min_value)))

;; H
  (assert
  (=> (not (fp.lt value min_value))
  (=> (fp.lt max_value value) (= result2 res1))))

;; H
  (assert
  (=> (not (fp.lt value min_value))
  (=> (fp.lt max_value value) (= res3 max_value))))

;; H
  (assert
  (=> (not (fp.lt value min_value))
  (=> (not (fp.lt max_value value)) (= res3 res1))))

;; H
  (assert (=> (not (fp.lt value min_value)) (= res2 res3)))

;; H
  (assert (= safety_pack__saturate__result1 safety_pack__saturate__result2))

;; H
  (assert (= safety_pack__saturate__result3 safety_pack__saturate__result1))

;; H
  (assert (= result3 safety_pack__saturate__result))

;; H
  (assert (= safety_pack__saturate__result1 res2))

;; H
  (assert
  (= (mk_t__ref safety_pack__saturate__result4) (mk_t__ref
                                                safety_pack__saturate__result2)))

;; H
  (assert (= res4 res2))

;; H
  (assert (= safety_pack__saturate__result5 safety_pack__saturate__result3))

;; H
  (assert (= res5 res2))

;; H
  (assert (= result4 safety_pack__saturate__result4))

;; H
  (assert (fp.lt value min_value))

(assert
;; WP_parameter_def
 ;; File "system.ads", line 1, characters 0-0
  (not (fp.eq safety_pack__saturate__result4 min_value)))
(check-sat)
(exit)
