;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun pow2 (Int) Int)

(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-fun of_int (RoundingMode Int) Float32)

(declare-fun round (RoundingMode Real) Real)

(declare-fun max_int () Int)

(define-fun in_range ((x Real)) Bool (and
                                     (<= (- (* 33554430.0 10141204801825835211973625643008.0)) x)
                                     (<= x (* 33554430.0 10141204801825835211973625643008.0))))

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun no_overflow ((m RoundingMode) (x Real)) Bool (in_range
  (round m x)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(declare-fun sqrt (Real) Real)

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(declare-fun is_int1 (Float32) Bool)

(declare-datatypes () ((t__ref (mk_t__ref (t__content Float32)))))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int1 ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range1 ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort positive 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-fun dummy1 () positive)

(declare-datatypes ()
((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(declare-sort character 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-fun dummy2 () character)

(declare-datatypes ()
((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range4 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int
  Int) (Array Int character))

;; concat_def
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (character Int) (Array Int character))

;; singleton_def
  (assert
  (forall ((v character))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_78 Int))
                           (=>
                           (and (<= a__first temp___idx_78)
                           (<= temp___idx_78 a__last))
                           (= (to_rep (select a temp___idx_78)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_78)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_78 Int))
  (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last))
  (= (to_rep (select a temp___idx_78)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_78)))))))))))

(declare-fun compare ((Array Int character) Int Int (Array Int character) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun to_rep1 (integer) Int)

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range2 f)
     (=> (in_range2 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range2 low)
                   (and (in_range2 high)
                   (=> (<= low high) (and (in_range3 low) (in_range3 high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-fun value__size () Int)

(declare-fun object__size ((Array Int character)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int character)) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-fun dummy3 () us_t)

(declare-fun to_string (us_image) us_t)

(declare-fun from_string (us_t) us_image)

(declare-datatypes ()
((string__ref (mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content
                                                            a))

(declare-sort float 0)

(declare-fun user_eq4 (float float) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE4 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Float32)

(declare-fun dummy4 () float)

(declare-datatypes () ((float__ref (mk_float__ref (float__content float)))))
(define-fun float__ref___projection ((a float__ref)) float (float__content a))

(declare-fun to_rep2 (float) Float32)

(declare-fun of_rep2 (Float32) float)

;; inversion_axiom
  (assert
  (forall ((x float))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x float))
  (! (not (or (fp.isInfinite (to_rep2 x)) (fp.isNaN (to_rep2 x)))) :pattern (
  (to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Float32))
  (! (=> (not (or (fp.isInfinite x) (fp.isNaN x)))
     (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))) )))

(declare-sort normalized2pi 0)

(define-fun in_range5 ((x Float32)) Bool (and
                                         (not (or (fp.isInfinite x) (fp.isNaN x)))
                                         (and
                                         (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x)
                                         (fp.leq x (fp #b0 #b10000001 #b10010010000111111011011)))))

(declare-fun user_eq5 (normalized2pi normalized2pi) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE5 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Float32)

(declare-fun dummy5 () normalized2pi)

(declare-datatypes ()
((normalized2pi__ref
 (mk_normalized2pi__ref (normalized2pi__content normalized2pi)))))
(define-fun normalized2pi__ref___projection ((a normalized2pi__ref)) normalized2pi
  (normalized2pi__content a))

(declare-fun to_rep3 (normalized2pi) Float32)

(declare-fun of_rep3 (Float32) normalized2pi)

;; inversion_axiom
  (assert
  (forall ((x normalized2pi))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x normalized2pi)) (! (in_range5
  (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Float32))
  (! (=> (in_range5 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields (rec__spaces__angles__angle__theta normalized2pi)))))
(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq2 ((a us_rep)
  (b us_rep)) Bool (ite (= (to_rep3
                           (rec__spaces__angles__angle__theta
                           (us_split_fields1 a))) (to_rep3
                                                  (rec__spaces__angles__angle__theta
                                                  (us_split_fields1 b))))
                   true false))

(declare-fun user_eq6 (us_rep us_rep) Bool)

(declare-fun value__size1 () Int)

(declare-fun object__size1 (us_rep) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-fun spaces__angles__angle__theta__first__bit () Int)

(declare-fun spaces__angles__angle__theta__last__bit () Int)

(declare-fun spaces__angles__angle__theta__position () Int)

;; spaces__angles__angle__theta__first__bit_axiom
  (assert (<= 0 spaces__angles__angle__theta__first__bit))

;; spaces__angles__angle__theta__last__bit_axiom
  (assert
  (< spaces__angles__angle__theta__first__bit spaces__angles__angle__theta__last__bit))

;; spaces__angles__angle__theta__position_axiom
  (assert (<= 0 spaces__angles__angle__theta__position))

(declare-fun dummy6 () us_rep)

(declare-datatypes () ((angle__ref (mk_angle__ref (angle__content us_rep)))))
(define-fun angle__ref___projection ((a angle__ref)) us_rep (angle__content
                                                            a))

(define-fun dynamic_invariant ((temp___expr_51 Float32)
  (temp___is_init_48 Bool) (temp___skip_constant_49 Bool)
  (temp___do_toplevel_50 Bool)) Bool (=>
                                     (or (= temp___is_init_48 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                     (not (or (fp.isInfinite temp___expr_51) (fp.isNaN temp___expr_51)))))

(declare-fun aldiff (us_rep us_rep) Float32)

(declare-fun aldiff__function_guard (Float32 us_rep us_rep) Bool)

(define-fun dynamic_invariant1 ((temp___expr_82 us_t)
  (temp___is_init_79 Bool) (temp___skip_constant_80 Bool)
  (temp___do_toplevel_81 Bool)) Bool (=>
                                     (not (= temp___skip_constant_80 true))
                                     (dynamic_property 1 2147483647
                                     (first1 temp___expr_82)
                                     (last1 temp___expr_82))))

(declare-fun print (us_rep) us_t)

(declare-fun print__function_guard (us_t us_rep) Bool)

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1
 (rec__spaces__positions__position__x float)(rec__spaces__positions__position__y float)))))
(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_2__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep_2__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                a))

(define-fun bool_eq3 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (to_rep2
                            (rec__spaces__positions__position__x
                            (us_split_fields3 a))) (to_rep2
                                                   (rec__spaces__positions__position__x
                                                   (us_split_fields3 b))))
                         (= (to_rep2
                            (rec__spaces__positions__position__y
                            (us_split_fields3 a))) (to_rep2
                                                   (rec__spaces__positions__position__y
                                                   (us_split_fields3 b)))))
                    true false))

(declare-fun user_eq7 (us_rep1 us_rep1) Bool)

(declare-fun value__size2 () Int)

(declare-fun object__size2 (us_rep1) Int)

(declare-fun value__alignment2 () Int)

(declare-fun object__alignment2 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))

(declare-fun spaces__positions__position__x__first__bit () Int)

(declare-fun spaces__positions__position__x__last__bit () Int)

(declare-fun spaces__positions__position__x__position () Int)

;; spaces__positions__position__x__first__bit_axiom
  (assert (<= 0 spaces__positions__position__x__first__bit))

;; spaces__positions__position__x__last__bit_axiom
  (assert
  (< spaces__positions__position__x__first__bit spaces__positions__position__x__last__bit))

;; spaces__positions__position__x__position_axiom
  (assert (<= 0 spaces__positions__position__x__position))

(declare-fun spaces__positions__position__y__first__bit () Int)

(declare-fun spaces__positions__position__y__last__bit () Int)

(declare-fun spaces__positions__position__y__position () Int)

;; spaces__positions__position__y__first__bit_axiom
  (assert (<= 0 spaces__positions__position__y__first__bit))

;; spaces__positions__position__y__last__bit_axiom
  (assert
  (< spaces__positions__position__y__first__bit spaces__positions__position__y__last__bit))

;; spaces__positions__position__y__position_axiom
  (assert (<= 0 spaces__positions__position__y__position))

(declare-fun dummy7 () us_rep1)

(declare-datatypes ()
((position__ref (mk_position__ref (position__content us_rep1)))))
(define-fun position__ref___projection ((a position__ref)) us_rep1 (position__content
                                                                   a))

(declare-fun zero_position () us_rep1)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun oeq (us_rep1 us_rep1) Bool)

(declare-fun oeq__function_guard (Bool us_rep1 us_rep1) Bool)

(declare-fun bearing (us_rep1) us_rep)

(declare-fun bearing__function_guard (us_rep us_rep1) Bool)

(declare-sort idir_t 0)

(define-fun in_range6 ((x Int)) Bool (and (<= (- 1) x) (<= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq8 (idir_t idir_t) Bool)

(declare-fun dummy8 () idir_t)

(declare-datatypes ()
((idir_t__ref (mk_idir_t__ref (idir_t__content idir_t)))))
(define-fun idir_t__ref___projection ((a idir_t__ref)) idir_t (idir_t__content
                                                              a))

(declare-fun to_rep4 (idir_t) Int)

(declare-fun of_rep4 (Int) idir_t)

;; inversion_axiom
  (assert
  (forall ((x idir_t))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x idir_t)) (! (in_range6 (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range6 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(declare-datatypes ()
((us_split_fields4
 (mk___split_fields2
 (rec__gaps__gap__bearing us_rep)(rec__gaps__gap__distance float)(rec__gaps__gap__idir idir_t)))))
(define-fun us_split_fields_bearing__projection ((a us_split_fields4)) us_rep
  (rec__gaps__gap__bearing a))

(define-fun us_split_fields_iDir__projection ((a us_split_fields4)) idir_t
  (rec__gaps__gap__idir a))

(declare-datatypes ()
((us_split_fields__ref2
 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref_6__projection ((a us_split_fields__ref2)) us_split_fields4
  (us_split_fields__content2 a))

(declare-datatypes ()
((us_rep2 (mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep_8__projection ((a us_rep2)) us_split_fields4 (us_split_fields5
                                                                a))

(define-fun bool_eq4 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (and
                         (= (bool_eq2
                            (rec__gaps__gap__bearing (us_split_fields5 a))
                            (rec__gaps__gap__bearing (us_split_fields5 b))) true)
                         (= (to_rep2
                            (rec__gaps__gap__distance (us_split_fields5 a)))
                         (to_rep2
                         (rec__gaps__gap__distance (us_split_fields5 b)))))
                         (= (to_rep4
                            (rec__gaps__gap__idir (us_split_fields5 a)))
                         (to_rep4
                         (rec__gaps__gap__idir (us_split_fields5 b)))))
                    true false))

(declare-fun user_eq9 (us_rep2 us_rep2) Bool)

(declare-fun value__size3 () Int)

(declare-fun object__size3 (us_rep2) Int)

(declare-fun value__alignment3 () Int)

(declare-fun object__alignment3 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment3 a))))

(declare-fun gaps__gap__bearing__first__bit () Int)

(declare-fun gaps__gap__bearing__last__bit () Int)

(declare-fun gaps__gap__bearing__position () Int)

;; gaps__gap__bearing__first__bit_axiom
  (assert (<= 0 gaps__gap__bearing__first__bit))

;; gaps__gap__bearing__last__bit_axiom
  (assert (< gaps__gap__bearing__first__bit gaps__gap__bearing__last__bit))

;; gaps__gap__bearing__position_axiom
  (assert (<= 0 gaps__gap__bearing__position))

(declare-fun gaps__gap__distance__first__bit () Int)

(declare-fun gaps__gap__distance__last__bit () Int)

(declare-fun gaps__gap__distance__position () Int)

;; gaps__gap__distance__first__bit_axiom
  (assert (<= 0 gaps__gap__distance__first__bit))

;; gaps__gap__distance__last__bit_axiom
  (assert (< gaps__gap__distance__first__bit gaps__gap__distance__last__bit))

;; gaps__gap__distance__position_axiom
  (assert (<= 0 gaps__gap__distance__position))

(declare-fun gaps__gap__idir__first__bit () Int)

(declare-fun gaps__gap__idir__last__bit () Int)

(declare-fun gaps__gap__idir__position () Int)

;; gaps__gap__idir__first__bit_axiom
  (assert (<= 0 gaps__gap__idir__first__bit))

;; gaps__gap__idir__last__bit_axiom
  (assert (< gaps__gap__idir__first__bit gaps__gap__idir__last__bit))

;; gaps__gap__idir__position_axiom
  (assert (<= 0 gaps__gap__idir__position))

(declare-fun dummy9 () us_rep2)

(declare-datatypes () ((gap__ref (mk_gap__ref (gap__content us_rep2)))))
(define-fun gap__ref___projection ((a gap__ref)) us_rep2 (gap__content a))

(declare-datatypes ()
((us_split_fields6
 (mk___split_fields3
 (rec__valleys__valley__risinggap us_rep2)(rec__valleys__valley__othergap us_rep2)))))
(define-fun us_split_fields_risingGap__projection ((a us_split_fields6)) us_rep2
  (rec__valleys__valley__risinggap a))

(define-fun us_split_fields_otherGap__projection ((a us_split_fields6)) us_rep2
  (rec__valleys__valley__othergap a))

(declare-datatypes ()
((us_split_fields__ref3
 (mk___split_fields__ref3 (us_split_fields__content3 us_split_fields6)))))
(define-fun us_split_fields__ref_7__projection ((a us_split_fields__ref3)) us_split_fields6
  (us_split_fields__content3 a))

(declare-datatypes ()
((us_rep3 (mk___rep3 (us_split_fields7 us_split_fields6)))))
(define-fun us_rep_9__projection ((a us_rep3)) us_split_fields6 (us_split_fields7
                                                                a))

(define-fun bool_eq5 ((a us_rep3)
  (b us_rep3)) Bool (ite (and
                         (= (bool_eq4
                            (rec__valleys__valley__risinggap
                            (us_split_fields7 a))
                            (rec__valleys__valley__risinggap
                            (us_split_fields7 b))) true)
                         (= (bool_eq4
                            (rec__valleys__valley__othergap
                            (us_split_fields7 a))
                            (rec__valleys__valley__othergap
                            (us_split_fields7 b))) true))
                    true false))

(declare-fun user_eq10 (us_rep3 us_rep3) Bool)

(declare-fun value__size4 () Int)

(declare-fun object__size4 (us_rep3) Int)

(declare-fun value__alignment4 () Int)

(declare-fun object__alignment4 (us_rep3) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__size4 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__alignment4 a))))

(declare-fun valleys__valley__risinggap__first__bit () Int)

(declare-fun valleys__valley__risinggap__last__bit () Int)

(declare-fun valleys__valley__risinggap__position () Int)

;; valleys__valley__risinggap__first__bit_axiom
  (assert (<= 0 valleys__valley__risinggap__first__bit))

;; valleys__valley__risinggap__last__bit_axiom
  (assert
  (< valleys__valley__risinggap__first__bit valleys__valley__risinggap__last__bit))

;; valleys__valley__risinggap__position_axiom
  (assert (<= 0 valleys__valley__risinggap__position))

(declare-fun valleys__valley__othergap__first__bit () Int)

(declare-fun valleys__valley__othergap__last__bit () Int)

(declare-fun valleys__valley__othergap__position () Int)

;; valleys__valley__othergap__first__bit_axiom
  (assert (<= 0 valleys__valley__othergap__first__bit))

;; valleys__valley__othergap__last__bit_axiom
  (assert
  (< valleys__valley__othergap__first__bit valleys__valley__othergap__last__bit))

;; valleys__valley__othergap__position_axiom
  (assert (<= 0 valleys__valley__othergap__position))

(declare-fun dummy10 () us_rep3)

(declare-datatypes ()
((valley__ref (mk_valley__ref (valley__content us_rep3)))))
(define-fun valley__ref___projection ((a valley__ref)) us_rep3 (valley__content
                                                               a))

(declare-fun create (us_rep2 us_rep2) us_rep3)

(declare-fun create__function_guard (us_rep3 us_rep2 us_rep2) Bool)

(declare-sort count_type 0)

(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq11 (count_type count_type) Bool)

(declare-fun dummy11 () count_type)

(declare-datatypes ()
((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type
  (count_type__content a))

(declare-fun to_rep5 (count_type) Int)

(declare-fun of_rep5 (Int) count_type)

;; inversion_axiom
  (assert
  (forall ((x count_type))
  (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)) )))

;; range_axiom
  (assert
  (forall ((x count_type)) (! (in_range7
  (to_rep5 x)) :pattern ((to_rep5 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range7 x) (= (to_rep5 (of_rep5 x)) x)) :pattern ((to_rep5
                                                              (of_rep5 x))) )))

(declare-sort option 0)

(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq12 (option option) Bool)

(declare-fun dummy12 () option)

(declare-datatypes ()
((option__ref (mk_option__ref (option__content option)))))
(define-fun option__ref_2__projection ((a option__ref)) option (option__content
                                                               a))

(declare-fun to_rep6 (option) Int)

(declare-fun of_rep6 (Int) option)

;; inversion_axiom
  (assert
  (forall ((x option))
  (! (= (of_rep6 (to_rep6 x)) x) :pattern ((to_rep6 x)) )))

;; range_axiom
  (assert
  (forall ((x option)) (! (in_range8 (to_rep6 x)) :pattern ((to_rep6 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range8 x) (= (to_rep6 (of_rep6 x)) x)) :pattern ((to_rep6
                                                              (of_rep6 x))) )))

(declare-datatypes ()
((us_split_discrs
 (mk___split_discrs (rec__algorithm__valley_option__opt option)))))
(define-fun us_split_discrs_2__projection ((a us_split_discrs)) option
  (rec__algorithm__valley_option__opt a))

(declare-datatypes ()
((us_split_discrs__ref
 (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref_2__projection ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ()
((us_split_fields8
 (mk___split_fields4 (rec__algorithm__valley_option__value us_rep3)))))
(define-fun us_split_fields_value__projection ((a us_split_fields8)) us_rep3
  (rec__algorithm__valley_option__value a))

(declare-datatypes ()
((us_split_fields__ref4
 (mk___split_fields__ref4 (us_split_fields__content4 us_split_fields8)))))
(define-fun us_split_fields__ref_8__projection ((a us_split_fields__ref4)) us_split_fields8
  (us_split_fields__content4 a))

(declare-datatypes ()
((us_rep4
 (mk___rep4
 (us_split_discrs1 us_split_discrs)(us_split_fields9 us_split_fields8)(attr__constrained Bool)))))
(define-fun us_rep_10__projection ((a us_rep4)) us_split_discrs (us_split_discrs1
                                                                a))

(define-fun us_rep_11__projection ((a us_rep4)) us_split_fields8 (us_split_fields9
                                                                 a))

(define-fun us_rep_12__projection ((a us_rep4)) Bool (attr__constrained a))

(define-fun algorithm__valley_option__value__pred ((a us_rep4)) Bool (=
  (to_rep6 (rec__algorithm__valley_option__opt (us_split_discrs1 a))) 1))

(define-fun bool_eq6 ((a us_rep4)
  (b us_rep4)) Bool (ite (and
                         (= (to_rep6
                            (rec__algorithm__valley_option__opt
                            (us_split_discrs1 a))) (to_rep6
                                                   (rec__algorithm__valley_option__opt
                                                   (us_split_discrs1 b))))
                         (=> (algorithm__valley_option__value__pred a)
                         (= (bool_eq5
                            (rec__algorithm__valley_option__value
                            (us_split_fields9 a))
                            (rec__algorithm__valley_option__value
                            (us_split_fields9 b))) true)))
                    true false))

(declare-fun user_eq13 (us_rep4 us_rep4) Bool)

(declare-fun value__size5 () Int)

(declare-fun object__size5 (us_rep4) Int)

(declare-fun value__alignment5 () Int)

(declare-fun object__alignment5 (us_rep4) Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (forall ((a us_rep4)) (<= 0 (object__size5 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment5))

;; object__alignment_axiom
  (assert (forall ((a us_rep4)) (<= 0 (object__alignment5 a))))

(declare-fun algorithm__valley_option__opt__first__bit () Int)

(declare-fun algorithm__valley_option__opt__last__bit () Int)

(declare-fun algorithm__valley_option__opt__position () Int)

;; algorithm__valley_option__opt__first__bit_axiom
  (assert (<= 0 algorithm__valley_option__opt__first__bit))

;; algorithm__valley_option__opt__last__bit_axiom
  (assert
  (< algorithm__valley_option__opt__first__bit algorithm__valley_option__opt__last__bit))

;; algorithm__valley_option__opt__position_axiom
  (assert (<= 0 algorithm__valley_option__opt__position))

(declare-fun algorithm__valley_option__value__first__bit () Int)

(declare-fun algorithm__valley_option__value__last__bit () Int)

(declare-fun algorithm__valley_option__value__position () Int)

;; algorithm__valley_option__value__first__bit_axiom
  (assert (<= 0 algorithm__valley_option__value__first__bit))

;; algorithm__valley_option__value__last__bit_axiom
  (assert
  (< algorithm__valley_option__value__first__bit algorithm__valley_option__value__last__bit))

;; algorithm__valley_option__value__position_axiom
  (assert (<= 0 algorithm__valley_option__value__position))

(declare-fun dummy13 () us_rep4)

(declare-datatypes ()
((valley_option__ref
 (mk_valley_option__ref (valley_option__content us_rep4)))))
(define-fun valley_option__ref___projection ((a valley_option__ref)) us_rep4
  (valley_option__content a))

(declare-sort gap_id 0)

(define-fun in_range9 ((x Int)) Bool (and (<= 1 x) (<= x 1000)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq14 (gap_id gap_id) Bool)

(declare-fun dummy14 () gap_id)

(declare-datatypes ()
((gap_id__ref (mk_gap_id__ref (gap_id__content gap_id)))))
(define-fun gap_id__ref___projection ((a gap_id__ref)) gap_id (gap_id__content
                                                              a))

(define-fun dynamic_invariant2 ((temp___expr_391 Int)
  (temp___is_init_388 Bool) (temp___skip_constant_389 Bool)
  (temp___do_toplevel_390 Bool)) Bool (=>
                                      (or (= temp___is_init_388 true)
                                      (<= 1 1000)) (in_range9
                                      temp___expr_391)))

(declare-datatypes ()
((element_type__ref (mk_element_type__ref (element_type__content us_rep2)))))
(define-fun element_type__ref___projection ((a element_type__ref)) us_rep2
  (element_type__content a))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-datatypes ()
((us_split_discrs2
 (mk___split_discrs1
 (rec__algorithm__gap_vectors__list__capacity count_type)))))
(define-fun us_split_discrs_3__projection ((a us_split_discrs2)) count_type
  (rec__algorithm__gap_vectors__list__capacity a))

(declare-datatypes ()
((us_split_discrs__ref1
 (mk___split_discrs__ref1 (us_split_discrs__content1 us_split_discrs2)))))
(define-fun us_split_discrs__ref_3__projection ((a us_split_discrs__ref1)) us_split_discrs2
  (us_split_discrs__content1 a))

(declare-datatypes ()
((us_split_fields10
 (mk___split_fields5 (rec__algorithm__gap_vectors__list us_main_type)))))
(define-fun us_split_fields_List__projection ((a us_split_fields10)) us_main_type
  (rec__algorithm__gap_vectors__list a))

(declare-datatypes ()
((us_split_fields__ref5
 (mk___split_fields__ref5 (us_split_fields__content5 us_split_fields10)))))
(define-fun us_split_fields__ref_9__projection ((a us_split_fields__ref5)) us_split_fields10
  (us_split_fields__content5 a))

(declare-datatypes ()
((us_rep5
 (mk___rep5
 (us_split_discrs3 us_split_discrs2)(us_split_fields11 us_split_fields10)))))
(define-fun us_rep_13__projection ((a us_rep5)) us_split_discrs2 (us_split_discrs3
                                                                 a))

(define-fun us_rep_14__projection ((a us_rep5)) us_split_fields10 (us_split_fields11
                                                                  a))

(define-fun bool_eq7 ((a us_rep5)
  (b us_rep5)) Bool (ite (and
                         (= (to_rep5
                            (rec__algorithm__gap_vectors__list__capacity
                            (us_split_discrs3 a))) (to_rep5
                                                   (rec__algorithm__gap_vectors__list__capacity
                                                   (us_split_discrs3 b))))
                         (= (us_main_eq
                            (rec__algorithm__gap_vectors__list
                            (us_split_fields11 a))
                            (rec__algorithm__gap_vectors__list
                            (us_split_fields11 b))) true))
                    true false))

(declare-fun user_eq15 (us_rep5 us_rep5) Bool)

(declare-fun value__size6 () Int)

(declare-fun object__size6 (us_rep5) Int)

(declare-fun value__alignment6 () Int)

(declare-fun object__alignment6 (us_rep5) Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert (forall ((a us_rep5)) (<= 0 (object__size6 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment6))

;; object__alignment_axiom
  (assert (forall ((a us_rep5)) (<= 0 (object__alignment6 a))))

(declare-fun algorithm__gap_vectors__list__capacity__first__bit () Int)

(declare-fun algorithm__gap_vectors__list__capacity__last__bit () Int)

(declare-fun algorithm__gap_vectors__list__capacity__position () Int)

;; algorithm__gap_vectors__list__capacity__first__bit_axiom
  (assert (<= 0 algorithm__gap_vectors__list__capacity__first__bit))

;; algorithm__gap_vectors__list__capacity__last__bit_axiom
  (assert
  (< algorithm__gap_vectors__list__capacity__first__bit algorithm__gap_vectors__list__capacity__last__bit))

;; algorithm__gap_vectors__list__capacity__position_axiom
  (assert (<= 0 algorithm__gap_vectors__list__capacity__position))

(declare-fun dummy15 () us_rep5)

(declare-datatypes () ((list__ref (mk_list__ref (list__content us_rep5)))))
(define-fun list__ref___projection ((a list__ref)) us_rep5 (list__content a))

(declare-datatypes ()
((us_split_fields12
 (mk___split_fields6 (rec__algorithm__gap_vectors__cursor__node count_type)))))
(define-fun us_split_fields_Node__projection ((a us_split_fields12)) count_type
  (rec__algorithm__gap_vectors__cursor__node a))

(declare-datatypes ()
((us_split_fields__ref6
 (mk___split_fields__ref6 (us_split_fields__content6 us_split_fields12)))))
(define-fun us_split_fields__ref_10__projection ((a us_split_fields__ref6)) us_split_fields12
  (us_split_fields__content6 a))

(declare-datatypes ()
((us_rep6 (mk___rep6 (us_split_fields13 us_split_fields12)))))
(define-fun us_rep_15__projection ((a us_rep6)) us_split_fields12 (us_split_fields13
                                                                  a))

(define-fun bool_eq8 ((a us_rep6)
  (b us_rep6)) Bool (ite (= (to_rep5
                            (rec__algorithm__gap_vectors__cursor__node
                            (us_split_fields13 a))) (to_rep5
                                                    (rec__algorithm__gap_vectors__cursor__node
                                                    (us_split_fields13 b))))
                    true false))

(declare-fun user_eq16 (us_rep6 us_rep6) Bool)

(declare-fun value__size7 () Int)

(declare-fun object__size7 (us_rep6) Int)

(declare-fun value__alignment7 () Int)

(declare-fun object__alignment7 (us_rep6) Int)

;; value__size_axiom
  (assert (<= 0 value__size7))

;; object__size_axiom
  (assert (forall ((a us_rep6)) (<= 0 (object__size7 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment7))

;; object__alignment_axiom
  (assert (forall ((a us_rep6)) (<= 0 (object__alignment7 a))))

(declare-fun algorithm__gap_vectors__cursor__node__first__bit () Int)

(declare-fun algorithm__gap_vectors__cursor__node__last__bit () Int)

(declare-fun algorithm__gap_vectors__cursor__node__position () Int)

;; algorithm__gap_vectors__cursor__node__first__bit_axiom
  (assert (<= 0 algorithm__gap_vectors__cursor__node__first__bit))

;; algorithm__gap_vectors__cursor__node__last__bit_axiom
  (assert
  (< algorithm__gap_vectors__cursor__node__first__bit algorithm__gap_vectors__cursor__node__last__bit))

;; algorithm__gap_vectors__cursor__node__position_axiom
  (assert (<= 0 algorithm__gap_vectors__cursor__node__position))

(declare-fun dummy16 () us_rep6)

(declare-datatypes ()
((cursor__ref (mk_cursor__ref (cursor__content us_rep6)))))
(define-fun cursor__ref___projection ((a cursor__ref)) us_rep6 (cursor__content
                                                               a))

(define-fun default_initial_assumption ((temp___expr_413 us_rep6)
  (temp___skip_top_level_414 Bool)) Bool (= (to_rep5
                                            (rec__algorithm__gap_vectors__cursor__node
                                            (us_split_fields13
                                            temp___expr_413))) 0))

(declare-fun length1 (us_rep5) Int)

(declare-fun length__function_guard (Int us_rep5) Bool)

(define-fun dynamic_invariant3 ((temp___expr_324 Int)
  (temp___is_init_321 Bool) (temp___skip_constant_322 Bool)
  (temp___do_toplevel_323 Bool)) Bool (=>
                                      (or (= temp___is_init_321 true)
                                      (<= 0 2147483647)) (in_range7
                                      temp___expr_324)))

;; length__post_axiom
  (assert
  (forall ((container us_rep5))
  (! (let ((result (length1 container)))
     (and
     (<= result (to_rep5
                (rec__algorithm__gap_vectors__list__capacity
                (us_split_discrs3 container))))
     (dynamic_invariant3 result true false true))) :pattern ((length1
                                                             container)) )))

(declare-sort us_main_type1 0)

(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)

(declare-sort us_rep7 0)

(declare-fun bool_eq9 (us_rep7 us_rep7) Bool)

(declare-fun user_eq17 (us_rep7 us_rep7) Bool)

(declare-fun value__size8 () Int)

(declare-fun object__size8 (us_rep7) Int)

(declare-fun value__alignment8 () Int)

(declare-fun object__alignment8 (us_rep7) Int)

;; value__size_axiom
  (assert (<= 0 value__size8))

;; object__size_axiom
  (assert (forall ((a us_rep7)) (<= 0 (object__size8 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment8))

;; object__alignment_axiom
  (assert (forall ((a us_rep7)) (<= 0 (object__alignment8 a))))

(declare-fun dummy17 () us_rep7)

(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 us_rep7)))))
(define-fun map__ref___projection ((a map__ref1)) us_rep7 (map__content1 a))

(declare-datatypes ()
((key_type__ref (mk_key_type__ref (key_type__content us_rep6)))))
(define-fun key_type__ref___projection ((a key_type__ref)) us_rep6 (key_type__content
                                                                   a))

(declare-fun has_key (us_rep7 us_rep6) Bool)

(declare-fun has_key__function_guard (Bool us_rep7 us_rep6) Bool)

(declare-fun positions (us_rep5) us_rep7)

(declare-fun positions__function_guard (us_rep7 us_rep5) Bool)

(define-fun has_element ((container us_rep5)
  (position us_rep6)) Bool (has_key (positions container) position))

(declare-fun has_element__function_guard (Bool us_rep5 us_rep6) Bool)

(declare-datatypes ()
((element_type__ref1
 (mk_element_type__ref1 (element_type__content1 us_rep2)))))
(define-fun element_type__ref_2__projection ((a element_type__ref1)) us_rep2
  (element_type__content1 a))

(declare-sort us_main_type2 0)

(declare-fun us_main_eq2 (us_main_type2 us_main_type2) Bool)

(declare-sort us_rep8 0)

(declare-fun bool_eq10 (us_rep8 us_rep8) Bool)

(declare-fun user_eq18 (us_rep8 us_rep8) Bool)

(declare-fun value__size9 () Int)

(declare-fun object__size9 (us_rep8) Int)

(declare-fun value__alignment9 () Int)

(declare-fun object__alignment9 (us_rep8) Int)

;; value__size_axiom
  (assert (<= 0 value__size9))

;; object__size_axiom
  (assert (forall ((a us_rep8)) (<= 0 (object__size9 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment9))

;; object__alignment_axiom
  (assert (forall ((a us_rep8)) (<= 0 (object__alignment9 a))))

(declare-fun dummy18 () us_rep8)

(declare-datatypes ()
((sequence__ref (mk_sequence__ref (sequence__content us_rep8)))))
(define-fun sequence__ref___projection ((a sequence__ref)) us_rep8 (sequence__content
                                                                   a))

(declare-fun get (us_rep8 Int) us_rep2)

(declare-fun get__function_guard (us_rep2 us_rep8 Int) Bool)

(declare-fun get1 (us_rep7 us_rep6) Int)

(declare-fun get__function_guard1 (Int us_rep7 us_rep6) Bool)

(declare-fun model__ (us_rep5) us_rep8)

(declare-fun model____function_guard (us_rep8 us_rep5) Bool)

(define-fun element ((container us_rep5)
  (position us_rep6)) us_rep2 (get (model__ container)
                              (get1 (positions container) position)))

(declare-fun element__function_guard (us_rep2 us_rep5 us_rep6) Bool)

(declare-fun no_element () us_rep6)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun last2 (us_rep5) us_rep6)

(declare-fun last__function_guard (us_rep6 us_rep5) Bool)

;; last__post_axiom
  (assert
  (forall ((container us_rep5))
  (! (let ((result (last2 container)))
     (ite (= (length1 container) 0) (= (bool_eq8 result no_element) true)
     (and (= (has_element container result) true)
     (= (get1 (positions container) result) (length1 container))))) :pattern (
  (last2 container)) )))

(declare-fun first2 (us_rep5) us_rep6)

(declare-fun first__function_guard (us_rep6 us_rep5) Bool)

;; first__post_axiom
  (assert
  (forall ((container us_rep5))
  (! (let ((result (first2 container)))
     (ite (= (length1 container) 0) (= (bool_eq8 result no_element) true)
     (and (= (has_element container result) true)
     (= (get1 (positions container) result) 1)))) :pattern ((first2
                                                            container)) )))

(declare-fun next (us_rep5 us_rep6) us_rep6)

(declare-fun next__function_guard (us_rep6 us_rep5 us_rep6) Bool)

;; next__post_axiom
  (assert
  (forall ((container us_rep5))
  (forall ((position us_rep6))
  (! (=>
     (or (= (has_element container position) true)
     (= (bool_eq8 position no_element) true))
     (let ((result (next container position)))
     (ite (or (= (bool_eq8 position no_element) true)
          (= (get1 (positions container) position) (length1 container)))
     (= (bool_eq8 result no_element) true)
     (and (= (has_element container result) true)
     (= (get1 (positions container) result) (+ (get1 (positions container)
                                               position) 1)))))) :pattern (
  (next container position)) ))))

(define-fun in_range10 ((rec__algorithm__gap_vectors__list__capacity1 Int)
  (a us_rep5)) Bool (= rec__algorithm__gap_vectors__list__capacity1 (to_rep5
                                                                    (rec__algorithm__gap_vectors__list__capacity
                                                                    (us_split_discrs3
                                                                    a)))))

(declare-fun value__size10 () Int)

(declare-fun object__size10 (us_rep5) Int)

(declare-fun value__alignment10 () Int)

(declare-fun object__alignment10 (us_rep5) Int)

;; value__size_axiom
  (assert (<= 0 value__size10))

;; object__size_axiom
  (assert (forall ((a us_rep5)) (<= 0 (object__size10 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment10))

;; object__alignment_axiom
  (assert (forall ((a us_rep5)) (<= 0 (object__alignment10 a))))

(declare-fun algorithm__gap_vectors__list__capacity__first__bit1 () Int)

(declare-fun algorithm__gap_vectors__list__capacity__last__bit1 () Int)

(declare-fun algorithm__gap_vectors__list__capacity__position1 () Int)

;; algorithm__gap_vectors__list__capacity__first__bit_axiom
  (assert (<= 0 algorithm__gap_vectors__list__capacity__first__bit1))

;; algorithm__gap_vectors__list__capacity__last__bit_axiom
  (assert
  (< algorithm__gap_vectors__list__capacity__first__bit1 algorithm__gap_vectors__list__capacity__last__bit1))

;; algorithm__gap_vectors__list__capacity__position_axiom
  (assert (<= 0 algorithm__gap_vectors__list__capacity__position1))

(declare-fun dummy19 () us_rep5)

(declare-datatypes ()
((list__ref1 (mk_list__ref1 (list__content1 us_rep5)))))
(define-fun list__ref_2__projection ((a list__ref1)) us_rep5 (list__content1
                                                             a))

(declare-sort natural 0)

(define-fun in_range11 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)

(declare-fun user_eq19 (natural natural) Bool)

(declare-fun dummy20 () natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(declare-fun to_rep7 (natural) Int)

(declare-fun of_rep7 (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural))
  (! (= (of_rep7 (to_rep7 x)) x) :pattern ((to_rep7 x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range11 (to_rep7 x)) :pattern ((to_rep7 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range11 x) (= (to_rep7 (of_rep7 x)) x)) :pattern ((to_rep7
                                                               (of_rep7 x))) )))

(declare-sort positive_float 0)

(define-fun in_range12 ((x Float32)) Bool (and
                                          (not (or (fp.isInfinite x) (fp.isNaN x)))
                                          (and
                                          (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x)
                                          (fp.leq x (fp #b0 #b11111110 #b11111111111111111111111)))))

(declare-fun user_eq20 (positive_float positive_float) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE11 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) Float32)

(declare-fun dummy21 () positive_float)

(declare-datatypes ()
((positive_float__ref
 (mk_positive_float__ref (positive_float__content positive_float)))))
(define-fun positive_float__ref___projection ((a positive_float__ref)) positive_float
  (positive_float__content a))

(declare-fun to_rep8 (positive_float) Float32)

(declare-fun of_rep8 (Float32) positive_float)

;; inversion_axiom
  (assert
  (forall ((x positive_float))
  (! (= (of_rep8 (to_rep8 x)) x) :pattern ((to_rep8 x)) )))

;; range_axiom
  (assert
  (forall ((x positive_float)) (! (in_range12
  (to_rep8 x)) :pattern ((to_rep8 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Float32))
  (! (=> (in_range12 x) (= (to_rep8 (of_rep8 x)) x)) :pattern ((to_rep8
                                                               (of_rep8 x))) )))

(declare-sort nonnegative_float 0)

(define-fun in_range13 ((x Float32)) Bool (and
                                          (not (or (fp.isInfinite x) (fp.isNaN x)))
                                          (and
                                          (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x)
                                          (fp.leq x (fp #b0 #b11111110 #b11111111111111111111111)))))

(declare-fun user_eq21 (nonnegative_float nonnegative_float) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE12 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check12 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE12 (us_image) Float32)

(declare-fun dummy22 () nonnegative_float)

(declare-datatypes ()
((nonnegative_float__ref
 (mk_nonnegative_float__ref (nonnegative_float__content nonnegative_float)))))
(define-fun nonnegative_float__ref___projection ((a nonnegative_float__ref)) nonnegative_float
  (nonnegative_float__content a))

(declare-fun to_rep9 (nonnegative_float) Float32)

(declare-fun of_rep9 (Float32) nonnegative_float)

;; inversion_axiom
  (assert
  (forall ((x nonnegative_float))
  (! (= (of_rep9 (to_rep9 x)) x) :pattern ((to_rep9 x)) )))

;; range_axiom
  (assert
  (forall ((x nonnegative_float)) (! (in_range13
  (to_rep9 x)) :pattern ((to_rep9 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Float32))
  (! (=> (in_range13 x) (= (to_rep9 (of_rep9 x)) x)) :pattern ((to_rep9
                                                               (of_rep9 x))) )))

(declare-sort unbounded_float 0)

(declare-fun user_eq22 (unbounded_float unbounded_float) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE13 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check13 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE13 (us_image) Float32)

(declare-fun dummy23 () unbounded_float)

(declare-datatypes ()
((unbounded_float__ref
 (mk_unbounded_float__ref (unbounded_float__content unbounded_float)))))
(define-fun unbounded_float__ref___projection ((a unbounded_float__ref)) unbounded_float
  (unbounded_float__content a))

(declare-fun to_rep10 (unbounded_float) Float32)

(declare-fun of_rep10 (Float32) unbounded_float)

;; inversion_axiom
  (assert
  (forall ((x unbounded_float))
  (! (= (of_rep10 (to_rep10 x)) x) :pattern ((to_rep10 x)) )))

;; range_axiom
  (assert
  (forall ((x unbounded_float))
  (! (not (or (fp.isInfinite (to_rep10 x)) (fp.isNaN (to_rep10 x)))) :pattern (
  (to_rep10 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Float32))
  (! (=> (not (or (fp.isInfinite x) (fp.isNaN x)))
     (= (to_rep10 (of_rep10 x)) x)) :pattern ((to_rep10 (of_rep10 x))) )))

(declare-datatypes ()
((map__ref2 (mk_map__ref2 (map__content2 (Array Int nonnegative_float))))))
(declare-fun slide1 ((Array Int nonnegative_float) Int
  Int) (Array Int nonnegative_float))

;; slide_eq
  (assert
  (forall ((a (Array Int nonnegative_float)))
  (forall ((first3 Int))
  (! (= (slide1 a first3 first3) a) :pattern ((slide1 a first3 first3)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int nonnegative_float)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int nonnegative_float) Int Int
  (Array Int nonnegative_float) Int Int) (Array Int nonnegative_float))

;; concat_def
  (assert
  (forall ((a (Array Int nonnegative_float))
  (b (Array Int nonnegative_float)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 (nonnegative_float
  Int) (Array Int nonnegative_float))

;; singleton_def
  (assert
  (forall ((v nonnegative_float))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq11 ((a (Array Int nonnegative_float)) (a__first Int)
  (a__last Int) (b (Array Int nonnegative_float)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep9 (select a temp___idx_132)) (to_rep9
                                                                  (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int nonnegative_float))
  (b (Array Int nonnegative_float)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq11 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep9 (select a temp___idx_132)) (to_rep9
                                         (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun dummy24 () (Array Int nonnegative_float))

(declare-fun value__size11 () Int)

(declare-fun object__size11 ((Array Int nonnegative_float)) Int)

(declare-fun value__component__size1 () Int)

(declare-fun object__component__size1 ((Array Int nonnegative_float)) Int)

(declare-fun value__alignment11 () Int)

(declare-fun object__alignment11 ((Array Int nonnegative_float)) Int)

;; value__size_axiom
  (assert (<= 0 value__size11))

;; object__size_axiom
  (assert
  (forall ((a (Array Int nonnegative_float))) (<= 0 (object__size11 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int nonnegative_float)))
  (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment11))

;; object__alignment_axiom
  (assert
  (forall ((a (Array Int nonnegative_float))) (<= 0 (object__alignment11 a))))

(declare-fun user_eq23 ((Array Int nonnegative_float)
  (Array Int nonnegative_float)) Bool)

(declare-sort option1 0)

(define-fun in_range14 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE14 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check14 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE14 (us_image) Int)

(declare-fun user_eq24 (option1 option1) Bool)

(declare-fun dummy25 () option1)

(declare-datatypes ()
((option__ref1 (mk_option__ref1 (option__content1 option1)))))
(define-fun option__ref___projection ((a option__ref1)) option1 (option__content1
                                                                a))

(declare-fun to_rep11 (option1) Int)

(declare-fun of_rep11 (Int) option1)

;; inversion_axiom
  (assert
  (forall ((x option1))
  (! (= (of_rep11 (to_rep11 x)) x) :pattern ((to_rep11 x)) )))

;; range_axiom
  (assert
  (forall ((x option1)) (! (in_range14
  (to_rep11 x)) :pattern ((to_rep11 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range14 x) (= (to_rep11 (of_rep11 x)) x)) :pattern ((to_rep11
                                                                 (of_rep11 x))) )))

(declare-datatypes ()
((us_split_discrs4
 (mk___split_discrs2 (rec__robot_iface__speed_option__opt option1)))))
(define-fun us_split_discrs___projection ((a us_split_discrs4)) option1
  (rec__robot_iface__speed_option__opt a))

(declare-datatypes ()
((us_split_discrs__ref2
 (mk___split_discrs__ref2 (us_split_discrs__content2 us_split_discrs4)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref2)) us_split_discrs4
  (us_split_discrs__content2 a))

(declare-datatypes ()
((us_split_fields14
 (mk___split_fields7
 (rec__robot_iface__speed_option__modulus float)(rec__robot_iface__speed_option__angle float)))))
(declare-datatypes ()
((us_split_fields__ref7
 (mk___split_fields__ref7 (us_split_fields__content7 us_split_fields14)))))
(define-fun us_split_fields__ref_4__projection ((a us_split_fields__ref7)) us_split_fields14
  (us_split_fields__content7 a))

(declare-datatypes ()
((us_rep9
 (mk___rep7
 (us_split_discrs5 us_split_discrs4)(us_split_fields15 us_split_fields14)(attr__constrained1 Bool)))))
(define-fun us_rep_4__projection ((a us_rep9)) us_split_discrs4 (us_split_discrs5
                                                                a))

(define-fun us_rep_5__projection ((a us_rep9)) us_split_fields14 (us_split_fields15
                                                                 a))

(define-fun us_rep_6__projection ((a us_rep9)) Bool (attr__constrained1 a))

(define-fun robot_iface__speed_option__modulus__pred ((a us_rep9)) Bool (=
  (to_rep11 (rec__robot_iface__speed_option__opt (us_split_discrs5 a))) 1))

(define-fun robot_iface__speed_option__angle__pred ((a us_rep9)) Bool (=
  (to_rep11 (rec__robot_iface__speed_option__opt (us_split_discrs5 a))) 1))

(define-fun bool_eq12 ((a us_rep9)
  (b us_rep9)) Bool (ite (and
                         (and
                         (= (to_rep11
                            (rec__robot_iface__speed_option__opt
                            (us_split_discrs5 a))) (to_rep11
                                                   (rec__robot_iface__speed_option__opt
                                                   (us_split_discrs5 b))))
                         (=> (robot_iface__speed_option__modulus__pred a)
                         (= (to_rep2
                            (rec__robot_iface__speed_option__modulus
                            (us_split_fields15 a))) (to_rep2
                                                    (rec__robot_iface__speed_option__modulus
                                                    (us_split_fields15 b))))))
                         (=> (robot_iface__speed_option__angle__pred a)
                         (= (to_rep2
                            (rec__robot_iface__speed_option__angle
                            (us_split_fields15 a))) (to_rep2
                                                    (rec__robot_iface__speed_option__angle
                                                    (us_split_fields15 b))))))
                    true false))

(declare-fun user_eq25 (us_rep9 us_rep9) Bool)

(declare-fun value__size12 () Int)

(declare-fun object__size12 (us_rep9) Int)

(declare-fun value__alignment12 () Int)

(declare-fun object__alignment12 (us_rep9) Int)

;; value__size_axiom
  (assert (<= 0 value__size12))

;; object__size_axiom
  (assert (forall ((a us_rep9)) (<= 0 (object__size12 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment12))

;; object__alignment_axiom
  (assert (forall ((a us_rep9)) (<= 0 (object__alignment12 a))))

(declare-fun robot_iface__speed_option__opt__first__bit () Int)

(declare-fun robot_iface__speed_option__opt__last__bit () Int)

(declare-fun robot_iface__speed_option__opt__position () Int)

;; robot_iface__speed_option__opt__first__bit_axiom
  (assert (<= 0 robot_iface__speed_option__opt__first__bit))

;; robot_iface__speed_option__opt__last__bit_axiom
  (assert
  (< robot_iface__speed_option__opt__first__bit robot_iface__speed_option__opt__last__bit))

;; robot_iface__speed_option__opt__position_axiom
  (assert (<= 0 robot_iface__speed_option__opt__position))

(declare-fun robot_iface__speed_option__modulus__first__bit () Int)

(declare-fun robot_iface__speed_option__modulus__last__bit () Int)

(declare-fun robot_iface__speed_option__modulus__position () Int)

;; robot_iface__speed_option__modulus__first__bit_axiom
  (assert (<= 0 robot_iface__speed_option__modulus__first__bit))

;; robot_iface__speed_option__modulus__last__bit_axiom
  (assert
  (< robot_iface__speed_option__modulus__first__bit robot_iface__speed_option__modulus__last__bit))

;; robot_iface__speed_option__modulus__position_axiom
  (assert (<= 0 robot_iface__speed_option__modulus__position))

(declare-fun robot_iface__speed_option__angle__first__bit () Int)

(declare-fun robot_iface__speed_option__angle__last__bit () Int)

(declare-fun robot_iface__speed_option__angle__position () Int)

;; robot_iface__speed_option__angle__first__bit_axiom
  (assert (<= 0 robot_iface__speed_option__angle__first__bit))

;; robot_iface__speed_option__angle__last__bit_axiom
  (assert
  (< robot_iface__speed_option__angle__first__bit robot_iface__speed_option__angle__last__bit))

;; robot_iface__speed_option__angle__position_axiom
  (assert (<= 0 robot_iface__speed_option__angle__position))

(declare-fun dummy26 () us_rep9)

(declare-datatypes ()
((speed_option__ref (mk_speed_option__ref (speed_option__content us_rep9)))))
(define-fun speed_option__ref___projection ((a speed_option__ref)) us_rep9
  (speed_option__content a))

(declare-datatypes ()
((us_split_fields16
 (mk___split_fields8
 (rec__robot_iface__proxy__robot_radius positive_float)(rec__robot_iface__proxy__min_gap_width positive_float)(rec__robot_iface__proxy__obstacle_avoid_dist positive_float)(rec__robot_iface__proxy__max_speed positive_float)(rec__robot_iface__proxy__max_turn_rate positive_float)(rec__robot_iface__proxy__goal_position_tol nonnegative_float)(rec__robot_iface__proxy__goal_angle_tol nonnegative_float)(rec__robot_iface__proxy__goalx float)(rec__robot_iface__proxy__goaly float)(rec__robot_iface__proxy__goala float)(rec__robot_iface__proxy__scan_count natural)(rec__robot_iface__proxy__scan_res positive_float)(rec__robot_iface__proxy__max_range positive_float)(rec__robot_iface__proxy__scans (Array Int nonnegative_float))(rec__robot_iface__proxy__x unbounded_float)(rec__robot_iface__proxy__y unbounded_float)(rec__robot_iface__proxy__yaw unbounded_float)(rec__robot_iface__proxy__speed us_rep9)(rec__robot_iface__proxy__goal_reached Bool)))))
(define-fun us_split_fields_scan_Count__projection ((a us_split_fields16)) natural
  (rec__robot_iface__proxy__scan_count a))

(define-fun us_split_fields_scans__projection ((a us_split_fields16)) (Array Int nonnegative_float)
  (rec__robot_iface__proxy__scans a))

(define-fun us_split_fields_speed__projection ((a us_split_fields16)) us_rep9
  (rec__robot_iface__proxy__speed a))

(define-fun us_split_fields_goal_reached__projection ((a us_split_fields16)) Bool
  (rec__robot_iface__proxy__goal_reached a))

(declare-datatypes ()
((us_split_fields__ref8
 (mk___split_fields__ref8 (us_split_fields__content8 us_split_fields16)))))
(define-fun us_split_fields__ref_5__projection ((a us_split_fields__ref8)) us_split_fields16
  (us_split_fields__content8 a))

(declare-datatypes ()
((us_rep10 (mk___rep8 (us_split_fields17 us_split_fields16)))))
(define-fun us_rep_7__projection ((a us_rep10)) us_split_fields16 (us_split_fields17
                                                                  a))

(define-fun bool_eq13 ((a us_rep10)
  (b us_rep10)) Bool (ite (and
                          (and
                          (and
                          (and
                          (and
                          (and
                          (and
                          (and
                          (and
                          (and
                          (and
                          (and
                          (and
                          (and
                          (and
                          (and
                          (and
                          (and
                          (= (to_rep8
                             (rec__robot_iface__proxy__robot_radius
                             (us_split_fields17 a))) (to_rep8
                                                     (rec__robot_iface__proxy__robot_radius
                                                     (us_split_fields17 b))))
                          (= (to_rep8
                             (rec__robot_iface__proxy__min_gap_width
                             (us_split_fields17 a))) (to_rep8
                                                     (rec__robot_iface__proxy__min_gap_width
                                                     (us_split_fields17 b)))))
                          (= (to_rep8
                             (rec__robot_iface__proxy__obstacle_avoid_dist
                             (us_split_fields17 a))) (to_rep8
                                                     (rec__robot_iface__proxy__obstacle_avoid_dist
                                                     (us_split_fields17 b)))))
                          (= (to_rep8
                             (rec__robot_iface__proxy__max_speed
                             (us_split_fields17 a))) (to_rep8
                                                     (rec__robot_iface__proxy__max_speed
                                                     (us_split_fields17 b)))))
                          (= (to_rep8
                             (rec__robot_iface__proxy__max_turn_rate
                             (us_split_fields17 a))) (to_rep8
                                                     (rec__robot_iface__proxy__max_turn_rate
                                                     (us_split_fields17 b)))))
                          (= (to_rep9
                             (rec__robot_iface__proxy__goal_position_tol
                             (us_split_fields17 a))) (to_rep9
                                                     (rec__robot_iface__proxy__goal_position_tol
                                                     (us_split_fields17 b)))))
                          (= (to_rep9
                             (rec__robot_iface__proxy__goal_angle_tol
                             (us_split_fields17 a))) (to_rep9
                                                     (rec__robot_iface__proxy__goal_angle_tol
                                                     (us_split_fields17 b)))))
                          (= (to_rep2
                             (rec__robot_iface__proxy__goalx
                             (us_split_fields17 a))) (to_rep2
                                                     (rec__robot_iface__proxy__goalx
                                                     (us_split_fields17 b)))))
                          (= (to_rep2
                             (rec__robot_iface__proxy__goaly
                             (us_split_fields17 a))) (to_rep2
                                                     (rec__robot_iface__proxy__goaly
                                                     (us_split_fields17 b)))))
                          (= (to_rep2
                             (rec__robot_iface__proxy__goala
                             (us_split_fields17 a))) (to_rep2
                                                     (rec__robot_iface__proxy__goala
                                                     (us_split_fields17 b)))))
                          (= (to_rep7
                             (rec__robot_iface__proxy__scan_count
                             (us_split_fields17 a))) (to_rep7
                                                     (rec__robot_iface__proxy__scan_count
                                                     (us_split_fields17 b)))))
                          (= (to_rep8
                             (rec__robot_iface__proxy__scan_res
                             (us_split_fields17 a))) (to_rep8
                                                     (rec__robot_iface__proxy__scan_res
                                                     (us_split_fields17 b)))))
                          (= (to_rep8
                             (rec__robot_iface__proxy__max_range
                             (us_split_fields17 a))) (to_rep8
                                                     (rec__robot_iface__proxy__max_range
                                                     (us_split_fields17 b)))))
                          (= (bool_eq11
                             (rec__robot_iface__proxy__scans
                             (us_split_fields17 a)) 1 1000
                             (rec__robot_iface__proxy__scans
                             (us_split_fields17 b)) 1 1000) true))
                          (= (to_rep10
                             (rec__robot_iface__proxy__x
                             (us_split_fields17 a))) (to_rep10
                                                     (rec__robot_iface__proxy__x
                                                     (us_split_fields17 b)))))
                          (= (to_rep10
                             (rec__robot_iface__proxy__y
                             (us_split_fields17 a))) (to_rep10
                                                     (rec__robot_iface__proxy__y
                                                     (us_split_fields17 b)))))
                          (= (to_rep10
                             (rec__robot_iface__proxy__yaw
                             (us_split_fields17 a))) (to_rep10
                                                     (rec__robot_iface__proxy__yaw
                                                     (us_split_fields17 b)))))
                          (= (bool_eq12
                             (rec__robot_iface__proxy__speed
                             (us_split_fields17 a))
                             (rec__robot_iface__proxy__speed
                             (us_split_fields17 b))) true))
                          (= (rec__robot_iface__proxy__goal_reached
                             (us_split_fields17 a)) (rec__robot_iface__proxy__goal_reached
                                                    (us_split_fields17 b))))
                     true false))

(declare-fun user_eq26 (us_rep10 us_rep10) Bool)

(declare-fun value__size13 () Int)

(declare-fun object__size13 (us_rep10) Int)

(declare-fun value__alignment13 () Int)

(declare-fun object__alignment13 (us_rep10) Int)

;; value__size_axiom
  (assert (<= 0 value__size13))

;; object__size_axiom
  (assert (forall ((a us_rep10)) (<= 0 (object__size13 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment13))

;; object__alignment_axiom
  (assert (forall ((a us_rep10)) (<= 0 (object__alignment13 a))))

(declare-fun robot_iface__proxy__robot_radius__first__bit () Int)

(declare-fun robot_iface__proxy__robot_radius__last__bit () Int)

(declare-fun robot_iface__proxy__robot_radius__position () Int)

;; robot_iface__proxy__robot_radius__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__robot_radius__first__bit))

;; robot_iface__proxy__robot_radius__last__bit_axiom
  (assert
  (< robot_iface__proxy__robot_radius__first__bit robot_iface__proxy__robot_radius__last__bit))

;; robot_iface__proxy__robot_radius__position_axiom
  (assert (<= 0 robot_iface__proxy__robot_radius__position))

(declare-fun robot_iface__proxy__min_gap_width__first__bit () Int)

(declare-fun robot_iface__proxy__min_gap_width__last__bit () Int)

(declare-fun robot_iface__proxy__min_gap_width__position () Int)

;; robot_iface__proxy__min_gap_width__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__min_gap_width__first__bit))

;; robot_iface__proxy__min_gap_width__last__bit_axiom
  (assert
  (< robot_iface__proxy__min_gap_width__first__bit robot_iface__proxy__min_gap_width__last__bit))

;; robot_iface__proxy__min_gap_width__position_axiom
  (assert (<= 0 robot_iface__proxy__min_gap_width__position))

(declare-fun robot_iface__proxy__obstacle_avoid_dist__first__bit () Int)

(declare-fun robot_iface__proxy__obstacle_avoid_dist__last__bit () Int)

(declare-fun robot_iface__proxy__obstacle_avoid_dist__position () Int)

;; robot_iface__proxy__obstacle_avoid_dist__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__obstacle_avoid_dist__first__bit))

;; robot_iface__proxy__obstacle_avoid_dist__last__bit_axiom
  (assert
  (< robot_iface__proxy__obstacle_avoid_dist__first__bit robot_iface__proxy__obstacle_avoid_dist__last__bit))

;; robot_iface__proxy__obstacle_avoid_dist__position_axiom
  (assert (<= 0 robot_iface__proxy__obstacle_avoid_dist__position))

(declare-fun robot_iface__proxy__max_speed__first__bit () Int)

(declare-fun robot_iface__proxy__max_speed__last__bit () Int)

(declare-fun robot_iface__proxy__max_speed__position () Int)

;; robot_iface__proxy__max_speed__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__max_speed__first__bit))

;; robot_iface__proxy__max_speed__last__bit_axiom
  (assert
  (< robot_iface__proxy__max_speed__first__bit robot_iface__proxy__max_speed__last__bit))

;; robot_iface__proxy__max_speed__position_axiom
  (assert (<= 0 robot_iface__proxy__max_speed__position))

(declare-fun robot_iface__proxy__max_turn_rate__first__bit () Int)

(declare-fun robot_iface__proxy__max_turn_rate__last__bit () Int)

(declare-fun robot_iface__proxy__max_turn_rate__position () Int)

;; robot_iface__proxy__max_turn_rate__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__max_turn_rate__first__bit))

;; robot_iface__proxy__max_turn_rate__last__bit_axiom
  (assert
  (< robot_iface__proxy__max_turn_rate__first__bit robot_iface__proxy__max_turn_rate__last__bit))

;; robot_iface__proxy__max_turn_rate__position_axiom
  (assert (<= 0 robot_iface__proxy__max_turn_rate__position))

(declare-fun robot_iface__proxy__goal_position_tol__first__bit () Int)

(declare-fun robot_iface__proxy__goal_position_tol__last__bit () Int)

(declare-fun robot_iface__proxy__goal_position_tol__position () Int)

;; robot_iface__proxy__goal_position_tol__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__goal_position_tol__first__bit))

;; robot_iface__proxy__goal_position_tol__last__bit_axiom
  (assert
  (< robot_iface__proxy__goal_position_tol__first__bit robot_iface__proxy__goal_position_tol__last__bit))

;; robot_iface__proxy__goal_position_tol__position_axiom
  (assert (<= 0 robot_iface__proxy__goal_position_tol__position))

(declare-fun robot_iface__proxy__goal_angle_tol__first__bit () Int)

(declare-fun robot_iface__proxy__goal_angle_tol__last__bit () Int)

(declare-fun robot_iface__proxy__goal_angle_tol__position () Int)

;; robot_iface__proxy__goal_angle_tol__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__goal_angle_tol__first__bit))

;; robot_iface__proxy__goal_angle_tol__last__bit_axiom
  (assert
  (< robot_iface__proxy__goal_angle_tol__first__bit robot_iface__proxy__goal_angle_tol__last__bit))

;; robot_iface__proxy__goal_angle_tol__position_axiom
  (assert (<= 0 robot_iface__proxy__goal_angle_tol__position))

(declare-fun robot_iface__proxy__goalx__first__bit () Int)

(declare-fun robot_iface__proxy__goalx__last__bit () Int)

(declare-fun robot_iface__proxy__goalx__position () Int)

;; robot_iface__proxy__goalx__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__goalx__first__bit))

;; robot_iface__proxy__goalx__last__bit_axiom
  (assert
  (< robot_iface__proxy__goalx__first__bit robot_iface__proxy__goalx__last__bit))

;; robot_iface__proxy__goalx__position_axiom
  (assert (<= 0 robot_iface__proxy__goalx__position))

(declare-fun robot_iface__proxy__goaly__first__bit () Int)

(declare-fun robot_iface__proxy__goaly__last__bit () Int)

(declare-fun robot_iface__proxy__goaly__position () Int)

;; robot_iface__proxy__goaly__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__goaly__first__bit))

;; robot_iface__proxy__goaly__last__bit_axiom
  (assert
  (< robot_iface__proxy__goaly__first__bit robot_iface__proxy__goaly__last__bit))

;; robot_iface__proxy__goaly__position_axiom
  (assert (<= 0 robot_iface__proxy__goaly__position))

(declare-fun robot_iface__proxy__goala__first__bit () Int)

(declare-fun robot_iface__proxy__goala__last__bit () Int)

(declare-fun robot_iface__proxy__goala__position () Int)

;; robot_iface__proxy__goala__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__goala__first__bit))

;; robot_iface__proxy__goala__last__bit_axiom
  (assert
  (< robot_iface__proxy__goala__first__bit robot_iface__proxy__goala__last__bit))

;; robot_iface__proxy__goala__position_axiom
  (assert (<= 0 robot_iface__proxy__goala__position))

(declare-fun robot_iface__proxy__scan_count__first__bit () Int)

(declare-fun robot_iface__proxy__scan_count__last__bit () Int)

(declare-fun robot_iface__proxy__scan_count__position () Int)

;; robot_iface__proxy__scan_count__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__scan_count__first__bit))

;; robot_iface__proxy__scan_count__last__bit_axiom
  (assert
  (< robot_iface__proxy__scan_count__first__bit robot_iface__proxy__scan_count__last__bit))

;; robot_iface__proxy__scan_count__position_axiom
  (assert (<= 0 robot_iface__proxy__scan_count__position))

(declare-fun robot_iface__proxy__scan_res__first__bit () Int)

(declare-fun robot_iface__proxy__scan_res__last__bit () Int)

(declare-fun robot_iface__proxy__scan_res__position () Int)

;; robot_iface__proxy__scan_res__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__scan_res__first__bit))

;; robot_iface__proxy__scan_res__last__bit_axiom
  (assert
  (< robot_iface__proxy__scan_res__first__bit robot_iface__proxy__scan_res__last__bit))

;; robot_iface__proxy__scan_res__position_axiom
  (assert (<= 0 robot_iface__proxy__scan_res__position))

(declare-fun robot_iface__proxy__max_range__first__bit () Int)

(declare-fun robot_iface__proxy__max_range__last__bit () Int)

(declare-fun robot_iface__proxy__max_range__position () Int)

;; robot_iface__proxy__max_range__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__max_range__first__bit))

;; robot_iface__proxy__max_range__last__bit_axiom
  (assert
  (< robot_iface__proxy__max_range__first__bit robot_iface__proxy__max_range__last__bit))

;; robot_iface__proxy__max_range__position_axiom
  (assert (<= 0 robot_iface__proxy__max_range__position))

(declare-fun robot_iface__proxy__scans__first__bit () Int)

(declare-fun robot_iface__proxy__scans__last__bit () Int)

(declare-fun robot_iface__proxy__scans__position () Int)

;; robot_iface__proxy__scans__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__scans__first__bit))

;; robot_iface__proxy__scans__last__bit_axiom
  (assert
  (< robot_iface__proxy__scans__first__bit robot_iface__proxy__scans__last__bit))

;; robot_iface__proxy__scans__position_axiom
  (assert (<= 0 robot_iface__proxy__scans__position))

(declare-fun robot_iface__proxy__x__first__bit () Int)

(declare-fun robot_iface__proxy__x__last__bit () Int)

(declare-fun robot_iface__proxy__x__position () Int)

;; robot_iface__proxy__x__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__x__first__bit))

;; robot_iface__proxy__x__last__bit_axiom
  (assert
  (< robot_iface__proxy__x__first__bit robot_iface__proxy__x__last__bit))

;; robot_iface__proxy__x__position_axiom
  (assert (<= 0 robot_iface__proxy__x__position))

(declare-fun robot_iface__proxy__y__first__bit () Int)

(declare-fun robot_iface__proxy__y__last__bit () Int)

(declare-fun robot_iface__proxy__y__position () Int)

;; robot_iface__proxy__y__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__y__first__bit))

;; robot_iface__proxy__y__last__bit_axiom
  (assert
  (< robot_iface__proxy__y__first__bit robot_iface__proxy__y__last__bit))

;; robot_iface__proxy__y__position_axiom
  (assert (<= 0 robot_iface__proxy__y__position))

(declare-fun robot_iface__proxy__yaw__first__bit () Int)

(declare-fun robot_iface__proxy__yaw__last__bit () Int)

(declare-fun robot_iface__proxy__yaw__position () Int)

;; robot_iface__proxy__yaw__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__yaw__first__bit))

;; robot_iface__proxy__yaw__last__bit_axiom
  (assert
  (< robot_iface__proxy__yaw__first__bit robot_iface__proxy__yaw__last__bit))

;; robot_iface__proxy__yaw__position_axiom
  (assert (<= 0 robot_iface__proxy__yaw__position))

(declare-fun robot_iface__proxy__speed__first__bit () Int)

(declare-fun robot_iface__proxy__speed__last__bit () Int)

(declare-fun robot_iface__proxy__speed__position () Int)

;; robot_iface__proxy__speed__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__speed__first__bit))

;; robot_iface__proxy__speed__last__bit_axiom
  (assert
  (< robot_iface__proxy__speed__first__bit robot_iface__proxy__speed__last__bit))

;; robot_iface__proxy__speed__position_axiom
  (assert (<= 0 robot_iface__proxy__speed__position))

(declare-fun robot_iface__proxy__goal_reached__first__bit () Int)

(declare-fun robot_iface__proxy__goal_reached__last__bit () Int)

(declare-fun robot_iface__proxy__goal_reached__position () Int)

;; robot_iface__proxy__goal_reached__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__goal_reached__first__bit))

;; robot_iface__proxy__goal_reached__last__bit_axiom
  (assert
  (< robot_iface__proxy__goal_reached__first__bit robot_iface__proxy__goal_reached__last__bit))

;; robot_iface__proxy__goal_reached__position_axiom
  (assert (<= 0 robot_iface__proxy__goal_reached__position))

(declare-fun dummy27 () us_rep10)

(declare-datatypes ()
((proxy__ref (mk_proxy__ref (proxy__content us_rep10)))))
(define-fun proxy__ref___projection ((a proxy__ref)) us_rep10 (proxy__content
                                                              a))

(declare-datatypes ()
((us_split_fields18
 (mk___split_fields9
 (rec__algorithm__laser_scan_data__first nonnegative_float)(rec__algorithm__laser_scan_data__second us_rep)))))
(define-fun us_split_fields_second__projection ((a us_split_fields18)) us_rep
  (rec__algorithm__laser_scan_data__second a))

(declare-datatypes ()
((us_split_fields__ref9
 (mk___split_fields__ref9 (us_split_fields__content9 us_split_fields18)))))
(define-fun us_split_fields__ref_11__projection ((a us_split_fields__ref9)) us_split_fields18
  (us_split_fields__content9 a))

(declare-datatypes ()
((us_rep11 (mk___rep9 (us_split_fields19 us_split_fields18)))))
(define-fun us_rep_16__projection ((a us_rep11)) us_split_fields18 (us_split_fields19
                                                                   a))

(define-fun bool_eq14 ((a us_rep11)
  (b us_rep11)) Bool (ite (and
                          (= (to_rep9
                             (rec__algorithm__laser_scan_data__first
                             (us_split_fields19 a))) (to_rep9
                                                     (rec__algorithm__laser_scan_data__first
                                                     (us_split_fields19 b))))
                          (= (bool_eq2
                             (rec__algorithm__laser_scan_data__second
                             (us_split_fields19 a))
                             (rec__algorithm__laser_scan_data__second
                             (us_split_fields19 b))) true))
                     true false))

(declare-fun user_eq27 (us_rep11 us_rep11) Bool)

(declare-fun value__size14 () Int)

(declare-fun object__size14 (us_rep11) Int)

(declare-fun value__alignment14 () Int)

(declare-fun object__alignment14 (us_rep11) Int)

;; value__size_axiom
  (assert (<= 0 value__size14))

;; object__size_axiom
  (assert (forall ((a us_rep11)) (<= 0 (object__size14 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment14))

;; object__alignment_axiom
  (assert (forall ((a us_rep11)) (<= 0 (object__alignment14 a))))

(declare-fun algorithm__laser_scan_data__first__first__bit () Int)

(declare-fun algorithm__laser_scan_data__first__last__bit () Int)

(declare-fun algorithm__laser_scan_data__first__position () Int)

;; algorithm__laser_scan_data__first__first__bit_axiom
  (assert (<= 0 algorithm__laser_scan_data__first__first__bit))

;; algorithm__laser_scan_data__first__last__bit_axiom
  (assert
  (< algorithm__laser_scan_data__first__first__bit algorithm__laser_scan_data__first__last__bit))

;; algorithm__laser_scan_data__first__position_axiom
  (assert (<= 0 algorithm__laser_scan_data__first__position))

(declare-fun algorithm__laser_scan_data__second__first__bit () Int)

(declare-fun algorithm__laser_scan_data__second__last__bit () Int)

(declare-fun algorithm__laser_scan_data__second__position () Int)

;; algorithm__laser_scan_data__second__first__bit_axiom
  (assert (<= 0 algorithm__laser_scan_data__second__first__bit))

;; algorithm__laser_scan_data__second__last__bit_axiom
  (assert
  (< algorithm__laser_scan_data__second__first__bit algorithm__laser_scan_data__second__last__bit))

;; algorithm__laser_scan_data__second__position_axiom
  (assert (<= 0 algorithm__laser_scan_data__second__position))

(declare-fun dummy28 () us_rep11)

(declare-datatypes ()
((laser_scan_data__ref
 (mk_laser_scan_data__ref (laser_scan_data__content us_rep11)))))
(define-fun laser_scan_data__ref___projection ((a laser_scan_data__ref)) us_rep11
  (laser_scan_data__content a))

(declare-datatypes ()
((map__ref3 (mk_map__ref3 (map__content3 (Array Int us_rep11))))))
(declare-fun slide2 ((Array Int us_rep11) Int Int) (Array Int us_rep11))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep11)))
  (forall ((first3 Int))
  (! (= (slide2 a first3 first3) a) :pattern ((slide2 a first3 first3)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep11)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide2 a old_first new_first) i)) ))))))

(declare-fun concat3 ((Array Int us_rep11) Int Int (Array Int us_rep11) Int
  Int) (Array Int us_rep11))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep11)) (b (Array Int us_rep11)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat3 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat3 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat3 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton3 (us_rep11 Int) (Array Int us_rep11))

;; singleton_def
  (assert
  (forall ((v us_rep11))
  (forall ((i Int))
  (! (= (select (singleton3 v i) i) v) :pattern ((select (singleton3 v i) i)) ))))

(define-fun bool_eq15 ((a (Array Int us_rep11)) (a__first Int) (a__last Int)
  (b (Array Int us_rep11)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_133 Int))
                           (=>
                           (and (<= a__first temp___idx_133)
                           (<= temp___idx_133 a__last))
                           (= (bool_eq14 (select a temp___idx_133)
                              (select b (+ (- b__first a__first) temp___idx_133))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep11)) (b (Array Int us_rep11)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq15 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_133 Int))
  (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last))
  (= (bool_eq14 (select a temp___idx_133)
     (select b (+ (- b__first a__first) temp___idx_133))) true))))))))

(declare-fun dummy29 () (Array Int us_rep11))

(declare-fun value__size15 () Int)

(declare-fun object__size15 ((Array Int us_rep11)) Int)

(declare-fun value__component__size2 () Int)

(declare-fun object__component__size2 ((Array Int us_rep11)) Int)

(declare-fun value__alignment15 () Int)

(declare-fun object__alignment15 ((Array Int us_rep11)) Int)

;; value__size_axiom
  (assert (<= 0 value__size15))

;; object__size_axiom
  (assert (forall ((a (Array Int us_rep11))) (<= 0 (object__size15 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size2))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int us_rep11))) (<= 0 (object__component__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment15))

;; object__alignment_axiom
  (assert (forall ((a (Array Int us_rep11))) (<= 0 (object__alignment15 a))))

(declare-fun user_eq28 ((Array Int us_rep11) (Array Int us_rep11)) Bool)

(declare-datatypes ()
((us_split_fields20
 (mk___split_fields10
 (rec__algorithm__controller__robot us_rep10)(rec__algorithm__controller__laserscan (Array Int us_rep11))(rec__algorithm__controller__gapvec us_rep5)(rec__algorithm__controller__obsavoiddelta float)(rec__algorithm__controller__driveangle us_rep)))))
(define-fun us_split_fields_robot__projection ((a us_split_fields20)) us_rep10
  (rec__algorithm__controller__robot a))

(define-fun us_split_fields_laserScan__projection ((a us_split_fields20)) (Array Int us_rep11)
  (rec__algorithm__controller__laserscan a))

(define-fun us_split_fields_gapVec__projection ((a us_split_fields20)) us_rep5
  (rec__algorithm__controller__gapvec a))

(define-fun us_split_fields_driveAngle__projection ((a us_split_fields20)) us_rep
  (rec__algorithm__controller__driveangle a))

(declare-datatypes ()
((us_split_fields__ref10
 (mk___split_fields__ref10 (us_split_fields__content10 us_split_fields20)))))
(define-fun us_split_fields__ref_12__projection ((a us_split_fields__ref10)) us_split_fields20
  (us_split_fields__content10 a))

(declare-datatypes ()
((us_rep12 (mk___rep10 (us_split_fields21 us_split_fields20)))))
(define-fun us_rep_17__projection ((a us_rep12)) us_split_fields20 (us_split_fields21
                                                                   a))

(define-fun bool_eq16 ((a us_rep12)
  (b us_rep12)) Bool (ite (and
                          (and
                          (and
                          (and
                          (= (bool_eq13
                             (rec__algorithm__controller__robot
                             (us_split_fields21 a))
                             (rec__algorithm__controller__robot
                             (us_split_fields21 b))) true)
                          (= (bool_eq15
                             (rec__algorithm__controller__laserscan
                             (us_split_fields21 a)) 1 1000
                             (rec__algorithm__controller__laserscan
                             (us_split_fields21 b)) 1 1000) true))
                          (= (bool_eq7
                             (rec__algorithm__controller__gapvec
                             (us_split_fields21 a))
                             (rec__algorithm__controller__gapvec
                             (us_split_fields21 b))) true))
                          (= (to_rep2
                             (rec__algorithm__controller__obsavoiddelta
                             (us_split_fields21 a))) (to_rep2
                                                     (rec__algorithm__controller__obsavoiddelta
                                                     (us_split_fields21 b)))))
                          (= (bool_eq2
                             (rec__algorithm__controller__driveangle
                             (us_split_fields21 a))
                             (rec__algorithm__controller__driveangle
                             (us_split_fields21 b))) true))
                     true false))

(declare-fun user_eq29 (us_rep12 us_rep12) Bool)

(declare-fun value__size16 () Int)

(declare-fun object__size16 (us_rep12) Int)

(declare-fun value__alignment16 () Int)

(declare-fun object__alignment16 (us_rep12) Int)

;; value__size_axiom
  (assert (<= 0 value__size16))

;; object__size_axiom
  (assert (forall ((a us_rep12)) (<= 0 (object__size16 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment16))

;; object__alignment_axiom
  (assert (forall ((a us_rep12)) (<= 0 (object__alignment16 a))))

(declare-fun algorithm__controller__robot__first__bit () Int)

(declare-fun algorithm__controller__robot__last__bit () Int)

(declare-fun algorithm__controller__robot__position () Int)

;; algorithm__controller__robot__first__bit_axiom
  (assert (<= 0 algorithm__controller__robot__first__bit))

;; algorithm__controller__robot__last__bit_axiom
  (assert
  (< algorithm__controller__robot__first__bit algorithm__controller__robot__last__bit))

;; algorithm__controller__robot__position_axiom
  (assert (<= 0 algorithm__controller__robot__position))

(declare-fun algorithm__controller__laserscan__first__bit () Int)

(declare-fun algorithm__controller__laserscan__last__bit () Int)

(declare-fun algorithm__controller__laserscan__position () Int)

;; algorithm__controller__laserscan__first__bit_axiom
  (assert (<= 0 algorithm__controller__laserscan__first__bit))

;; algorithm__controller__laserscan__last__bit_axiom
  (assert
  (< algorithm__controller__laserscan__first__bit algorithm__controller__laserscan__last__bit))

;; algorithm__controller__laserscan__position_axiom
  (assert (<= 0 algorithm__controller__laserscan__position))

(declare-fun algorithm__controller__gapvec__first__bit () Int)

(declare-fun algorithm__controller__gapvec__last__bit () Int)

(declare-fun algorithm__controller__gapvec__position () Int)

;; algorithm__controller__gapvec__first__bit_axiom
  (assert (<= 0 algorithm__controller__gapvec__first__bit))

;; algorithm__controller__gapvec__last__bit_axiom
  (assert
  (< algorithm__controller__gapvec__first__bit algorithm__controller__gapvec__last__bit))

;; algorithm__controller__gapvec__position_axiom
  (assert (<= 0 algorithm__controller__gapvec__position))

(declare-fun algorithm__controller__obsavoiddelta__first__bit () Int)

(declare-fun algorithm__controller__obsavoiddelta__last__bit () Int)

(declare-fun algorithm__controller__obsavoiddelta__position () Int)

;; algorithm__controller__obsavoiddelta__first__bit_axiom
  (assert (<= 0 algorithm__controller__obsavoiddelta__first__bit))

;; algorithm__controller__obsavoiddelta__last__bit_axiom
  (assert
  (< algorithm__controller__obsavoiddelta__first__bit algorithm__controller__obsavoiddelta__last__bit))

;; algorithm__controller__obsavoiddelta__position_axiom
  (assert (<= 0 algorithm__controller__obsavoiddelta__position))

(declare-fun algorithm__controller__driveangle__first__bit () Int)

(declare-fun algorithm__controller__driveangle__last__bit () Int)

(declare-fun algorithm__controller__driveangle__position () Int)

;; algorithm__controller__driveangle__first__bit_axiom
  (assert (<= 0 algorithm__controller__driveangle__first__bit))

;; algorithm__controller__driveangle__last__bit_axiom
  (assert
  (< algorithm__controller__driveangle__first__bit algorithm__controller__driveangle__last__bit))

;; algorithm__controller__driveangle__position_axiom
  (assert (<= 0 algorithm__controller__driveangle__position))

(declare-fun dummy30 () us_rep12)

(declare-datatypes ()
((controller__ref (mk_controller__ref (controller__content us_rep12)))))
(define-fun controller__ref___projection ((a controller__ref)) us_rep12
  (controller__content a))

(declare-fun null_angle () us_rep)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun is_empty (us_rep5) Bool)

(declare-fun is_empty__function_guard (Bool us_rep5) Bool)

(define-fun in_range15 ((rec__robot_iface__speed_option__opt1 Int)
  (a us_rep9)) Bool (= rec__robot_iface__speed_option__opt1 (to_rep11
                                                            (rec__robot_iface__speed_option__opt
                                                            (us_split_discrs5
                                                            a)))))

(declare-fun value__size17 () Int)

(declare-fun object__size17 (us_rep9) Int)

(declare-fun value__alignment17 () Int)

(declare-fun object__alignment17 (us_rep9) Int)

;; value__size_axiom
  (assert (<= 0 value__size17))

;; object__size_axiom
  (assert (forall ((a us_rep9)) (<= 0 (object__size17 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment17))

;; object__alignment_axiom
  (assert (forall ((a us_rep9)) (<= 0 (object__alignment17 a))))

(declare-fun robot_iface__speed_option__opt__first__bit1 () Int)

(declare-fun robot_iface__speed_option__opt__last__bit1 () Int)

(declare-fun robot_iface__speed_option__opt__position1 () Int)

;; robot_iface__speed_option__opt__first__bit_axiom
  (assert (<= 0 robot_iface__speed_option__opt__first__bit1))

;; robot_iface__speed_option__opt__last__bit_axiom
  (assert
  (< robot_iface__speed_option__opt__first__bit1 robot_iface__speed_option__opt__last__bit1))

;; robot_iface__speed_option__opt__position_axiom
  (assert (<= 0 robot_iface__speed_option__opt__position1))

(declare-fun robot_iface__speed_option__modulus__first__bit1 () Int)

(declare-fun robot_iface__speed_option__modulus__last__bit1 () Int)

(declare-fun robot_iface__speed_option__modulus__position1 () Int)

;; robot_iface__speed_option__modulus__first__bit_axiom
  (assert (<= 0 robot_iface__speed_option__modulus__first__bit1))

;; robot_iface__speed_option__modulus__last__bit_axiom
  (assert
  (< robot_iface__speed_option__modulus__first__bit1 robot_iface__speed_option__modulus__last__bit1))

;; robot_iface__speed_option__modulus__position_axiom
  (assert (<= 0 robot_iface__speed_option__modulus__position1))

(declare-fun robot_iface__speed_option__angle__first__bit1 () Int)

(declare-fun robot_iface__speed_option__angle__last__bit1 () Int)

(declare-fun robot_iface__speed_option__angle__position1 () Int)

;; robot_iface__speed_option__angle__first__bit_axiom
  (assert (<= 0 robot_iface__speed_option__angle__first__bit1))

;; robot_iface__speed_option__angle__last__bit_axiom
  (assert
  (< robot_iface__speed_option__angle__first__bit1 robot_iface__speed_option__angle__last__bit1))

;; robot_iface__speed_option__angle__position_axiom
  (assert (<= 0 robot_iface__speed_option__angle__position1))

(declare-fun dummy31 () us_rep9)

(declare-datatypes ()
((t252s__ref (mk_t252s__ref (t252s__content us_rep9)))))
(define-fun t252s__ref___projection ((a t252s__ref)) us_rep9 (t252s__content
                                                             a))

(declare-fun temp___614 (Float32) (Array Int nonnegative_float))

;; def_axiom
  (assert
  (forall ((temp___616 Float32))
  (forall ((temp___617 Int))
  (= (select (temp___614 temp___616) temp___617) (of_rep9 temp___616)))))

(declare-fun temp___618 (us_rep11) (Array Int us_rep11))

;; def_axiom
  (assert
  (forall ((temp___620 us_rep11))
  (forall ((temp___621 Int))
  (= (select (temp___618 temp___620) temp___621) temp___620))))

(define-fun dynamic_invariant4 ((temp___expr_607 us_rep12)
  (temp___is_init_604 Bool) (temp___skip_constant_605 Bool)
  (temp___do_toplevel_606 Bool)) Bool (and
                                      (= (attr__constrained1
                                         (rec__robot_iface__proxy__speed
                                         (us_split_fields17
                                         (rec__algorithm__controller__robot
                                         (us_split_fields21 temp___expr_607))))) false)
                                      (in_range10 1000
                                      (rec__algorithm__controller__gapvec
                                      (us_split_fields21 temp___expr_607)))))

(define-fun default_initial_assumption1 ((temp___expr_612 us_rep12)
  (temp___skip_top_level_613 Bool)) Bool (and
                                         (and
                                         (and
                                         (and
                                         (= (rec__algorithm__controller__robot
                                            (us_split_fields21
                                            temp___expr_612)) (mk___rep8
                                                              (mk___split_fields8
                                                              (of_rep8
                                                              (fp #b0 #b00000000 #b00000000000000000000000))
                                                              (of_rep8
                                                              (fp #b0 #b00000000 #b00000000000000000000000))
                                                              (of_rep8
                                                              (fp #b0 #b00000000 #b00000000000000000000000))
                                                              (of_rep8
                                                              (fp #b0 #b00000000 #b00000000000000000000000))
                                                              (of_rep8
                                                              (fp #b0 #b00000000 #b00000000000000000000000))
                                                              (of_rep9
                                                              (fp #b0 #b00000000 #b00000000000000000000000))
                                                              (of_rep9
                                                              (fp #b0 #b00000000 #b00000000000000000000000))
                                                              (of_rep2
                                                              (fp #b0 #b00000000 #b00000000000000000000000))
                                                              (of_rep2
                                                              (fp #b0 #b00000000 #b00000000000000000000000))
                                                              (of_rep2
                                                              (fp #b0 #b00000000 #b00000000000000000000000))
                                                              (of_rep7 0)
                                                              (of_rep8
                                                              (fp #b0 #b00000000 #b00000000000000000000000))
                                                              (of_rep8
                                                              (fp #b0 #b00000000 #b00000000000000000000000))
                                                              (temp___614
                                                              (fp #b0 #b00000000 #b00000000000000000000000))
                                                              (of_rep10
                                                              (fp #b0 #b00000000 #b00000000000000000000000))
                                                              (of_rep10
                                                              (fp #b0 #b00000000 #b00000000000000000000000))
                                                              (of_rep10
                                                              (fp #b0 #b00000000 #b00000000000000000000000))
                                                              (let ((usq_
                                                              (mk___rep7
                                                              (mk___split_discrs2
                                                              (of_rep11 0))
                                                              (mk___split_fields7
                                                              dummy4
                                                              dummy4) true)))
                                                              (mk___rep7
                                                              (us_split_discrs5
                                                              usq_)
                                                              (us_split_fields15
                                                              usq_) false))
                                                              (of_int1 0))))
                                         (= (rec__algorithm__controller__laserscan
                                            (us_split_fields21
                                            temp___expr_612)) (temp___618
                                                              (mk___rep9
                                                              (mk___split_fields9
                                                              (of_rep9
                                                              (fp #b0 #b00000000 #b00000000000000000000000))
                                                              null_angle)))))
                                         (and
                                         (= (to_rep5
                                            (rec__algorithm__gap_vectors__list__capacity
                                            (us_split_discrs3
                                            (rec__algorithm__controller__gapvec
                                            (us_split_fields21
                                            temp___expr_612))))) 1000)
                                         (= (is_empty
                                            (rec__algorithm__controller__gapvec
                                            (us_split_fields21
                                            temp___expr_612))) true)))
                                         (= (to_rep2
                                            (rec__algorithm__controller__obsavoiddelta
                                            (us_split_fields21
                                            temp___expr_612))) (fp #b0 #b00000000 #b00000000000000000000000)))
                                         (= (rec__algorithm__controller__driveangle
                                            (us_split_fields21
                                            temp___expr_612)) null_angle)))

(declare-fun isrisinggapsafe (us_rep12 us_rep2) Bool)

(declare-fun isrisinggapsafe__function_guard (Bool us_rep12 us_rep2) Bool)

(declare-fun this () us_rep12)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun disttogoal () us_rep1)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun existing_gap_id_LAST () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-datatypes ()
((us_split_discrs6
 (mk___split_discrs3
 (rec__algorithm__findbestvalley__gap_id_pair__opt option)))))
(define-fun us_split_discrs_4__projection ((a us_split_discrs6)) option
  (rec__algorithm__findbestvalley__gap_id_pair__opt a))

(declare-datatypes ()
((us_split_discrs__ref3
 (mk___split_discrs__ref3 (us_split_discrs__content3 us_split_discrs6)))))
(define-fun us_split_discrs__ref_4__projection ((a us_split_discrs__ref3)) us_split_discrs6
  (us_split_discrs__content3 a))

(declare-datatypes ()
((us_split_fields22
 (mk___split_fields11
 (rec__algorithm__findbestvalley__gap_id_pair__rising us_rep6)(rec__algorithm__findbestvalley__gap_id_pair__other us_rep6)))))
(define-fun us_split_fields_rising__projection ((a us_split_fields22)) us_rep6
  (rec__algorithm__findbestvalley__gap_id_pair__rising a))

(define-fun us_split_fields_other__projection ((a us_split_fields22)) us_rep6
  (rec__algorithm__findbestvalley__gap_id_pair__other a))

(declare-datatypes ()
((us_split_fields__ref11
 (mk___split_fields__ref11 (us_split_fields__content11 us_split_fields22)))))
(define-fun us_split_fields__ref_13__projection ((a us_split_fields__ref11)) us_split_fields22
  (us_split_fields__content11 a))

(declare-datatypes ()
((us_rep13
 (mk___rep11
 (us_split_discrs7 us_split_discrs6)(us_split_fields23 us_split_fields22)(attr__constrained2 Bool)))))
(define-fun us_rep_18__projection ((a us_rep13)) us_split_discrs6 (us_split_discrs7
                                                                  a))

(define-fun us_rep_19__projection ((a us_rep13)) us_split_fields22 (us_split_fields23
                                                                   a))

(define-fun us_rep_20__projection ((a us_rep13)) Bool (attr__constrained2 a))

(define-fun algorithm__findbestvalley__gap_id_pair__rising__pred ((a us_rep13)) Bool (=
  (to_rep6
  (rec__algorithm__findbestvalley__gap_id_pair__opt (us_split_discrs7 a))) 1))

(define-fun algorithm__findbestvalley__gap_id_pair__other__pred ((a us_rep13)) Bool (=
  (to_rep6
  (rec__algorithm__findbestvalley__gap_id_pair__opt (us_split_discrs7 a))) 1))

(define-fun bool_eq17 ((a us_rep13)
  (b us_rep13)) Bool (ite (and
                          (and
                          (= (to_rep6
                             (rec__algorithm__findbestvalley__gap_id_pair__opt
                             (us_split_discrs7 a))) (to_rep6
                                                    (rec__algorithm__findbestvalley__gap_id_pair__opt
                                                    (us_split_discrs7 b))))
                          (=>
                          (algorithm__findbestvalley__gap_id_pair__rising__pred
                          a)
                          (= (bool_eq8
                             (rec__algorithm__findbestvalley__gap_id_pair__rising
                             (us_split_fields23 a))
                             (rec__algorithm__findbestvalley__gap_id_pair__rising
                             (us_split_fields23 b))) true)))
                          (=>
                          (algorithm__findbestvalley__gap_id_pair__other__pred
                          a)
                          (= (bool_eq8
                             (rec__algorithm__findbestvalley__gap_id_pair__other
                             (us_split_fields23 a))
                             (rec__algorithm__findbestvalley__gap_id_pair__other
                             (us_split_fields23 b))) true)))
                     true false))

(declare-fun user_eq30 (us_rep13 us_rep13) Bool)

(declare-fun value__size18 () Int)

(declare-fun object__size18 (us_rep13) Int)

(declare-fun value__alignment18 () Int)

(declare-fun object__alignment18 (us_rep13) Int)

;; value__size_axiom
  (assert (<= 0 value__size18))

;; object__size_axiom
  (assert (forall ((a us_rep13)) (<= 0 (object__size18 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment18))

;; object__alignment_axiom
  (assert (forall ((a us_rep13)) (<= 0 (object__alignment18 a))))

(declare-fun algorithm__findbestvalley__gap_id_pair__opt__first__bit () Int)

(declare-fun algorithm__findbestvalley__gap_id_pair__opt__last__bit () Int)

(declare-fun algorithm__findbestvalley__gap_id_pair__opt__position () Int)

;; algorithm__findbestvalley__gap_id_pair__opt__first__bit_axiom
  (assert (<= 0 algorithm__findbestvalley__gap_id_pair__opt__first__bit))

;; algorithm__findbestvalley__gap_id_pair__opt__last__bit_axiom
  (assert
  (< algorithm__findbestvalley__gap_id_pair__opt__first__bit algorithm__findbestvalley__gap_id_pair__opt__last__bit))

;; algorithm__findbestvalley__gap_id_pair__opt__position_axiom
  (assert (<= 0 algorithm__findbestvalley__gap_id_pair__opt__position))

(declare-fun algorithm__findbestvalley__gap_id_pair__rising__first__bit () Int)

(declare-fun algorithm__findbestvalley__gap_id_pair__rising__last__bit () Int)

(declare-fun algorithm__findbestvalley__gap_id_pair__rising__position () Int)

;; algorithm__findbestvalley__gap_id_pair__rising__first__bit_axiom
  (assert (<= 0 algorithm__findbestvalley__gap_id_pair__rising__first__bit))

;; algorithm__findbestvalley__gap_id_pair__rising__last__bit_axiom
  (assert
  (< algorithm__findbestvalley__gap_id_pair__rising__first__bit algorithm__findbestvalley__gap_id_pair__rising__last__bit))

;; algorithm__findbestvalley__gap_id_pair__rising__position_axiom
  (assert (<= 0 algorithm__findbestvalley__gap_id_pair__rising__position))

(declare-fun algorithm__findbestvalley__gap_id_pair__other__first__bit () Int)

(declare-fun algorithm__findbestvalley__gap_id_pair__other__last__bit () Int)

(declare-fun algorithm__findbestvalley__gap_id_pair__other__position () Int)

;; algorithm__findbestvalley__gap_id_pair__other__first__bit_axiom
  (assert (<= 0 algorithm__findbestvalley__gap_id_pair__other__first__bit))

;; algorithm__findbestvalley__gap_id_pair__other__last__bit_axiom
  (assert
  (< algorithm__findbestvalley__gap_id_pair__other__first__bit algorithm__findbestvalley__gap_id_pair__other__last__bit))

;; algorithm__findbestvalley__gap_id_pair__other__position_axiom
  (assert (<= 0 algorithm__findbestvalley__gap_id_pair__other__position))

(declare-fun dummy32 () us_rep13)

(declare-datatypes ()
((gap_id_pair__ref (mk_gap_id_pair__ref (gap_id_pair__content us_rep13)))))
(define-fun gap_id_pair__ref___projection ((a gap_id_pair__ref)) us_rep13
  (gap_id_pair__content a))

(define-fun default_initial_assumption2 ((temp___expr_671 us_rep13)
  (temp___skip_top_level_672 Bool)) Bool (and
                                         (= (attr__constrained2
                                            temp___expr_671) false)
                                         (and
                                         (and
                                         (= (to_rep6
                                            (rec__algorithm__findbestvalley__gap_id_pair__opt
                                            (us_split_discrs7
                                            temp___expr_671))) 0)
                                         (=>
                                         (algorithm__findbestvalley__gap_id_pair__rising__pred
                                         temp___expr_671)
                                         (= (to_rep5
                                            (rec__algorithm__gap_vectors__cursor__node
                                            (us_split_fields13
                                            (rec__algorithm__findbestvalley__gap_id_pair__rising
                                            (us_split_fields23
                                            temp___expr_671))))) 0)))
                                         (=>
                                         (algorithm__findbestvalley__gap_id_pair__other__pred
                                         temp___expr_671)
                                         (= (to_rep5
                                            (rec__algorithm__gap_vectors__cursor__node
                                            (us_split_fields13
                                            (rec__algorithm__findbestvalley__gap_id_pair__other
                                            (us_split_fields23
                                            temp___expr_671))))) 0)))))

(define-fun in_range16 ((rec__algorithm__findbestvalley__gap_id_pair__opt1 Int)
  (a us_rep13)) Bool (= rec__algorithm__findbestvalley__gap_id_pair__opt1
  (to_rep6
  (rec__algorithm__findbestvalley__gap_id_pair__opt (us_split_discrs7 a)))))

(declare-fun value__size19 () Int)

(declare-fun object__size19 (us_rep13) Int)

(declare-fun value__alignment19 () Int)

(declare-fun object__alignment19 (us_rep13) Int)

;; value__size_axiom
  (assert (<= 0 value__size19))

;; object__size_axiom
  (assert (forall ((a us_rep13)) (<= 0 (object__size19 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment19))

;; object__alignment_axiom
  (assert (forall ((a us_rep13)) (<= 0 (object__alignment19 a))))

(declare-fun algorithm__findbestvalley__gap_id_pair__opt__first__bit1 () Int)

(declare-fun algorithm__findbestvalley__gap_id_pair__opt__last__bit1 () Int)

(declare-fun algorithm__findbestvalley__gap_id_pair__opt__position1 () Int)

;; algorithm__findbestvalley__gap_id_pair__opt__first__bit_axiom
  (assert (<= 0 algorithm__findbestvalley__gap_id_pair__opt__first__bit1))

;; algorithm__findbestvalley__gap_id_pair__opt__last__bit_axiom
  (assert
  (< algorithm__findbestvalley__gap_id_pair__opt__first__bit1 algorithm__findbestvalley__gap_id_pair__opt__last__bit1))

;; algorithm__findbestvalley__gap_id_pair__opt__position_axiom
  (assert (<= 0 algorithm__findbestvalley__gap_id_pair__opt__position1))

(declare-fun algorithm__findbestvalley__gap_id_pair__rising__first__bit1 () Int)

(declare-fun algorithm__findbestvalley__gap_id_pair__rising__last__bit1 () Int)

(declare-fun algorithm__findbestvalley__gap_id_pair__rising__position1 () Int)

;; algorithm__findbestvalley__gap_id_pair__rising__first__bit_axiom
  (assert (<= 0 algorithm__findbestvalley__gap_id_pair__rising__first__bit1))

;; algorithm__findbestvalley__gap_id_pair__rising__last__bit_axiom
  (assert
  (< algorithm__findbestvalley__gap_id_pair__rising__first__bit1 algorithm__findbestvalley__gap_id_pair__rising__last__bit1))

;; algorithm__findbestvalley__gap_id_pair__rising__position_axiom
  (assert (<= 0 algorithm__findbestvalley__gap_id_pair__rising__position1))

(declare-fun algorithm__findbestvalley__gap_id_pair__other__first__bit1 () Int)

(declare-fun algorithm__findbestvalley__gap_id_pair__other__last__bit1 () Int)

(declare-fun algorithm__findbestvalley__gap_id_pair__other__position1 () Int)

;; algorithm__findbestvalley__gap_id_pair__other__first__bit_axiom
  (assert (<= 0 algorithm__findbestvalley__gap_id_pair__other__first__bit1))

;; algorithm__findbestvalley__gap_id_pair__other__last__bit_axiom
  (assert
  (< algorithm__findbestvalley__gap_id_pair__other__first__bit1 algorithm__findbestvalley__gap_id_pair__other__last__bit1))

;; algorithm__findbestvalley__gap_id_pair__other__position_axiom
  (assert (<= 0 algorithm__findbestvalley__gap_id_pair__other__position1))

(declare-fun dummy33 () us_rep13)

(declare-datatypes () ((t42b__ref (mk_t42b__ref (t42b__content us_rep13)))))
(define-fun t42b__ref___projection ((a t42b__ref)) us_rep13 (t42b__content a))

(declare-fun best_valley_ids__attr__constrained () Bool)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS7 () Int)

(declare-fun il () us_rep6)

(declare-fun attr__ATTRIBUTE_ADDRESS8 () Int)

(define-fun in_range17 ((rec__algorithm__findbestvalley__gap_id_pair__opt1 Int)
  (a us_rep13)) Bool (= rec__algorithm__findbestvalley__gap_id_pair__opt1
  (to_rep6
  (rec__algorithm__findbestvalley__gap_id_pair__opt (us_split_discrs7 a)))))

(declare-fun value__size20 () Int)

(declare-fun object__size20 (us_rep13) Int)

(declare-fun value__alignment20 () Int)

(declare-fun object__alignment20 (us_rep13) Int)

;; value__size_axiom
  (assert (<= 0 value__size20))

;; object__size_axiom
  (assert (forall ((a us_rep13)) (<= 0 (object__size20 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment20))

;; object__alignment_axiom
  (assert (forall ((a us_rep13)) (<= 0 (object__alignment20 a))))

(declare-fun algorithm__findbestvalley__gap_id_pair__opt__first__bit2 () Int)

(declare-fun algorithm__findbestvalley__gap_id_pair__opt__last__bit2 () Int)

(declare-fun algorithm__findbestvalley__gap_id_pair__opt__position2 () Int)

;; algorithm__findbestvalley__gap_id_pair__opt__first__bit_axiom
  (assert (<= 0 algorithm__findbestvalley__gap_id_pair__opt__first__bit2))

;; algorithm__findbestvalley__gap_id_pair__opt__last__bit_axiom
  (assert
  (< algorithm__findbestvalley__gap_id_pair__opt__first__bit2 algorithm__findbestvalley__gap_id_pair__opt__last__bit2))

;; algorithm__findbestvalley__gap_id_pair__opt__position_axiom
  (assert (<= 0 algorithm__findbestvalley__gap_id_pair__opt__position2))

(declare-fun algorithm__findbestvalley__gap_id_pair__rising__first__bit2 () Int)

(declare-fun algorithm__findbestvalley__gap_id_pair__rising__last__bit2 () Int)

(declare-fun algorithm__findbestvalley__gap_id_pair__rising__position2 () Int)

;; algorithm__findbestvalley__gap_id_pair__rising__first__bit_axiom
  (assert (<= 0 algorithm__findbestvalley__gap_id_pair__rising__first__bit2))

;; algorithm__findbestvalley__gap_id_pair__rising__last__bit_axiom
  (assert
  (< algorithm__findbestvalley__gap_id_pair__rising__first__bit2 algorithm__findbestvalley__gap_id_pair__rising__last__bit2))

;; algorithm__findbestvalley__gap_id_pair__rising__position_axiom
  (assert (<= 0 algorithm__findbestvalley__gap_id_pair__rising__position2))

(declare-fun algorithm__findbestvalley__gap_id_pair__other__first__bit2 () Int)

(declare-fun algorithm__findbestvalley__gap_id_pair__other__last__bit2 () Int)

(declare-fun algorithm__findbestvalley__gap_id_pair__other__position2 () Int)

;; algorithm__findbestvalley__gap_id_pair__other__first__bit_axiom
  (assert (<= 0 algorithm__findbestvalley__gap_id_pair__other__first__bit2))

;; algorithm__findbestvalley__gap_id_pair__other__last__bit_axiom
  (assert
  (< algorithm__findbestvalley__gap_id_pair__other__first__bit2 algorithm__findbestvalley__gap_id_pair__other__last__bit2))

;; algorithm__findbestvalley__gap_id_pair__other__position_axiom
  (assert (<= 0 algorithm__findbestvalley__gap_id_pair__other__position2))

(declare-fun dummy34 () us_rep13)

(declare-datatypes () ((t43b__ref (mk_t43b__ref (t43b__content us_rep13)))))
(define-fun t43b__ref___projection ((a t43b__ref)) us_rep13 (t43b__content a))

(declare-fun candidate_valley_ids__attr__constrained () Bool)

(declare-fun attr__ATTRIBUTE_ADDRESS9 () Int)

(define-fun in_range18 ((rec__algorithm__findbestvalley__gap_id_pair__opt1 Int)
  (a us_rep13)) Bool (= rec__algorithm__findbestvalley__gap_id_pair__opt1
  (to_rep6
  (rec__algorithm__findbestvalley__gap_id_pair__opt (us_split_discrs7 a)))))

(declare-fun value__size21 () Int)

(declare-fun object__size21 (us_rep13) Int)

(declare-fun value__alignment21 () Int)

(declare-fun object__alignment21 (us_rep13) Int)

;; value__size_axiom
  (assert (<= 0 value__size21))

;; object__size_axiom
  (assert (forall ((a us_rep13)) (<= 0 (object__size21 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment21))

;; object__alignment_axiom
  (assert (forall ((a us_rep13)) (<= 0 (object__alignment21 a))))

(declare-fun algorithm__findbestvalley__gap_id_pair__opt__first__bit3 () Int)

(declare-fun algorithm__findbestvalley__gap_id_pair__opt__last__bit3 () Int)

(declare-fun algorithm__findbestvalley__gap_id_pair__opt__position3 () Int)

;; algorithm__findbestvalley__gap_id_pair__opt__first__bit_axiom
  (assert (<= 0 algorithm__findbestvalley__gap_id_pair__opt__first__bit3))

;; algorithm__findbestvalley__gap_id_pair__opt__last__bit_axiom
  (assert
  (< algorithm__findbestvalley__gap_id_pair__opt__first__bit3 algorithm__findbestvalley__gap_id_pair__opt__last__bit3))

;; algorithm__findbestvalley__gap_id_pair__opt__position_axiom
  (assert (<= 0 algorithm__findbestvalley__gap_id_pair__opt__position3))

(declare-fun algorithm__findbestvalley__gap_id_pair__rising__first__bit3 () Int)

(declare-fun algorithm__findbestvalley__gap_id_pair__rising__last__bit3 () Int)

(declare-fun algorithm__findbestvalley__gap_id_pair__rising__position3 () Int)

;; algorithm__findbestvalley__gap_id_pair__rising__first__bit_axiom
  (assert (<= 0 algorithm__findbestvalley__gap_id_pair__rising__first__bit3))

;; algorithm__findbestvalley__gap_id_pair__rising__last__bit_axiom
  (assert
  (< algorithm__findbestvalley__gap_id_pair__rising__first__bit3 algorithm__findbestvalley__gap_id_pair__rising__last__bit3))

;; algorithm__findbestvalley__gap_id_pair__rising__position_axiom
  (assert (<= 0 algorithm__findbestvalley__gap_id_pair__rising__position3))

(declare-fun algorithm__findbestvalley__gap_id_pair__other__first__bit3 () Int)

(declare-fun algorithm__findbestvalley__gap_id_pair__other__last__bit3 () Int)

(declare-fun algorithm__findbestvalley__gap_id_pair__other__position3 () Int)

;; algorithm__findbestvalley__gap_id_pair__other__first__bit_axiom
  (assert (<= 0 algorithm__findbestvalley__gap_id_pair__other__first__bit3))

;; algorithm__findbestvalley__gap_id_pair__other__last__bit_axiom
  (assert
  (< algorithm__findbestvalley__gap_id_pair__other__first__bit3 algorithm__findbestvalley__gap_id_pair__other__last__bit3))

;; algorithm__findbestvalley__gap_id_pair__other__position_axiom
  (assert (<= 0 algorithm__findbestvalley__gap_id_pair__other__position3))

(declare-fun dummy35 () us_rep13)

(declare-datatypes () ((t44b__ref (mk_t44b__ref (t44b__content us_rep13)))))
(define-fun t44b__ref___projection ((a t44b__ref)) us_rep13 (t44b__content a))

(define-fun in_range19 ((rec__algorithm__findbestvalley__gap_id_pair__opt1 Int)
  (a us_rep13)) Bool (= rec__algorithm__findbestvalley__gap_id_pair__opt1
  (to_rep6
  (rec__algorithm__findbestvalley__gap_id_pair__opt (us_split_discrs7 a)))))

(declare-fun value__size22 () Int)

(declare-fun object__size22 (us_rep13) Int)

(declare-fun value__alignment22 () Int)

(declare-fun object__alignment22 (us_rep13) Int)

;; value__size_axiom
  (assert (<= 0 value__size22))

;; object__size_axiom
  (assert (forall ((a us_rep13)) (<= 0 (object__size22 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment22))

;; object__alignment_axiom
  (assert (forall ((a us_rep13)) (<= 0 (object__alignment22 a))))

(declare-fun algorithm__findbestvalley__gap_id_pair__opt__first__bit4 () Int)

(declare-fun algorithm__findbestvalley__gap_id_pair__opt__last__bit4 () Int)

(declare-fun algorithm__findbestvalley__gap_id_pair__opt__position4 () Int)

;; algorithm__findbestvalley__gap_id_pair__opt__first__bit_axiom
  (assert (<= 0 algorithm__findbestvalley__gap_id_pair__opt__first__bit4))

;; algorithm__findbestvalley__gap_id_pair__opt__last__bit_axiom
  (assert
  (< algorithm__findbestvalley__gap_id_pair__opt__first__bit4 algorithm__findbestvalley__gap_id_pair__opt__last__bit4))

;; algorithm__findbestvalley__gap_id_pair__opt__position_axiom
  (assert (<= 0 algorithm__findbestvalley__gap_id_pair__opt__position4))

(declare-fun algorithm__findbestvalley__gap_id_pair__rising__first__bit4 () Int)

(declare-fun algorithm__findbestvalley__gap_id_pair__rising__last__bit4 () Int)

(declare-fun algorithm__findbestvalley__gap_id_pair__rising__position4 () Int)

;; algorithm__findbestvalley__gap_id_pair__rising__first__bit_axiom
  (assert (<= 0 algorithm__findbestvalley__gap_id_pair__rising__first__bit4))

;; algorithm__findbestvalley__gap_id_pair__rising__last__bit_axiom
  (assert
  (< algorithm__findbestvalley__gap_id_pair__rising__first__bit4 algorithm__findbestvalley__gap_id_pair__rising__last__bit4))

;; algorithm__findbestvalley__gap_id_pair__rising__position_axiom
  (assert (<= 0 algorithm__findbestvalley__gap_id_pair__rising__position4))

(declare-fun algorithm__findbestvalley__gap_id_pair__other__first__bit4 () Int)

(declare-fun algorithm__findbestvalley__gap_id_pair__other__last__bit4 () Int)

(declare-fun algorithm__findbestvalley__gap_id_pair__other__position4 () Int)

;; algorithm__findbestvalley__gap_id_pair__other__first__bit_axiom
  (assert (<= 0 algorithm__findbestvalley__gap_id_pair__other__first__bit4))

;; algorithm__findbestvalley__gap_id_pair__other__last__bit_axiom
  (assert
  (< algorithm__findbestvalley__gap_id_pair__other__first__bit4 algorithm__findbestvalley__gap_id_pair__other__last__bit4))

;; algorithm__findbestvalley__gap_id_pair__other__position_axiom
  (assert (<= 0 algorithm__findbestvalley__gap_id_pair__other__position4))

(declare-fun dummy36 () us_rep13)

(declare-datatypes () ((t47b__ref (mk_t47b__ref (t47b__content us_rep13)))))
(define-fun t47b__ref___projection ((a t47b__ref)) us_rep13 (t47b__content a))

(define-fun in_range20 ((rec__algorithm__findbestvalley__gap_id_pair__opt1 Int)
  (a us_rep13)) Bool (= rec__algorithm__findbestvalley__gap_id_pair__opt1
  (to_rep6
  (rec__algorithm__findbestvalley__gap_id_pair__opt (us_split_discrs7 a)))))

(declare-fun value__size23 () Int)

(declare-fun object__size23 (us_rep13) Int)

(declare-fun value__alignment23 () Int)

(declare-fun object__alignment23 (us_rep13) Int)

;; value__size_axiom
  (assert (<= 0 value__size23))

;; object__size_axiom
  (assert (forall ((a us_rep13)) (<= 0 (object__size23 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment23))

;; object__alignment_axiom
  (assert (forall ((a us_rep13)) (<= 0 (object__alignment23 a))))

(declare-fun algorithm__findbestvalley__gap_id_pair__opt__first__bit5 () Int)

(declare-fun algorithm__findbestvalley__gap_id_pair__opt__last__bit5 () Int)

(declare-fun algorithm__findbestvalley__gap_id_pair__opt__position5 () Int)

;; algorithm__findbestvalley__gap_id_pair__opt__first__bit_axiom
  (assert (<= 0 algorithm__findbestvalley__gap_id_pair__opt__first__bit5))

;; algorithm__findbestvalley__gap_id_pair__opt__last__bit_axiom
  (assert
  (< algorithm__findbestvalley__gap_id_pair__opt__first__bit5 algorithm__findbestvalley__gap_id_pair__opt__last__bit5))

;; algorithm__findbestvalley__gap_id_pair__opt__position_axiom
  (assert (<= 0 algorithm__findbestvalley__gap_id_pair__opt__position5))

(declare-fun algorithm__findbestvalley__gap_id_pair__rising__first__bit5 () Int)

(declare-fun algorithm__findbestvalley__gap_id_pair__rising__last__bit5 () Int)

(declare-fun algorithm__findbestvalley__gap_id_pair__rising__position5 () Int)

;; algorithm__findbestvalley__gap_id_pair__rising__first__bit_axiom
  (assert (<= 0 algorithm__findbestvalley__gap_id_pair__rising__first__bit5))

;; algorithm__findbestvalley__gap_id_pair__rising__last__bit_axiom
  (assert
  (< algorithm__findbestvalley__gap_id_pair__rising__first__bit5 algorithm__findbestvalley__gap_id_pair__rising__last__bit5))

;; algorithm__findbestvalley__gap_id_pair__rising__position_axiom
  (assert (<= 0 algorithm__findbestvalley__gap_id_pair__rising__position5))

(declare-fun algorithm__findbestvalley__gap_id_pair__other__first__bit5 () Int)

(declare-fun algorithm__findbestvalley__gap_id_pair__other__last__bit5 () Int)

(declare-fun algorithm__findbestvalley__gap_id_pair__other__position5 () Int)

;; algorithm__findbestvalley__gap_id_pair__other__first__bit_axiom
  (assert (<= 0 algorithm__findbestvalley__gap_id_pair__other__first__bit5))

;; algorithm__findbestvalley__gap_id_pair__other__last__bit_axiom
  (assert
  (< algorithm__findbestvalley__gap_id_pair__other__first__bit5 algorithm__findbestvalley__gap_id_pair__other__last__bit5))

;; algorithm__findbestvalley__gap_id_pair__other__position_axiom
  (assert (<= 0 algorithm__findbestvalley__gap_id_pair__other__position5))

(declare-fun dummy37 () us_rep13)

(declare-datatypes () ((t48b__ref (mk_t48b__ref (t48b__content us_rep13)))))
(define-fun t48b__ref___projection ((a t48b__ref)) us_rep13 (t48b__content a))

(define-fun in_range21 ((rec__algorithm__valley_option__opt1 Int)
  (a us_rep4)) Bool (= rec__algorithm__valley_option__opt1 (to_rep6
                                                           (rec__algorithm__valley_option__opt
                                                           (us_split_discrs1
                                                           a)))))

(declare-fun value__size24 () Int)

(declare-fun object__size24 (us_rep4) Int)

(declare-fun value__alignment24 () Int)

(declare-fun object__alignment24 (us_rep4) Int)

;; value__size_axiom
  (assert (<= 0 value__size24))

;; object__size_axiom
  (assert (forall ((a us_rep4)) (<= 0 (object__size24 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment24))

;; object__alignment_axiom
  (assert (forall ((a us_rep4)) (<= 0 (object__alignment24 a))))

(declare-fun algorithm__valley_option__opt__first__bit1 () Int)

(declare-fun algorithm__valley_option__opt__last__bit1 () Int)

(declare-fun algorithm__valley_option__opt__position1 () Int)

;; algorithm__valley_option__opt__first__bit_axiom
  (assert (<= 0 algorithm__valley_option__opt__first__bit1))

;; algorithm__valley_option__opt__last__bit_axiom
  (assert
  (< algorithm__valley_option__opt__first__bit1 algorithm__valley_option__opt__last__bit1))

;; algorithm__valley_option__opt__position_axiom
  (assert (<= 0 algorithm__valley_option__opt__position1))

(declare-fun algorithm__valley_option__value__first__bit1 () Int)

(declare-fun algorithm__valley_option__value__last__bit1 () Int)

(declare-fun algorithm__valley_option__value__position1 () Int)

;; algorithm__valley_option__value__first__bit_axiom
  (assert (<= 0 algorithm__valley_option__value__first__bit1))

;; algorithm__valley_option__value__last__bit_axiom
  (assert
  (< algorithm__valley_option__value__first__bit1 algorithm__valley_option__value__last__bit1))

;; algorithm__valley_option__value__position_axiom
  (assert (<= 0 algorithm__valley_option__value__position1))

(declare-fun dummy38 () us_rep4)

(declare-datatypes () ((t61b__ref (mk_t61b__ref (t61b__content us_rep4)))))
(define-fun t61b__ref___projection ((a t61b__ref)) us_rep4 (t61b__content a))

(define-fun in_range22 ((rec__algorithm__valley_option__opt1 Int)
  (a us_rep4)) Bool (= rec__algorithm__valley_option__opt1 (to_rep6
                                                           (rec__algorithm__valley_option__opt
                                                           (us_split_discrs1
                                                           a)))))

(declare-fun value__size25 () Int)

(declare-fun object__size25 (us_rep4) Int)

(declare-fun value__alignment25 () Int)

(declare-fun object__alignment25 (us_rep4) Int)

;; value__size_axiom
  (assert (<= 0 value__size25))

;; object__size_axiom
  (assert (forall ((a us_rep4)) (<= 0 (object__size25 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment25))

;; object__alignment_axiom
  (assert (forall ((a us_rep4)) (<= 0 (object__alignment25 a))))

(declare-fun algorithm__valley_option__opt__first__bit2 () Int)

(declare-fun algorithm__valley_option__opt__last__bit2 () Int)

(declare-fun algorithm__valley_option__opt__position2 () Int)

;; algorithm__valley_option__opt__first__bit_axiom
  (assert (<= 0 algorithm__valley_option__opt__first__bit2))

;; algorithm__valley_option__opt__last__bit_axiom
  (assert
  (< algorithm__valley_option__opt__first__bit2 algorithm__valley_option__opt__last__bit2))

;; algorithm__valley_option__opt__position_axiom
  (assert (<= 0 algorithm__valley_option__opt__position2))

(declare-fun algorithm__valley_option__value__first__bit2 () Int)

(declare-fun algorithm__valley_option__value__last__bit2 () Int)

(declare-fun algorithm__valley_option__value__position2 () Int)

;; algorithm__valley_option__value__first__bit_axiom
  (assert (<= 0 algorithm__valley_option__value__first__bit2))

;; algorithm__valley_option__value__last__bit_axiom
  (assert
  (< algorithm__valley_option__value__first__bit2 algorithm__valley_option__value__last__bit2))

;; algorithm__valley_option__value__position_axiom
  (assert (<= 0 algorithm__valley_option__value__position2))

(declare-fun dummy39 () us_rep4)

(declare-datatypes () ((t63b__ref (mk_t63b__ref (t63b__content us_rep4)))))
(define-fun t63b__ref___projection ((a t63b__ref)) us_rep4 (t63b__content a))

(declare-fun temp___String_Literal_839 (tuple0) (Array Int character))

;; temp___String_Literal_839__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_839 us_void_param) 1)) 32)
     (= (to_rep (select (temp___String_Literal_839 us_void_param) 2)) 80))
     (= (to_rep (select (temp___String_Literal_839 us_void_param) 3)) 111))
     (= (to_rep (select (temp___String_Literal_839 us_void_param) 4)) 116))
     (= (to_rep (select (temp___String_Literal_839 us_void_param) 5)) 101))
     (= (to_rep (select (temp___String_Literal_839 us_void_param) 6)) 110))
     (= (to_rep (select (temp___String_Literal_839 us_void_param) 7)) 116))
     (= (to_rep (select (temp___String_Literal_839 us_void_param) 8)) 105))
     (= (to_rep (select (temp___String_Literal_839 us_void_param) 9)) 97))
     (= (to_rep (select (temp___String_Literal_839 us_void_param) 10)) 108))
     (= (to_rep (select (temp___String_Literal_839 us_void_param) 11)) 32))
     (= (to_rep (select (temp___String_Literal_839 us_void_param) 12)) 114))
     (= (to_rep (select (temp___String_Literal_839 us_void_param) 13)) 105))
     (= (to_rep (select (temp___String_Literal_839 us_void_param) 14)) 115))
     (= (to_rep (select (temp___String_Literal_839 us_void_param) 15)) 105))
     (= (to_rep (select (temp___String_Literal_839 us_void_param) 16)) 110))
     (= (to_rep (select (temp___String_Literal_839 us_void_param) 17)) 103))
     (= (to_rep (select (temp___String_Literal_839 us_void_param) 18)) 32))
     (= (to_rep (select (temp___String_Literal_839 us_void_param) 19)) 103))
     (= (to_rep (select (temp___String_Literal_839 us_void_param) 20)) 97))
     (= (to_rep (select (temp___String_Literal_839 us_void_param) 21)) 112))
     (= (to_rep (select (temp___String_Literal_839 us_void_param) 22)) 32))
     (= (to_rep (select (temp___String_Literal_839 us_void_param) 23)) 97))
     (= (to_rep (select (temp___String_Literal_839 us_void_param) 24)) 116))
     (= (to_rep (select (temp___String_Literal_839 us_void_param) 25)) 32)) :pattern (
  (temp___String_Literal_839 us_void_param)) )))

(declare-fun temp___String_Literal_840 (tuple0) (Array Int character))

;; temp___String_Literal_840__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_840 us_void_param) 1)) 32)
     (= (to_rep (select (temp___String_Literal_840 us_void_param) 2)) 105))
     (= (to_rep (select (temp___String_Literal_840 us_void_param) 3)) 115))
     (= (to_rep (select (temp___String_Literal_840 us_void_param) 4)) 32))
     (= (to_rep (select (temp___String_Literal_840 us_void_param) 5)) 110))
     (= (to_rep (select (temp___String_Literal_840 us_void_param) 6)) 111))
     (= (to_rep (select (temp___String_Literal_840 us_void_param) 7)) 116))
     (= (to_rep (select (temp___String_Literal_840 us_void_param) 8)) 32))
     (= (to_rep (select (temp___String_Literal_840 us_void_param) 9)) 115))
     (= (to_rep (select (temp___String_Literal_840 us_void_param) 10)) 97))
     (= (to_rep (select (temp___String_Literal_840 us_void_param) 11)) 102))
     (= (to_rep (select (temp___String_Literal_840 us_void_param) 12)) 101)) :pattern (
  (temp___String_Literal_840 us_void_param)) )))

(declare-fun temp___String_Literal_844 (tuple0) (Array Int character))

;; temp___String_Literal_844__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_844 us_void_param) 1)) 32)
     (= (to_rep (select (temp___String_Literal_844 us_void_param) 2)) 80))
     (= (to_rep (select (temp___String_Literal_844 us_void_param) 3)) 111))
     (= (to_rep (select (temp___String_Literal_844 us_void_param) 4)) 116))
     (= (to_rep (select (temp___String_Literal_844 us_void_param) 5)) 101))
     (= (to_rep (select (temp___String_Literal_844 us_void_param) 6)) 110))
     (= (to_rep (select (temp___String_Literal_844 us_void_param) 7)) 116))
     (= (to_rep (select (temp___String_Literal_844 us_void_param) 8)) 105))
     (= (to_rep (select (temp___String_Literal_844 us_void_param) 9)) 97))
     (= (to_rep (select (temp___String_Literal_844 us_void_param) 10)) 108))
     (= (to_rep (select (temp___String_Literal_844 us_void_param) 11)) 32))
     (= (to_rep (select (temp___String_Literal_844 us_void_param) 12)) 114))
     (= (to_rep (select (temp___String_Literal_844 us_void_param) 13)) 105))
     (= (to_rep (select (temp___String_Literal_844 us_void_param) 14)) 115))
     (= (to_rep (select (temp___String_Literal_844 us_void_param) 15)) 105))
     (= (to_rep (select (temp___String_Literal_844 us_void_param) 16)) 110))
     (= (to_rep (select (temp___String_Literal_844 us_void_param) 17)) 103))
     (= (to_rep (select (temp___String_Literal_844 us_void_param) 18)) 32))
     (= (to_rep (select (temp___String_Literal_844 us_void_param) 19)) 103))
     (= (to_rep (select (temp___String_Literal_844 us_void_param) 20)) 97))
     (= (to_rep (select (temp___String_Literal_844 us_void_param) 21)) 112))
     (= (to_rep (select (temp___String_Literal_844 us_void_param) 22)) 32))
     (= (to_rep (select (temp___String_Literal_844 us_void_param) 23)) 97))
     (= (to_rep (select (temp___String_Literal_844 us_void_param) 24)) 116))
     (= (to_rep (select (temp___String_Literal_844 us_void_param) 25)) 32)) :pattern (
  (temp___String_Literal_844 us_void_param)) )))

(declare-fun temp___String_Literal_845 (tuple0) (Array Int character))

;; temp___String_Literal_845__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_845 us_void_param) 1)) 32)
     (= (to_rep (select (temp___String_Literal_845 us_void_param) 2)) 105))
     (= (to_rep (select (temp___String_Literal_845 us_void_param) 3)) 115))
     (= (to_rep (select (temp___String_Literal_845 us_void_param) 4)) 32))
     (= (to_rep (select (temp___String_Literal_845 us_void_param) 5)) 110))
     (= (to_rep (select (temp___String_Literal_845 us_void_param) 6)) 111))
     (= (to_rep (select (temp___String_Literal_845 us_void_param) 7)) 116))
     (= (to_rep (select (temp___String_Literal_845 us_void_param) 8)) 32))
     (= (to_rep (select (temp___String_Literal_845 us_void_param) 9)) 115))
     (= (to_rep (select (temp___String_Literal_845 us_void_param) 10)) 97))
     (= (to_rep (select (temp___String_Literal_845 us_void_param) 11)) 102))
     (= (to_rep (select (temp___String_Literal_845 us_void_param) 12)) 101)) :pattern (
  (temp___String_Literal_845 us_void_param)) )))

(declare-fun temp___String_Literal_852 (tuple0) (Array Int character))

;; temp___String_Literal_852__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_852 us_void_param) 1)) 32)
     (= (to_rep (select (temp___String_Literal_852 us_void_param) 2)) 32))
     (= (to_rep (select (temp___String_Literal_852 us_void_param) 3)) 32))
     (= (to_rep (select (temp___String_Literal_852 us_void_param) 4)) 32))
     (= (to_rep (select (temp___String_Literal_852 us_void_param) 5)) 78))
     (= (to_rep (select (temp___String_Literal_852 us_void_param) 6)) 101))
     (= (to_rep (select (temp___String_Literal_852 us_void_param) 7)) 119))
     (= (to_rep (select (temp___String_Literal_852 us_void_param) 8)) 32))
     (= (to_rep (select (temp___String_Literal_852 us_void_param) 9)) 98))
     (= (to_rep (select (temp___String_Literal_852 us_void_param) 10)) 101))
     (= (to_rep (select (temp___String_Literal_852 us_void_param) 11)) 115))
     (= (to_rep (select (temp___String_Literal_852 us_void_param) 12)) 116))
     (= (to_rep (select (temp___String_Literal_852 us_void_param) 13)) 32))
     (= (to_rep (select (temp___String_Literal_852 us_void_param) 14)) 118))
     (= (to_rep (select (temp___String_Literal_852 us_void_param) 15)) 97))
     (= (to_rep (select (temp___String_Literal_852 us_void_param) 16)) 108))
     (= (to_rep (select (temp___String_Literal_852 us_void_param) 17)) 108))
     (= (to_rep (select (temp___String_Literal_852 us_void_param) 18)) 101))
     (= (to_rep (select (temp___String_Literal_852 us_void_param) 19)) 121))
     (= (to_rep (select (temp___String_Literal_852 us_void_param) 20)) 32))
     (= (to_rep (select (temp___String_Literal_852 us_void_param) 21)) 119))
     (= (to_rep (select (temp___String_Literal_852 us_void_param) 22)) 105))
     (= (to_rep (select (temp___String_Literal_852 us_void_param) 23)) 116))
     (= (to_rep (select (temp___String_Literal_852 us_void_param) 24)) 104))
     (= (to_rep (select (temp___String_Literal_852 us_void_param) 25)) 32))
     (= (to_rep (select (temp___String_Literal_852 us_void_param) 26)) 114))
     (= (to_rep (select (temp___String_Literal_852 us_void_param) 27)) 105))
     (= (to_rep (select (temp___String_Literal_852 us_void_param) 28)) 115))
     (= (to_rep (select (temp___String_Literal_852 us_void_param) 29)) 105))
     (= (to_rep (select (temp___String_Literal_852 us_void_param) 30)) 110))
     (= (to_rep (select (temp___String_Literal_852 us_void_param) 31)) 103))
     (= (to_rep (select (temp___String_Literal_852 us_void_param) 32)) 32)) :pattern (
  (temp___String_Literal_852 us_void_param)) )))

(declare-fun temp___String_Literal_856 (tuple0) (Array Int character))

;; temp___String_Literal_856__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_856 us_void_param) 1)) 32)
     (= (to_rep (select (temp___String_Literal_856 us_void_param) 2)) 32))
     (= (to_rep (select (temp___String_Literal_856 us_void_param) 3)) 32))
     (= (to_rep (select (temp___String_Literal_856 us_void_param) 4)) 32))
     (= (to_rep (select (temp___String_Literal_856 us_void_param) 5)) 32))
     (= (to_rep (select (temp___String_Literal_856 us_void_param) 6)) 32))
     (= (to_rep (select (temp___String_Literal_856 us_void_param) 7)) 67))
     (= (to_rep (select (temp___String_Literal_856 us_void_param) 8)) 104))
     (= (to_rep (select (temp___String_Literal_856 us_void_param) 9)) 101))
     (= (to_rep (select (temp___String_Literal_856 us_void_param) 10)) 99))
     (= (to_rep (select (temp___String_Literal_856 us_void_param) 11)) 107))
     (= (to_rep (select (temp___String_Literal_856 us_void_param) 12)) 105))
     (= (to_rep (select (temp___String_Literal_856 us_void_param) 13)) 110))
     (= (to_rep (select (temp___String_Literal_856 us_void_param) 14)) 103))
     (= (to_rep (select (temp___String_Literal_856 us_void_param) 15)) 32))
     (= (to_rep (select (temp___String_Literal_856 us_void_param) 16)) 118))
     (= (to_rep (select (temp___String_Literal_856 us_void_param) 17)) 97))
     (= (to_rep (select (temp___String_Literal_856 us_void_param) 18)) 108))
     (= (to_rep (select (temp___String_Literal_856 us_void_param) 19)) 108))
     (= (to_rep (select (temp___String_Literal_856 us_void_param) 20)) 101))
     (= (to_rep (select (temp___String_Literal_856 us_void_param) 21)) 121))
     (= (to_rep (select (temp___String_Literal_856 us_void_param) 22)) 32))
     (= (to_rep (select (temp___String_Literal_856 us_void_param) 23)) 119))
     (= (to_rep (select (temp___String_Literal_856 us_void_param) 24)) 105))
     (= (to_rep (select (temp___String_Literal_856 us_void_param) 25)) 116))
     (= (to_rep (select (temp___String_Literal_856 us_void_param) 26)) 104))
     (= (to_rep (select (temp___String_Literal_856 us_void_param) 27)) 32))
     (= (to_rep (select (temp___String_Literal_856 us_void_param) 28)) 114))
     (= (to_rep (select (temp___String_Literal_856 us_void_param) 29)) 105))
     (= (to_rep (select (temp___String_Literal_856 us_void_param) 30)) 115))
     (= (to_rep (select (temp___String_Literal_856 us_void_param) 31)) 105))
     (= (to_rep (select (temp___String_Literal_856 us_void_param) 32)) 110))
     (= (to_rep (select (temp___String_Literal_856 us_void_param) 33)) 103))
     (= (to_rep (select (temp___String_Literal_856 us_void_param) 34)) 32)) :pattern (
  (temp___String_Literal_856 us_void_param)) )))

(declare-fun temp___String_Literal_857 (tuple0) (Array Int character))

;; temp___String_Literal_857__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_857 us_void_param) 1)) 32)
     (= (to_rep (select (temp___String_Literal_857 us_void_param) 2)) 32))
     (= (to_rep (select (temp___String_Literal_857 us_void_param) 3)) 32))
     (= (to_rep (select (temp___String_Literal_857 us_void_param) 4)) 32))
     (= (to_rep (select (temp___String_Literal_857 us_void_param) 5)) 32))
     (= (to_rep (select (temp___String_Literal_857 us_void_param) 6)) 32))
     (= (to_rep (select (temp___String_Literal_857 us_void_param) 7)) 32))
     (= (to_rep (select (temp___String_Literal_857 us_void_param) 8)) 32))
     (= (to_rep (select (temp___String_Literal_857 us_void_param) 9)) 71))
     (= (to_rep (select (temp___String_Literal_857 us_void_param) 10)) 111))
     (= (to_rep (select (temp___String_Literal_857 us_void_param) 11)) 97))
     (= (to_rep (select (temp___String_Literal_857 us_void_param) 12)) 108))
     (= (to_rep (select (temp___String_Literal_857 us_void_param) 13)) 32))
     (= (to_rep (select (temp___String_Literal_857 us_void_param) 14)) 97))
     (= (to_rep (select (temp___String_Literal_857 us_void_param) 15)) 116))
     (= (to_rep (select (temp___String_Literal_857 us_void_param) 16)) 32)) :pattern (
  (temp___String_Literal_857 us_void_param)) )))

(declare-fun temp___String_Literal_858 (tuple0) (Array Int character))

;; temp___String_Literal_858__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_858 us_void_param) 1)) 32)
     (= (to_rep (select (temp___String_Literal_858 us_void_param) 2)) 32))
     (= (to_rep (select (temp___String_Literal_858 us_void_param) 3)) 32))
     (= (to_rep (select (temp___String_Literal_858 us_void_param) 4)) 32))
     (= (to_rep (select (temp___String_Literal_858 us_void_param) 5)) 32))
     (= (to_rep (select (temp___String_Literal_858 us_void_param) 6)) 32))
     (= (to_rep (select (temp___String_Literal_858 us_void_param) 7)) 32))
     (= (to_rep (select (temp___String_Literal_858 us_void_param) 8)) 32))
     (= (to_rep (select (temp___String_Literal_858 us_void_param) 9)) 100))
     (= (to_rep (select (temp___String_Literal_858 us_void_param) 10)) 105))
     (= (to_rep (select (temp___String_Literal_858 us_void_param) 11)) 102))
     (= (to_rep (select (temp___String_Literal_858 us_void_param) 12)) 102))
     (= (to_rep (select (temp___String_Literal_858 us_void_param) 13)) 32))
     (= (to_rep (select (temp___String_Literal_858 us_void_param) 14)) 102))
     (= (to_rep (select (temp___String_Literal_858 us_void_param) 15)) 114))
     (= (to_rep (select (temp___String_Literal_858 us_void_param) 16)) 111))
     (= (to_rep (select (temp___String_Literal_858 us_void_param) 17)) 109))
     (= (to_rep (select (temp___String_Literal_858 us_void_param) 18)) 32))
     (= (to_rep (select (temp___String_Literal_858 us_void_param) 19)) 114))
     (= (to_rep (select (temp___String_Literal_858 us_void_param) 20)) 105))
     (= (to_rep (select (temp___String_Literal_858 us_void_param) 21)) 115))
     (= (to_rep (select (temp___String_Literal_858 us_void_param) 22)) 105))
     (= (to_rep (select (temp___String_Literal_858 us_void_param) 23)) 110))
     (= (to_rep (select (temp___String_Literal_858 us_void_param) 24)) 103))
     (= (to_rep (select (temp___String_Literal_858 us_void_param) 25)) 32))
     (= (to_rep (select (temp___String_Literal_858 us_void_param) 26)) 97))
     (= (to_rep (select (temp___String_Literal_858 us_void_param) 27)) 116))
     (= (to_rep (select (temp___String_Literal_858 us_void_param) 28)) 32)) :pattern (
  (temp___String_Literal_858 us_void_param)) )))

(declare-fun temp___String_Literal_859 (tuple0) (Array Int character))

;; temp___String_Literal_859__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_859 us_void_param) 1)) 32)
     (= (to_rep (select (temp___String_Literal_859 us_void_param) 2)) 105))
     (= (to_rep (select (temp___String_Literal_859 us_void_param) 3)) 115))
     (= (to_rep (select (temp___String_Literal_859 us_void_param) 4)) 32)) :pattern (
  (temp___String_Literal_859 us_void_param)) )))

(declare-fun temp___String_Literal_860 (tuple0) (Array Int character))

;; temp___String_Literal_860__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_860 us_void_param) 1)) 32)
     (= (to_rep (select (temp___String_Literal_860 us_void_param) 2)) 32))
     (= (to_rep (select (temp___String_Literal_860 us_void_param) 3)) 32))
     (= (to_rep (select (temp___String_Literal_860 us_void_param) 4)) 32))
     (= (to_rep (select (temp___String_Literal_860 us_void_param) 5)) 32))
     (= (to_rep (select (temp___String_Literal_860 us_void_param) 6)) 32))
     (= (to_rep (select (temp___String_Literal_860 us_void_param) 7)) 32))
     (= (to_rep (select (temp___String_Literal_860 us_void_param) 8)) 32))
     (= (to_rep (select (temp___String_Literal_860 us_void_param) 9)) 100))
     (= (to_rep (select (temp___String_Literal_860 us_void_param) 10)) 105))
     (= (to_rep (select (temp___String_Literal_860 us_void_param) 11)) 102))
     (= (to_rep (select (temp___String_Literal_860 us_void_param) 12)) 102))
     (= (to_rep (select (temp___String_Literal_860 us_void_param) 13)) 32))
     (= (to_rep (select (temp___String_Literal_860 us_void_param) 14)) 102))
     (= (to_rep (select (temp___String_Literal_860 us_void_param) 15)) 114))
     (= (to_rep (select (temp___String_Literal_860 us_void_param) 16)) 111))
     (= (to_rep (select (temp___String_Literal_860 us_void_param) 17)) 109))
     (= (to_rep (select (temp___String_Literal_860 us_void_param) 18)) 32))
     (= (to_rep (select (temp___String_Literal_860 us_void_param) 19)) 98))
     (= (to_rep (select (temp___String_Literal_860 us_void_param) 20)) 101))
     (= (to_rep (select (temp___String_Literal_860 us_void_param) 21)) 115))
     (= (to_rep (select (temp___String_Literal_860 us_void_param) 22)) 116))
     (= (to_rep (select (temp___String_Literal_860 us_void_param) 23)) 32))
     (= (to_rep (select (temp___String_Literal_860 us_void_param) 24)) 97))
     (= (to_rep (select (temp___String_Literal_860 us_void_param) 25)) 116))
     (= (to_rep (select (temp___String_Literal_860 us_void_param) 26)) 32))
     (= (to_rep (select (temp___String_Literal_860 us_void_param) 27)) 32))
     (= (to_rep (select (temp___String_Literal_860 us_void_param) 28)) 32)) :pattern (
  (temp___String_Literal_860 us_void_param)) )))

(declare-fun temp___String_Literal_861 (tuple0) (Array Int character))

;; temp___String_Literal_861__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_861 us_void_param) 1)) 32)
     (= (to_rep (select (temp___String_Literal_861 us_void_param) 2)) 105))
     (= (to_rep (select (temp___String_Literal_861 us_void_param) 3)) 115))
     (= (to_rep (select (temp___String_Literal_861 us_void_param) 4)) 32)) :pattern (
  (temp___String_Literal_861 us_void_param)) )))

(declare-fun temp___String_Literal_862 (tuple0) (Array Int character))

;; temp___String_Literal_862__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_862 us_void_param) 1)) 32)
     (= (to_rep (select (temp___String_Literal_862 us_void_param) 2)) 32))
     (= (to_rep (select (temp___String_Literal_862 us_void_param) 3)) 32))
     (= (to_rep (select (temp___String_Literal_862 us_void_param) 4)) 32))
     (= (to_rep (select (temp___String_Literal_862 us_void_param) 5)) 78))
     (= (to_rep (select (temp___String_Literal_862 us_void_param) 6)) 101))
     (= (to_rep (select (temp___String_Literal_862 us_void_param) 7)) 119))
     (= (to_rep (select (temp___String_Literal_862 us_void_param) 8)) 32))
     (= (to_rep (select (temp___String_Literal_862 us_void_param) 9)) 98))
     (= (to_rep (select (temp___String_Literal_862 us_void_param) 10)) 101))
     (= (to_rep (select (temp___String_Literal_862 us_void_param) 11)) 115))
     (= (to_rep (select (temp___String_Literal_862 us_void_param) 12)) 116))
     (= (to_rep (select (temp___String_Literal_862 us_void_param) 13)) 32))
     (= (to_rep (select (temp___String_Literal_862 us_void_param) 14)) 118))
     (= (to_rep (select (temp___String_Literal_862 us_void_param) 15)) 97))
     (= (to_rep (select (temp___String_Literal_862 us_void_param) 16)) 108))
     (= (to_rep (select (temp___String_Literal_862 us_void_param) 17)) 108))
     (= (to_rep (select (temp___String_Literal_862 us_void_param) 18)) 101))
     (= (to_rep (select (temp___String_Literal_862 us_void_param) 19)) 121))
     (= (to_rep (select (temp___String_Literal_862 us_void_param) 20)) 32))
     (= (to_rep (select (temp___String_Literal_862 us_void_param) 21)) 119))
     (= (to_rep (select (temp___String_Literal_862 us_void_param) 22)) 105))
     (= (to_rep (select (temp___String_Literal_862 us_void_param) 23)) 116))
     (= (to_rep (select (temp___String_Literal_862 us_void_param) 24)) 104))
     (= (to_rep (select (temp___String_Literal_862 us_void_param) 25)) 32))
     (= (to_rep (select (temp___String_Literal_862 us_void_param) 26)) 114))
     (= (to_rep (select (temp___String_Literal_862 us_void_param) 27)) 105))
     (= (to_rep (select (temp___String_Literal_862 us_void_param) 28)) 115))
     (= (to_rep (select (temp___String_Literal_862 us_void_param) 29)) 105))
     (= (to_rep (select (temp___String_Literal_862 us_void_param) 30)) 110))
     (= (to_rep (select (temp___String_Literal_862 us_void_param) 31)) 103))
     (= (to_rep (select (temp___String_Literal_862 us_void_param) 32)) 32)) :pattern (
  (temp___String_Literal_862 us_void_param)) )))

(declare-fun temp___String_Literal_869 (tuple0) (Array Int character))

;; temp___String_Literal_869__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_869 us_void_param) 1)) 32)
     (= (to_rep (select (temp___String_Literal_869 us_void_param) 2)) 32))
     (= (to_rep (select (temp___String_Literal_869 us_void_param) 3)) 66))
     (= (to_rep (select (temp___String_Literal_869 us_void_param) 4)) 101))
     (= (to_rep (select (temp___String_Literal_869 us_void_param) 5)) 115))
     (= (to_rep (select (temp___String_Literal_869 us_void_param) 6)) 116))
     (= (to_rep (select (temp___String_Literal_869 us_void_param) 7)) 32))
     (= (to_rep (select (temp___String_Literal_869 us_void_param) 8)) 118))
     (= (to_rep (select (temp___String_Literal_869 us_void_param) 9)) 97))
     (= (to_rep (select (temp___String_Literal_869 us_void_param) 10)) 108))
     (= (to_rep (select (temp___String_Literal_869 us_void_param) 11)) 108))
     (= (to_rep (select (temp___String_Literal_869 us_void_param) 12)) 101))
     (= (to_rep (select (temp___String_Literal_869 us_void_param) 13)) 121))
     (= (to_rep (select (temp___String_Literal_869 us_void_param) 14)) 32))
     (= (to_rep (select (temp___String_Literal_869 us_void_param) 15)) 104))
     (= (to_rep (select (temp___String_Literal_869 us_void_param) 16)) 97))
     (= (to_rep (select (temp___String_Literal_869 us_void_param) 17)) 115))
     (= (to_rep (select (temp___String_Literal_869 us_void_param) 18)) 32))
     (= (to_rep (select (temp___String_Literal_869 us_void_param) 19)) 114))
     (= (to_rep (select (temp___String_Literal_869 us_void_param) 20)) 105))
     (= (to_rep (select (temp___String_Literal_869 us_void_param) 21)) 115))
     (= (to_rep (select (temp___String_Literal_869 us_void_param) 22)) 105))
     (= (to_rep (select (temp___String_Literal_869 us_void_param) 23)) 110))
     (= (to_rep (select (temp___String_Literal_869 us_void_param) 24)) 103))
     (= (to_rep (select (temp___String_Literal_869 us_void_param) 25)) 32))
     (= (to_rep (select (temp___String_Literal_869 us_void_param) 26)) 103))
     (= (to_rep (select (temp___String_Literal_869 us_void_param) 27)) 97))
     (= (to_rep (select (temp___String_Literal_869 us_void_param) 28)) 112))
     (= (to_rep (select (temp___String_Literal_869 us_void_param) 29)) 32))
     (= (to_rep (select (temp___String_Literal_869 us_void_param) 30)) 97))
     (= (to_rep (select (temp___String_Literal_869 us_void_param) 31)) 116))
     (= (to_rep (select (temp___String_Literal_869 us_void_param) 32)) 32)) :pattern (
  (temp___String_Literal_869 us_void_param)) )))

(define-fun dynamic_invariant5 ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range11
                                     temp___expr_33)))

(define-fun dynamic_invariant6 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range3
                                     temp___expr_39)))

(define-fun dynamic_invariant7 ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range4 temp___expr_63)))

(define-fun dynamic_invariant8 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range2 temp___expr_15)))

(define-fun dynamic_invariant9 ((temp___expr_366 Int)
  (temp___is_init_363 Bool) (temp___skip_constant_364 Bool)
  (temp___do_toplevel_365 Bool)) Bool (=>
                                      (or (= temp___is_init_363 true)
                                      (<= 0 1)) (in_range8 temp___expr_366)))

(define-fun default_initial_assumption3 ((temp___expr_374 us_rep4)
  (temp___skip_top_level_375 Bool)) Bool (and
                                         (= (attr__constrained
                                            temp___expr_374) false)
                                         (= (to_rep6
                                            (rec__algorithm__valley_option__opt
                                            (us_split_discrs1
                                            temp___expr_374))) 0)))

(define-fun dynamic_invariant10 ((temp___expr_577 us_rep5)
  (temp___is_init_574 Bool) (temp___skip_constant_575 Bool)
  (temp___do_toplevel_576 Bool)) Bool (=>
                                      (not (= temp___skip_constant_575 true))
                                      (in_range10 1000 temp___expr_577)))

(define-fun default_initial_assumption4 ((temp___expr_579 us_rep5)
  (temp___skip_top_level_580 Bool)) Bool (and
                                         (= (to_rep5
                                            (rec__algorithm__gap_vectors__list__capacity
                                            (us_split_discrs3
                                            temp___expr_579))) 1000)
                                         (=>
                                         (not
                                         (= temp___skip_top_level_580 true))
                                         (= (is_empty temp___expr_579) true))))

(define-fun dynamic_invariant11 ((temp___expr_220 Int)
  (temp___is_init_217 Bool) (temp___skip_constant_218 Bool)
  (temp___do_toplevel_219 Bool)) Bool (=>
                                      (or (= temp___is_init_217 true)
                                      (<= 0 1)) (in_range14 temp___expr_220)))

(define-fun default_initial_assumption5 ((temp___expr_228 us_rep9)
  (temp___skip_top_level_229 Bool)) Bool (and
                                         (= (attr__constrained1
                                            temp___expr_228) false)
                                         (= (to_rep11
                                            (rec__robot_iface__speed_option__opt
                                            (us_split_discrs5
                                            temp___expr_228))) 0)))

(define-fun dynamic_invariant12 ((temp___expr_236 us_rep10)
  (temp___is_init_233 Bool) (temp___skip_constant_234 Bool)
  (temp___do_toplevel_235 Bool)) Bool (= (attr__constrained1
                                         (rec__robot_iface__proxy__speed
                                         (us_split_fields17 temp___expr_236))) false))

(define-fun default_initial_assumption6 ((temp___expr_239 us_rep10)
  (temp___skip_top_level_240 Bool)) Bool (and
                                         (= (attr__constrained1
                                            (rec__robot_iface__proxy__speed
                                            (us_split_fields17
                                            temp___expr_239))) false)
                                         (= (to_rep11
                                            (rec__robot_iface__speed_option__opt
                                            (us_split_discrs5
                                            (rec__robot_iface__proxy__speed
                                            (us_split_fields17
                                            temp___expr_239))))) 0)))

(define-fun dynamic_invariant13 ((temp___expr_140 Float32)
  (temp___is_init_137 Bool) (temp___skip_constant_138 Bool)
  (temp___do_toplevel_139 Bool)) Bool (=>
                                      (or (= temp___is_init_137 true)
                                      (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b11111110 #b11111111111111111111111)))
                                      (in_range12 temp___expr_140)))

(define-fun dynamic_invariant14 ((temp___expr_146 Float32)
  (temp___is_init_143 Bool) (temp___skip_constant_144 Bool)
  (temp___do_toplevel_145 Bool)) Bool (=>
                                      (or (= temp___is_init_143 true)
                                      (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b11111110 #b11111111111111111111111)))
                                      (in_range13 temp___expr_146)))

(define-fun dynamic_invariant15 ((temp___expr_158 Float32)
  (temp___is_init_155 Bool) (temp___skip_constant_156 Bool)
  (temp___do_toplevel_157 Bool)) Bool (=>
                                      (or (= temp___is_init_155 true)
                                      (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                      (not (or (fp.isInfinite temp___expr_158) (fp.isNaN temp___expr_158)))))

;; null_angle__def_axiom
  (assert
  (= null_angle (mk___rep
                (mk___split_fields
                (of_rep3 (fp #b0 #b00000000 #b00000000000000000000000))))))

(define-fun dynamic_invariant16 ((temp___expr_170 Float32)
  (temp___is_init_167 Bool) (temp___skip_constant_168 Bool)
  (temp___do_toplevel_169 Bool)) Bool (=>
                                      (or (= temp___is_init_167 true)
                                      (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000001 #b10010010000111111011011)))
                                      (in_range5 temp___expr_170)))

;; zero_position__def_axiom
  (assert
  (= zero_position (mk___rep1
                   (mk___split_fields1
                   (of_rep2 (fp #b0 #b00000000 #b00000000000000000000000))
                   (of_rep2 (fp #b0 #b00000000 #b00000000000000000000000))))))

(define-fun dynamic_invariant17 ((temp___expr_286 Int)
  (temp___is_init_283 Bool) (temp___skip_constant_284 Bool)
  (temp___do_toplevel_285 Bool)) Bool (=>
                                      (or (= temp___is_init_283 true)
                                      (<= (- 1) 1)) (in_range6
                                      temp___expr_286)))

;; no_element__def_axiom
  (assert (= no_element (mk___rep6 (mk___split_fields6 (of_rep5 0)))))

(declare-fun length2 (us_rep8) Int)

(declare-fun length__function_guard1 (Int us_rep8) Bool)

(define-fun last3 ((container us_rep8)) Int (+ 0 (length2 container)))

(declare-fun last__function_guard1 (Int us_rep8) Bool)

(define-fun oeq1 ((left us_rep8)
  (right us_rep8)) Bool (and (= (length2 left) (length2 right)) (ite
                                                                (forall
                                                                ((n Int))
                                                                (=>
                                                                (and (<= 1 n)
                                                                (<= n
                                                                (last3 left)))
                                                                (= (bool_eq4
                                                                   (get left
                                                                   n)
                                                                   (get right
                                                                   n)) true)))
                                                                true false)))

(declare-fun oeq__function_guard1 (Bool us_rep8 us_rep8) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep8) (b us_rep8))
  (! (= (user_eq18 a b) (oeq1 a b)) :pattern ((user_eq18 a b)) )))

(define-fun default_initial_assumption7 ((temp___expr_449 us_rep8)
  (temp___skip_top_level_450 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_450 true))
                                         (= (length2 temp___expr_449) 0)))

;; model____post_axiom
  (assert
  (forall ((container us_rep5))
  (! (= (length2 (model__ container)) (length1 container)) :pattern (
  (model__ container)) )))

(declare-fun length3 (us_rep7) Int)

(declare-fun length__function_guard2 (Int us_rep7) Bool)

(declare-fun is_empty1 (us_rep7) Bool)

(declare-fun is_empty__function_guard1 (Bool us_rep7) Bool)

(define-fun default_initial_assumption8 ((temp___expr_468 us_rep7)
  (temp___skip_top_level_469 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_469 true))
                                         (and
                                         (= (is_empty1 temp___expr_468) true)
                                         (= (length3 temp___expr_468) 0))))

(define-fun default_initial_assumption9 ((temp___expr_456 us_rep6)
  (temp___skip_top_level_457 Bool)) Bool (= (to_rep5
                                            (rec__algorithm__gap_vectors__cursor__node
                                            (us_split_fields13
                                            temp___expr_456))) 0))

;; positions__post_axiom
  (assert
  (forall ((container us_rep5))
  (! (let ((result (positions container)))
     (and (not (= (has_key result no_element) true))
     (forall ((i us_rep6))
     (=> (= (has_key result i) true)
     (and
     (and (<= 1 (get1 result i)) (<= (get1 result i) (length1 container)))
     (forall ((j us_rep6))
     (=> (= (has_key result j) true)
     (=> (= (get1 result i) (get1 result j)) (= (bool_eq8 i j) true))))))))) :pattern (
  (positions container)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep5))
  (! (= (= (is_empty container) true) (= (length1 container) 0)) :pattern (
  (is_empty container)) )))

(declare-sort extended_index 0)

(define-fun in_range23 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE15 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check15 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE15 (us_image) Int)

(declare-fun user_eq31 (extended_index extended_index) Bool)

(declare-fun dummy40 () extended_index)

(declare-datatypes ()
((extended_index__ref
 (mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref___projection ((a extended_index__ref)) extended_index
  (extended_index__content a))

(define-fun dynamic_invariant18 ((temp___expr_442 Int)
  (temp___is_init_439 Bool) (temp___skip_constant_440 Bool)
  (temp___do_toplevel_441 Bool)) Bool (=>
                                      (or (= temp___is_init_439 true)
                                      (<= 0 2147483647)) (in_range23
                                      temp___expr_442)))

;; length__post_axiom
  (assert
  (forall ((container us_rep8))
  (! (let ((result (length2 container)))
     (and (<= (+ 0 result) 2147483647) (dynamic_invariant3 result true false
     true))) :pattern ((length2 container)) )))

;; get__post_axiom
  (assert true)

;; has_key__post_axiom
  (assert
  (forall ((container us_rep7))
  (forall ((key us_rep6))
  (! (=> (= (of_int1 0) true)
     (=>
     (exists ((k us_rep6))
     (and (= (has_key container k) true) (= (bool_eq8 k key) true)))
     (= (has_key container key) true))) :pattern ((has_key container key)) ))))

(declare-sort element_type 0)

(define-fun in_range24 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE16 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check16 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE16 (us_image) Int)

(declare-fun user_eq32 (element_type element_type) Bool)

(declare-fun dummy41 () element_type)

(declare-datatypes ()
((element_type__ref2
 (mk_element_type__ref2 (element_type__content2 element_type)))))
(define-fun element_type__ref_3__projection ((a element_type__ref2)) element_type
  (element_type__content2 a))

(define-fun dynamic_invariant19 ((temp___expr_461 Int)
  (temp___is_init_458 Bool) (temp___skip_constant_459 Bool)
  (temp___do_toplevel_460 Bool)) Bool (=>
                                      (or (= temp___is_init_458 true)
                                      (<= 1 2147483647)) (in_range24
                                      temp___expr_461)))

(declare-fun witness (us_rep7 us_rep6) Int)

(declare-fun witness__function_guard (Int us_rep7 us_rep6) Bool)

(declare-fun w_get (us_rep7 Int) Int)

(declare-fun w_get__function_guard (Int us_rep7 Int) Bool)

;; get__post_axiom
  (assert
  (forall ((container us_rep7))
  (forall ((key us_rep6))
  (! (=> (= (has_key container key) true)
     (let ((result (get1 container key)))
     (and
     (=> (= (of_int1 0) true)
     (and (= result (w_get container (witness container key)))
     (forall ((k us_rep6))
     (=> (= (has_key container k) true)
     (= (= (bool_eq8 k key) true)
     (= (witness container key) (witness container k)))))))
     (dynamic_invariant19 result true false true)))) :pattern ((get1
                                                               container key)) ))))

;; length__post_axiom
  (assert
  (forall ((container us_rep7)) (! (dynamic_invariant3 (length3 container)
  true false true) :pattern ((length3 container)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep7))
  (! (= (= (is_empty1 container) true)
     (forall ((key us_rep6)) (not (= (has_key container key) true)))) :pattern (
  (is_empty1 container)) )))

(declare-fun has_witness (us_rep7 Int) Bool)

(declare-fun has_witness__function_guard (Bool us_rep7 Int) Bool)

;; has_witness__post_axiom
  (assert true)

;; witness__post_axiom
  (assert
  (forall ((container us_rep7))
  (forall ((key us_rep6))
  (! (=> (= (has_key container key) true)
     (let ((result (witness container key)))
     (and (= (has_witness container result) true) (dynamic_invariant3 result
     true false true)))) :pattern ((witness container key)) ))))

;; w_get__post_axiom
  (assert
  (forall ((container us_rep7))
  (forall ((witness1 Int))
  (! (=>
     (and (dynamic_invariant3 witness1 true true true)
     (= (has_witness container witness1) true)) (dynamic_invariant19
     (w_get container witness1) true false true)) :pattern ((w_get container
                                                            witness1)) ))))

(declare-fun best_valley_ids__split_fields () count_type)

(declare-fun best_valley_ids__split_fields1 () count_type)

(declare-fun best_valley_ids__split_discrs () option)

(declare-fun ir__split_fields () count_type)

(declare-fun candidate_valley_ids__split_fields () count_type)

(declare-fun candidate_valley_ids__split_fields1 () count_type)

(declare-fun candidate_valley_ids__split_discrs () option)

(declare-fun o () float)

(declare-fun o1 () float)

(declare-fun o2 () float)

(declare-fun o3 () float)

(declare-fun temp___875 () float)

(declare-fun temp___8751 () float)

(declare-fun o4 () Int)

(declare-fun algorithm__findbestvalley__existing_gap_id_LAST__assume () Int)

(declare-fun o5 () option)

(declare-fun o6 () us_split_discrs6)

(declare-fun algorithm__findbestvalley__best_valley_ids__assume () us_rep13)

(declare-fun algorithm__findbestvalley__ir__assume () us_rep6)

(declare-fun temp___868 () us_rep5)

(declare-fun temp___867 () us_rep6)

(declare-fun temp___866 () us_rep13)

(declare-fun o7 () us_rep6)

(declare-fun algorithm__findbestvalley__B_14__il__assume () us_rep6)

(declare-fun o8 () option)

(declare-fun o9 () us_split_discrs6)

(declare-fun algorithm__findbestvalley__B_14__candidate_valley_ids__assume () us_rep13)

(declare-fun o10 () us_rep2)

(declare-fun o11 () us_split_fields4)

(declare-fun o12 () idir_t)

(declare-fun o13 () Int)

(declare-fun o14 () us_rep2)

(declare-fun o15 () option)

(declare-fun o16 () us_split_discrs6)

(declare-fun temp___841 () us_rep13)

(declare-fun usq_ () us_rep13)

(declare-fun temp___843 () us_rep13)

(declare-fun o17 () us_rep2)

(declare-fun o18 () us_split_fields4)

(declare-fun o19 () us_rep)

(declare-fun o20 () us_t)

(declare-fun o21 () us_rep2)

(declare-fun o22 () us_split_fields4)

(declare-fun o23 () idir_t)

(declare-fun o24 () Int)

(declare-fun o25 () us_rep2)

(declare-fun o26 () us_rep2)

(declare-fun o27 () us_split_fields4)

(declare-fun o28 () us_rep)

(declare-fun o29 () us_rep)

(declare-fun o30 () Float32)

(declare-fun o31 () us_rep2)

(declare-fun o32 () us_split_fields4)

(declare-fun o33 () us_rep)

(declare-fun o34 () us_rep)

(declare-fun o35 () Float32)

(declare-fun o36 () Float32)

(declare-fun o37 () Float32)

(declare-fun o38 () option)

(declare-fun o39 () us_split_discrs6)

(declare-fun temp___849 () us_rep13)

(declare-fun usq_1 () us_rep13)

(declare-fun temp___851 () us_rep13)

(declare-fun o40 () option)

(declare-fun o41 () us_split_discrs6)

(declare-fun temp___846 () us_rep13)

(declare-fun usq_2 () us_rep13)

(declare-fun temp___848 () us_rep13)

(declare-fun o42 () us_rep2)

(declare-fun o43 () us_split_fields4)

(declare-fun o44 () us_rep)

(declare-fun o45 () us_t)

(declare-fun o46 () us_rep)

(declare-fun o47 () us_t)

(declare-fun o48 () us_rep2)

(declare-fun o49 () us_split_fields4)

(declare-fun o50 () us_rep)

(declare-fun o51 () us_t)

(declare-fun o52 () us_rep2)

(declare-fun o53 () us_split_fields4)

(declare-fun o54 () us_rep)

(declare-fun o55 () us_rep)

(declare-fun o56 () Float32)

(declare-fun o57 () Float32)

(declare-fun o58 () us_image)

(declare-fun o59 () us_t)

(declare-fun o60 () us_rep2)

(declare-fun o61 () us_split_fields4)

(declare-fun o62 () us_rep)

(declare-fun o63 () us_t)

(declare-fun o64 () us_rep2)

(declare-fun o65 () us_split_fields4)

(declare-fun o66 () us_rep)

(declare-fun o67 () us_rep)

(declare-fun o68 () Float32)

(declare-fun o69 () Float32)

(declare-fun o70 () us_image)

(declare-fun o71 () us_t)

(declare-fun o72 () us_rep2)

(declare-fun o73 () us_split_fields4)

(declare-fun o74 () us_rep)

(declare-fun o75 () us_rep)

(declare-fun o76 () Float32)

(declare-fun o77 () us_rep2)

(declare-fun o78 () us_split_fields4)

(declare-fun o79 () us_rep)

(declare-fun o80 () us_rep)

(declare-fun o81 () Float32)

(declare-fun o82 () Float32)

(declare-fun o83 () Float32)

(declare-fun usq_3 () us_rep13)

(declare-fun temp___865 () us_rep13)

(declare-fun usq_4 () us_rep13)

(declare-fun temp___855 () us_rep13)

(declare-fun o84 () Bool)

(declare-fun o85 () us_rep2)

(declare-fun o86 () us_split_fields4)

(declare-fun o87 () us_rep)

(declare-fun o88 () us_t)

(declare-fun o89 () us_rep2)

(declare-fun o90 () us_rep2)

(declare-fun candidate_valley_ids__split_fields2 () us_split_fields22)

(declare-fun candidate_valley_ids__split_discrs1 () us_split_discrs6)

(declare-fun result () us_split_fields__ref11)

(declare-fun best_valley_ids__split_fields2 () us_split_fields22)

(declare-fun result1 () us_split_discrs__ref3)

(declare-fun best_valley_ids__split_discrs1 () us_split_discrs6)

(declare-fun result2 () us_split_fields__ref6)

(declare-fun ir__split_fields1 () us_split_fields12)

(declare-fun result3 () Bool)

(declare-fun best_valley_ids__split_fields3 () us_split_fields22)

(declare-fun best_valley_ids__split_discrs2 () us_split_discrs6)

(declare-fun ir__split_fields2 () us_split_fields12)

(declare-fun candidate_valley_ids__split_fields3 () us_split_fields22)

(declare-fun candidate_valley_ids__split_discrs2 () us_split_discrs6)

(declare-fun result4 () Bool)

(declare-fun result5 () us_split_fields__ref11)

(declare-fun candidate_valley_ids__split_fields4 () us_split_fields22)

(declare-fun result6 () us_split_discrs__ref3)

(declare-fun candidate_valley_ids__split_discrs3 () us_split_discrs6)

(declare-fun result7 () Bool)

(declare-fun result8 () Bool)

(declare-fun result9 () us_split_fields__ref11)

(declare-fun candidate_valley_ids__split_fields5 () us_split_fields22)

(declare-fun result10 () us_split_discrs__ref3)

(declare-fun candidate_valley_ids__split_discrs4 () us_split_discrs6)

(declare-fun result11 () Bool)

(declare-fun result12 () Bool)

(declare-fun result13 () Bool)

(declare-fun result14 () us_split_fields__ref11)

(declare-fun candidate_valley_ids__split_fields6 () us_split_fields22)

(declare-fun result15 () us_split_discrs__ref3)

(declare-fun candidate_valley_ids__split_discrs5 () us_split_discrs6)

(declare-fun result16 () us_split_fields__ref11)

(declare-fun candidate_valley_ids__split_fields7 () us_split_fields22)

(declare-fun result17 () us_split_discrs__ref3)

(declare-fun candidate_valley_ids__split_discrs6 () us_split_discrs6)

(declare-fun result18 () Bool)

(declare-fun result19 () us_split_fields__ref11)

(declare-fun best_valley_ids__split_fields4 () us_split_fields22)

(declare-fun result20 () us_split_discrs__ref3)

(declare-fun best_valley_ids__split_discrs3 () us_split_discrs6)

(declare-fun result21 () us_split_fields__ref11)

(declare-fun best_valley_ids__split_fields5 () us_split_fields22)

(declare-fun result22 () us_split_discrs__ref3)

(declare-fun best_valley_ids__split_discrs4 () us_split_discrs6)

(declare-fun ir__split_fields3 () us_split_fields12)

(declare-fun result23 () Bool)

(declare-fun best_valley_ids__split_fields6 () us_split_fields__ref11)

(declare-fun best_valley_ids__split_discrs5 () us_split_discrs__ref3)

(declare-fun ir__split_fields4 () us_split_fields__ref6)

(declare-fun candidate_valley_ids__split_fields8 () us_split_fields__ref11)

(declare-fun candidate_valley_ids__split_discrs7 () us_split_discrs__ref3)

(declare-fun best_valley_ids__split_fields7 () us_split_fields22)

(declare-fun best_valley_ids__split_discrs6 () us_split_discrs6)

(declare-fun ir__split_fields5 () us_split_fields12)

(declare-fun candidate_valley_ids__split_fields9 () us_split_fields22)

(declare-fun candidate_valley_ids__split_discrs8 () us_split_discrs6)

(declare-fun best_valley_ids__split_fields8 () us_split_fields__ref11)

(declare-fun best_valley_ids__split_discrs7 () us_split_discrs__ref3)

(declare-fun ir__split_fields6 () us_split_fields__ref6)

(declare-fun candidate_valley_ids__split_fields10 () us_split_fields__ref11)

(declare-fun candidate_valley_ids__split_discrs9 () us_split_discrs__ref3)

(declare-fun best_valley_ids__split_fields9 () us_split_fields22)

(declare-fun best_valley_ids__split_discrs8 () us_split_discrs6)

(declare-fun ir__split_fields7 () us_split_fields12)

(declare-fun candidate_valley_ids__split_fields11 () us_split_fields22)

(declare-fun candidate_valley_ids__split_discrs10 () us_split_discrs6)

(declare-fun best_valley_ids__split_fields10 () us_split_fields__ref11)

(declare-fun best_valley_ids__split_discrs9 () us_split_discrs__ref3)

(declare-fun ir__split_fields8 () us_split_fields__ref6)

(declare-fun candidate_valley_ids__split_fields12 () us_split_fields__ref11)

(declare-fun candidate_valley_ids__split_discrs11 () us_split_discrs__ref3)

(declare-fun best_valley_ids__split_fields11 () us_split_fields22)

(declare-fun best_valley_ids__split_discrs10 () us_split_discrs6)

(declare-fun ir__split_fields9 () us_split_fields12)

(declare-fun candidate_valley_ids__split_fields13 () us_split_fields22)

(declare-fun candidate_valley_ids__split_discrs12 () us_split_discrs6)

;; H
  (assert (= (to_rep2 o) (fp #b0 #b00000000 #b00000000000000000000000)))

;; H
  (assert (= (to_rep2 o1) (fp #b0 #b00000000 #b00000000000000000000000)))

;; H
  (assert (= o1 o2))

;; H
  (assert (= o o3))

;; H
  (assert (= temp___875 o2))

;; H
  (assert (= temp___8751 o3))

;; H
  (assert
  (= (mk___rep1 (mk___split_fields1 temp___875 temp___8751)) zero_position))

;; H
  (assert
  (and
  (= (attr__constrained1
     (rec__robot_iface__proxy__speed
     (us_split_fields17
     (rec__algorithm__controller__robot (us_split_fields21 this))))) false)
  (= 1000 (to_rep5
          (rec__algorithm__gap_vectors__list__capacity
          (us_split_discrs3
          (rec__algorithm__controller__gapvec (us_split_fields21 this))))))))

;; H
  (assert (not (= (oeq disttogoal zero_position) true)))

;; H
  (assert
  (and
  (= o4 (length1
        (rec__algorithm__controller__gapvec (us_split_fields21 this))))
  (and (in_range7 o4)
  (<= o4 (to_rep5
         (rec__algorithm__gap_vectors__list__capacity
         (us_split_discrs3
         (rec__algorithm__controller__gapvec (us_split_fields21 this)))))))))

;; H
  (assert
  (and (= algorithm__findbestvalley__existing_gap_id_LAST__assume o4)
  (in_range9 o4)))

;; H
  (assert
  (= algorithm__findbestvalley__existing_gap_id_LAST__assume existing_gap_id_LAST))

;; H
  (assert (in_range9 existing_gap_id_LAST))

;; H
  (assert (= (to_rep6 o5) 0))

;; H
  (assert (= o6 (mk___split_discrs3 o5)))

;; H
  (assert
  (= algorithm__findbestvalley__best_valley_ids__assume (mk___rep11 o6
                                                        (mk___split_fields11
                                                        dummy16 dummy16)
                                                        true)))

;; H
  (assert
  (= result (mk___split_fields__ref11
            (mk___split_fields11
            (mk___rep6 (mk___split_fields6 best_valley_ids__split_fields))
            (mk___rep6 (mk___split_fields6 best_valley_ids__split_fields1))))))

;; H
  (assert
  (= best_valley_ids__split_fields2 (us_split_fields23
                                    algorithm__findbestvalley__best_valley_ids__assume)))

;; H
  (assert
  (= result1 (mk___split_discrs__ref3
             (mk___split_discrs3 best_valley_ids__split_discrs))))

;; H
  (assert
  (= best_valley_ids__split_discrs1 (us_split_discrs7
                                    algorithm__findbestvalley__best_valley_ids__assume)))

;; H
  (assert (= best_valley_ids__attr__constrained false))

;; H
  (assert
  (and
  (= algorithm__findbestvalley__ir__assume (first2
                                           (rec__algorithm__controller__gapvec
                                           (us_split_fields21 this))))
  (ite (= (= (length1
             (rec__algorithm__controller__gapvec (us_split_fields21 this))) 0) true)
  (= (bool_eq8 algorithm__findbestvalley__ir__assume no_element) true)
  (and
  (= (has_key
     (positions
     (rec__algorithm__controller__gapvec (us_split_fields21 this)))
     algorithm__findbestvalley__ir__assume) true)
  (= (get1
     (positions
     (rec__algorithm__controller__gapvec (us_split_fields21 this)))
     algorithm__findbestvalley__ir__assume) 1)))))

;; H
  (assert
  (= result2 (mk___split_fields__ref6 (mk___split_fields6 ir__split_fields))))

;; H
  (assert
  (= ir__split_fields1 (us_split_fields13
                       algorithm__findbestvalley__ir__assume)))

;; H
  (assert
  (= (to_rep5
     (rec__algorithm__gap_vectors__list__capacity
     (us_split_discrs3
     (rec__algorithm__controller__gapvec (us_split_fields21 this))))) 1000))

;; H
  (assert
  (and
  (= result3 (has_key
             (positions
             (rec__algorithm__controller__gapvec (us_split_fields21 this)))
             (mk___rep6 ir__split_fields1)))
  (= (= result3 true)
  (= (has_key
     (positions
     (rec__algorithm__controller__gapvec (us_split_fields21 this)))
     (mk___rep6 ir__split_fields1)) true))))

;; H
  (assert (= result3 true))

;; H
  (assert
  (= (to_rep5
     (rec__algorithm__gap_vectors__list__capacity
     (us_split_discrs3
     (rec__algorithm__controller__gapvec (us_split_fields21 this))))) 1000))

;; H
  (assert
  (= (has_key
     (positions
     (rec__algorithm__controller__gapvec (us_split_fields21 this)))
     (mk___rep6 ir__split_fields2)) true))

;; H
  (assert
  (and
  (= o7 (last2 (rec__algorithm__controller__gapvec (us_split_fields21 this))))
  (ite (= (= (length1
             (rec__algorithm__controller__gapvec (us_split_fields21 this))) 0) true)
  (= (bool_eq8 o7 no_element) true)
  (and
  (= (has_key
     (positions
     (rec__algorithm__controller__gapvec (us_split_fields21 this))) o7) true)
  (= (get1
     (positions
     (rec__algorithm__controller__gapvec (us_split_fields21 this))) o7)
  (length1 (rec__algorithm__controller__gapvec (us_split_fields21 this))))))))

;; H
  (assert (= result4 (bool_eq8 (mk___rep6 ir__split_fields2) o7)))

;; H
  (assert
  (=> (= result4 true)
  (and
  (= algorithm__findbestvalley__B_14__il__assume (first2
                                                 (rec__algorithm__controller__gapvec
                                                 (us_split_fields21 this))))
  (ite (= (= (length1
             (rec__algorithm__controller__gapvec (us_split_fields21 this))) 0) true)
  (= (bool_eq8 algorithm__findbestvalley__B_14__il__assume no_element) true)
  (and
  (= (has_key
     (positions
     (rec__algorithm__controller__gapvec (us_split_fields21 this)))
     algorithm__findbestvalley__B_14__il__assume) true)
  (= (get1
     (positions
     (rec__algorithm__controller__gapvec (us_split_fields21 this)))
     algorithm__findbestvalley__B_14__il__assume) 1))))))

;; H
  (assert
  (=> (not (= result4 true))
  (and
  (= algorithm__findbestvalley__B_14__il__assume (next
                                                 (rec__algorithm__controller__gapvec
                                                 (us_split_fields21 this))
                                                 (mk___rep6
                                                 ir__split_fields2)))
  (ite (= (ite (= (bool_eq8 (mk___rep6 ir__split_fields2) no_element) false) (=
          (get1
          (positions
          (rec__algorithm__controller__gapvec (us_split_fields21 this)))
          (mk___rep6 ir__split_fields2)) (length1
                                         (rec__algorithm__controller__gapvec
                                         (us_split_fields21 this)))) true) true)
  (= (bool_eq8 algorithm__findbestvalley__B_14__il__assume no_element) true)
  (and
  (= (has_key
     (positions
     (rec__algorithm__controller__gapvec (us_split_fields21 this)))
     algorithm__findbestvalley__B_14__il__assume) true)
  (= (get1
     (positions
     (rec__algorithm__controller__gapvec (us_split_fields21 this)))
     algorithm__findbestvalley__B_14__il__assume) (+ (get1
                                                     (positions
                                                     (rec__algorithm__controller__gapvec
                                                     (us_split_fields21 this)))
                                                     (mk___rep6
                                                     ir__split_fields2)) 1)))))))

;; H
  (assert (= algorithm__findbestvalley__B_14__il__assume il))

;; H
  (assert (= (to_rep6 o8) 0))

;; H
  (assert (= o9 (mk___split_discrs3 o8)))

;; H
  (assert
  (= algorithm__findbestvalley__B_14__candidate_valley_ids__assume (mk___rep11
                                                                   o9
                                                                   (mk___split_fields11
                                                                   dummy16
                                                                   dummy16)
                                                                   true)))

;; H
  (assert
  (= result5 (mk___split_fields__ref11 candidate_valley_ids__split_fields3)))

;; H
  (assert
  (= candidate_valley_ids__split_fields4 (us_split_fields23
                                         algorithm__findbestvalley__B_14__candidate_valley_ids__assume)))

;; H
  (assert
  (= result6 (mk___split_discrs__ref3 candidate_valley_ids__split_discrs2)))

;; H
  (assert
  (= candidate_valley_ids__split_discrs3 (us_split_discrs7
                                         algorithm__findbestvalley__B_14__candidate_valley_ids__assume)))

;; H
  (assert (= candidate_valley_ids__attr__constrained false))

;; H
  (assert
  (and
  (= o10 (element
         (rec__algorithm__controller__gapvec (us_split_fields21 this))
         (mk___rep6 ir__split_fields2)))
  (= (bool_eq4 o10
     (get
     (model__ (rec__algorithm__controller__gapvec (us_split_fields21 this)))
     (get1
     (positions
     (rec__algorithm__controller__gapvec (us_split_fields21 this)))
     (mk___rep6 ir__split_fields2)))) true)))

;; H
  (assert (= o11 (us_split_fields5 o10)))

;; H
  (assert (= o12 (rec__gaps__gap__idir o11)))

;; H
  (assert (= o13 (to_rep4 o12)))

;; H
  (assert (= result7 (ite (= o13 (- 1)) true false)))

;; H
  (assert (= result7 true))

;; H
  (assert
  (and
  (= o14 (element
         (rec__algorithm__controller__gapvec (us_split_fields21 this))
         (mk___rep6 ir__split_fields2)))
  (= (bool_eq4 o14
     (get
     (model__ (rec__algorithm__controller__gapvec (us_split_fields21 this)))
     (get1
     (positions
     (rec__algorithm__controller__gapvec (us_split_fields21 this)))
     (mk___rep6 ir__split_fields2)))) true)))

;; H
  (assert (= result8 (isrisinggapsafe this o14)))

;; H
  (assert (= result8 true))

;; H
  (assert (= (to_rep6 o15) 1))

;; H
  (assert (= o16 (mk___split_discrs3 o15)))

;; H
  (assert
  (= temp___841 (mk___rep11 o16
                (mk___split_fields11 (mk___rep6 ir__split_fields2) il) true)))

;; H
  (assert (= candidate_valley_ids__attr__constrained true))

(assert
;; WP_parameter_def
 ;; File "algorithm.ads", line 27, characters 0-0
  (not
  (= (rec__algorithm__findbestvalley__gap_id_pair__opt
     (us_split_discrs7 temp___841)) (rec__algorithm__findbestvalley__gap_id_pair__opt
                                    candidate_valley_ids__split_discrs3))))
(check-sat)
(exit)
