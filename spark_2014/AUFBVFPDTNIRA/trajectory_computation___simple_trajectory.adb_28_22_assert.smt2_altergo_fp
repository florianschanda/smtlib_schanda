(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
(* this is a prelude for Alt-Ergo real arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type t

logic tqtint : t -> int

axiom tqtaxiom : (forall i:t. ((0 <= tqtint(i)) and (tqtint(i) <= 65535)))

logic nth : t, int -> bool

axiom nth_out_of_bound :
  (forall x:t. forall n:int. (((n <  0) or (16 <= n)) -> (nth(x,
  n) = false)))

logic zeros : t

axiom Nth_zeros : (forall n:int. (nth(zeros, n) = false))

logic one : t

logic ones : t

axiom Nth_ones :
  (forall n:int. (((0 <= n) and (n <  16)) -> (nth(ones, n) = true)))

logic bw_and : t, t -> t

axiom Nth_bw_and :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  16)) ->
  (nth(bw_and(v1, v2), n) = match_bool(nth(v1, n), nth(v2, n), false))))

logic bw_or : t, t -> t

axiom Nth_bw_or :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  16)) ->
  (nth(bw_or(v1, v2), n) = match_bool(nth(v1, n), true, nth(v2, n)))))

logic bw_xor : t, t -> t

axiom Nth_bw_xor :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  16)) ->
  (nth(bw_xor(v1, v2), n) = xorb(nth(v1, n), nth(v2, n)))))

logic bw_not : t -> t

axiom Nth_bw_not :
  (forall v:t. forall n:int. (((0 <= n) and (n <  16)) -> (nth(bw_not(v),
  n) = match_bool(nth(v, n), false, true))))

logic lsr : t, int -> t

axiom Lsr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  16) -> (nth(lsr(b, s), n) = nth(b, (n + s)))))))

axiom Lsr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((16 <= (n + s)) -> (nth(lsr(b, s), n) = false)))))

axiom lsr_zeros : (forall x:t. (lsr(x, 0) = x))

logic asr : t, int -> t

axiom Asr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  16)) -> (((n + s) <  16) -> (nth(asr(b, s), n) = nth(b, (n + s)))))))

axiom Asr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  16)) -> ((16 <= (n + s)) -> (nth(asr(b, s), n) = nth(b,
  (16 - 1)))))))

axiom asr_zeros : (forall x:t. (asr(x, 0) = x))

logic lsl : t, int -> t

axiom Lsl_nth_high :
  (forall b:t. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  16))) -> (nth(lsl(b, s), n) = nth(b, (n - s)))))

axiom Lsl_nth_low :
  (forall b:t. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth(lsl(b, s), n) = false)))

axiom lsl_zeros : (forall x:t. (lsl(x, 0) = x))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs_int(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_1 : (forall x:int. ((x % 1) = 0))

axiom Div_1 : (forall x:int. ((x / 1) = x))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic rotate_right : t, int -> t

axiom Nth_rotate_right :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  16)) ->
  ((0 <= n) -> (nth(rotate_right(v, n), i) = nth(v, ((i + n) % 16))))))

logic rotate_left : t, int -> t

axiom Nth_rotate_left :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  16)) ->
  ((0 <= n) -> (nth(rotate_left(v, n), i) = nth(v, ((i - n) % 16))))))

logic pow2 : int -> int

axiom Power_0 : (pow2(0) = 1)

axiom Power_s : (forall n:int. ((0 <= n) -> (pow2((n + 1)) = (2 * pow2(n)))))

axiom Power_1 : (pow2(1) = 2)

axiom Power_sum :
  (forall n:int. forall m:int. (((0 <= n) and (0 <= m)) ->
  (pow2((n + m)) = (pow2(n) * pow2(m)))))

axiom pow2pos : (forall i:int. ((0 <= i) -> (0 <  pow2(i))))

axiom pow2_0 : (pow2(0) = 1)

axiom pow2_1 : (pow2(1) = 2)

axiom pow2_2 : (pow2(2) = 4)

axiom pow2_3 : (pow2(3) = 8)

axiom pow2_4 : (pow2(4) = 16)

axiom pow2_5 : (pow2(5) = 32)

axiom pow2_6 : (pow2(6) = 64)

axiom pow2_7 : (pow2(7) = 128)

axiom pow2_8 : (pow2(8) = 256)

axiom pow2_9 : (pow2(9) = 512)

axiom pow2_10 : (pow2(10) = 1024)

axiom pow2_11 : (pow2(11) = 2048)

axiom pow2_12 : (pow2(12) = 4096)

axiom pow2_13 : (pow2(13) = 8192)

axiom pow2_14 : (pow2(14) = 16384)

axiom pow2_15 : (pow2(15) = 32768)

axiom pow2_16 : (pow2(16) = 65536)

axiom pow2_17 : (pow2(17) = 131072)

axiom pow2_18 : (pow2(18) = 262144)

axiom pow2_19 : (pow2(19) = 524288)

axiom pow2_20 : (pow2(20) = 1048576)

axiom pow2_21 : (pow2(21) = 2097152)

axiom pow2_22 : (pow2(22) = 4194304)

axiom pow2_23 : (pow2(23) = 8388608)

axiom pow2_24 : (pow2(24) = 16777216)

axiom pow2_25 : (pow2(25) = 33554432)

axiom pow2_26 : (pow2(26) = 67108864)

axiom pow2_27 : (pow2(27) = 134217728)

axiom pow2_28 : (pow2(28) = 268435456)

axiom pow2_29 : (pow2(29) = 536870912)

axiom pow2_30 : (pow2(30) = 1073741824)

axiom pow2_31 : (pow2(31) = 2147483648)

axiom pow2_32 : (pow2(32) = 4294967296)

axiom pow2_33 : (pow2(33) = 8589934592)

axiom pow2_34 : (pow2(34) = 17179869184)

axiom pow2_35 : (pow2(35) = 34359738368)

axiom pow2_36 : (pow2(36) = 68719476736)

axiom pow2_37 : (pow2(37) = 137438953472)

axiom pow2_38 : (pow2(38) = 274877906944)

axiom pow2_39 : (pow2(39) = 549755813888)

axiom pow2_40 : (pow2(40) = 1099511627776)

axiom pow2_41 : (pow2(41) = 2199023255552)

axiom pow2_42 : (pow2(42) = 4398046511104)

axiom pow2_43 : (pow2(43) = 8796093022208)

axiom pow2_44 : (pow2(44) = 17592186044416)

axiom pow2_45 : (pow2(45) = 35184372088832)

axiom pow2_46 : (pow2(46) = 70368744177664)

axiom pow2_47 : (pow2(47) = 140737488355328)

axiom pow2_48 : (pow2(48) = 281474976710656)

axiom pow2_49 : (pow2(49) = 562949953421312)

axiom pow2_50 : (pow2(50) = 1125899906842624)

axiom pow2_51 : (pow2(51) = 2251799813685248)

axiom pow2_52 : (pow2(52) = 4503599627370496)

axiom pow2_53 : (pow2(53) = 9007199254740992)

axiom pow2_54 : (pow2(54) = 18014398509481984)

axiom pow2_55 : (pow2(55) = 36028797018963968)

axiom pow2_56 : (pow2(56) = 72057594037927936)

axiom pow2_57 : (pow2(57) = 144115188075855872)

axiom pow2_58 : (pow2(58) = 288230376151711744)

axiom pow2_59 : (pow2(59) = 576460752303423488)

axiom pow2_60 : (pow2(60) = 1152921504606846976)

axiom pow2_61 : (pow2(61) = 2305843009213693952)

axiom pow2_62 : (pow2(62) = 4611686018427387904)

axiom pow2_63 : (pow2(63) = 9223372036854775808)

axiom pow2_64 : (pow2(64) = 18446744073709551616)

logic is_signed_positive : t -> prop

logic of_int : int -> t

logic to_int : t -> int

axiom to_int_def :
  (forall x:t [to_int(x)]. ((is_signed_positive(x) ->
  (to_int(x) = tqtint(x))) and ((not is_signed_positive(x)) ->
  (to_int(x) = (-(65536 - tqtint(x)))))))

axiom to_uint_extensionality :
  (forall v:t. forall vqt:t. ((tqtint(v) = tqtint(vqt)) -> (v = vqt)))

axiom to_int_extensionality :
  (forall v:t. forall vqt:t. ((to_int(v) = to_int(vqt)) -> (v = vqt)))

predicate uint_in_range(i: int) = ((0 <= i) and (i <= 65535))

axiom to_uint_bounds :
  (forall v:t. ((0 <= tqtint(v)) and (tqtint(v) <  65536)))

axiom to_uint_of_int :
  (forall i:int. (((0 <= i) and (i <  65536)) -> (tqtint(of_int(i)) = i)))

logic size_bv : t

axiom to_uint_size_bv : (tqtint(size_bv) = 16)

axiom to_uint_zeros : (tqtint(zeros) = 0)

axiom to_uint_one : (tqtint(one) = 1)

axiom to_uint_ones : (tqtint(ones) = 65535)

predicate ult(x: t, y: t) = (tqtint(x) <  tqtint(y))

predicate ule(x: t, y: t) = (tqtint(x) <= tqtint(y))

predicate ugt(x: t, y: t) = (tqtint(y) <  tqtint(x))

predicate uge(x: t, y: t) = (tqtint(y) <= tqtint(x))

predicate slt(v1: t, v2: t) = (to_int(v1) <  to_int(v2))

predicate sle(v1: t, v2: t) = (to_int(v1) <= to_int(v2))

predicate sgt(v1: t, v2: t) = (to_int(v2) <  to_int(v1))

predicate sge(v1: t, v2: t) = (to_int(v2) <= to_int(v1))

axiom positive_is_ge_zeros :
  (forall x:t. (is_signed_positive(x) <-> sge(x, zeros)))

logic add : t, t -> t

axiom to_uint_add_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) + tqtint(v2)) <  65536) ->
  (tqtint(add(v1, v2)) = (tqtint(v1) + tqtint(v2)))))

logic sub : t, t -> t

axiom to_uint_sub_bounded :
  (forall v1:t. forall v2:t. (((0 <= (tqtint(v1) - tqtint(v2))) and
  ((tqtint(v1) - tqtint(v2)) <  65536)) -> (tqtint(sub(v1,
  v2)) = (tqtint(v1) - tqtint(v2)))))

logic neg : t -> t

axiom to_uint_neg : (forall v:t. (tqtint(neg(v)) = ((-tqtint(v)) % 65536)))

logic mul : t, t -> t

axiom to_uint_mul_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) * tqtint(v2)) <  65536) ->
  (tqtint(mul(v1, v2)) = (tqtint(v1) * tqtint(v2)))))

logic udiv : t, t -> t

axiom to_uint_udiv :
  (forall v1:t. forall v2:t. (tqtint(udiv(v1,
  v2)) = (tqtint(v1) / tqtint(v2))))

logic urem : t, t -> t

axiom to_uint_urem :
  (forall v1:t. forall v2:t. (tqtint(urem(v1,
  v2)) = (tqtint(v1) % tqtint(v2))))

logic lsr_bv : t, t -> t

axiom lsr_bv_is_lsr :
  (forall x:t. forall n:t. (lsr_bv(x, n) = lsr(x, tqtint(n))))

axiom to_uint_lsr :
  (forall v:t. forall n:t. (tqtint(lsr_bv(v,
  n)) = (tqtint(v) / pow2(tqtint(n)))))

logic asr_bv : t, t -> t

axiom asr_bv_is_asr :
  (forall x:t. forall n:t. (asr_bv(x, n) = asr(x, tqtint(n))))

logic lsl_bv : t, t -> t

axiom lsl_bv_is_lsl :
  (forall x:t. forall n:t. (lsl_bv(x, n) = lsl(x, tqtint(n))))

axiom to_uint_lsl :
  (forall v:t. forall n:t. (tqtint(lsl_bv(v,
  n)) = ((tqtint(v) * pow2(tqtint(n))) % 65536)))

logic rotate_right_bv : t, t -> t

logic rotate_left_bv : t, t -> t

axiom rotate_left_bv_is_rotate_left :
  (forall v:t. forall n:t. (rotate_left_bv(v, n) = rotate_left(v,
  tqtint(n))))

axiom rotate_right_bv_is_rotate_right :
  (forall v:t. forall n:t. (rotate_right_bv(v, n) = rotate_right(v,
  tqtint(n))))

logic nth_bv : t, t -> bool

axiom Nth_bv_is_nth :
  (forall x:t. forall i:t. (nth(x, tqtint(i)) = nth_bv(x, i)))

axiom Nth_bv_is_nth2 :
  (forall x:t. forall i:int. (((0 <= i) and (i <  65536)) -> (nth_bv(x,
  of_int(i)) = nth(x, i))))

logic eq_sub_bv : t, t, t, t -> prop

predicate eq_sub(a: t, b: t, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth(a, j) = nth(b, j))))

axiom eq_sub_equiv :
  (forall a:t. forall b:t. forall i:t. forall n:t. (eq_sub(a, b, tqtint(i),
  tqtint(n)) <-> eq_sub_bv(a, b, i, n)))

axiom Extensionality :
  (forall x:t. forall y:t [eq_sub(x, y, 0, 16)]. (eq_sub(x, y, 0, 16) ->
  (x = y)))

type t__ref = { t__content : t
}

logic bool_eq : t, t -> bool

axiom bool_eq_def :
  (forall x:t. forall y:t [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic bool_ne : t, t -> bool

axiom bool_ne_def :
  (forall x:t. forall y:t [bool_ne(x, y)]. (((not (x = y)) -> (bool_ne(x,
  y) = true)) and ((x = y) -> (bool_ne(x, y) = false))))

logic bool_lt : t, t -> bool

axiom bool_lt_def :
  (forall x:t. forall y:t [bool_lt(x, y)]. ((ult(x, y) -> (bool_lt(x,
  y) = true)) and ((not ult(x, y)) -> (bool_lt(x, y) = false))))

logic bool_le : t, t -> bool

axiom bool_le_def :
  (forall x:t. forall y:t [bool_le(x, y)]. ((ule(x, y) -> (bool_le(x,
  y) = true)) and ((not ule(x, y)) -> (bool_le(x, y) = false))))

logic bool_gt : t, t -> bool

axiom bool_gt_def :
  (forall x:t. forall y:t [bool_gt(x, y)]. ((ugt(x, y) -> (bool_gt(x,
  y) = true)) and ((not ugt(x, y)) -> (bool_gt(x, y) = false))))

logic bool_ge : t, t -> bool

axiom bool_ge_def :
  (forall x:t. forall y:t [bool_ge(x, y)]. ((uge(x, y) -> (bool_ge(x,
  y) = true)) and ((not uge(x, y)) -> (bool_ge(x, y) = false))))

logic power : t, int -> t

axiom Power_01 : (forall x:t. (power(x, 0) = one))

axiom Power_11 : (forall x:t. (power(x, 1) = x))

axiom Power_s1 :
  (forall x:t. forall n:int. ((0 <= n) -> (power(x, (n + 1)) = mul(x,
  power(x, n)))))

axiom Power_s_alt :
  (forall x:t. forall n:int. ((0 <  n) -> (power(x, n) = mul(x, power(x,
  (n - 1))))))

axiom Power_sum1 :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n + m)) = mul(power(x, n), power(x, m))))))

axiom Power_mult :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n * m)) = power(power(x, n), m)))))

axiom Power_mult2 :
  (forall x:t. forall y:t. forall n:int. ((0 <= n) -> (power(mul(x, y),
  n) = mul(power(x, n), power(y, n)))))

logic bv_min : t, t -> t

axiom bv_min_def :
  (forall x:t. forall y:t [bv_min(x, y)]. ((ule(x, y) -> (bv_min(x,
  y) = x)) and ((not ule(x, y)) -> (bv_min(x, y) = y))))

logic bv_max : t, t -> t

axiom bv_max_def :
  (forall x:t. forall y:t [bv_max(x, y)]. ((ule(x, y) -> (bv_max(x,
  y) = y)) and ((not ule(x, y)) -> (bv_max(x, y) = x))))

logic min : int, int -> int

axiom min_def :
  (forall x:int. forall y:int [min(x, y)]. (((x <= y) -> (min(x, y) = x)) and
  ((not (x <= y)) -> (min(x, y) = y))))

logic max : int, int -> int

axiom max_def :
  (forall x:int. forall y:int [max(x, y)]. (((x <= y) -> (max(x, y) = y)) and
  ((not (x <= y)) -> (max(x, y) = x))))

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

axiom bv_min_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_min(x, y)) = min(tqtint(x),
  tqtint(y))))

axiom bv_max_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_max(x, y)) = max(tqtint(x),
  tqtint(y))))

axiom add_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x + y) / z) = ((x / z) + (y / z)))))

axiom sub_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x - y) / z) = ((x / z) - (y / z)))))

axiom neg_div :
  (forall x:real. forall y:real. ((not (y = 0.0)) ->
  (((-x) / y) = (-(x / y)))))

axiom assoc_mul_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x * y) / z) = (x * (y / z)))))

axiom assoc_div_mul :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> (((x / y) / z) = (x / (y * z)))))

axiom assoc_div_div :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> ((x / (y / z)) = ((x * z) / y))))

type t1

logic tqtreal : t1 -> real

logic tqtisFinite : t1 -> prop

axiom tqtaxiom1 :
  (forall x:t1. (tqtisFinite(x) ->
  (((-0x1FFFFFFFFFFFFF.0p971) <= tqtreal(x)) and
  (tqtreal(x) <= 0x1FFFFFFFFFFFFF.0p971))))

axiom Abs_le :
  (forall x:real. forall y:real. ((abs_real(x) <= y) <-> (((-y) <= x) and
  (x <= y))))

axiom Abs_pos : (forall x:real. (0.0 <= abs_real(x)))

axiom Abs_sum :
  (forall x:real. forall y:real.
  (abs_real((x + y)) <= (abs_real(x) + abs_real(y))))

axiom Abs_prod :
  (forall x:real. forall y:real.
  (abs_real((x * y)) = (abs_real(x) * abs_real(y))))

axiom triangular_inequality :
  (forall x:real. forall y:real. forall z:real.
  (abs_real((x - z)) <= (abs_real((x - y)) + abs_real((y - z)))))

axiom Monotonic :
  (forall x:int. forall y:int. ((x <= y) ->
  (real_of_int(x) <= real_of_int(y))))

logic truncate : real -> int

axiom Truncate_int : (forall i:int. (truncate(real_of_int(i)) = i))

axiom Truncate_down_pos :
  (forall x:real. ((0.0 <= x) -> ((real_of_int(truncate(x)) <= x) and
  (x <  real_of_int((truncate(x) + 1))))))

axiom Truncate_up_neg :
  (forall x:real. ((x <= 0.0) -> ((real_of_int((truncate(x) - 1)) <  x) and
  (x <= real_of_int(truncate(x))))))

axiom Real_of_truncate :
  (forall x:real. (((x - 1.0) <= real_of_int(truncate(x))) and
  (real_of_int(truncate(x)) <= (x + 1.0))))

axiom Truncate_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (truncate(x) <= truncate(y))))

axiom Truncate_monotonic_int1 :
  (forall x:real. forall i:int. ((x <= real_of_int(i)) ->
  (truncate(x) <= i)))

axiom Truncate_monotonic_int2 :
  (forall x:real. forall i:int. ((real_of_int(i) <= x) ->
  (i <= truncate(x))))

logic floor : real -> int

logic ceil : real -> int

axiom Floor_int : (forall i:int. (floor(real_of_int(i)) = i))

axiom Ceil_int : (forall i:int. (ceil(real_of_int(i)) = i))

axiom Floor_down :
  (forall x:real. ((real_of_int(floor(x)) <= x) and
  (x <  real_of_int((floor(x) + 1)))))

axiom Ceil_up :
  (forall x:real. ((real_of_int((ceil(x) - 1)) <  x) and
  (x <= real_of_int(ceil(x)))))

axiom Floor_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (floor(x) <= floor(y))))

axiom Ceil_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (ceil(x) <= ceil(y))))

logic match_mode : fpa_rounding_mode, 'a, 'a, 'a, 'a, 'a -> 'a

axiom match_mode_RNE :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(NearestTiesToEven, z, z1, z2, z3, z4) = z))

axiom match_mode_RNA :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(NearestTiesToAway, z, z1, z2, z3, z4) = z1))

axiom match_mode_RTP :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(Up, z, z1, z2, z3, z4) = z2))

axiom match_mode_RTN :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(Down, z, z1, z2, z3, z4) = z3))

axiom match_mode_RTZ :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(ToZero, z, z1, z2, z3, z4) = z4))

predicate to_nearest(m: fpa_rounding_mode) = ((m = NearestTiesToEven) or
  (m = NearestTiesToAway))

logic zeroF : t1

logic add1 : fpa_rounding_mode, t1, t1 -> t1

logic sub1 : fpa_rounding_mode, t1, t1 -> t1

logic mul1 : fpa_rounding_mode, t1, t1 -> t1

logic div : fpa_rounding_mode, t1, t1 -> t1

logic abs : t1 -> t1

logic neg1 : t1 -> t1

logic fma : fpa_rounding_mode, t1, t1, t1 -> t1

logic sqrt : fpa_rounding_mode, t1 -> t1

logic roundToIntegral : fpa_rounding_mode, t1 -> t1

logic min1 : t1, t1 -> t1

logic max1 : t1, t1 -> t1

logic le : t1, t1 -> prop

logic lt : t1, t1 -> prop

logic eq : t1, t1 -> prop

logic is_normal : t1 -> prop

logic is_subnormal : t1 -> prop

logic is_zero : t1 -> prop

logic is_infinite : t1 -> prop

logic is_nan : t1 -> prop

logic is_positive : t1 -> prop

logic is_negative : t1 -> prop

predicate is_plus_infinity(x: t1) = (is_infinite(x) and is_positive(x))

predicate is_minus_infinity(x: t1) = (is_infinite(x) and is_negative(x))

predicate is_plus_zero(x: t1) = (is_zero(x) and is_positive(x))

predicate is_minus_zero(x: t1) = (is_zero(x) and is_negative(x))

predicate is_not_nan(x: t1) = (tqtisFinite(x) or is_infinite(x))

axiom is_not_nan1 : (forall x:t1. (is_not_nan(x) <-> (not is_nan(x))))

axiom is_not_finite :
  (forall x:t1. ((not tqtisFinite(x)) <-> (is_infinite(x) or is_nan(x))))

axiom zeroF_is_positive : is_positive(zeroF)

axiom zeroF_is_zero : is_zero(zeroF)

axiom zero_to_real :
  (forall x:t1 [is_zero(x)]. (is_zero(x) <-> (tqtisFinite(x) and
  (tqtreal(x) = 0.0))))

logic of_int1 : fpa_rounding_mode, int -> t1

logic to_int1 : fpa_rounding_mode, t1 -> int

axiom zero_of_int : (forall m:fpa_rounding_mode. (zeroF = of_int1(m, 0)))

logic max_int1 : int

axiom max_real_int : (0x1.FFFFFFFFFFFFFp1023 = real_of_int(max_int1))

predicate in_range(x: real) = (((-0x1.FFFFFFFFFFFFFp1023) <= x) and
  (x <= 0x1.FFFFFFFFFFFFFp1023))

predicate in_int_range(i: int) = (((-max_int1) <= i) and (i <= max_int1))

axiom is_finite : (forall x:t1. (tqtisFinite(x) -> in_range(tqtreal(x))))

predicate no_overflow(m: fpa_rounding_mode, x: real) = in_range(float64(m,x))

axiom Bounded_real_no_overflow :
  (forall m:fpa_rounding_mode. forall x:real. (in_range(x) ->
  in_range(float64(m,x))))

axiom Round_to_real :
  (forall m:fpa_rounding_mode. forall x:t1. (tqtisFinite(x) ->
  (float64(m,tqtreal(x)) = tqtreal(x))))

axiom Round_down_le : (forall x:real. (float64(Down,x) <= x))

axiom Round_up_ge : (forall x:real. (x <= float64(Up,x)))

axiom Round_down_neg :
  (forall x:real. (float64(Down,(-x)) = (-float64(Up,x))))

axiom Round_up_neg : (forall x:real. (float64(Up,(-x)) = (-float64(Down,x))))

predicate in_safe_int_range(i: int) = (((-9007199254740992) <= i) and
  (i <= 9007199254740992))

axiom Exact_rounding_for_integers :
  (forall m:fpa_rounding_mode. forall i:int. (in_safe_int_range(i) ->
  (float64(m,real_of_int(i)) = real_of_int(i))))

predicate same_sign(x: t1, y: t1) = ((is_positive(x) and is_positive(y)) or
  (is_negative(x) and is_negative(y)))

predicate diff_sign(x: t1, y: t1) = ((is_positive(x) and is_negative(y)) or
  (is_negative(x) and is_positive(y)))

axiom feq_eq :
  (forall x:t1. forall y:t1. (tqtisFinite(x) -> (tqtisFinite(y) ->
  ((not is_zero(x)) -> (eq(x, y) -> (x = y))))))

axiom eq_feq :
  (forall x:t1. forall y:t1. (tqtisFinite(x) -> (tqtisFinite(y) ->
  ((x = y) -> eq(x, y)))))

axiom eq_refl : (forall x:t1. (tqtisFinite(x) -> eq(x, x)))

axiom eq_sym : (forall x:t1. forall y:t1. (eq(x, y) -> eq(y, x)))

axiom eq_trans :
  (forall x:t1. forall y:t1. forall z:t1. (eq(x, y) -> (eq(y, z) -> eq(x,
  z))))

axiom eq_zero : eq(zeroF, neg1(zeroF))

axiom eq_to_real_finite :
  (forall x:t1. forall y:t1. ((tqtisFinite(x) and tqtisFinite(y)) -> (eq(x,
  y) <-> (tqtreal(x) = tqtreal(y)))))

axiom eq_special :
  (forall x:t1. forall y:t1. (eq(x, y) -> (is_not_nan(x) and
  (is_not_nan(y) and ((tqtisFinite(x) and tqtisFinite(y)) or
  (is_infinite(x) and (is_infinite(y) and same_sign(x, y))))))))

axiom lt_finite :
  (forall x:t1. forall y:t1 [lt(x, y)]. ((tqtisFinite(x) and
  tqtisFinite(y)) -> (lt(x, y) <-> (tqtreal(x) <  tqtreal(y)))))

axiom le_finite :
  (forall x:t1. forall y:t1 [le(x, y)]. ((tqtisFinite(x) and
  tqtisFinite(y)) -> (le(x, y) <-> (tqtreal(x) <= tqtreal(y)))))

axiom le_lt_trans :
  (forall x:t1. forall y:t1. forall z:t1. ((le(x, y) and lt(y, z)) -> lt(x,
  z)))

axiom lt_le_trans :
  (forall x:t1. forall y:t1. forall z:t1. ((lt(x, y) and le(y, z)) -> lt(x,
  z)))

axiom le_ge_asym :
  (forall x:t1. forall y:t1. ((le(x, y) and le(y, x)) -> eq(x, y)))

axiom not_lt_ge :
  (forall x:t1. forall y:t1. (((not lt(x, y)) and (is_not_nan(x) and
  is_not_nan(y))) -> le(y, x)))

axiom not_gt_le :
  (forall x:t1. forall y:t1. (((not lt(y, x)) and (is_not_nan(x) and
  is_not_nan(y))) -> le(x, y)))

axiom le_special :
  (forall x:t1. forall y:t1 [le(x, y)]. (le(x, y) -> ((tqtisFinite(x) and
  tqtisFinite(y)) or ((is_minus_infinity(x) and is_not_nan(y)) or
  (is_not_nan(x) and is_plus_infinity(y))))))

axiom lt_special :
  (forall x:t1. forall y:t1 [lt(x, y)]. (lt(x, y) -> ((tqtisFinite(x) and
  tqtisFinite(y)) or ((is_minus_infinity(x) and (is_not_nan(y) and
  (not is_minus_infinity(y)))) or (is_not_nan(x) and
  ((not is_plus_infinity(x)) and is_plus_infinity(y)))))))

axiom lt_lt_finite :
  (forall x:t1. forall y:t1. forall z:t1. (lt(x, y) -> (lt(y, z) ->
  tqtisFinite(y))))

axiom positive_to_real :
  (forall x:t1 [is_positive(x)]. (tqtisFinite(x) -> (is_positive(x) ->
  (0.0 <= tqtreal(x)))))

axiom to_real_positive :
  (forall x:t1 [is_positive(x)]. (tqtisFinite(x) -> ((0.0 <  tqtreal(x)) ->
  is_positive(x))))

axiom negative_to_real :
  (forall x:t1 [is_negative(x)]. (tqtisFinite(x) -> (is_negative(x) ->
  (tqtreal(x) <= 0.0))))

axiom to_real_negative :
  (forall x:t1 [is_negative(x)]. (tqtisFinite(x) -> ((tqtreal(x) <  0.0) ->
  is_negative(x))))

axiom negative_xor_positive :
  (forall x:t1. (not (is_positive(x) and is_negative(x))))

axiom negative_or_positive :
  (forall x:t1. (is_not_nan(x) -> (is_positive(x) or is_negative(x))))

axiom diff_sign_trans :
  (forall x:t1. forall y:t1. forall z:t1. ((diff_sign(x, y) and diff_sign(y,
  z)) -> same_sign(x, z)))

axiom diff_sign_product :
  (forall x:t1. forall y:t1. ((tqtisFinite(x) and (tqtisFinite(y) and
  ((tqtreal(x) * tqtreal(y)) <  0.0))) -> diff_sign(x, y)))

axiom same_sign_product :
  (forall x:t1. forall y:t1. ((tqtisFinite(x) and (tqtisFinite(y) and
  same_sign(x, y))) -> (0.0 <= (tqtreal(x) * tqtreal(y)))))

predicate product_sign(z: t1, x: t1, y: t1) = ((same_sign(x, y) ->
  is_positive(z)) and (diff_sign(x, y) -> is_negative(z)))

predicate overflow_value(m: fpa_rounding_mode, x: t1) =
  ((((((m = NearestTiesToEven) -> is_infinite(x)) and
  ((m = NearestTiesToAway) -> is_infinite(x))) and ((m = Up) ->
  ((is_positive(x) -> is_infinite(x)) and ((not is_positive(x)) ->
  (tqtisFinite(x) and (tqtreal(x) = (-0x1.FFFFFFFFFFFFFp1023))))))) and
  ((m = Down) -> ((is_positive(x) -> (tqtisFinite(x) and
  (tqtreal(x) = 0x1.FFFFFFFFFFFFFp1023))) and ((not is_positive(x)) ->
  is_infinite(x))))) and ((m = ToZero) -> ((is_positive(x) ->
  (tqtisFinite(x) and (tqtreal(x) = 0x1.FFFFFFFFFFFFFp1023))) and
  ((not is_positive(x)) -> (tqtisFinite(x) and
  (tqtreal(x) = (-0x1.FFFFFFFFFFFFFp1023)))))))

predicate sign_zero_result(m: fpa_rounding_mode, x: t1) = (is_zero(x) ->
  ((((((m = NearestTiesToEven) -> is_positive(x)) and
  ((m = NearestTiesToAway) -> is_positive(x))) and ((m = Up) ->
  is_positive(x))) and ((m = Down) -> is_negative(x))) and ((m = ToZero) ->
  is_positive(x))))

axiom add_finite :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1 [add1(m, x, y)].
  (tqtisFinite(x) -> (tqtisFinite(y) ->
  (in_range(float64(m,(tqtreal(x) + tqtreal(y)))) -> (tqtisFinite(add1(m, x,
  y)) and (tqtreal(add1(m, x,
  y)) = float64(m,(tqtreal(x) + tqtreal(y)))))))))

axiom add_finite_rev :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1 [add1(m, x, y)].
  (tqtisFinite(add1(m, x, y)) -> (tqtisFinite(x) and tqtisFinite(y))))

axiom add_finite_rev_n :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1 [add1(m, x, y)].
  (to_nearest(m) -> (tqtisFinite(add1(m, x, y)) ->
  (in_range(float64(m,(tqtreal(x) + tqtreal(y)))) and (tqtreal(add1(m, x,
  y)) = float64(m,(tqtreal(x) + tqtreal(y))))))))

axiom sub_finite :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1 [sub1(m, x, y)].
  (tqtisFinite(x) -> (tqtisFinite(y) ->
  (in_range(float64(m,(tqtreal(x) - tqtreal(y)))) -> (tqtisFinite(sub1(m, x,
  y)) and (tqtreal(sub1(m, x,
  y)) = float64(m,(tqtreal(x) - tqtreal(y)))))))))

axiom sub_finite_rev :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1 [sub1(m, x, y)].
  (tqtisFinite(sub1(m, x, y)) -> (tqtisFinite(x) and tqtisFinite(y))))

axiom sub_finite_rev_n :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1 [sub1(m, x, y)].
  (to_nearest(m) -> (tqtisFinite(sub1(m, x, y)) ->
  (in_range(float64(m,(tqtreal(x) - tqtreal(y)))) and (tqtreal(sub1(m, x,
  y)) = float64(m,(tqtreal(x) - tqtreal(y))))))))

axiom mul_finite :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1 [mul1(m, x, y)].
  (tqtisFinite(x) -> (tqtisFinite(y) ->
  (in_range(float64(m,(tqtreal(x) * tqtreal(y)))) -> (tqtisFinite(mul1(m, x,
  y)) and (tqtreal(mul1(m, x,
  y)) = float64(m,(tqtreal(x) * tqtreal(y)))))))))

axiom mul_finite_rev :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1 [mul1(m, x, y)].
  (tqtisFinite(mul1(m, x, y)) -> (tqtisFinite(x) and tqtisFinite(y))))

axiom mul_finite_rev_n :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1 [mul1(m, x, y)].
  (to_nearest(m) -> (tqtisFinite(mul1(m, x, y)) ->
  (in_range(float64(m,(tqtreal(x) * tqtreal(y)))) and (tqtreal(mul1(m, x,
  y)) = float64(m,(tqtreal(x) * tqtreal(y))))))))

axiom div_finite :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1 [div(m, x, y)].
  (tqtisFinite(x) -> (tqtisFinite(y) -> ((not is_zero(y)) ->
  (in_range(float64(m,(tqtreal(x) / tqtreal(y)))) -> (tqtisFinite(div(m, x,
  y)) and (tqtreal(div(m, x,
  y)) = float64(m,(tqtreal(x) / tqtreal(y))))))))))

axiom div_finite_rev :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1 [div(m, x, y)].
  (tqtisFinite(div(m, x, y)) -> ((tqtisFinite(x) and (tqtisFinite(y) and
  (not is_zero(y)))) or (tqtisFinite(x) and (is_infinite(y) and
  (tqtreal(div(m, x, y)) = 0.0))))))

axiom div_finite_rev_n :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1 [div(m, x, y)].
  (to_nearest(m) -> (tqtisFinite(div(m, x, y)) -> (tqtisFinite(y) ->
  (in_range(float64(m,(tqtreal(x) / tqtreal(y)))) and (tqtreal(div(m, x,
  y)) = float64(m,(tqtreal(x) / tqtreal(y)))))))))

axiom neg_finite :
  (forall x:t1 [neg1(x)]. (tqtisFinite(x) -> (tqtisFinite(neg1(x)) and
  (tqtreal(neg1(x)) = (-tqtreal(x))))))

axiom neg_finite_rev :
  (forall x:t1 [neg1(x)]. (tqtisFinite(neg1(x)) -> (tqtisFinite(x) and
  (tqtreal(neg1(x)) = (-tqtreal(x))))))

axiom abs_finite :
  (forall x:t1 [abs(x)]. (tqtisFinite(x) -> (tqtisFinite(abs(x)) and
  ((tqtreal(abs(x)) = abs_real(tqtreal(x))) and is_positive(abs(x))))))

axiom abs_finite_rev :
  (forall x:t1 [abs(x)]. (tqtisFinite(abs(x)) -> (tqtisFinite(x) and
  (tqtreal(abs(x)) = abs_real(tqtreal(x))))))

axiom abs_universal : (forall x:t1 [abs(x)]. (not is_negative(abs(x))))

axiom fma_finite :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1. forall z:t1 [fma(m,
  x, y, z)]. (tqtisFinite(x) -> (tqtisFinite(y) -> (tqtisFinite(z) ->
  (in_range(float64(m,((tqtreal(x) * tqtreal(y)) + tqtreal(z)))) ->
  (tqtisFinite(fma(m, x, y, z)) and (tqtreal(fma(m, x, y,
  z)) = float64(m,((tqtreal(x) * tqtreal(y)) + tqtreal(z))))))))))

axiom fma_finite_rev :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1. forall z:t1 [fma(m,
  x, y, z)]. (tqtisFinite(fma(m, x, y, z)) -> (tqtisFinite(x) and
  (tqtisFinite(y) and tqtisFinite(z)))))

axiom fma_finite_rev_n :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1. forall z:t1 [fma(m,
  x, y, z)]. (to_nearest(m) -> (tqtisFinite(fma(m, x, y, z)) ->
  (in_range(float64(m,((tqtreal(x) * tqtreal(y)) + tqtreal(z)))) and
  (tqtreal(fma(m, x, y,
  z)) = float64(m,((tqtreal(x) * tqtreal(y)) + tqtreal(z))))))))

function sqr(x: real) : real = (x * x)

axiom Sqrt_positive : (forall x:real. ((0.0 <= x) -> (0.0 <= sqrt_real(x))))

axiom Sqrt_square : (forall x:real. ((0.0 <= x) -> (sqr(sqrt_real(x)) = x)))

axiom Square_sqrt : (forall x:real. ((0.0 <= x) -> (sqrt_real((x * x)) = x)))

axiom Sqrt_mul :
  (forall x:real. forall y:real. (((0.0 <= x) and (0.0 <= y)) ->
  (sqrt_real((x * y)) = (sqrt_real(x) * sqrt_real(y)))))

axiom Sqrt_le :
  (forall x:real. forall y:real. (((0.0 <= x) and (x <= y)) ->
  (sqrt_real(x) <= sqrt_real(y))))

axiom sqrt_finite :
  (forall m:fpa_rounding_mode. forall x:t1 [sqrt(m, x)]. (tqtisFinite(x) ->
  ((0.0 <= tqtreal(x)) -> (tqtisFinite(sqrt(m, x)) and (tqtreal(sqrt(m,
  x)) = float64(m,sqrt_real(tqtreal(x))))))))

axiom sqrt_finite_rev :
  (forall m:fpa_rounding_mode. forall x:t1 [sqrt(m, x)]. (tqtisFinite(sqrt(m,
  x)) -> (tqtisFinite(x) and ((0.0 <= tqtreal(x)) and (tqtreal(sqrt(m,
  x)) = float64(m,sqrt_real(tqtreal(x))))))))

predicate same_sign_real(x: t1, r: real) = ((is_positive(x) and
  (0.0 <  r)) or (is_negative(x) and (r <  0.0)))

axiom add_special :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1 [add1(m, x, y)].
  (((is_nan(x) or is_nan(y)) -> is_nan(add1(m, x, y))) and
  (((tqtisFinite(x) and is_infinite(y)) -> (is_infinite(add1(m, x, y)) and
  same_sign(add1(m, x, y), y))) and (((is_infinite(x) and tqtisFinite(y)) ->
  (is_infinite(add1(m, x, y)) and same_sign(add1(m, x, y), x))) and
  (((is_infinite(x) and (is_infinite(y) and same_sign(x, y))) ->
  (is_infinite(add1(m, x, y)) and same_sign(add1(m, x, y), x))) and
  (((is_infinite(x) and (is_infinite(y) and diff_sign(x, y))) ->
  is_nan(add1(m, x, y))) and (((tqtisFinite(x) and (tqtisFinite(y) and
  (not in_range(float64(m,(tqtreal(x) + tqtreal(y))))))) ->
  (same_sign_real(add1(m, x, y), (tqtreal(x) + tqtreal(y))) and
  overflow_value(m, add1(m, x, y)))) and ((tqtisFinite(x) and
  tqtisFinite(y)) -> ((same_sign(x, y) -> same_sign(add1(m, x, y), x)) and
  ((not same_sign(x, y)) -> sign_zero_result(m, add1(m, x, y))))))))))))

axiom sub_special :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1 [sub1(m, x, y)].
  (((is_nan(x) or is_nan(y)) -> is_nan(sub1(m, x, y))) and
  (((tqtisFinite(x) and is_infinite(y)) -> (is_infinite(sub1(m, x, y)) and
  diff_sign(sub1(m, x, y), y))) and (((is_infinite(x) and tqtisFinite(y)) ->
  (is_infinite(sub1(m, x, y)) and same_sign(sub1(m, x, y), x))) and
  (((is_infinite(x) and (is_infinite(y) and same_sign(x, y))) ->
  is_nan(sub1(m, x, y))) and (((is_infinite(x) and (is_infinite(y) and
  diff_sign(x, y))) -> (is_infinite(sub1(m, x, y)) and same_sign(sub1(m, x,
  y), x))) and (((tqtisFinite(x) and (tqtisFinite(y) and
  (not in_range(float64(m,(tqtreal(x) - tqtreal(y))))))) ->
  (same_sign_real(sub1(m, x, y), (tqtreal(x) - tqtreal(y))) and
  overflow_value(m, sub1(m, x, y)))) and ((tqtisFinite(x) and
  tqtisFinite(y)) -> ((diff_sign(x, y) -> same_sign(sub1(m, x, y), x)) and
  ((not diff_sign(x, y)) -> sign_zero_result(m, sub1(m, x, y))))))))))))

axiom mul_special :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1 [mul1(m, x, y)].
  (((is_nan(x) or is_nan(y)) -> is_nan(mul1(m, x, y))) and (((is_zero(x) and
  is_infinite(y)) -> is_nan(mul1(m, x, y))) and (((tqtisFinite(x) and
  (is_infinite(y) and (not is_zero(x)))) -> is_infinite(mul1(m, x, y))) and
  (((is_infinite(x) and is_zero(y)) -> is_nan(mul1(m, x, y))) and
  (((is_infinite(x) and (tqtisFinite(y) and (not is_zero(y)))) ->
  is_infinite(mul1(m, x, y))) and (((is_infinite(x) and is_infinite(y)) ->
  is_infinite(mul1(m, x, y))) and (((tqtisFinite(x) and (tqtisFinite(y) and
  (not in_range(float64(m,(tqtreal(x) * tqtreal(y))))))) -> overflow_value(m,
  mul1(m, x, y))) and ((not is_nan(mul1(m, x, y))) -> product_sign(mul1(m, x,
  y), x, y))))))))))

axiom div_special :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1 [div(m, x, y)].
  (((is_nan(x) or is_nan(y)) -> is_nan(div(m, x, y))) and
  (((tqtisFinite(x) and is_infinite(y)) -> is_zero(div(m, x, y))) and
  (((is_infinite(x) and tqtisFinite(y)) -> is_infinite(div(m, x, y))) and
  (((is_infinite(x) and is_infinite(y)) -> is_nan(div(m, x, y))) and
  (((tqtisFinite(x) and (tqtisFinite(y) and ((not is_zero(y)) and
  (not in_range(float64(m,(tqtreal(x) / tqtreal(y)))))))) ->
  overflow_value(m, div(m, x, y))) and (((tqtisFinite(x) and (is_zero(y) and
  (not is_zero(x)))) -> is_infinite(div(m, x, y))) and (((is_zero(x) and
  is_zero(y)) -> is_nan(div(m, x, y))) and ((not is_nan(div(m, x, y))) ->
  product_sign(div(m, x, y), x, y))))))))))

axiom neg_special :
  (forall x:t1 [neg1(x)]. ((is_nan(x) -> is_nan(neg1(x))) and
  ((is_infinite(x) -> is_infinite(neg1(x))) and ((not is_nan(x)) ->
  diff_sign(x, neg1(x))))))

axiom abs_special :
  (forall x:t1 [abs(x)]. ((is_nan(x) -> is_nan(abs(x))) and
  ((is_infinite(x) -> is_infinite(abs(x))) and ((not is_nan(x)) ->
  is_positive(abs(x))))))

axiom fma_special :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1. forall z:t1 [fma(m,
  x, y, z)]. (((is_nan(x) or (is_nan(y) or is_nan(z))) -> is_nan(fma(m, x, y,
  z))) and (((is_zero(x) and is_infinite(y)) -> is_nan(fma(m, x, y, z))) and
  (((is_infinite(x) and is_zero(y)) -> is_nan(fma(m, x, y, z))) and
  (((tqtisFinite(x) and ((not is_zero(x)) and (is_infinite(y) and
  tqtisFinite(z)))) -> (is_infinite(fma(m, x, y, z)) and product_sign(fma(m,
  x, y, z), x, y))) and (((tqtisFinite(x) and ((not is_zero(x)) and
  (is_infinite(y) and is_infinite(z)))) -> ((product_sign(z, x, y) ->
  (is_infinite(fma(m, x, y, z)) and same_sign(fma(m, x, y, z), z))) and
  ((not product_sign(z, x, y)) -> is_nan(fma(m, x, y, z))))) and
  (((is_infinite(x) and (tqtisFinite(y) and ((not is_zero(y)) and
  tqtisFinite(z)))) -> (is_infinite(fma(m, x, y, z)) and product_sign(fma(m,
  x, y, z), x, y))) and (((is_infinite(x) and (tqtisFinite(y) and
  ((not is_zero(y)) and is_infinite(z)))) -> ((product_sign(z, x, y) ->
  (is_infinite(fma(m, x, y, z)) and same_sign(fma(m, x, y, z), z))) and
  ((not product_sign(z, x, y)) -> is_nan(fma(m, x, y, z))))) and
  (((is_infinite(x) and (is_infinite(y) and tqtisFinite(z))) ->
  (is_infinite(fma(m, x, y, z)) and product_sign(fma(m, x, y, z), x, y))) and
  (((tqtisFinite(x) and (tqtisFinite(y) and is_infinite(z))) ->
  (is_infinite(fma(m, x, y, z)) and same_sign(fma(m, x, y, z), z))) and
  (((is_infinite(x) and (is_infinite(y) and is_infinite(z))) ->
  ((product_sign(z, x, y) -> (is_infinite(fma(m, x, y, z)) and
  same_sign(fma(m, x, y, z), z))) and ((not product_sign(z, x, y)) ->
  is_nan(fma(m, x, y, z))))) and (((tqtisFinite(x) and (tqtisFinite(y) and
  (tqtisFinite(z) and
  (not in_range(float64(m,((tqtreal(x) * tqtreal(y)) + tqtreal(z)))))))) ->
  (same_sign_real(fma(m, x, y, z),
  ((tqtreal(x) * tqtreal(y)) + tqtreal(z))) and overflow_value(m, fma(m, x,
  y, z)))) and ((tqtisFinite(x) and (tqtisFinite(y) and tqtisFinite(z))) ->
  ((product_sign(z, x, y) -> same_sign(fma(m, x, y, z), z)) and
  ((not product_sign(z, x, y)) ->
  ((((tqtreal(x) * tqtreal(y)) + tqtreal(z)) = 0.0) -> (((m = Down) ->
  is_negative(fma(m, x, y, z))) and ((not (m = Down)) -> is_positive(fma(m,
  x, y, z))))))))))))))))))))

axiom sqrt_special :
  (forall m:fpa_rounding_mode. forall x:t1 [sqrt(m, x)]. ((is_nan(x) ->
  is_nan(sqrt(m, x))) and ((is_plus_infinity(x) -> is_plus_infinity(sqrt(m,
  x))) and ((is_minus_infinity(x) -> is_nan(sqrt(m, x))) and
  (((tqtisFinite(x) and (tqtreal(x) <  0.0)) -> is_nan(sqrt(m, x))) and
  ((is_zero(x) -> same_sign(sqrt(m, x), x)) and ((tqtisFinite(x) and
  (0.0 <  tqtreal(x))) -> is_positive(sqrt(m, x)))))))))

axiom of_int_add_exact :
  (forall m:fpa_rounding_mode. forall n:fpa_rounding_mode. forall i:int.
  forall j:int. (in_safe_int_range(i) -> (in_safe_int_range(j) ->
  (in_safe_int_range((i + j)) -> eq(of_int1(m, (i + j)), add1(n, of_int1(m,
  i), of_int1(m, j)))))))

axiom of_int_sub_exact :
  (forall m:fpa_rounding_mode. forall n:fpa_rounding_mode. forall i:int.
  forall j:int. (in_safe_int_range(i) -> (in_safe_int_range(j) ->
  (in_safe_int_range((i - j)) -> eq(of_int1(m, (i - j)), sub1(n, of_int1(m,
  i), of_int1(m, j)))))))

axiom of_int_mul_exact :
  (forall m:fpa_rounding_mode. forall n:fpa_rounding_mode. forall i:int.
  forall j:int. (in_safe_int_range(i) -> (in_safe_int_range(j) ->
  (in_safe_int_range((i * j)) -> eq(of_int1(m, (i * j)), mul1(n, of_int1(m,
  i), of_int1(m, j)))))))

axiom Min_r1 : (forall x:t1. forall y:t1. (le(y, x) -> eq(min1(x, y), y)))

axiom Min_l : (forall x:t1. forall y:t1. (le(x, y) -> eq(min1(x, y), x)))

axiom Max_r : (forall x:t1. forall y:t1. (le(y, x) -> eq(max1(x, y), x)))

axiom Max_l1 : (forall x:t1. forall y:t1. (le(x, y) -> eq(max1(x, y), y)))

logic is_int : t1 -> prop

axiom zeroF_is_int : is_int(zeroF)

axiom of_int_is_int :
  (forall m:fpa_rounding_mode. forall x:int. (in_int_range(x) ->
  is_int(of_int1(m, x))))

axiom big_float_is_int :
  (forall m:fpa_rounding_mode. forall i:t1. (tqtisFinite(i) -> ((le(i,
  neg1(of_int1(m, 9007199254740992))) or le(of_int1(m, 9007199254740992),
  i)) -> is_int(i))))

axiom roundToIntegral_is_int :
  (forall m:fpa_rounding_mode. forall x:t1. (tqtisFinite(x) ->
  is_int(roundToIntegral(m, x))))

axiom eq_is_int :
  (forall x:t1. forall y:t1. (eq(x, y) -> (is_int(x) -> is_int(y))))

axiom add_int :
  (forall x:t1. forall y:t1. forall m:fpa_rounding_mode. (is_int(x) ->
  (is_int(y) -> (tqtisFinite(add1(m, x, y)) -> is_int(add1(m, x, y))))))

axiom sub_int :
  (forall x:t1. forall y:t1. forall m:fpa_rounding_mode. (is_int(x) ->
  (is_int(y) -> (tqtisFinite(sub1(m, x, y)) -> is_int(sub1(m, x, y))))))

axiom mul_int :
  (forall x:t1. forall y:t1. forall m:fpa_rounding_mode. (is_int(x) ->
  (is_int(y) -> (tqtisFinite(mul1(m, x, y)) -> is_int(mul1(m, x, y))))))

axiom fma_int :
  (forall x:t1. forall y:t1. forall z:t1. forall m:fpa_rounding_mode.
  (is_int(x) -> (is_int(y) -> (is_int(z) -> (tqtisFinite(fma(m, x, y, z)) ->
  is_int(fma(m, x, y, z)))))))

axiom neg_int : (forall x:t1. (is_int(x) -> is_int(neg1(x))))

axiom abs_int1 : (forall x:t1. (is_int(x) -> is_int(abs(x))))

axiom is_int_of_int :
  (forall x:t1. forall m:fpa_rounding_mode. forall mqt:fpa_rounding_mode.
  (is_int(x) -> eq(x, of_int1(mqt, to_int1(m, x)))))

axiom is_int_to_int :
  (forall m:fpa_rounding_mode. forall x:t1. (is_int(x) ->
  in_int_range(to_int1(m, x))))

axiom is_int_is_finite : (forall x:t1. (is_int(x) -> tqtisFinite(x)))

axiom int_to_real :
  (forall m:fpa_rounding_mode. forall x:t1. (is_int(x) ->
  (tqtreal(x) = real_of_int(to_int1(m, x)))))

axiom truncate_int :
  (forall m:fpa_rounding_mode. forall i:t1. (is_int(i) ->
  eq(roundToIntegral(m, i), i)))

axiom truncate_neg :
  (forall x:t1. (tqtisFinite(x) -> (is_negative(x) ->
  (roundToIntegral(ToZero, x) = roundToIntegral(Up, x)))))

axiom truncate_pos :
  (forall x:t1. (tqtisFinite(x) -> (is_positive(x) ->
  (roundToIntegral(ToZero, x) = roundToIntegral(Down, x)))))

axiom ceil_le :
  (forall x:t1. (tqtisFinite(x) -> le(x, roundToIntegral(Up, x))))

axiom ceil_lest :
  (forall x:t1. forall y:t1. ((le(x, y) and is_int(y)) ->
  le(roundToIntegral(Up, x), y)))

axiom ceil_to_real :
  (forall x:t1. (tqtisFinite(x) -> (tqtreal(roundToIntegral(Up,
  x)) = real_of_int(ceil(tqtreal(x))))))

axiom ceil_to_int :
  (forall m:fpa_rounding_mode. forall x:t1. (tqtisFinite(x) -> (to_int1(m,
  roundToIntegral(Up, x)) = ceil(tqtreal(x)))))

axiom floor_le :
  (forall x:t1. (tqtisFinite(x) -> le(roundToIntegral(Down, x), x)))

axiom floor_lest :
  (forall x:t1. forall y:t1. ((le(y, x) and is_int(y)) -> le(y,
  roundToIntegral(Down, x))))

axiom floor_to_real :
  (forall x:t1. (tqtisFinite(x) -> (tqtreal(roundToIntegral(Down,
  x)) = real_of_int(floor(tqtreal(x))))))

axiom floor_to_int :
  (forall m:fpa_rounding_mode. forall x:t1. (tqtisFinite(x) -> (to_int1(m,
  roundToIntegral(Down, x)) = floor(tqtreal(x)))))

axiom RNA_down :
  (forall x:t1. (lt(sub1(NearestTiesToEven, x, roundToIntegral(Down, x)),
  sub1(NearestTiesToEven, roundToIntegral(Up, x), x)) ->
  (roundToIntegral(NearestTiesToAway, x) = roundToIntegral(Down, x))))

axiom RNA_up :
  (forall x:t1. (lt(sub1(NearestTiesToEven, roundToIntegral(Up, x), x),
  sub1(NearestTiesToEven, x, roundToIntegral(Down, x))) ->
  (roundToIntegral(NearestTiesToAway, x) = roundToIntegral(Up, x))))

axiom RNA_down_tie :
  (forall x:t1. (eq(sub1(NearestTiesToEven, x, roundToIntegral(Down, x)),
  sub1(NearestTiesToEven, roundToIntegral(Up, x), x)) -> (is_negative(x) ->
  (roundToIntegral(NearestTiesToAway, x) = roundToIntegral(Down, x)))))

axiom RNA_up_tie :
  (forall x:t1. (eq(sub1(NearestTiesToEven, roundToIntegral(Up, x), x),
  sub1(NearestTiesToEven, x, roundToIntegral(Down, x))) -> (is_positive(x) ->
  (roundToIntegral(NearestTiesToAway, x) = roundToIntegral(Up, x)))))

axiom to_int_roundToIntegral :
  (forall m:fpa_rounding_mode. forall x:t1. (to_int1(m, x) = to_int1(m,
  roundToIntegral(m, x))))

axiom to_int_monotonic :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1. (tqtisFinite(x) ->
  (tqtisFinite(y) -> (le(x, y) -> (to_int1(m, x) <= to_int1(m, y))))))

axiom to_int_of_int :
  (forall m:fpa_rounding_mode. forall i:int. (in_safe_int_range(i) ->
  (to_int1(m, of_int1(m, i)) = i)))

axiom eq_to_int :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1. (tqtisFinite(x) ->
  (eq(x, y) -> (to_int1(m, x) = to_int1(m, y)))))

axiom neg_to_int :
  (forall m:fpa_rounding_mode. forall x:t1. (is_int(x) -> (to_int1(m,
  neg1(x)) = (-to_int1(m, x)))))

axiom roundToIntegral_is_finite :
  (forall m:fpa_rounding_mode. forall x:t1. (tqtisFinite(x) ->
  tqtisFinite(roundToIntegral(m, x))))

axiom round_bound_ne :
  (forall x:real [float64(NearestTiesToEven,x)].
  (in_range(float64(NearestTiesToEven,x)) ->
  ((((x - (0x1.0p-53 * abs_real(x))) - 0x1.0p-1075) <= float64(NearestTiesToEven,x)) and
  (float64(NearestTiesToEven,x) <= ((x + (0x1.0p-53 * abs_real(x))) + 0x1.0p-1075)))))

axiom round_bound :
  (forall m:fpa_rounding_mode. forall x:real [float64(m,x)].
  (in_range(float64(m,x)) ->
  ((((x - (0x1.0p-52 * abs_real(x))) - 0x1.0p-1074) <= float64(m,x)) and
  (float64(m,x) <= ((x + (0x1.0p-52 * abs_real(x))) + 0x1.0p-1074)))))

type t2

logic tqtint1 : t2 -> int

axiom tqtaxiom2 : (forall i:t2. ((0 <= tqtint1(i)) and (tqtint1(i) <= 255)))

logic nth1 : t2, int -> bool

axiom nth_out_of_bound1 :
  (forall x:t2. forall n:int. (((n <  0) or (8 <= n)) -> (nth1(x,
  n) = false)))

logic zeros1 : t2

axiom Nth_zeros1 : (forall n:int. (nth1(zeros1, n) = false))

logic one1 : t2

logic ones1 : t2

axiom Nth_ones1 :
  (forall n:int. (((0 <= n) and (n <  8)) -> (nth1(ones1, n) = true)))

logic bw_and1 : t2, t2 -> t2

axiom Nth_bw_and1 :
  (forall v1:t2. forall v2:t2. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth1(bw_and1(v1, v2), n) = match_bool(nth1(v1, n), nth1(v2, n), false))))

logic bw_or1 : t2, t2 -> t2

axiom Nth_bw_or1 :
  (forall v1:t2. forall v2:t2. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth1(bw_or1(v1, v2), n) = match_bool(nth1(v1, n), true, nth1(v2, n)))))

logic bw_xor1 : t2, t2 -> t2

axiom Nth_bw_xor1 :
  (forall v1:t2. forall v2:t2. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth1(bw_xor1(v1, v2), n) = xorb(nth1(v1, n), nth1(v2, n)))))

logic bw_not1 : t2 -> t2

axiom Nth_bw_not1 :
  (forall v:t2. forall n:int. (((0 <= n) and (n <  8)) -> (nth1(bw_not1(v),
  n) = match_bool(nth1(v, n), false, true))))

logic lsr1 : t2, int -> t2

axiom Lsr_nth_low1 :
  (forall b:t2. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  8) -> (nth1(lsr1(b, s), n) = nth1(b, (n + s)))))))

axiom Lsr_nth_high1 :
  (forall b:t2. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((8 <= (n + s)) -> (nth1(lsr1(b, s), n) = false)))))

axiom lsr_zeros1 : (forall x:t2. (lsr1(x, 0) = x))

logic asr1 : t2, int -> t2

axiom Asr_nth_low1 :
  (forall b:t2. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  8)) -> (((n + s) <  8) -> (nth1(asr1(b, s), n) = nth1(b,
  (n + s)))))))

axiom Asr_nth_high1 :
  (forall b:t2. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  8)) -> ((8 <= (n + s)) -> (nth1(asr1(b, s), n) = nth1(b,
  (8 - 1)))))))

axiom asr_zeros1 : (forall x:t2. (asr1(x, 0) = x))

logic lsl1 : t2, int -> t2

axiom Lsl_nth_high1 :
  (forall b:t2. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  8))) -> (nth1(lsl1(b, s), n) = nth1(b, (n - s)))))

axiom Lsl_nth_low1 :
  (forall b:t2. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth1(lsl1(b, s), n) = false)))

axiom lsl_zeros1 : (forall x:t2. (lsl1(x, 0) = x))

logic rotate_right1 : t2, int -> t2

axiom Nth_rotate_right1 :
  (forall v:t2. forall n:int. forall i:int. (((0 <= i) and (i <  8)) ->
  ((0 <= n) -> (nth1(rotate_right1(v, n), i) = nth1(v, ((i + n) % 8))))))

logic rotate_left1 : t2, int -> t2

axiom Nth_rotate_left1 :
  (forall v:t2. forall n:int. forall i:int. (((0 <= i) and (i <  8)) ->
  ((0 <= n) -> (nth1(rotate_left1(v, n), i) = nth1(v, ((i - n) % 8))))))

logic is_signed_positive1 : t2 -> prop

logic of_int2 : int -> t2

logic to_int2 : t2 -> int

axiom to_int_def1 :
  (forall x:t2 [to_int2(x)]. ((is_signed_positive1(x) ->
  (to_int2(x) = tqtint1(x))) and ((not is_signed_positive1(x)) ->
  (to_int2(x) = (-(256 - tqtint1(x)))))))

axiom to_uint_extensionality1 :
  (forall v:t2. forall vqt:t2. ((tqtint1(v) = tqtint1(vqt)) -> (v = vqt)))

axiom to_int_extensionality1 :
  (forall v:t2. forall vqt:t2. ((to_int2(v) = to_int2(vqt)) -> (v = vqt)))

predicate uint_in_range1(i: int) = ((0 <= i) and (i <= 255))

axiom to_uint_bounds1 :
  (forall v:t2. ((0 <= tqtint1(v)) and (tqtint1(v) <  256)))

axiom to_uint_of_int1 :
  (forall i:int. (((0 <= i) and (i <  256)) -> (tqtint1(of_int2(i)) = i)))

logic size_bv1 : t2

axiom to_uint_size_bv1 : (tqtint1(size_bv1) = 8)

axiom to_uint_zeros1 : (tqtint1(zeros1) = 0)

axiom to_uint_one1 : (tqtint1(one1) = 1)

axiom to_uint_ones1 : (tqtint1(ones1) = 255)

predicate ult1(x: t2, y: t2) = (tqtint1(x) <  tqtint1(y))

predicate ule1(x: t2, y: t2) = (tqtint1(x) <= tqtint1(y))

predicate ugt1(x: t2, y: t2) = (tqtint1(y) <  tqtint1(x))

predicate uge1(x: t2, y: t2) = (tqtint1(y) <= tqtint1(x))

predicate slt1(v1: t2, v2: t2) = (to_int2(v1) <  to_int2(v2))

predicate sle1(v1: t2, v2: t2) = (to_int2(v1) <= to_int2(v2))

predicate sgt1(v1: t2, v2: t2) = (to_int2(v2) <  to_int2(v1))

predicate sge1(v1: t2, v2: t2) = (to_int2(v2) <= to_int2(v1))

axiom positive_is_ge_zeros1 :
  (forall x:t2. (is_signed_positive1(x) <-> sge1(x, zeros1)))

logic add2 : t2, t2 -> t2

axiom to_uint_add_bounded1 :
  (forall v1:t2. forall v2:t2. (((tqtint1(v1) + tqtint1(v2)) <  256) ->
  (tqtint1(add2(v1, v2)) = (tqtint1(v1) + tqtint1(v2)))))

logic sub2 : t2, t2 -> t2

axiom to_uint_sub_bounded1 :
  (forall v1:t2. forall v2:t2. (((0 <= (tqtint1(v1) - tqtint1(v2))) and
  ((tqtint1(v1) - tqtint1(v2)) <  256)) -> (tqtint1(sub2(v1,
  v2)) = (tqtint1(v1) - tqtint1(v2)))))

logic neg2 : t2 -> t2

axiom to_uint_neg1 :
  (forall v:t2. (tqtint1(neg2(v)) = ((-tqtint1(v)) % 256)))

logic mul2 : t2, t2 -> t2

axiom to_uint_mul_bounded1 :
  (forall v1:t2. forall v2:t2. (((tqtint1(v1) * tqtint1(v2)) <  256) ->
  (tqtint1(mul2(v1, v2)) = (tqtint1(v1) * tqtint1(v2)))))

logic udiv1 : t2, t2 -> t2

axiom to_uint_udiv1 :
  (forall v1:t2. forall v2:t2. (tqtint1(udiv1(v1,
  v2)) = (tqtint1(v1) / tqtint1(v2))))

logic urem1 : t2, t2 -> t2

axiom to_uint_urem1 :
  (forall v1:t2. forall v2:t2. (tqtint1(urem1(v1,
  v2)) = (tqtint1(v1) % tqtint1(v2))))

logic lsr_bv1 : t2, t2 -> t2

axiom lsr_bv_is_lsr1 :
  (forall x:t2. forall n:t2. (lsr_bv1(x, n) = lsr1(x, tqtint1(n))))

axiom to_uint_lsr1 :
  (forall v:t2. forall n:t2. (tqtint1(lsr_bv1(v,
  n)) = (tqtint1(v) / pow2(tqtint1(n)))))

logic asr_bv1 : t2, t2 -> t2

axiom asr_bv_is_asr1 :
  (forall x:t2. forall n:t2. (asr_bv1(x, n) = asr1(x, tqtint1(n))))

logic lsl_bv1 : t2, t2 -> t2

axiom lsl_bv_is_lsl1 :
  (forall x:t2. forall n:t2. (lsl_bv1(x, n) = lsl1(x, tqtint1(n))))

axiom to_uint_lsl1 :
  (forall v:t2. forall n:t2. (tqtint1(lsl_bv1(v,
  n)) = ((tqtint1(v) * pow2(tqtint1(n))) % 256)))

logic rotate_right_bv1 : t2, t2 -> t2

logic rotate_left_bv1 : t2, t2 -> t2

axiom rotate_left_bv_is_rotate_left1 :
  (forall v:t2. forall n:t2. (rotate_left_bv1(v, n) = rotate_left1(v,
  tqtint1(n))))

axiom rotate_right_bv_is_rotate_right1 :
  (forall v:t2. forall n:t2. (rotate_right_bv1(v, n) = rotate_right1(v,
  tqtint1(n))))

logic nth_bv1 : t2, t2 -> bool

axiom Nth_bv_is_nth1 :
  (forall x:t2. forall i:t2. (nth1(x, tqtint1(i)) = nth_bv1(x, i)))

axiom Nth_bv_is_nth21 :
  (forall x:t2. forall i:int. (((0 <= i) and (i <  256)) -> (nth_bv1(x,
  of_int2(i)) = nth1(x, i))))

logic eq_sub_bv1 : t2, t2, t2, t2 -> prop

predicate eq_sub1(a: t2, b: t2, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth1(a, j) = nth1(b,
  j))))

axiom eq_sub_equiv1 :
  (forall a:t2. forall b:t2. forall i:t2. forall n:t2. (eq_sub1(a, b,
  tqtint1(i), tqtint1(n)) <-> eq_sub_bv1(a, b, i, n)))

axiom Extensionality1 :
  (forall x:t2. forall y:t2 [eq_sub1(x, y, 0, 8)]. (eq_sub1(x, y, 0, 8) ->
  (x = y)))

type t3

logic tqtint2 : t3 -> int

axiom tqtaxiom3 :
  (forall i:t3. ((0 <= tqtint2(i)) and (tqtint2(i) <= 4294967295)))

logic nth2 : t3, int -> bool

axiom nth_out_of_bound2 :
  (forall x:t3. forall n:int. (((n <  0) or (32 <= n)) -> (nth2(x,
  n) = false)))

logic zeros2 : t3

axiom Nth_zeros2 : (forall n:int. (nth2(zeros2, n) = false))

logic one2 : t3

logic ones2 : t3

axiom Nth_ones2 :
  (forall n:int. (((0 <= n) and (n <  32)) -> (nth2(ones2, n) = true)))

logic bw_and2 : t3, t3 -> t3

axiom Nth_bw_and2 :
  (forall v1:t3. forall v2:t3. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth2(bw_and2(v1, v2), n) = match_bool(nth2(v1, n), nth2(v2, n), false))))

logic bw_or2 : t3, t3 -> t3

axiom Nth_bw_or2 :
  (forall v1:t3. forall v2:t3. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth2(bw_or2(v1, v2), n) = match_bool(nth2(v1, n), true, nth2(v2, n)))))

logic bw_xor2 : t3, t3 -> t3

axiom Nth_bw_xor2 :
  (forall v1:t3. forall v2:t3. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth2(bw_xor2(v1, v2), n) = xorb(nth2(v1, n), nth2(v2, n)))))

logic bw_not2 : t3 -> t3

axiom Nth_bw_not2 :
  (forall v:t3. forall n:int. (((0 <= n) and (n <  32)) -> (nth2(bw_not2(v),
  n) = match_bool(nth2(v, n), false, true))))

logic lsr2 : t3, int -> t3

axiom Lsr_nth_low2 :
  (forall b:t3. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  32) -> (nth2(lsr2(b, s), n) = nth2(b, (n + s)))))))

axiom Lsr_nth_high2 :
  (forall b:t3. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((32 <= (n + s)) -> (nth2(lsr2(b, s), n) = false)))))

axiom lsr_zeros2 : (forall x:t3. (lsr2(x, 0) = x))

logic asr2 : t3, int -> t3

axiom Asr_nth_low2 :
  (forall b:t3. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  32)) -> (((n + s) <  32) -> (nth2(asr2(b, s), n) = nth2(b,
  (n + s)))))))

axiom Asr_nth_high2 :
  (forall b:t3. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  32)) -> ((32 <= (n + s)) -> (nth2(asr2(b, s), n) = nth2(b,
  (32 - 1)))))))

axiom asr_zeros2 : (forall x:t3. (asr2(x, 0) = x))

logic lsl2 : t3, int -> t3

axiom Lsl_nth_high2 :
  (forall b:t3. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  32))) -> (nth2(lsl2(b, s), n) = nth2(b, (n - s)))))

axiom Lsl_nth_low2 :
  (forall b:t3. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth2(lsl2(b, s), n) = false)))

axiom lsl_zeros2 : (forall x:t3. (lsl2(x, 0) = x))

logic rotate_right2 : t3, int -> t3

axiom Nth_rotate_right2 :
  (forall v:t3. forall n:int. forall i:int. (((0 <= i) and (i <  32)) ->
  ((0 <= n) -> (nth2(rotate_right2(v, n), i) = nth2(v, ((i + n) % 32))))))

logic rotate_left2 : t3, int -> t3

axiom Nth_rotate_left2 :
  (forall v:t3. forall n:int. forall i:int. (((0 <= i) and (i <  32)) ->
  ((0 <= n) -> (nth2(rotate_left2(v, n), i) = nth2(v, ((i - n) % 32))))))

logic is_signed_positive2 : t3 -> prop

logic of_int3 : int -> t3

logic to_int3 : t3 -> int

axiom to_int_def2 :
  (forall x:t3 [to_int3(x)]. ((is_signed_positive2(x) ->
  (to_int3(x) = tqtint2(x))) and ((not is_signed_positive2(x)) ->
  (to_int3(x) = (-(4294967296 - tqtint2(x)))))))

axiom to_uint_extensionality2 :
  (forall v:t3. forall vqt:t3. ((tqtint2(v) = tqtint2(vqt)) -> (v = vqt)))

axiom to_int_extensionality2 :
  (forall v:t3. forall vqt:t3. ((to_int3(v) = to_int3(vqt)) -> (v = vqt)))

predicate uint_in_range2(i: int) = ((0 <= i) and (i <= 4294967295))

axiom to_uint_bounds2 :
  (forall v:t3. ((0 <= tqtint2(v)) and (tqtint2(v) <  4294967296)))

axiom to_uint_of_int2 :
  (forall i:int. (((0 <= i) and (i <  4294967296)) ->
  (tqtint2(of_int3(i)) = i)))

logic size_bv2 : t3

axiom to_uint_size_bv2 : (tqtint2(size_bv2) = 32)

axiom to_uint_zeros2 : (tqtint2(zeros2) = 0)

axiom to_uint_one2 : (tqtint2(one2) = 1)

axiom to_uint_ones2 : (tqtint2(ones2) = 4294967295)

predicate ult2(x: t3, y: t3) = (tqtint2(x) <  tqtint2(y))

predicate ule2(x: t3, y: t3) = (tqtint2(x) <= tqtint2(y))

predicate ugt2(x: t3, y: t3) = (tqtint2(y) <  tqtint2(x))

predicate uge2(x: t3, y: t3) = (tqtint2(y) <= tqtint2(x))

predicate slt2(v1: t3, v2: t3) = (to_int3(v1) <  to_int3(v2))

predicate sle2(v1: t3, v2: t3) = (to_int3(v1) <= to_int3(v2))

predicate sgt2(v1: t3, v2: t3) = (to_int3(v2) <  to_int3(v1))

predicate sge2(v1: t3, v2: t3) = (to_int3(v2) <= to_int3(v1))

axiom positive_is_ge_zeros2 :
  (forall x:t3. (is_signed_positive2(x) <-> sge2(x, zeros2)))

logic add3 : t3, t3 -> t3

axiom to_uint_add_bounded2 :
  (forall v1:t3. forall v2:t3.
  (((tqtint2(v1) + tqtint2(v2)) <  4294967296) -> (tqtint2(add3(v1,
  v2)) = (tqtint2(v1) + tqtint2(v2)))))

logic sub3 : t3, t3 -> t3

axiom to_uint_sub_bounded2 :
  (forall v1:t3. forall v2:t3. (((0 <= (tqtint2(v1) - tqtint2(v2))) and
  ((tqtint2(v1) - tqtint2(v2)) <  4294967296)) -> (tqtint2(sub3(v1,
  v2)) = (tqtint2(v1) - tqtint2(v2)))))

logic neg3 : t3 -> t3

axiom to_uint_neg2 :
  (forall v:t3. (tqtint2(neg3(v)) = ((-tqtint2(v)) % 4294967296)))

logic mul3 : t3, t3 -> t3

axiom to_uint_mul_bounded2 :
  (forall v1:t3. forall v2:t3.
  (((tqtint2(v1) * tqtint2(v2)) <  4294967296) -> (tqtint2(mul3(v1,
  v2)) = (tqtint2(v1) * tqtint2(v2)))))

logic udiv2 : t3, t3 -> t3

axiom to_uint_udiv2 :
  (forall v1:t3. forall v2:t3. (tqtint2(udiv2(v1,
  v2)) = (tqtint2(v1) / tqtint2(v2))))

logic urem2 : t3, t3 -> t3

axiom to_uint_urem2 :
  (forall v1:t3. forall v2:t3. (tqtint2(urem2(v1,
  v2)) = (tqtint2(v1) % tqtint2(v2))))

logic lsr_bv2 : t3, t3 -> t3

axiom lsr_bv_is_lsr2 :
  (forall x:t3. forall n:t3. (lsr_bv2(x, n) = lsr2(x, tqtint2(n))))

axiom to_uint_lsr2 :
  (forall v:t3. forall n:t3. (tqtint2(lsr_bv2(v,
  n)) = (tqtint2(v) / pow2(tqtint2(n)))))

logic asr_bv2 : t3, t3 -> t3

axiom asr_bv_is_asr2 :
  (forall x:t3. forall n:t3. (asr_bv2(x, n) = asr2(x, tqtint2(n))))

logic lsl_bv2 : t3, t3 -> t3

axiom lsl_bv_is_lsl2 :
  (forall x:t3. forall n:t3. (lsl_bv2(x, n) = lsl2(x, tqtint2(n))))

axiom to_uint_lsl2 :
  (forall v:t3. forall n:t3. (tqtint2(lsl_bv2(v,
  n)) = ((tqtint2(v) * pow2(tqtint2(n))) % 4294967296)))

logic rotate_right_bv2 : t3, t3 -> t3

logic rotate_left_bv2 : t3, t3 -> t3

axiom rotate_left_bv_is_rotate_left2 :
  (forall v:t3. forall n:t3. (rotate_left_bv2(v, n) = rotate_left2(v,
  tqtint2(n))))

axiom rotate_right_bv_is_rotate_right2 :
  (forall v:t3. forall n:t3. (rotate_right_bv2(v, n) = rotate_right2(v,
  tqtint2(n))))

logic nth_bv2 : t3, t3 -> bool

axiom Nth_bv_is_nth3 :
  (forall x:t3. forall i:t3. (nth2(x, tqtint2(i)) = nth_bv2(x, i)))

axiom Nth_bv_is_nth22 :
  (forall x:t3. forall i:int. (((0 <= i) and (i <  4294967296)) ->
  (nth_bv2(x, of_int3(i)) = nth2(x, i))))

logic eq_sub_bv2 : t3, t3, t3, t3 -> prop

predicate eq_sub2(a: t3, b: t3, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth2(a, j) = nth2(b,
  j))))

axiom eq_sub_equiv2 :
  (forall a:t3. forall b:t3. forall i:t3. forall n:t3. (eq_sub2(a, b,
  tqtint2(i), tqtint2(n)) <-> eq_sub_bv2(a, b, i, n)))

axiom Extensionality2 :
  (forall x:t3. forall y:t3 [eq_sub2(x, y, 0, 32)]. (eq_sub2(x, y, 0, 32) ->
  (x = y)))

type t4

logic tqtint3 : t4 -> int

axiom tqtaxiom4 :
  (forall i:t4. ((0 <= tqtint3(i)) and (tqtint3(i) <= 18446744073709551615)))

logic nth3 : t4, int -> bool

axiom nth_out_of_bound3 :
  (forall x:t4. forall n:int. (((n <  0) or (64 <= n)) -> (nth3(x,
  n) = false)))

logic zeros3 : t4

axiom Nth_zeros3 : (forall n:int. (nth3(zeros3, n) = false))

logic one3 : t4

logic ones3 : t4

axiom Nth_ones3 :
  (forall n:int. (((0 <= n) and (n <  64)) -> (nth3(ones3, n) = true)))

logic bw_and3 : t4, t4 -> t4

axiom Nth_bw_and3 :
  (forall v1:t4. forall v2:t4. forall n:int. (((0 <= n) and (n <  64)) ->
  (nth3(bw_and3(v1, v2), n) = match_bool(nth3(v1, n), nth3(v2, n), false))))

logic bw_or3 : t4, t4 -> t4

axiom Nth_bw_or3 :
  (forall v1:t4. forall v2:t4. forall n:int. (((0 <= n) and (n <  64)) ->
  (nth3(bw_or3(v1, v2), n) = match_bool(nth3(v1, n), true, nth3(v2, n)))))

logic bw_xor3 : t4, t4 -> t4

axiom Nth_bw_xor3 :
  (forall v1:t4. forall v2:t4. forall n:int. (((0 <= n) and (n <  64)) ->
  (nth3(bw_xor3(v1, v2), n) = xorb(nth3(v1, n), nth3(v2, n)))))

logic bw_not3 : t4 -> t4

axiom Nth_bw_not3 :
  (forall v:t4. forall n:int. (((0 <= n) and (n <  64)) -> (nth3(bw_not3(v),
  n) = match_bool(nth3(v, n), false, true))))

logic lsr3 : t4, int -> t4

axiom Lsr_nth_low3 :
  (forall b:t4. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  64) -> (nth3(lsr3(b, s), n) = nth3(b, (n + s)))))))

axiom Lsr_nth_high3 :
  (forall b:t4. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((64 <= (n + s)) -> (nth3(lsr3(b, s), n) = false)))))

axiom lsr_zeros3 : (forall x:t4. (lsr3(x, 0) = x))

logic asr3 : t4, int -> t4

axiom Asr_nth_low3 :
  (forall b:t4. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  64)) -> (((n + s) <  64) -> (nth3(asr3(b, s), n) = nth3(b,
  (n + s)))))))

axiom Asr_nth_high3 :
  (forall b:t4. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  64)) -> ((64 <= (n + s)) -> (nth3(asr3(b, s), n) = nth3(b,
  (64 - 1)))))))

axiom asr_zeros3 : (forall x:t4. (asr3(x, 0) = x))

logic lsl3 : t4, int -> t4

axiom Lsl_nth_high3 :
  (forall b:t4. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  64))) -> (nth3(lsl3(b, s), n) = nth3(b, (n - s)))))

axiom Lsl_nth_low3 :
  (forall b:t4. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth3(lsl3(b, s), n) = false)))

axiom lsl_zeros3 : (forall x:t4. (lsl3(x, 0) = x))

logic rotate_right3 : t4, int -> t4

axiom Nth_rotate_right3 :
  (forall v:t4. forall n:int. forall i:int. (((0 <= i) and (i <  64)) ->
  ((0 <= n) -> (nth3(rotate_right3(v, n), i) = nth3(v, ((i + n) % 64))))))

logic rotate_left3 : t4, int -> t4

axiom Nth_rotate_left3 :
  (forall v:t4. forall n:int. forall i:int. (((0 <= i) and (i <  64)) ->
  ((0 <= n) -> (nth3(rotate_left3(v, n), i) = nth3(v, ((i - n) % 64))))))

logic is_signed_positive3 : t4 -> prop

logic of_int4 : int -> t4

logic to_int4 : t4 -> int

axiom to_int_def3 :
  (forall x:t4 [to_int4(x)]. ((is_signed_positive3(x) ->
  (to_int4(x) = tqtint3(x))) and ((not is_signed_positive3(x)) ->
  (to_int4(x) = (-(18446744073709551616 - tqtint3(x)))))))

axiom to_uint_extensionality3 :
  (forall v:t4. forall vqt:t4. ((tqtint3(v) = tqtint3(vqt)) -> (v = vqt)))

axiom to_int_extensionality3 :
  (forall v:t4. forall vqt:t4. ((to_int4(v) = to_int4(vqt)) -> (v = vqt)))

predicate uint_in_range3(i: int) = ((0 <= i) and (i <= 18446744073709551615))

axiom to_uint_bounds3 :
  (forall v:t4. ((0 <= tqtint3(v)) and (tqtint3(v) <  18446744073709551616)))

axiom to_uint_of_int3 :
  (forall i:int. (((0 <= i) and (i <  18446744073709551616)) ->
  (tqtint3(of_int4(i)) = i)))

logic size_bv3 : t4

axiom to_uint_size_bv3 : (tqtint3(size_bv3) = 64)

axiom to_uint_zeros3 : (tqtint3(zeros3) = 0)

axiom to_uint_one3 : (tqtint3(one3) = 1)

axiom to_uint_ones3 : (tqtint3(ones3) = 18446744073709551615)

predicate ult3(x: t4, y: t4) = (tqtint3(x) <  tqtint3(y))

predicate ule3(x: t4, y: t4) = (tqtint3(x) <= tqtint3(y))

predicate ugt3(x: t4, y: t4) = (tqtint3(y) <  tqtint3(x))

predicate uge3(x: t4, y: t4) = (tqtint3(y) <= tqtint3(x))

predicate slt3(v1: t4, v2: t4) = (to_int4(v1) <  to_int4(v2))

predicate sle3(v1: t4, v2: t4) = (to_int4(v1) <= to_int4(v2))

predicate sgt3(v1: t4, v2: t4) = (to_int4(v2) <  to_int4(v1))

predicate sge3(v1: t4, v2: t4) = (to_int4(v2) <= to_int4(v1))

axiom positive_is_ge_zeros3 :
  (forall x:t4. (is_signed_positive3(x) <-> sge3(x, zeros3)))

logic add4 : t4, t4 -> t4

axiom to_uint_add_bounded3 :
  (forall v1:t4. forall v2:t4.
  (((tqtint3(v1) + tqtint3(v2)) <  18446744073709551616) -> (tqtint3(add4(v1,
  v2)) = (tqtint3(v1) + tqtint3(v2)))))

logic sub4 : t4, t4 -> t4

axiom to_uint_sub_bounded3 :
  (forall v1:t4. forall v2:t4. (((0 <= (tqtint3(v1) - tqtint3(v2))) and
  ((tqtint3(v1) - tqtint3(v2)) <  18446744073709551616)) -> (tqtint3(sub4(v1,
  v2)) = (tqtint3(v1) - tqtint3(v2)))))

logic neg4 : t4 -> t4

axiom to_uint_neg3 :
  (forall v:t4. (tqtint3(neg4(v)) = ((-tqtint3(v)) % 18446744073709551616)))

logic mul4 : t4, t4 -> t4

axiom to_uint_mul_bounded3 :
  (forall v1:t4. forall v2:t4.
  (((tqtint3(v1) * tqtint3(v2)) <  18446744073709551616) -> (tqtint3(mul4(v1,
  v2)) = (tqtint3(v1) * tqtint3(v2)))))

logic udiv3 : t4, t4 -> t4

axiom to_uint_udiv3 :
  (forall v1:t4. forall v2:t4. (tqtint3(udiv3(v1,
  v2)) = (tqtint3(v1) / tqtint3(v2))))

logic urem3 : t4, t4 -> t4

axiom to_uint_urem3 :
  (forall v1:t4. forall v2:t4. (tqtint3(urem3(v1,
  v2)) = (tqtint3(v1) % tqtint3(v2))))

logic lsr_bv3 : t4, t4 -> t4

axiom lsr_bv_is_lsr3 :
  (forall x:t4. forall n:t4. (lsr_bv3(x, n) = lsr3(x, tqtint3(n))))

axiom to_uint_lsr3 :
  (forall v:t4. forall n:t4. (tqtint3(lsr_bv3(v,
  n)) = (tqtint3(v) / pow2(tqtint3(n)))))

logic asr_bv3 : t4, t4 -> t4

axiom asr_bv_is_asr3 :
  (forall x:t4. forall n:t4. (asr_bv3(x, n) = asr3(x, tqtint3(n))))

logic lsl_bv3 : t4, t4 -> t4

axiom lsl_bv_is_lsl3 :
  (forall x:t4. forall n:t4. (lsl_bv3(x, n) = lsl3(x, tqtint3(n))))

axiom to_uint_lsl3 :
  (forall v:t4. forall n:t4. (tqtint3(lsl_bv3(v,
  n)) = ((tqtint3(v) * pow2(tqtint3(n))) % 18446744073709551616)))

logic rotate_right_bv3 : t4, t4 -> t4

logic rotate_left_bv3 : t4, t4 -> t4

axiom rotate_left_bv_is_rotate_left3 :
  (forall v:t4. forall n:t4. (rotate_left_bv3(v, n) = rotate_left3(v,
  tqtint3(n))))

axiom rotate_right_bv_is_rotate_right3 :
  (forall v:t4. forall n:t4. (rotate_right_bv3(v, n) = rotate_right3(v,
  tqtint3(n))))

logic nth_bv3 : t4, t4 -> bool

axiom Nth_bv_is_nth4 :
  (forall x:t4. forall i:t4. (nth3(x, tqtint3(i)) = nth_bv3(x, i)))

axiom Nth_bv_is_nth23 :
  (forall x:t4. forall i:int. (((0 <= i) and (i <  18446744073709551616)) ->
  (nth_bv3(x, of_int4(i)) = nth3(x, i))))

logic eq_sub_bv3 : t4, t4, t4, t4 -> prop

predicate eq_sub3(a: t4, b: t4, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth3(a, j) = nth3(b,
  j))))

axiom eq_sub_equiv3 :
  (forall a:t4. forall b:t4. forall i:t4. forall n:t4. (eq_sub3(a, b,
  tqtint3(i), tqtint3(n)) <-> eq_sub_bv3(a, b, i, n)))

axiom Extensionality3 :
  (forall x:t4. forall y:t4 [eq_sub3(x, y, 0, 64)]. (eq_sub3(x, y, 0, 64) ->
  (x = y)))

logic of_ubv8 : fpa_rounding_mode, t2 -> t1

logic of_ubv16 : fpa_rounding_mode, t -> t1

logic of_ubv32 : fpa_rounding_mode, t3 -> t1

logic of_ubv64 : fpa_rounding_mode, t4 -> t1

logic to_ubv8 : fpa_rounding_mode, t1 -> t2

logic to_ubv16 : fpa_rounding_mode, t1 -> t

logic to_ubv32 : fpa_rounding_mode, t1 -> t3

logic to_ubv64 : fpa_rounding_mode, t1 -> t4

axiom of_ubv8_is_finite :
  (forall m:fpa_rounding_mode. forall x:t2. tqtisFinite(of_ubv8(m, x)))

axiom of_ubv16_is_finite :
  (forall m:fpa_rounding_mode. forall x:t. tqtisFinite(of_ubv16(m, x)))

axiom of_ubv32_is_finite :
  (forall m:fpa_rounding_mode. forall x:t3. tqtisFinite(of_ubv32(m, x)))

axiom of_ubv64_is_finite :
  (forall m:fpa_rounding_mode. forall x:t4. tqtisFinite(of_ubv64(m, x)))

axiom of_ubv8_monotonic :
  (forall m:fpa_rounding_mode. forall x:t2. forall y:t2. (ule1(x, y) ->
  le(of_ubv8(m, x), of_ubv8(m, y))))

axiom of_ubv16_monotonic :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t. (ule(x, y) ->
  le(of_ubv16(m, x), of_ubv16(m, y))))

axiom of_ubv32_monotonic :
  (forall m:fpa_rounding_mode. forall x:t3. forall y:t3. (ule2(x, y) ->
  le(of_ubv32(m, x), of_ubv32(m, y))))

axiom of_ubv64_monotonic :
  (forall m:fpa_rounding_mode. forall x:t4. forall y:t4. (ule3(x, y) ->
  le(of_ubv64(m, x), of_ubv64(m, y))))

axiom of_ubv8_to_real :
  (forall m:fpa_rounding_mode. forall x:t2. (tqtreal(of_ubv8(m,
  x)) = real_of_int(tqtint1(x))))

axiom of_ubv16_to_real :
  (forall m:fpa_rounding_mode. forall x:t. (tqtreal(of_ubv16(m,
  x)) = real_of_int(tqtint(x))))

axiom of_ubv64_to_real :
  (forall m:fpa_rounding_mode. forall x:t4. (tqtreal(of_ubv64(m,
  x)) = float64(m,real_of_int(tqtint3(x)))))

axiom of_ubv32_to_real :
  (forall m:fpa_rounding_mode. forall x:t3. (tqtreal(of_ubv32(m,
  x)) = real_of_int(tqtint2(x))))

predicate neq(x: t1, y: t1) = (not eq(x, y))

logic bool_lt1 : t1, t1 -> bool

axiom bool_lt_def1 :
  (forall x:t1. forall y:t1 [bool_lt1(x, y)]. ((lt(x, y) -> (bool_lt1(x,
  y) = true)) and ((not lt(x, y)) -> (bool_lt1(x, y) = false))))

logic bool_le1 : t1, t1 -> bool

axiom bool_le_def1 :
  (forall x:t1. forall y:t1 [bool_le1(x, y)]. ((le(x, y) -> (bool_le1(x,
  y) = true)) and ((not le(x, y)) -> (bool_le1(x, y) = false))))

logic bool_gt1 : t1, t1 -> bool

axiom bool_gt_def1 :
  (forall x:t1. forall y:t1 [bool_gt1(x, y)]. ((lt(y, x) -> (bool_gt1(x,
  y) = true)) and ((not lt(y, x)) -> (bool_gt1(x, y) = false))))

logic bool_ge1 : t1, t1 -> bool

axiom bool_ge_def1 :
  (forall x:t1. forall y:t1 [bool_ge1(x, y)]. ((le(y, x) -> (bool_ge1(x,
  y) = true)) and ((not le(y, x)) -> (bool_ge1(x, y) = false))))

logic bool_eq1 : t1, t1 -> bool

axiom bool_eq_def1 :
  (forall x:t1. forall y:t1 [bool_eq1(x, y)]. ((eq(x, y) -> (bool_eq1(x,
  y) = true)) and ((not eq(x, y)) -> (bool_eq1(x, y) = false))))

logic bool_neq : t1, t1 -> bool

axiom bool_neq_def :
  (forall x:t1. forall y:t1 [bool_neq(x, y)]. (((not eq(x, y)) ->
  (bool_neq(x, y) = true)) and (eq(x, y) -> (bool_neq(x, y) = false))))

logic rem : t1, t1 -> t1

logic fliteral : t1

axiom fliteral_axiom : (tqtisFinite(fliteral) and (tqtreal(fliteral) = 1.0))

axiom one_is_int : is_int(fliteral)

axiom one_of_int : (fliteral = of_int1(NearestTiesToAway, 1))

type t__ref1 = { t__content1 : t1
}

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int5 : bool -> int

axiom to_int_def4 :
  (forall b:bool [to_int5(b)]. (((b = true) -> (to_int5(b) = 1)) and
  ((not (b = true)) -> (to_int5(b) = 0))))

logic of_int5 : int -> bool

axiom of_int_def :
  (forall i:int [of_int5(i)]. (((i = 0) -> (of_int5(i) = false)) and
  ((not (i = 0)) -> (of_int5(i) = true))))

logic bool_eq2 : bool, bool -> bool

axiom bool_eq_def2 :
  (forall x:bool. forall y:bool [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

predicate in_range1(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type unsigned_16

logic attr__ATTRIBUTE_MODULUS : t

logic bool_eq3 : int, int -> bool

logic bool_ne1 : int, int -> bool

logic bool_lt2 : int, int -> bool

logic bool_le2 : int, int -> bool

logic bool_gt2 : int, int -> bool

logic bool_ge2 : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq3(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne1(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt2(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le2(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt2(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge2(x, y) = true) <-> (y <= x))))

logic bool_eq4 : t, t -> bool

axiom bool_eq_def3 :
  (forall x:t. forall y:t [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> t

logic user_eq : unsigned_16, unsigned_16 -> bool

logic dummy : unsigned_16

type unsigned_16__ref = { unsigned_16__content : unsigned_16
}

function unsigned_16__ref___projection(a: unsigned_16__ref) : unsigned_16 =
  (a).unsigned_16__content

type tfloat64B

logic bool_eq5 : t1, t1 -> bool

axiom bool_eq_def4 :
  (forall x:t1. forall y:t1 [bool_eq5(x, y)]. ((eq(x, y) -> (bool_eq5(x,
  y) = true)) and ((not eq(x, y)) -> (bool_eq5(x, y) = false))))

logic user_eq1 : tfloat64B, tfloat64B -> bool

logic attr__ATTRIBUTE_IMAGE2 : t1 -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> t1

logic dummy1 : tfloat64B

type tfloat64B__ref = { tfloat64B__content : tfloat64B
}

function tfloat64B__ref___projection(a: tfloat64B__ref) : tfloat64B =
  (a).tfloat64B__content

type float641

logic bool_eq6 : t1, t1 -> bool

axiom bool_eq_def5 :
  (forall x:t1. forall y:t1 [bool_eq6(x, y)]. ((eq(x, y) -> (bool_eq6(x,
  y) = true)) and ((not eq(x, y)) -> (bool_eq6(x, y) = false))))

logic user_eq2 : float641, float641 -> bool

logic attr__ATTRIBUTE_IMAGE3 : t1 -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> t1

logic dummy2 : float641

type float64__ref = { float64__content : float641
}

function float64__ref___projection(a: float64__ref) : float641 =
  (a).float64__content

type frame

predicate in_range2(x: int) = ((0 <= x) and (x <= 25000))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : frame, frame -> bool

logic dummy3 : frame

type frame__ref = { frame__content : frame
}

function frame__ref___projection(a: frame__ref) : frame = (a).frame__content

type ratio_t

predicate in_range3(x: t1) = (tqtisFinite(x) and (le(neg1(fliteral), x) and
  le(x, fliteral)))

logic bool_eq8 : t1, t1 -> bool

axiom bool_eq_def7 :
  (forall x:t1. forall y:t1 [bool_eq8(x, y)]. ((eq(x, y) -> (bool_eq8(x,
  y) = true)) and ((not eq(x, y)) -> (bool_eq8(x, y) = false))))

logic user_eq4 : ratio_t, ratio_t -> bool

logic attr__ATTRIBUTE_IMAGE5 : t1 -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> t1

logic dummy4 : ratio_t

type ratio_t__ref = { ratio_t__content : ratio_t
}

function ratio_t__ref___projection(a: ratio_t__ref) : ratio_t =
  (a).ratio_t__content

type drag_t

logic fliteral1 : t1

axiom fliteral_axiom1 : (tqtisFinite(fliteral1) and
  (tqtreal(fliteral1) = 64.0))

predicate in_range4(x: t1) = (tqtisFinite(x) and (le(neg1(fliteral1), x) and
  le(x, fliteral1)))

logic bool_eq9 : t1, t1 -> bool

axiom bool_eq_def8 :
  (forall x:t1. forall y:t1 [bool_eq9(x, y)]. ((eq(x, y) -> (bool_eq9(x,
  y) = true)) and ((not eq(x, y)) -> (bool_eq9(x, y) = false))))

logic user_eq5 : drag_t, drag_t -> bool

logic attr__ATTRIBUTE_IMAGE6 : t1 -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> t1

logic dummy5 : drag_t

type drag_t__ref = { drag_t__content : drag_t
}

function drag_t__ref___projection(a: drag_t__ref) : drag_t =
  (a).drag_t__content

logic low_bound : int -> t1

logic low_bound__function_guard : t1, int -> prop

axiom low_bound__post_axiom :
  (forall n:int [low_bound(n)]. (in_range2(n) -> tqtisFinite(low_bound(n))))

logic fliteral2 : t1

axiom fliteral_axiom2 : (tqtisFinite(fliteral2) and
  (tqtreal(fliteral2) = 65.0))

axiom low_bound__def_axiom :
  (forall n:int [low_bound(n)]. (in_range2(n) ->
  (low_bound(n) = mul1(NearestTiesToEven, of_int1(NearestTiesToEven, n),
  neg1(fliteral2)))))

logic high_bound : int -> t1

logic high_bound__function_guard : t1, int -> prop

axiom high_bound__post_axiom :
  (forall n:int [high_bound(n)]. (in_range2(n) ->
  tqtisFinite(high_bound(n))))

axiom high_bound__def_axiom :
  (forall n:int [high_bound(n)]. (in_range2(n) ->
  (high_bound(n) = mul1(NearestTiesToEven, of_int1(NearestTiesToEven, n),
  fliteral2))))

logic in_bounds : t1 -> bool

logic in_bounds__function_guard : bool, t1 -> prop

axiom in_bounds__post_axiom : true

logic fliteral3 : t1

axiom fliteral_axiom3 : (tqtisFinite(fliteral3) and
  (tqtreal(fliteral3) = 1625000.0))

axiom in_bounds__def_axiom :
  (forall v:t1 [in_bounds(v)]. ((in_bounds(v) = true) <->
  (le(neg1(fliteral3), v) and le(v, fliteral3))))

logic invariant__ : int, t1 -> bool

logic invariant____function_guard : bool, int, t1 -> prop

axiom invariant____post_axiom : true

axiom invariant____def_axiom :
  (forall n:int.
  (forall speed:t1 [invariant__(n, speed)]. ((invariant__(n,
  speed) = true) <-> (le(low_bound(n), speed) and le(speed, high_bound(n))))))

logic n : int

logic attr__ATTRIBUTE_ADDRESS : int

logic factor : t1

logic attr__ATTRIBUTE_ADDRESS1 : int

logic drag : t1

logic attr__ATTRIBUTE_ADDRESS2 : int

logic old_speed : t1

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic delta_speed : t1

logic attr__ATTRIBUTE_ADDRESS5 : int

logic t5 : int -> t1

logic t__function_guard : t1, int -> prop

type integer

predicate in_range5(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq6 : integer, integer -> bool

logic dummy6 : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

axiom t__post_axiom :
  (forall n1:int [t5(n1)]. (in_range5(n1) -> tqtisFinite(t5(n1))))

axiom t__def_axiom :
  (forall n1:int [t5(n1)]. (in_range5(n1) ->
  (t5(n1) = of_int1(NearestTiesToEven, n1))))

logic n_bv : t

logic attr__ATTRIBUTE_ADDRESS6 : int

logic fliteral4 : t1

axiom fliteral_axiom4 : (tqtisFinite(fliteral4) and
  (tqtreal(fliteral4) = 9.8070000000000003836930773104541003704071044921875))

logic fliteral5 : t1

axiom fliteral_axiom5 : (tqtisFinite(fliteral5) and
  (tqtreal(fliteral5) = 0.0166666666666666664353702032030923874117434024810791015625))

axiom delta_speed__def_axiom : (delta_speed = add1(NearestTiesToEven, drag,
  mul1(NearestTiesToEven, mul1(NearestTiesToEven, factor, fliteral4),
  fliteral5)))

axiom n_bv__def_axiom : (n_bv = of_int(n))

logic fliteral6 : t1

axiom fliteral_axiom6 : (tqtisFinite(fliteral6) and
  (tqtreal(fliteral6) = 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0))

 (* File "simple_trajectory.ads", line 29, characters 0-0 *)
goal WP_parameter_def :
  (forall new_speed:t1. forall o:t1. forall result:t1. forall new_speed1:t1.
  (in_range2(n) -> (in_range3(factor) -> (in_range4(drag) ->
  (tqtisFinite(old_speed) -> ((le(neg1(fliteral6), fliteral6) ->
  tqtisFinite(new_speed)) -> (((n <  25000) and (invariant__(n,
  old_speed) = true)) -> ((add1(NearestTiesToEven, drag,
  mul1(NearestTiesToEven, mul1(NearestTiesToEven, factor, fliteral4),
  fliteral5)) = delta_speed) -> (tqtisFinite(delta_speed) ->
  ((of_int(n) = n_bv) -> ((((o = add1(NearestTiesToEven, old_speed,
  delta_speed)) and tqtisFinite(add1(NearestTiesToEven, old_speed,
  delta_speed))) and (({ t__content1 = result } = { t__content1 = new_speed
  }) and (new_speed1 = o))) -> ((le(neg1(fliteral2), delta_speed) and
  le(delta_speed, fliteral2)) -> ((in_bounds(high_bound(n)) = true) ->
  ((in_bounds(low_bound(n)) = true) -> (eq(add1(NearestTiesToEven,
  mul1(NearestTiesToEven, of_ubv16(NearestTiesToEven, n_bv), fliteral2),
  fliteral2), mul1(NearestTiesToEven, add1(NearestTiesToEven,
  of_ubv16(NearestTiesToEven, n_bv), fliteral), fliteral2)) ->
  eq(add1(NearestTiesToEven, mul1(NearestTiesToEven,
  of_int1(NearestTiesToEven, n), fliteral2), fliteral2),
  mul1(NearestTiesToEven, add1(NearestTiesToEven, of_int1(NearestTiesToEven,
  n), fliteral), fliteral2)))))))))))))))))
