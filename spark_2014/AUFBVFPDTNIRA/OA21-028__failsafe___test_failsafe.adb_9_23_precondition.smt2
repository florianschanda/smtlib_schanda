;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8))
                                           (bv2nat x) (- (- 256 (bv2nat x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                (fp.isPositive x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                 (fp.isNegative x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x)
                                            (fp.isPositive x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x)
                                             (fp.isNegative x)))

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y))
                    (and (fp.isNegative x) (fp.isNegative y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y))
                    (and (fp.isNegative x) (fp.isPositive y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z))
                    (=> (diff_sign x y) (fp.isNegative z))))

(define-fun sqr ((x Real)) Real (* x x))

(declare-fun sqrt1 (Real) Real)

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r))
                 (and (fp.isNegative x) (< r 0.0))))

(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 Float32)))))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort battery_level_type 0)

(declare-fun user_eq (battery_level_type battery_level_type) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE1 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Float32)

(declare-const dummy battery_level_type)

(declare-datatypes ()
((battery_level_type__ref
 (mk_battery_level_type__ref
 (battery_level_type__content battery_level_type)))))
(define-fun battery_level_type__ref___projection ((a battery_level_type__ref)) battery_level_type
  (battery_level_type__content a))

(declare-fun to_rep (battery_level_type) Float32)

(declare-fun of_rep (Float32) battery_level_type)

;; inversion_axiom
  (assert
  (forall ((x battery_level_type))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x battery_level_type))
  (! (fp.isFinite32 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Float32))
  (! (=> (fp.isFinite32 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                                (of_rep x))) )))

(declare-datatypes ()
((map__ref
 (mk_map__ref (map__content (Array (_ BitVec 8) battery_level_type))))))
(declare-fun slide ((Array (_ BitVec 8) battery_level_type) (_ BitVec 8)
  (_ BitVec 8)) (Array (_ BitVec 8) battery_level_type))

;; slide_eq
  (assert
  (forall ((a (Array (_ BitVec 8) battery_level_type)))
  (forall ((first (_ BitVec 8)))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array (_ BitVec 8) battery_level_type)))
  (forall ((old_first (_ BitVec 8)))
  (forall ((new_first (_ BitVec 8)))
  (forall ((i (_ BitVec 8)))
  (! (= (select (slide a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array (_ BitVec 8) battery_level_type))
  (a__first (_ BitVec 8)) (a__last (_ BitVec 8))
  (b (Array (_ BitVec 8) battery_level_type)) (b__first (_ BitVec 8))
  (b__last (_ BitVec 8))) Bool (ite (and
                                    (ite (bvule a__first a__last)
                                    (and (bvule b__first b__last)
                                    (= (bvsub a__last a__first) (bvsub b__last b__first)))
                                    (bvugt b__first b__last))
                                    (forall ((temp___idx_154 (_ BitVec 8)))
                                    (=>
                                    (and (bvule a__first temp___idx_154)
                                    (bvule temp___idx_154 a__last))
                                    (= (to_rep (select a temp___idx_154))
                                    (to_rep
                                    (select b (bvadd (bvsub b__first a__first) temp___idx_154)))))))
                               true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array (_ BitVec 8) battery_level_type))
  (b (Array (_ BitVec 8) battery_level_type)))
  (forall ((a__first (_ BitVec 8)) (a__last (_ BitVec 8))
  (b__first (_ BitVec 8)) (b__last (_ BitVec 8)))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (bvule a__first a__last)
  (and (bvule b__first b__last)
  (= (bvsub a__last a__first) (bvsub b__last b__first)))
  (bvugt b__first b__last))
  (forall ((temp___idx_154 (_ BitVec 8)))
  (=> (and (bvule a__first temp___idx_154) (bvule temp___idx_154 a__last))
  (= (to_rep (select a temp___idx_154)) (to_rep
                                        (select b (bvadd (bvsub b__first a__first) temp___idx_154)))))))))))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-fun is_valid (us_private (Array (_ BitVec 8) battery_level_type)
  (_ BitVec 8)) Bool)

(declare-fun is_valid__function_guard (Bool us_private
  (Array (_ BitVec 8) battery_level_type) (_ BitVec 8)) Bool)

(declare-sort time_slot 0)

(define-fun in_range1 ((x (_ BitVec 8))) Bool (and (bvule #x00 x)
                                              (bvule x #x31)))

(define-fun in_range_int ((x Int)) Bool (and (<= 0 x) (<= x 49)))

(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 8))

(declare-fun user_eq1 (time_slot time_slot) Bool)

(declare-const dummy1 time_slot)

(declare-datatypes ()
((time_slot__ref (mk_time_slot__ref (time_slot__content time_slot)))))
(define-fun time_slot__ref___projection ((a time_slot__ref)) time_slot
  (time_slot__content a))

(define-fun dynamic_invariant ((temp___expr_243 (_ BitVec 8))
  (temp___is_init_239 Bool) (temp___skip_constant_240 Bool)
  (temp___do_toplevel_241 Bool)
  (temp___do_typ_inv_242 Bool)) Bool (=>
                                     (or (= temp___is_init_239 true)
                                     (bvule #x00 #x31)) (in_range1
                                     temp___expr_243)))

(declare-fun is_raised (us_private (Array (_ BitVec 8) battery_level_type)
  (_ BitVec 8)) Bool)

(declare-fun is_raised__function_guard (Bool us_private
  (Array (_ BitVec 8) battery_level_type) (_ BitVec 8)) Bool)

(declare-fun time_below_threshold ((Array (_ BitVec 8) battery_level_type)
  (_ BitVec 8)) (_ BitVec 8))

(declare-fun time_below_threshold__function_guard ((_ BitVec 8)
  (Array (_ BitVec 8) battery_level_type) (_ BitVec 8)) Bool)

;; is_raised__post_axiom
  (assert
  (forall ((failsafe__failsafe_state us_private))
  (forall
  ((failsafe__model__battery_level_at (Array (_ BitVec 8) battery_level_type)))
  (forall ((failsafe__model__current_time (_ BitVec 8)))
  (! (=>
     (and (dynamic_invariant failsafe__model__current_time true true true
     true)
     (= (is_valid failsafe__failsafe_state failsafe__model__battery_level_at
        failsafe__model__current_time) true))
     (and
     (= (is_valid failsafe__failsafe_state failsafe__model__battery_level_at
        failsafe__model__current_time) true)
     (=
     (= (is_raised failsafe__failsafe_state failsafe__model__battery_level_at
        failsafe__model__current_time) true)
     (bvuge (time_below_threshold failsafe__model__battery_level_at
            failsafe__model__current_time) #x32)))) :pattern ((is_raised
                                                              failsafe__failsafe_state
                                                              failsafe__model__battery_level_at
                                                              failsafe__model__current_time)) )))))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(define-fun dynamic_invariant1 ((temp___expr_236 Float32)
  (temp___is_init_232 Bool) (temp___skip_constant_233 Bool)
  (temp___do_toplevel_234 Bool)
  (temp___do_typ_inv_235 Bool)) Bool (=>
                                     (or (= temp___is_init_232 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                     (fp.isFinite32 temp___expr_236)))

(declare-const battery_threshold Float32)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

;; battery_threshold__def_axiom
  (assert
  (= battery_threshold (fp #b0 #b01111100 #b10011001100110011001101)))

(declare-sort time_slot_length 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 8))

(define-fun in_range2 ((x (_ BitVec 8))) Bool (and (bvule #x00 x)
                                              (bvule x #x32)))

(define-fun in_range_int1 ((x Int)) Bool (and (<= 0 x) (<= x 50)))

(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 8))

(declare-fun user_eq2 (time_slot_length time_slot_length) Bool)

(declare-const dummy2 time_slot_length)

(declare-datatypes ()
((time_slot_length__ref
 (mk_time_slot_length__ref (time_slot_length__content time_slot_length)))))
(define-fun time_slot_length__ref___projection ((a time_slot_length__ref)) time_slot_length
  (time_slot_length__content a))

(define-fun dynamic_invariant2 ((temp___expr_250 (_ BitVec 8))
  (temp___is_init_246 Bool) (temp___skip_constant_247 Bool)
  (temp___do_toplevel_248 Bool)
  (temp___do_typ_inv_249 Bool)) Bool (=>
                                     (or (= temp___is_init_246 true)
                                     (bvule #x00 #x32)) (in_range2
                                     temp___expr_250)))

;; time_below_threshold__post_axiom
  (assert
  (forall
  ((failsafe__model__battery_level_at (Array (_ BitVec 8) battery_level_type)))
  (forall ((failsafe__model__current_time (_ BitVec 8)))
  (! (=> (dynamic_invariant failsafe__model__current_time true true true
     true)
     (let ((result (time_below_threshold failsafe__model__battery_level_at
                   failsafe__model__current_time)))
     (and
     (ite (fp.leq battery_threshold (to_rep
                                    (select failsafe__model__battery_level_at failsafe__model__current_time)))
     (= result #x00)
     (ite (forall ((s (_ BitVec 8)))
          (=> (and (bvule #x00 s) (bvule s #x31))
          (fp.lt (to_rep (select failsafe__model__battery_level_at s))
          battery_threshold)))
     (= result #x32)
     (and
     (and (bvult result #x32)
     (fp.leq battery_threshold (to_rep
                               (select failsafe__model__battery_level_at
                               (let ((temp___267 (bvsub failsafe__model__current_time result)))
                               (ite (bvult failsafe__model__current_time result)
                               (bvadd temp___267 #x32) temp___267))))))
     (ite (bvuge failsafe__model__current_time (bvsub result #x01))
     (forall ((s (_ BitVec 8)))
     (=>
     (and
     (bvule (let ((temp___268 (bvsub failsafe__model__current_time (bvsub result #x01))))
            (ite (bvult failsafe__model__current_time (bvsub result #x01))
            (bvadd temp___268 #x32) temp___268)) s)
     (bvule s failsafe__model__current_time))
     (fp.lt (to_rep (select failsafe__model__battery_level_at s)) battery_threshold)))
     (and
     (forall ((s (_ BitVec 8)))
     (=> (and (bvule #x00 s) (bvule s failsafe__model__current_time))
     (fp.lt (to_rep (select failsafe__model__battery_level_at s)) battery_threshold)))
     (forall ((s (_ BitVec 8)))
     (=>
     (and
     (bvule (let ((temp___269 (bvsub failsafe__model__current_time (bvsub result #x01))))
            (ite (bvult failsafe__model__current_time (bvsub result #x01))
            (bvadd temp___269 #x32) temp___269)) s)
     (bvule s #x31))
     (fp.lt (to_rep (select failsafe__model__battery_level_at s)) battery_threshold))))))))
     (dynamic_invariant2 result true false true true)))) :pattern ((time_below_threshold
                                                                   failsafe__model__battery_level_at
                                                                   failsafe__model__current_time)) ))))

;; is_valid__post_axiom
  (assert true)

(declare-const battery_level_at (Array (_ BitVec 8) battery_level_type))

(declare-const current_time (_ BitVec 8))

(declare-const j Int)

(declare-const failsafe_state us_private)

(declare-const temp___325 (_ BitVec 8))

(declare-const temp___324 (Array (_ BitVec 8) battery_level_type))

(declare-const battery_level_at1 (Array (_ BitVec 8) battery_level_type))

(declare-const current_time1 (_ BitVec 8))

(declare-const failsafe_state1 us_private)

(declare-const result Int)

(declare-const j1 Int)

(declare-const current_time2 (_ BitVec 8))

(declare-const j2 Int)

(declare-const battery_level_at2 (Array (_ BitVec 8) battery_level_type))

(declare-const current_time3 (_ BitVec 8))

(declare-const failsafe_state2 us_private)

(declare-const battery_level_at3 (Array (_ BitVec 8) battery_level_type))

(declare-const current_time4 (_ BitVec 8))

(declare-const j3 Int)

(declare-const failsafe_state3 us_private)

(declare-const battery_level_at4 (Array (_ BitVec 8) battery_level_type))

(declare-const current_time5 (_ BitVec 8))

(declare-const j4 Int)

(declare-const failsafe_state4 us_private)

(declare-const battery_level_at5 (Array (_ BitVec 8) battery_level_type))

(declare-const current_time6 (_ BitVec 8))

(declare-const j5 Int)

(declare-const failsafe_state5 us_private)

(declare-const battery_level_at6 (Array (_ BitVec 8) battery_level_type))

(declare-const current_time7 (_ BitVec 8))

(declare-const j6 Int)

(declare-const failsafe_state6 us_private)

(define-fun failsafe_state7 () us_private__ref (mk___private__ref
                                               failsafe_state5))

(define-fun current_time8 () t__ref (mk_t__ref current_time6))

(define-fun battery_level_at7 () map__ref (mk_map__ref battery_level_at5))

;; H
  (assert (in_range1 current_time))

;; H
  (assert (= (mk_int__ref result) (mk_int__ref j)))

;; H
  (assert (= j1 1))

;; H
  (assert (=> (and (<= 1 j1) (<= j1 49)) (= temp___325 current_time)))

;; H
  (assert (=> (and (<= 1 j1) (<= j1 49)) (= temp___324 battery_level_at)))

;; H
  (assert
  (=> (and (<= 1 j1) (<= j1 49))
  (and (in_range1 current_time2) (and (<= 1 j2) (<= j2 49)))))

;; H
  (assert
  (=> (and (<= 1 j1) (<= j1 49))
  (and
  (and (= (is_valid failsafe_state2 battery_level_at2 current_time3) true)
  (and
  (= current_time3 (let ((temp___273 (bvadd current_time2 #x01)))
                   (ite (bvule (bvsub #x32 current_time2) #x01)
                   (bvsub temp___273 #x32) temp___273)))
  (fp.eq (to_rep (select battery_level_at2 current_time3)) (fp #b0 #b01111011 #b10011001100110011001101))))
  (in_range1 current_time3))))

;; H
  (assert (=> (and (<= 1 j1) (<= j1 49)) (= j2 49)))

;; H
  (assert
  (=> (and (<= 1 j1) (<= j1 49)) (= failsafe_state2 failsafe_state3)))

;; H
  (assert (=> (and (<= 1 j1) (<= j1 49)) (= j2 j3)))

;; H
  (assert (=> (and (<= 1 j1) (<= j1 49)) (= current_time3 current_time4)))

;; H
  (assert
  (=> (and (<= 1 j1) (<= j1 49)) (= battery_level_at2 battery_level_at3)))

;; H
  (assert
  (=> (and (<= 1 j1) (<= j1 49)) (= failsafe_state4 failsafe_state2)))

;; H
  (assert (=> (and (<= 1 j1) (<= j1 49)) (= j4 j2)))

;; H
  (assert (=> (and (<= 1 j1) (<= j1 49)) (= current_time5 current_time3)))

;; H
  (assert
  (=> (and (<= 1 j1) (<= j1 49)) (= battery_level_at4 battery_level_at2)))

;; H
  (assert
  (=> (and (<= 1 j1) (<= j1 49))
  (= failsafe_state7 (mk___private__ref failsafe_state3))))

;; H
  (assert
  (=> (and (<= 1 j1) (<= j1 49)) (= (mk_int__ref j5) (mk_int__ref j3))))

;; H
  (assert
  (=> (and (<= 1 j1) (<= j1 49)) (= current_time8 (mk_t__ref current_time4))))

;; H
  (assert
  (=> (and (<= 1 j1) (<= j1 49))
  (= battery_level_at7 (mk_map__ref battery_level_at3))))

;; H
  (assert
  (=> (and (<= 1 j1) (<= j1 49)) (= failsafe_state6 failsafe_state4)))

;; H
  (assert (=> (and (<= 1 j1) (<= j1 49)) (= j6 j4)))

;; H
  (assert (=> (and (<= 1 j1) (<= j1 49)) (= current_time7 current_time5)))

;; H
  (assert
  (=> (and (<= 1 j1) (<= j1 49)) (= battery_level_at6 battery_level_at4)))

;; H
  (assert
  (=> (not (and (<= 1 j1) (<= j1 49)))
  (= failsafe_state7 (mk___private__ref failsafe_state))))

;; H
  (assert (=> (not (and (<= 1 j1) (<= j1 49))) (= j1 j5)))

;; H
  (assert
  (=> (not (and (<= 1 j1) (<= j1 49)))
  (= current_time8 (mk_t__ref current_time))))

;; H
  (assert
  (=> (not (and (<= 1 j1) (<= j1 49)))
  (= battery_level_at7 (mk_map__ref battery_level_at))))

;; H
  (assert
  (=> (not (and (<= 1 j1) (<= j1 49))) (= failsafe_state6 failsafe_state1)))

;; H
  (assert (=> (not (and (<= 1 j1) (<= j1 49))) (= j6 j1)))

;; H
  (assert
  (=> (not (and (<= 1 j1) (<= j1 49))) (= current_time7 current_time1)))

;; H
  (assert
  (=> (not (and (<= 1 j1) (<= j1 49)))
  (= battery_level_at6 battery_level_at1)))

(assert
;; WP_parameter_def
 ;; File "failsafe.ads", line 20, characters 0-0
  (not (= (is_valid failsafe_state5 battery_level_at5 current_time6) true)))
(check-sat)
(exit)
