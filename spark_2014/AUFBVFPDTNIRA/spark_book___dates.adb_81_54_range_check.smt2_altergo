(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type year_type

predicate in_range(x: int) = ((2000 <= x) and (x <= 2099))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : year_type, year_type -> bool

logic dummy : year_type

type year_type__ref = { year_type__content : year_type
}

function year_type__ref___projection(a: year_type__ref) : year_type =
  (a).year_type__content

logic to_rep : year_type -> int

logic of_rep : int -> year_type

axiom inversion_axiom :
  (forall x:year_type [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:year_type [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type month_type

predicate in_range1(x: int) = ((1 <= x) and (x <= 12))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : month_type, month_type -> bool

logic dummy1 : month_type

type month_type__ref = { month_type__content : month_type
}

function month_type__ref___projection(a: month_type__ref) : month_type =
  (a).month_type__content

logic to_rep1 : month_type -> int

logic of_rep1 : int -> month_type

axiom inversion_axiom1 :
  (forall x:month_type [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:month_type [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type day_type

predicate in_range2(x: int) = ((1 <= x) and (x <= 31))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : day_type, day_type -> bool

logic dummy2 : day_type

type day_type__ref = { day_type__content : day_type
}

function day_type__ref___projection(a: day_type__ref) : day_type =
  (a).day_type__content

logic to_rep2 : day_type -> int

logic of_rep2 : int -> day_type

axiom inversion_axiom2 :
  (forall x:day_type [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:day_type [to_rep2(x)]. in_range2(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range2(x) ->
  (to_rep2(of_rep2(x)) = x)))

type us_split_fields = { rec__dates__date__day : day_type;
rec__dates__date__month : month_type; rec__dates__date__year : year_type
}

function us_split_fields_Day__projection(a: us_split_fields) : day_type =
  (a).rec__dates__date__day

function us_split_fields_Month__projection(a: us_split_fields) : month_type =
  (a).rec__dates__date__month

function us_split_fields_Year__projection(a: us_split_fields) : year_type =
  (a).rec__dates__date__year

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq4 : us_rep, us_rep -> bool

axiom bool_eq_def3 :
  (forall a:us_rep. forall b:us_rep [bool_eq4(a, b)].
  (((((to_rep2(((a).us_split_fields1).rec__dates__date__day) = to_rep2(((b).us_split_fields1).rec__dates__date__day)) and
  (to_rep1(((a).us_split_fields1).rec__dates__date__month) = to_rep1(((b).us_split_fields1).rec__dates__date__month))) and
  (to_rep(((a).us_split_fields1).rec__dates__date__year) = to_rep(((b).us_split_fields1).rec__dates__date__year))) ->
  (bool_eq4(a, b) = true)) and
  ((not (((to_rep2(((a).us_split_fields1).rec__dates__date__day) = to_rep2(((b).us_split_fields1).rec__dates__date__day)) and
  (to_rep1(((a).us_split_fields1).rec__dates__date__month) = to_rep1(((b).us_split_fields1).rec__dates__date__month))) and
  (to_rep(((a).us_split_fields1).rec__dates__date__year) = to_rep(((b).us_split_fields1).rec__dates__date__year)))) ->
  (bool_eq4(a, b) = false))))

logic user_eq3 : us_rep, us_rep -> bool

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:day_type. forall a1:month_type. forall a2:year_type.
  (0 <= object__size({ us_split_fields1 = { rec__dates__date__day = a;
  rec__dates__date__month = a1; rec__dates__date__year = a2 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:day_type. forall a1:month_type. forall a2:year_type.
  (0 <= object__alignment({ us_split_fields1 = { rec__dates__date__day = a;
  rec__dates__date__month = a1; rec__dates__date__year = a2 } })))

logic dates__date__day__first__bit : int

logic dates__date__day__last__bit : int

logic dates__date__day__position : int

axiom dates__date__day__first__bit_axiom :
  (0 <= dates__date__day__first__bit)

axiom dates__date__day__last__bit_axiom :
  (dates__date__day__first__bit <  dates__date__day__last__bit)

axiom dates__date__day__position_axiom : (0 <= dates__date__day__position)

logic dates__date__month__first__bit : int

logic dates__date__month__last__bit : int

logic dates__date__month__position : int

axiom dates__date__month__first__bit_axiom :
  (0 <= dates__date__month__first__bit)

axiom dates__date__month__last__bit_axiom :
  (dates__date__month__first__bit <  dates__date__month__last__bit)

axiom dates__date__month__position_axiom :
  (0 <= dates__date__month__position)

logic dates__date__year__first__bit : int

logic dates__date__year__last__bit : int

logic dates__date__year__position : int

axiom dates__date__year__first__bit_axiom :
  (0 <= dates__date__year__first__bit)

axiom dates__date__year__last__bit_axiom :
  (dates__date__year__first__bit <  dates__date__year__last__bit)

axiom dates__date__year__position_axiom : (0 <= dates__date__year__position)

logic dummy3 : day_type

logic dummy4 : month_type

logic dummy5 : year_type

type date__ref = { date__content : us_rep
}

function date__ref___projection(a: date__ref) : us_rep = (a).date__content

logic maximum_date : unit -> us_rep

logic maximum_date__function_guard : us_rep, unit -> prop

axiom maximum_date__post_axiom : true

axiom maximum_date__def_axiom : (maximum_date(void) = { us_split_fields1 = {
  rec__dates__date__day = of_rep2(31); rec__dates__date__month = of_rep1(12);
  rec__dates__date__year = of_rep(2099) } })

logic get_month_length : int, int -> int

logic get_month_length__function_guard : int, int, int -> prop

axiom get_month_length__post_axiom :
  (forall year:int. forall month:int [get_month_length(year, month)].
  ((in_range(year) and in_range1(month)) -> ((((((((((((((month = 1) ->
  (get_month_length(year, month) = 31)) and ((month = 2) ->
  ((get_month_length(year, month) = 28) or (get_month_length(year,
  month) = 29)))) and ((month = 3) -> (get_month_length(year,
  month) = 31))) and ((month = 4) -> (get_month_length(year,
  month) = 30))) and ((month = 5) -> (get_month_length(year,
  month) = 31))) and ((month = 6) -> (get_month_length(year,
  month) = 30))) and ((month = 7) -> (get_month_length(year,
  month) = 31))) and ((month = 8) -> (get_month_length(year,
  month) = 31))) and ((month = 9) -> (get_month_length(year,
  month) = 30))) and ((month = 10) -> (get_month_length(year,
  month) = 31))) and ((month = 11) -> (get_month_length(year,
  month) = 30))) and ((month = 12) -> (get_month_length(year,
  month) = 31))) and in_range2(get_month_length(year, month)))))

logic attr__ATTRIBUTE_ADDRESS : int

 (* File "dates.ads", line 6, characters 0-0 *)
goal WP_parameter_def :
  (forall current_date__split_fields:day_type.
  forall current_date__split_fields1:month_type.
  forall current_date__split_fields2:year_type. forall o:int.
  forall o1:day_type. forall o2:day_type. forall o3:month_type.
  forall o4:year_type. forall temp___265:day_type.
  forall temp___2651:month_type. forall temp___2652:year_type.
  forall result:bool. forall result1:day_type. forall result2:month_type.
  forall result3:year_type. forall current_date__split_fields3:day_type.
  forall current_date__split_fields4:month_type.
  forall current_date__split_fields5:year_type. ((not (bool_eq4({
  us_split_fields1 = { rec__dates__date__day = current_date__split_fields;
  rec__dates__date__month = current_date__split_fields1;
  rec__dates__date__year = current_date__split_fields2 } },
  maximum_date(void)) = true)) ->
  ((((o = get_month_length(to_rep(current_date__split_fields2),
  to_rep1(current_date__split_fields1))) and (in_range2(o) and
  (((((((((((((to_rep1(current_date__split_fields1) = 1) -> (o = 31)) and
  ((to_rep1(current_date__split_fields1) = 2) -> ((o = 28) or (o = 29)))) and
  ((to_rep1(current_date__split_fields1) = 3) -> (o = 31))) and
  ((to_rep1(current_date__split_fields1) = 4) -> (o = 30))) and
  ((to_rep1(current_date__split_fields1) = 5) -> (o = 31))) and
  ((to_rep1(current_date__split_fields1) = 6) -> (o = 30))) and
  ((to_rep1(current_date__split_fields1) = 7) -> (o = 31))) and
  ((to_rep1(current_date__split_fields1) = 8) -> (o = 31))) and
  ((to_rep1(current_date__split_fields1) = 9) -> (o = 30))) and
  ((to_rep1(current_date__split_fields1) = 10) -> (o = 31))) and
  ((to_rep1(current_date__split_fields1) = 11) -> (o = 30))) and
  ((to_rep1(current_date__split_fields1) = 12) -> (o = 31))))) and
  (((to_rep2(current_date__split_fields) <  o) and (result = true)) or
  ((not (to_rep2(current_date__split_fields) <  o)) and
  (result = false)))) -> ((not (result = true)) ->
  ((not (to_rep1(current_date__split_fields1) = 12)) ->
  (((((to_rep2(o1) = 1) and ((o1 = o2) and
  ((current_date__split_fields1 = o3) and
  (current_date__split_fields2 = o4)))) and ((temp___265 = o2) and
  ((temp___2651 = o3) and (temp___2652 = o4)))) and
  (((result1 = current_date__split_fields) and
  ((result2 = current_date__split_fields1) and
  (result3 = current_date__split_fields2))) and
  ((temp___265 = current_date__split_fields3) and
  ((temp___2651 = current_date__split_fields4) and
  (temp___2652 = current_date__split_fields5))))) ->
  in_range1((to_rep1(current_date__split_fields4) + 1))))))))
