(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
(* this is a prelude for Alt-Ergo real arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

axiom add_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x + y) / z) = ((x / z) + (y / z)))))

axiom sub_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x - y) / z) = ((x / z) - (y / z)))))

axiom neg_div :
  (forall x:real. forall y:real. ((not (y = 0.0)) ->
  (((-x) / y) = (-(x / y)))))

axiom assoc_mul_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x * y) / z) = (x * (y / z)))))

axiom assoc_div_mul :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> (((x / y) / z) = (x / (y * z)))))

axiom assoc_div_div :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> ((x / (y / z)) = ((x * z) / y))))

type t

logic tqtreal : t -> real

logic tqtisFinite : t -> prop

axiom tqtaxiom :
  (forall x:t. (tqtisFinite(x) -> (((-0xFFFFFF.0p104) <= tqtreal(x)) and
  (tqtreal(x) <= 0xFFFFFF.0p104))))

logic pow2 : int -> int

axiom Power_0 : (pow2(0) = 1)

axiom Power_s : (forall n:int. ((0 <= n) -> (pow2((n + 1)) = (2 * pow2(n)))))

axiom Power_1 : (pow2(1) = 2)

axiom Power_sum :
  (forall n:int. forall m:int. (((0 <= n) and (0 <= m)) ->
  (pow2((n + m)) = (pow2(n) * pow2(m)))))

axiom pow2pos : (forall i:int. ((0 <= i) -> (0 <  pow2(i))))

axiom pow2_0 : (pow2(0) = 1)

axiom pow2_1 : (pow2(1) = 2)

axiom pow2_2 : (pow2(2) = 4)

axiom pow2_3 : (pow2(3) = 8)

axiom pow2_4 : (pow2(4) = 16)

axiom pow2_5 : (pow2(5) = 32)

axiom pow2_6 : (pow2(6) = 64)

axiom pow2_7 : (pow2(7) = 128)

axiom pow2_8 : (pow2(8) = 256)

axiom pow2_9 : (pow2(9) = 512)

axiom pow2_10 : (pow2(10) = 1024)

axiom pow2_11 : (pow2(11) = 2048)

axiom pow2_12 : (pow2(12) = 4096)

axiom pow2_13 : (pow2(13) = 8192)

axiom pow2_14 : (pow2(14) = 16384)

axiom pow2_15 : (pow2(15) = 32768)

axiom pow2_16 : (pow2(16) = 65536)

axiom pow2_17 : (pow2(17) = 131072)

axiom pow2_18 : (pow2(18) = 262144)

axiom pow2_19 : (pow2(19) = 524288)

axiom pow2_20 : (pow2(20) = 1048576)

axiom pow2_21 : (pow2(21) = 2097152)

axiom pow2_22 : (pow2(22) = 4194304)

axiom pow2_23 : (pow2(23) = 8388608)

axiom pow2_24 : (pow2(24) = 16777216)

axiom pow2_25 : (pow2(25) = 33554432)

axiom pow2_26 : (pow2(26) = 67108864)

axiom pow2_27 : (pow2(27) = 134217728)

axiom pow2_28 : (pow2(28) = 268435456)

axiom pow2_29 : (pow2(29) = 536870912)

axiom pow2_30 : (pow2(30) = 1073741824)

axiom pow2_31 : (pow2(31) = 2147483648)

axiom pow2_32 : (pow2(32) = 4294967296)

axiom pow2_33 : (pow2(33) = 8589934592)

axiom pow2_34 : (pow2(34) = 17179869184)

axiom pow2_35 : (pow2(35) = 34359738368)

axiom pow2_36 : (pow2(36) = 68719476736)

axiom pow2_37 : (pow2(37) = 137438953472)

axiom pow2_38 : (pow2(38) = 274877906944)

axiom pow2_39 : (pow2(39) = 549755813888)

axiom pow2_40 : (pow2(40) = 1099511627776)

axiom pow2_41 : (pow2(41) = 2199023255552)

axiom pow2_42 : (pow2(42) = 4398046511104)

axiom pow2_43 : (pow2(43) = 8796093022208)

axiom pow2_44 : (pow2(44) = 17592186044416)

axiom pow2_45 : (pow2(45) = 35184372088832)

axiom pow2_46 : (pow2(46) = 70368744177664)

axiom pow2_47 : (pow2(47) = 140737488355328)

axiom pow2_48 : (pow2(48) = 281474976710656)

axiom pow2_49 : (pow2(49) = 562949953421312)

axiom pow2_50 : (pow2(50) = 1125899906842624)

axiom pow2_51 : (pow2(51) = 2251799813685248)

axiom pow2_52 : (pow2(52) = 4503599627370496)

axiom pow2_53 : (pow2(53) = 9007199254740992)

axiom pow2_54 : (pow2(54) = 18014398509481984)

axiom pow2_55 : (pow2(55) = 36028797018963968)

axiom pow2_56 : (pow2(56) = 72057594037927936)

axiom pow2_57 : (pow2(57) = 144115188075855872)

axiom pow2_58 : (pow2(58) = 288230376151711744)

axiom pow2_59 : (pow2(59) = 576460752303423488)

axiom pow2_60 : (pow2(60) = 1152921504606846976)

axiom pow2_61 : (pow2(61) = 2305843009213693952)

axiom pow2_62 : (pow2(62) = 4611686018427387904)

axiom pow2_63 : (pow2(63) = 9223372036854775808)

axiom pow2_64 : (pow2(64) = 18446744073709551616)

logic abs : real -> real

axiom abs_def :
  (forall x:real [abs(x)]. (((0.0 <= x) -> (abs(x) = x)) and
  ((not (0.0 <= x)) -> (abs(x) = (-x)))))

axiom Abs_le :
  (forall x:real. forall y:real. ((abs(x) <= y) <-> (((-y) <= x) and
  (x <= y))))

axiom Abs_pos : (forall x:real. (0.0 <= abs(x)))

axiom Abs_sum :
  (forall x:real. forall y:real. (abs((x + y)) <= (abs(x) + abs(y))))

axiom Abs_prod :
  (forall x:real. forall y:real. (abs((x * y)) = (abs(x) * abs(y))))

axiom triangular_inequality :
  (forall x:real. forall y:real. forall z:real.
  (abs((x - z)) <= (abs((x - y)) + abs((y - z)))))

logic from_int : int -> real

axiom Zero : (from_int(0) = 0.0)

axiom One : (from_int(1) = 1.0)

axiom Add :
  (forall x:int. forall y:int.
  (from_int((x + y)) = (from_int(x) + from_int(y))))

axiom Sub :
  (forall x:int. forall y:int.
  (from_int((x - y)) = (from_int(x) - from_int(y))))

axiom Mul :
  (forall x:int. forall y:int.
  (from_int((x * y)) = (from_int(x) * from_int(y))))

axiom Neg : (forall x:int. (from_int((-x)) = (-from_int(x))))

axiom Monotonic :
  (forall x:int. forall y:int. ((x <= y) -> (from_int(x) <= from_int(y))))

logic truncate : real -> int

axiom Truncate_int : (forall i:int. (truncate(from_int(i)) = i))

axiom Truncate_down_pos :
  (forall x:real. ((0.0 <= x) -> ((from_int(truncate(x)) <= x) and
  (x <  from_int((truncate(x) + 1))))))

axiom Truncate_up_neg :
  (forall x:real. ((x <= 0.0) -> ((from_int((truncate(x) - 1)) <  x) and
  (x <= from_int(truncate(x))))))

axiom Real_of_truncate :
  (forall x:real. (((x - 1.0) <= from_int(truncate(x))) and
  (from_int(truncate(x)) <= (x + 1.0))))

axiom Truncate_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (truncate(x) <= truncate(y))))

axiom Truncate_monotonic_int1 :
  (forall x:real. forall i:int. ((x <= from_int(i)) -> (truncate(x) <= i)))

axiom Truncate_monotonic_int2 :
  (forall x:real. forall i:int. ((from_int(i) <= x) -> (i <= truncate(x))))

logic floor : real -> int

logic ceil : real -> int

axiom Floor_int : (forall i:int. (floor(from_int(i)) = i))

axiom Ceil_int : (forall i:int. (ceil(from_int(i)) = i))

axiom Floor_down :
  (forall x:real. ((from_int(floor(x)) <= x) and
  (x <  from_int((floor(x) + 1)))))

axiom Ceil_up :
  (forall x:real. ((from_int((ceil(x) - 1)) <  x) and
  (x <= from_int(ceil(x)))))

axiom Floor_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (floor(x) <= floor(y))))

axiom Ceil_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (ceil(x) <= ceil(y))))

type mode = RNE | RNA | RTP | RTN | RTZ

logic match_mode : mode, 'a, 'a, 'a, 'a, 'a -> 'a

axiom match_mode_RNE :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(RNE, z, z1, z2, z3, z4) = z))

axiom match_mode_RNA :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(RNA, z, z1, z2, z3, z4) = z1))

axiom match_mode_RTP :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(RTP, z, z1, z2, z3, z4) = z2))

axiom match_mode_RTN :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(RTN, z, z1, z2, z3, z4) = z3))

axiom match_mode_RTZ :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(RTZ, z, z1, z2, z3, z4) = z4))

predicate to_nearest(m: mode) = ((m = RNE) or (m = RNA))

logic zeroF : t

logic add : mode, t, t -> t

logic sub : mode, t, t -> t

logic mul : mode, t, t -> t

logic div : mode, t, t -> t

logic abs1 : t -> t

logic neg : t -> t

logic fma : mode, t, t, t -> t

logic sqrt : mode, t -> t

logic roundToIntegral : mode, t -> t

logic min : t, t -> t

logic max : t, t -> t

logic le : t, t -> prop

logic lt : t, t -> prop

logic eq : t, t -> prop

logic is_normal : t -> prop

logic is_subnormal : t -> prop

logic is_zero : t -> prop

logic is_infinite : t -> prop

logic is_nan : t -> prop

logic is_positive : t -> prop

logic is_negative : t -> prop

predicate is_plus_infinity(x: t) = (is_infinite(x) and is_positive(x))

predicate is_minus_infinity(x: t) = (is_infinite(x) and is_negative(x))

predicate is_plus_zero(x: t) = (is_zero(x) and is_positive(x))

predicate is_minus_zero(x: t) = (is_zero(x) and is_negative(x))

predicate is_not_nan(x: t) = (tqtisFinite(x) or is_infinite(x))

axiom is_not_nan1 : (forall x:t. (is_not_nan(x) <-> (not is_nan(x))))

axiom is_not_finite :
  (forall x:t. ((not tqtisFinite(x)) <-> (is_infinite(x) or is_nan(x))))

axiom zeroF_is_positive : is_positive(zeroF)

axiom zeroF_is_zero : is_zero(zeroF)

axiom zero_to_real :
  (forall x:t [is_zero(x)]. (is_zero(x) <-> (tqtisFinite(x) and
  (tqtreal(x) = 0.0))))

logic of_int : mode, int -> t

logic to_int : mode, t -> int

axiom zero_of_int : (forall m:mode. (zeroF = of_int(m, 0)))

logic round : mode, real -> real

logic max_int1 : int

axiom max_real_int : (0x1.FFFFFEp127 = from_int(max_int1))

predicate in_range(x: real) = (((-0x1.FFFFFEp127) <= x) and
  (x <= 0x1.FFFFFEp127))

predicate in_int_range(i: int) = (((-max_int1) <= i) and (i <= max_int1))

axiom is_finite : (forall x:t. (tqtisFinite(x) -> in_range(tqtreal(x))))

predicate no_overflow(m: mode, x: real) = in_range(round(m, x))

axiom Bounded_real_no_overflow :
  (forall m:mode. forall x:real. (in_range(x) -> in_range(round(m, x))))

axiom Round_monotonic :
  (forall m:mode. forall x:real. forall y:real. ((x <= y) -> (round(m,
  x) <= round(m, y))))

axiom Round_idempotent :
  (forall m1:mode. forall m2:mode. forall x:real. (round(m1, round(m2,
  x)) = round(m2, x)))

axiom Round_to_real :
  (forall m:mode. forall x:t. (tqtisFinite(x) -> (round(m,
  tqtreal(x)) = tqtreal(x))))

axiom Round_down_le : (forall x:real. (round(RTN, x) <= x))

axiom Round_up_ge : (forall x:real. (x <= round(RTP, x)))

axiom Round_down_neg : (forall x:real. (round(RTN, (-x)) = (-round(RTP, x))))

axiom Round_up_neg : (forall x:real. (round(RTP, (-x)) = (-round(RTN, x))))

predicate in_safe_int_range(i: int) = (((-16777216) <= i) and
  (i <= 16777216))

axiom Exact_rounding_for_integers :
  (forall m:mode. forall i:int. (in_safe_int_range(i) -> (round(m,
  from_int(i)) = from_int(i))))

predicate same_sign(x: t, y: t) = ((is_positive(x) and is_positive(y)) or
  (is_negative(x) and is_negative(y)))

predicate diff_sign(x: t, y: t) = ((is_positive(x) and is_negative(y)) or
  (is_negative(x) and is_positive(y)))

axiom feq_eq :
  (forall x:t. forall y:t. (tqtisFinite(x) -> (tqtisFinite(y) ->
  ((not is_zero(x)) -> (eq(x, y) -> (x = y))))))

axiom eq_feq :
  (forall x:t. forall y:t. (tqtisFinite(x) -> (tqtisFinite(y) -> ((x = y) ->
  eq(x, y)))))

axiom eq_refl : (forall x:t. (tqtisFinite(x) -> eq(x, x)))

axiom eq_sym : (forall x:t. forall y:t. (eq(x, y) -> eq(y, x)))

axiom eq_trans :
  (forall x:t. forall y:t. forall z:t. (eq(x, y) -> (eq(y, z) -> eq(x, z))))

axiom eq_zero : eq(zeroF, neg(zeroF))

axiom eq_to_real_finite :
  (forall x:t. forall y:t. ((tqtisFinite(x) and tqtisFinite(y)) -> (eq(x,
  y) <-> (tqtreal(x) = tqtreal(y)))))

axiom lt_finite :
  (forall x:t. forall y:t [lt(x, y)]. ((tqtisFinite(x) and tqtisFinite(y)) ->
  (lt(x, y) <-> (tqtreal(x) <  tqtreal(y)))))

axiom le_finite :
  (forall x:t. forall y:t [le(x, y)]. ((tqtisFinite(x) and tqtisFinite(y)) ->
  (le(x, y) <-> (tqtreal(x) <= tqtreal(y)))))

axiom le_lt_trans :
  (forall x:t. forall y:t. forall z:t. ((le(x, y) and lt(y, z)) -> lt(x, z)))

axiom lt_le_trans :
  (forall x:t. forall y:t. forall z:t. ((lt(x, y) and le(y, z)) -> lt(x, z)))

axiom le_ge_asym :
  (forall x:t. forall y:t. ((le(x, y) and le(y, x)) -> eq(x, y)))

axiom not_lt_ge :
  (forall x:t. forall y:t. (((not lt(x, y)) and (is_not_nan(x) and
  is_not_nan(y))) -> le(y, x)))

axiom not_gt_le :
  (forall x:t. forall y:t. (((not lt(y, x)) and (is_not_nan(x) and
  is_not_nan(y))) -> le(x, y)))

axiom lt_lt_finite :
  (forall x:t. forall y:t. forall z:t. (lt(x, y) -> (lt(y, z) ->
  tqtisFinite(y))))

axiom positive_to_real :
  (forall x:t [is_positive(x)]. (tqtisFinite(x) -> (is_positive(x) ->
  (0.0 <= tqtreal(x)))))

axiom to_real_positive :
  (forall x:t [is_positive(x)]. (tqtisFinite(x) -> ((0.0 <  tqtreal(x)) ->
  is_positive(x))))

axiom negative_to_real :
  (forall x:t [is_negative(x)]. (tqtisFinite(x) -> (is_negative(x) ->
  (tqtreal(x) <= 0.0))))

axiom to_real_negative :
  (forall x:t [is_negative(x)]. (tqtisFinite(x) -> ((tqtreal(x) <  0.0) ->
  is_negative(x))))

axiom negative_xor_positive :
  (forall x:t. (not (is_positive(x) and is_negative(x))))

axiom negative_or_positive :
  (forall x:t. (is_not_nan(x) -> (is_positive(x) or is_negative(x))))

axiom diff_sign_trans :
  (forall x:t. forall y:t. forall z:t. ((diff_sign(x, y) and diff_sign(y,
  z)) -> same_sign(x, z)))

axiom diff_sign_product :
  (forall x:t. forall y:t. ((tqtisFinite(x) and (tqtisFinite(y) and
  ((tqtreal(x) * tqtreal(y)) <  0.0))) -> diff_sign(x, y)))

axiom same_sign_product :
  (forall x:t. forall y:t. ((tqtisFinite(x) and (tqtisFinite(y) and
  same_sign(x, y))) -> (0.0 <= (tqtreal(x) * tqtreal(y)))))

predicate product_sign(z: t, x: t, y: t) = ((same_sign(x, y) ->
  is_positive(z)) and (diff_sign(x, y) -> is_negative(z)))

predicate overflow_value(m: mode, x: t) = ((((((m = RNE) ->
  is_infinite(x)) and ((m = RNA) -> is_infinite(x))) and ((m = RTP) ->
  ((is_positive(x) -> is_infinite(x)) and ((not is_positive(x)) ->
  (tqtisFinite(x) and (tqtreal(x) = (-0x1.FFFFFEp127))))))) and ((m = RTN) ->
  ((is_positive(x) -> (tqtisFinite(x) and (tqtreal(x) = 0x1.FFFFFEp127))) and
  ((not is_positive(x)) -> is_infinite(x))))) and ((m = RTZ) ->
  ((is_positive(x) -> (tqtisFinite(x) and (tqtreal(x) = 0x1.FFFFFEp127))) and
  ((not is_positive(x)) -> (tqtisFinite(x) and
  (tqtreal(x) = (-0x1.FFFFFEp127)))))))

predicate sign_zero_result(m: mode, x: t) = (is_zero(x) -> ((((((m = RNE) ->
  is_positive(x)) and ((m = RNA) -> is_positive(x))) and ((m = RTP) ->
  is_positive(x))) and ((m = RTN) -> is_negative(x))) and ((m = RTZ) ->
  is_positive(x))))

axiom add_finite :
  (forall m:mode. forall x:t. forall y:t [add(m, x, y)]. (tqtisFinite(x) ->
  (tqtisFinite(y) -> (in_range(round(m, (tqtreal(x) + tqtreal(y)))) ->
  (tqtisFinite(add(m, x, y)) and (tqtreal(add(m, x, y)) = round(m,
  (tqtreal(x) + tqtreal(y)))))))))

axiom add_finite_rev :
  (forall m:mode. forall x:t. forall y:t [add(m, x, y)]. (tqtisFinite(add(m,
  x, y)) -> (tqtisFinite(x) and tqtisFinite(y))))

axiom add_finite_rev_n :
  (forall m:mode. forall x:t. forall y:t [add(m, x, y)]. (to_nearest(m) ->
  (tqtisFinite(add(m, x, y)) -> (in_range(round(m,
  (tqtreal(x) + tqtreal(y)))) and (tqtreal(add(m, x, y)) = round(m,
  (tqtreal(x) + tqtreal(y))))))))

axiom sub_finite :
  (forall m:mode. forall x:t. forall y:t [sub(m, x, y)]. (tqtisFinite(x) ->
  (tqtisFinite(y) -> (in_range(round(m, (tqtreal(x) - tqtreal(y)))) ->
  (tqtisFinite(sub(m, x, y)) and (tqtreal(sub(m, x, y)) = round(m,
  (tqtreal(x) - tqtreal(y)))))))))

axiom sub_finite_rev :
  (forall m:mode. forall x:t. forall y:t [sub(m, x, y)]. (tqtisFinite(sub(m,
  x, y)) -> (tqtisFinite(x) and tqtisFinite(y))))

axiom sub_finite_rev_n :
  (forall m:mode. forall x:t. forall y:t [sub(m, x, y)]. (to_nearest(m) ->
  (tqtisFinite(sub(m, x, y)) -> (in_range(round(m,
  (tqtreal(x) - tqtreal(y)))) and (tqtreal(sub(m, x, y)) = round(m,
  (tqtreal(x) - tqtreal(y))))))))

axiom mul_finite :
  (forall m:mode. forall x:t. forall y:t [mul(m, x, y)]. (tqtisFinite(x) ->
  (tqtisFinite(y) -> (in_range(round(m, (tqtreal(x) * tqtreal(y)))) ->
  (tqtisFinite(mul(m, x, y)) and (tqtreal(mul(m, x, y)) = round(m,
  (tqtreal(x) * tqtreal(y)))))))))

axiom mul_finite_rev :
  (forall m:mode. forall x:t. forall y:t [mul(m, x, y)]. (tqtisFinite(mul(m,
  x, y)) -> (tqtisFinite(x) and tqtisFinite(y))))

axiom mul_finite_rev_n :
  (forall m:mode. forall x:t. forall y:t [mul(m, x, y)]. (to_nearest(m) ->
  (tqtisFinite(mul(m, x, y)) -> (in_range(round(m,
  (tqtreal(x) * tqtreal(y)))) and (tqtreal(mul(m, x, y)) = round(m,
  (tqtreal(x) * tqtreal(y))))))))

axiom div_finite :
  (forall m:mode. forall x:t. forall y:t [div(m, x, y)]. (tqtisFinite(x) ->
  (tqtisFinite(y) -> ((not is_zero(y)) -> (in_range(round(m,
  (tqtreal(x) / tqtreal(y)))) -> (tqtisFinite(div(m, x, y)) and
  (tqtreal(div(m, x, y)) = round(m, (tqtreal(x) / tqtreal(y))))))))))

axiom div_finite_rev :
  (forall m:mode. forall x:t. forall y:t [div(m, x, y)]. (tqtisFinite(div(m,
  x, y)) -> ((tqtisFinite(x) and (tqtisFinite(y) and (not is_zero(y)))) or
  (tqtisFinite(x) and (is_infinite(y) and (tqtreal(div(m, x, y)) = 0.0))))))

axiom div_finite_rev_n :
  (forall m:mode. forall x:t. forall y:t [div(m, x, y)]. (to_nearest(m) ->
  (tqtisFinite(div(m, x, y)) -> (tqtisFinite(y) -> (in_range(round(m,
  (tqtreal(x) / tqtreal(y)))) and (tqtreal(div(m, x, y)) = round(m,
  (tqtreal(x) / tqtreal(y)))))))))

axiom neg_finite :
  (forall x:t [neg(x)]. (tqtisFinite(x) -> (tqtisFinite(neg(x)) and
  (tqtreal(neg(x)) = (-tqtreal(x))))))

axiom neg_finite_rev :
  (forall x:t [neg(x)]. (tqtisFinite(neg(x)) -> (tqtisFinite(x) and
  (tqtreal(neg(x)) = (-tqtreal(x))))))

axiom abs_finite :
  (forall x:t [abs1(x)]. (tqtisFinite(x) -> (tqtisFinite(abs1(x)) and
  ((tqtreal(abs1(x)) = abs(tqtreal(x))) and is_positive(abs1(x))))))

axiom abs_finite_rev :
  (forall x:t [abs1(x)]. (tqtisFinite(abs1(x)) -> (tqtisFinite(x) and
  (tqtreal(abs1(x)) = abs(tqtreal(x))))))

axiom abs_universal : (forall x:t [abs1(x)]. (not is_negative(abs1(x))))

axiom fma_finite_rev :
  (forall m:mode. forall x:t. forall y:t. forall z:t [fma(m, x, y, z)].
  (tqtisFinite(fma(m, x, y, z)) -> (tqtisFinite(x) and (tqtisFinite(y) and
  tqtisFinite(z)))))

axiom fma_finite_rev_n :
  (forall m:mode. forall x:t. forall y:t. forall z:t [fma(m, x, y, z)].
  (to_nearest(m) -> (tqtisFinite(fma(m, x, y, z)) -> (in_range(round(m,
  ((tqtreal(x) * tqtreal(y)) + tqtreal(z)))) and (tqtreal(fma(m, x, y,
  z)) = round(m, ((tqtreal(x) * tqtreal(y)) + tqtreal(z))))))))

function sqr(x: real) : real = (x * x)

logic sqrt1 : real -> real

axiom sqrt_finite_rev :
  (forall m:mode. forall x:t [sqrt(m, x)]. (tqtisFinite(sqrt(m, x)) ->
  (tqtisFinite(x) and ((0.0 <= tqtreal(x)) and (tqtreal(sqrt(m,
  x)) = round(m, sqrt1(tqtreal(x))))))))

predicate same_sign_real(x: t, r: real) = ((is_positive(x) and (0.0 <  r)) or
  (is_negative(x) and (r <  0.0)))

axiom of_int_add_exact :
  (forall m:mode. forall n:mode. forall i:int. forall j:int.
  (in_safe_int_range(i) -> (in_safe_int_range(j) ->
  (in_safe_int_range((i + j)) -> eq(of_int(m, (i + j)), add(n, of_int(m, i),
  of_int(m, j)))))))

axiom of_int_sub_exact :
  (forall m:mode. forall n:mode. forall i:int. forall j:int.
  (in_safe_int_range(i) -> (in_safe_int_range(j) ->
  (in_safe_int_range((i - j)) -> eq(of_int(m, (i - j)), sub(n, of_int(m, i),
  of_int(m, j)))))))

axiom of_int_mul_exact :
  (forall m:mode. forall n:mode. forall i:int. forall j:int.
  (in_safe_int_range(i) -> (in_safe_int_range(j) ->
  (in_safe_int_range((i * j)) -> eq(of_int(m, (i * j)), mul(n, of_int(m, i),
  of_int(m, j)))))))

axiom Min_r : (forall x:t. forall y:t. (le(y, x) -> eq(min(x, y), y)))

axiom Min_l : (forall x:t. forall y:t. (le(x, y) -> eq(min(x, y), x)))

axiom Max_r : (forall x:t. forall y:t. (le(y, x) -> eq(max(x, y), x)))

axiom Max_l : (forall x:t. forall y:t. (le(x, y) -> eq(max(x, y), y)))

logic is_int : t -> prop

axiom zeroF_is_int : is_int(zeroF)

axiom of_int_is_int :
  (forall m:mode. forall x:int. (in_int_range(x) -> is_int(of_int(m, x))))

axiom big_float_is_int :
  (forall m:mode. forall i:t. (tqtisFinite(i) -> ((le(i, neg(of_int(m,
  16777216))) or le(of_int(m, 16777216), i)) -> is_int(i))))

axiom roundToIntegral_is_int :
  (forall m:mode. forall x:t. (tqtisFinite(x) -> is_int(roundToIntegral(m,
  x))))

axiom eq_is_int :
  (forall x:t. forall y:t. (eq(x, y) -> (is_int(x) -> is_int(y))))

axiom add_int :
  (forall x:t. forall y:t. forall m:mode. (is_int(x) -> (is_int(y) ->
  (tqtisFinite(add(m, x, y)) -> is_int(add(m, x, y))))))

axiom sub_int :
  (forall x:t. forall y:t. forall m:mode. (is_int(x) -> (is_int(y) ->
  (tqtisFinite(sub(m, x, y)) -> is_int(sub(m, x, y))))))

axiom mul_int :
  (forall x:t. forall y:t. forall m:mode. (is_int(x) -> (is_int(y) ->
  (tqtisFinite(mul(m, x, y)) -> is_int(mul(m, x, y))))))

axiom fma_int :
  (forall x:t. forall y:t. forall z:t. forall m:mode. (is_int(x) ->
  (is_int(y) -> (is_int(z) -> (tqtisFinite(fma(m, x, y, z)) -> is_int(fma(m,
  x, y, z)))))))

axiom neg_int : (forall x:t. (is_int(x) -> is_int(neg(x))))

axiom abs_int1 : (forall x:t. (is_int(x) -> is_int(abs1(x))))

axiom is_int_of_int :
  (forall x:t. forall m:mode. forall mqt:mode. (is_int(x) -> eq(x,
  of_int(mqt, to_int(m, x)))))

axiom is_int_to_int :
  (forall m:mode. forall x:t. (is_int(x) -> in_int_range(to_int(m, x))))

axiom is_int_is_finite : (forall x:t. (is_int(x) -> tqtisFinite(x)))

axiom int_to_real :
  (forall m:mode. forall x:t. (is_int(x) -> (tqtreal(x) = from_int(to_int(m,
  x)))))

axiom truncate_int :
  (forall m:mode. forall i:t. (is_int(i) -> eq(roundToIntegral(m, i), i)))

axiom truncate_neg :
  (forall x:t. (tqtisFinite(x) -> (is_negative(x) -> (roundToIntegral(RTZ,
  x) = roundToIntegral(RTP, x)))))

axiom truncate_pos :
  (forall x:t. (tqtisFinite(x) -> (is_positive(x) -> (roundToIntegral(RTZ,
  x) = roundToIntegral(RTN, x)))))

axiom ceil_le :
  (forall x:t. (tqtisFinite(x) -> le(x, roundToIntegral(RTP, x))))

axiom ceil_lest :
  (forall x:t. forall y:t. ((le(x, y) and is_int(y)) ->
  le(roundToIntegral(RTP, x), y)))

axiom ceil_to_real :
  (forall x:t. (tqtisFinite(x) -> (tqtreal(roundToIntegral(RTP,
  x)) = from_int(ceil(tqtreal(x))))))

axiom ceil_to_int :
  (forall m:mode. forall x:t. (tqtisFinite(x) -> (to_int(m,
  roundToIntegral(RTP, x)) = ceil(tqtreal(x)))))

axiom floor_le :
  (forall x:t. (tqtisFinite(x) -> le(roundToIntegral(RTN, x), x)))

axiom floor_lest :
  (forall x:t. forall y:t. ((le(y, x) and is_int(y)) -> le(y,
  roundToIntegral(RTN, x))))

axiom floor_to_real :
  (forall x:t. (tqtisFinite(x) -> (tqtreal(roundToIntegral(RTN,
  x)) = from_int(floor(tqtreal(x))))))

axiom floor_to_int :
  (forall m:mode. forall x:t. (tqtisFinite(x) -> (to_int(m,
  roundToIntegral(RTN, x)) = floor(tqtreal(x)))))

axiom RNA_down :
  (forall x:t. (lt(sub(RNE, x, roundToIntegral(RTN, x)), sub(RNE,
  roundToIntegral(RTP, x), x)) -> (roundToIntegral(RNA,
  x) = roundToIntegral(RTN, x))))

axiom RNA_up :
  (forall x:t. (lt(sub(RNE, roundToIntegral(RTP, x), x), sub(RNE, x,
  roundToIntegral(RTN, x))) -> (roundToIntegral(RNA,
  x) = roundToIntegral(RTP, x))))

axiom RNA_down_tie :
  (forall x:t. (eq(sub(RNE, x, roundToIntegral(RTN, x)), sub(RNE,
  roundToIntegral(RTP, x), x)) -> (is_negative(x) -> (roundToIntegral(RNA,
  x) = roundToIntegral(RTN, x)))))

axiom RNA_up_tie :
  (forall x:t. (eq(sub(RNE, roundToIntegral(RTP, x), x), sub(RNE, x,
  roundToIntegral(RTN, x))) -> (is_positive(x) -> (roundToIntegral(RNA,
  x) = roundToIntegral(RTP, x)))))

axiom to_int_roundToIntegral :
  (forall m:mode. forall x:t. (to_int(m, x) = to_int(m, roundToIntegral(m,
  x))))

axiom to_int_monotonic :
  (forall m:mode. forall x:t. forall y:t. (tqtisFinite(x) ->
  (tqtisFinite(y) -> (le(x, y) -> (to_int(m, x) <= to_int(m, y))))))

axiom to_int_of_int :
  (forall m:mode. forall i:int. (in_safe_int_range(i) -> (to_int(m, of_int(m,
  i)) = i)))

axiom eq_to_int :
  (forall m:mode. forall x:t. forall y:t. (tqtisFinite(x) -> (eq(x, y) ->
  (to_int(m, x) = to_int(m, y)))))

axiom neg_to_int :
  (forall m:mode. forall x:t. (is_int(x) -> (to_int(m, neg(x)) = (-to_int(m,
  x)))))

axiom roundToIntegral_is_finite :
  (forall m:mode. forall x:t. (tqtisFinite(x) ->
  tqtisFinite(roundToIntegral(m, x))))

axiom round_bound_ne :
  (forall x:real [round(RNE, x)]. (in_range(round(RNE, x)) ->
  ((((x - (0x1.0p-24 * abs(x))) - 0x1.0p-150) <= round(RNE, x)) and
  (round(RNE, x) <= ((x + (0x1.0p-24 * abs(x))) + 0x1.0p-150)))))

predicate neq(x: t, y: t) = (not eq(x, y))

logic bool_lt : t, t -> bool

axiom bool_lt_def :
  (forall x:t. forall y:t [bool_lt(x, y)]. ((lt(x, y) -> (bool_lt(x,
  y) = true)) and ((not lt(x, y)) -> (bool_lt(x, y) = false))))

logic bool_le : t, t -> bool

axiom bool_le_def :
  (forall x:t. forall y:t [bool_le(x, y)]. ((le(x, y) -> (bool_le(x,
  y) = true)) and ((not le(x, y)) -> (bool_le(x, y) = false))))

logic bool_gt : t, t -> bool

axiom bool_gt_def :
  (forall x:t. forall y:t [bool_gt(x, y)]. ((lt(y, x) -> (bool_gt(x,
  y) = true)) and ((not lt(y, x)) -> (bool_gt(x, y) = false))))

logic bool_ge : t, t -> bool

axiom bool_ge_def :
  (forall x:t. forall y:t [bool_ge(x, y)]. ((le(y, x) -> (bool_ge(x,
  y) = true)) and ((not le(y, x)) -> (bool_ge(x, y) = false))))

logic bool_eq : t, t -> bool

axiom bool_eq_def :
  (forall x:t. forall y:t [bool_eq(x, y)]. ((eq(x, y) -> (bool_eq(x,
  y) = true)) and ((not eq(x, y)) -> (bool_eq(x, y) = false))))

logic bool_neq : t, t -> bool

axiom bool_neq_def :
  (forall x:t. forall y:t [bool_neq(x, y)]. (((not eq(x, y)) -> (bool_neq(x,
  y) = true)) and (eq(x, y) -> (bool_neq(x, y) = false))))

logic rem : t, t -> t

logic fliteral : t

axiom fliteral_axiom : (tqtisFinite(fliteral) and (tqtreal(fliteral) = 1.0))

axiom one_is_int : is_int(fliteral)

axiom one_of_int : (fliteral = of_int(RNA, 1))

type t__ref = { t__content : t
}

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq1 : bool, bool -> bool

axiom bool_eq_def1 :
  (forall x:bool. forall y:bool [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic to_int1 : bool -> int

axiom to_int_def :
  (forall b:bool [to_int1(b)]. (((b = true) -> (to_int1(b) = 1)) and
  ((not (b = true)) -> (to_int1(b) = 0))))

logic of_int1 : int -> bool

axiom of_int_def :
  (forall i:int [of_int1(i)]. (((i = 0) -> (of_int1(i) = false)) and
  ((not (i = 0)) -> (of_int1(i) = true))))

predicate in_range1(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type float1

logic bool_eq2 : t, t -> bool

axiom bool_eq_def2 :
  (forall x:t. forall y:t [bool_eq2(x, y)]. ((eq(x, y) -> (bool_eq2(x,
  y) = true)) and ((not eq(x, y)) -> (bool_eq2(x, y) = false))))

logic user_eq : float1, float1 -> bool

logic attr__ATTRIBUTE_IMAGE1 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> t

logic dummy : float1

type float__ref = { float__content : float1
}

function float__ref___projection(a: float__ref) : float1 = (a).float__content

type positive_float

logic fliteral1 : t

axiom fliteral_axiom1 : (tqtisFinite(fliteral1) and
  (tqtreal(fliteral1) = 0.0e-1))

logic fliteral2 : t

axiom fliteral_axiom2 : (tqtisFinite(fliteral2) and
  (tqtreal(fliteral2) = 340282346638528859811704183484516925440.0))

predicate in_range2(x: t) = (tqtisFinite(x) and (le(fliteral1, x) and le(x,
  fliteral2)))

logic bool_eq3 : t, t -> bool

axiom bool_eq_def3 :
  (forall x:t. forall y:t [bool_eq3(x, y)]. ((eq(x, y) -> (bool_eq3(x,
  y) = true)) and ((not eq(x, y)) -> (bool_eq3(x, y) = false))))

logic user_eq1 : positive_float, positive_float -> bool

logic attr__ATTRIBUTE_IMAGE2 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> t

logic dummy1 : positive_float

type positive_float__ref = { positive_float__content : positive_float
}

function positive_float__ref___projection(a: positive_float__ref) : positive_float =
  (a).positive_float__content

type nonnegative_float

predicate in_range3(x: t) = (tqtisFinite(x) and (le(fliteral1, x) and le(x,
  fliteral2)))

logic bool_eq4 : t, t -> bool

axiom bool_eq_def4 :
  (forall x:t. forall y:t [bool_eq4(x, y)]. ((eq(x, y) -> (bool_eq4(x,
  y) = true)) and ((not eq(x, y)) -> (bool_eq4(x, y) = false))))

logic user_eq2 : nonnegative_float, nonnegative_float -> bool

logic attr__ATTRIBUTE_IMAGE3 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> t

logic dummy2 : nonnegative_float

type nonnegative_float__ref = { nonnegative_float__content :
nonnegative_float
}

function nonnegative_float__ref___projection(a: nonnegative_float__ref) : nonnegative_float =
  (a).nonnegative_float__content

logic to_rep : nonnegative_float -> t

logic of_rep : t -> nonnegative_float

axiom inversion_axiom :
  (forall x:nonnegative_float [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom :
  (forall x:nonnegative_float [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:t [to_rep(of_rep(x))]. (in_range3(x) -> (to_rep(of_rep(x)) = x)))

logic cos : t -> t

logic cos__function_guard : t, t -> prop

axiom cos__post_axiom :
  (forall x:t [cos(x)]. (tqtisFinite(x) -> (((le(neg(fliteral), cos(x)) and
  le(cos(x), fliteral)) and (eq(x, fliteral1) -> eq(cos(x), fliteral))) and
  tqtisFinite(cos(x)))))

type normalized2pi

logic fliteral3 : t

axiom fliteral_axiom3 : (tqtisFinite(fliteral3) and
  (tqtreal(fliteral3) = 6.283185482025146484375))

predicate in_range4(x: t) = (tqtisFinite(x) and (le(fliteral1, x) and le(x,
  fliteral3)))

logic bool_eq5 : t, t -> bool

axiom bool_eq_def5 :
  (forall x:t. forall y:t [bool_eq5(x, y)]. ((eq(x, y) -> (bool_eq5(x,
  y) = true)) and ((not eq(x, y)) -> (bool_eq5(x, y) = false))))

logic user_eq3 : normalized2pi, normalized2pi -> bool

logic attr__ATTRIBUTE_IMAGE4 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> t

logic dummy3 : normalized2pi

type normalized2pi__ref = { normalized2pi__content : normalized2pi
}

function normalized2pi__ref___projection(a: normalized2pi__ref) : normalized2pi =
  (a).normalized2pi__content

logic to_rep1 : normalized2pi -> t

logic of_rep1 : t -> normalized2pi

axiom inversion_axiom1 :
  (forall x:normalized2pi [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:normalized2pi [to_rep1(x)]. in_range4(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:t [to_rep1(of_rep1(x))]. (in_range4(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_fields = { rec__spaces__angles__angle__theta : normalized2pi
}

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq6 : us_rep, us_rep -> bool

axiom bool_eq_def6 :
  (forall a:us_rep. forall b:us_rep [bool_eq6(a, b)].
  (((to_rep1(((a).us_split_fields1).rec__spaces__angles__angle__theta) = to_rep1(((b).us_split_fields1).rec__spaces__angles__angle__theta)) ->
  (bool_eq6(a, b) = true)) and
  ((not (to_rep1(((a).us_split_fields1).rec__spaces__angles__angle__theta) = to_rep1(((b).us_split_fields1).rec__spaces__angles__angle__theta))) ->
  (bool_eq6(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:normalized2pi. (0 <= object__size({ us_split_fields1 = {
  rec__spaces__angles__angle__theta = a } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:normalized2pi. (0 <= object__alignment({ us_split_fields1 = {
  rec__spaces__angles__angle__theta = a } })))

logic spaces__angles__angle__theta__first__bit : int

logic spaces__angles__angle__theta__last__bit : int

logic spaces__angles__angle__theta__position : int

axiom spaces__angles__angle__theta__first__bit_axiom :
  (0 <= spaces__angles__angle__theta__first__bit)

axiom spaces__angles__angle__theta__last__bit_axiom :
  (spaces__angles__angle__theta__first__bit <  spaces__angles__angle__theta__last__bit)

axiom spaces__angles__angle__theta__position_axiom :
  (0 <= spaces__angles__angle__theta__position)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy4 : normalized2pi

type angle__ref = { angle__content : us_rep
}

function angle__ref___projection(a: angle__ref) : us_rep = (a).angle__content

logic ccwdiff : us_rep, us_rep -> t

logic ccwdiff__function_guard : t, us_rep, us_rep -> prop

logic to_rep2 : float1 -> t

logic of_rep2 : t -> float1

axiom inversion_axiom2 :
  (forall x:float1 [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:float1 [to_rep2(x)]. tqtisFinite(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:t [to_rep2(of_rep2(x))]. (tqtisFinite(x) ->
  (to_rep2(of_rep2(x)) = x)))

type idir_t

predicate in_range5(x: int) = (((-1) <= x) and (x <= 1))

logic bool_eq7 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt1 : int, int -> bool

logic bool_le1 : int, int -> bool

logic bool_gt1 : int, int -> bool

logic bool_ge1 : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq7(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt1(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le1(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt1(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge1(x, y) = true) <-> (y <= x))))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : idir_t, idir_t -> bool

logic dummy5 : idir_t

type idir_t__ref = { idir_t__content : idir_t
}

function idir_t__ref___projection(a: idir_t__ref) : idir_t =
  (a).idir_t__content

logic to_rep3 : idir_t -> int

logic of_rep3 : int -> idir_t

axiom inversion_axiom3 :
  (forall x:idir_t [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 : (forall x:idir_t [to_rep3(x)]. in_range5(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range5(x) ->
  (to_rep3(of_rep3(x)) = x)))

type us_split_fields2 = { rec__gaps__gap__bearing : us_rep;
rec__gaps__gap__distance : float1; rec__gaps__gap__idir : idir_t
}

function us_split_fields_bearing__projection(a: us_split_fields2) : us_rep =
  (a).rec__gaps__gap__bearing

function us_split_fields_iDir__projection(a: us_split_fields2) : idir_t =
  (a).rec__gaps__gap__idir

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref_6__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep_8__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq9 : us_rep1, us_rep1 -> bool

axiom bool_eq_def8 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq9(a, b)].
  (((((bool_eq6(((a).us_split_fields3).rec__gaps__gap__bearing,
  ((b).us_split_fields3).rec__gaps__gap__bearing) = true) and
  (to_rep2(((a).us_split_fields3).rec__gaps__gap__distance) = to_rep2(((b).us_split_fields3).rec__gaps__gap__distance))) and
  (to_rep3(((a).us_split_fields3).rec__gaps__gap__idir) = to_rep3(((b).us_split_fields3).rec__gaps__gap__idir))) ->
  (bool_eq9(a, b) = true)) and
  ((not (((bool_eq6(((a).us_split_fields3).rec__gaps__gap__bearing,
  ((b).us_split_fields3).rec__gaps__gap__bearing) = true) and
  (to_rep2(((a).us_split_fields3).rec__gaps__gap__distance) = to_rep2(((b).us_split_fields3).rec__gaps__gap__distance))) and
  (to_rep3(((a).us_split_fields3).rec__gaps__gap__idir) = to_rep3(((b).us_split_fields3).rec__gaps__gap__idir)))) ->
  (bool_eq9(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:normalized2pi. forall a1:float1. forall a2:idir_t.
  (0 <= object__size1({ us_split_fields3 = { rec__gaps__gap__bearing = {
  us_split_fields1 = { rec__spaces__angles__angle__theta = a } };
  rec__gaps__gap__distance = a1; rec__gaps__gap__idir = a2 } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:normalized2pi. forall a1:float1. forall a2:idir_t.
  (0 <= object__alignment1({ us_split_fields3 = { rec__gaps__gap__bearing = {
  us_split_fields1 = { rec__spaces__angles__angle__theta = a } };
  rec__gaps__gap__distance = a1; rec__gaps__gap__idir = a2 } })))

logic gaps__gap__bearing__first__bit : int

logic gaps__gap__bearing__last__bit : int

logic gaps__gap__bearing__position : int

axiom gaps__gap__bearing__first__bit_axiom :
  (0 <= gaps__gap__bearing__first__bit)

axiom gaps__gap__bearing__last__bit_axiom :
  (gaps__gap__bearing__first__bit <  gaps__gap__bearing__last__bit)

axiom gaps__gap__bearing__position_axiom :
  (0 <= gaps__gap__bearing__position)

logic gaps__gap__distance__first__bit : int

logic gaps__gap__distance__last__bit : int

logic gaps__gap__distance__position : int

axiom gaps__gap__distance__first__bit_axiom :
  (0 <= gaps__gap__distance__first__bit)

axiom gaps__gap__distance__last__bit_axiom :
  (gaps__gap__distance__first__bit <  gaps__gap__distance__last__bit)

axiom gaps__gap__distance__position_axiom :
  (0 <= gaps__gap__distance__position)

logic gaps__gap__idir__first__bit : int

logic gaps__gap__idir__last__bit : int

logic gaps__gap__idir__position : int

axiom gaps__gap__idir__first__bit_axiom : (0 <= gaps__gap__idir__first__bit)

axiom gaps__gap__idir__last__bit_axiom :
  (gaps__gap__idir__first__bit <  gaps__gap__idir__last__bit)

axiom gaps__gap__idir__position_axiom : (0 <= gaps__gap__idir__position)

logic user_eq6 : us_rep1, us_rep1 -> bool

logic dummy6 : normalized2pi

logic dummy7 : float1

logic dummy8 : idir_t

type gap__ref = { gap__content : us_rep1
}

function gap__ref___projection(a: gap__ref) : us_rep1 = (a).gap__content

logic create__2 : us_rep, t, int -> us_rep1

logic create__2__function_guard : us_rep1, us_rep, t, int -> prop

type count_type

predicate in_range6(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq7 : count_type, count_type -> bool

logic dummy9 : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref___projection(a: count_type__ref) : count_type =
  (a).count_type__content

logic to_rep4 : count_type -> int

logic of_rep4 : int -> count_type

axiom inversion_axiom4 :
  (forall x:count_type [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 :
  (forall x:count_type [to_rep4(x)]. in_range6(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range6(x) ->
  (to_rep4(of_rep4(x)) = x)))

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_discrs = { rec__algorithm__gap_vectors__list__capacity :
count_type
}

function us_split_discrs_3__projection(a: us_split_discrs) : count_type =
  (a).rec__algorithm__gap_vectors__list__capacity

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref_3__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields4 = { rec__algorithm__gap_vectors__list : us_main_type
}

function us_split_fields_List__projection(a: us_split_fields4) : us_main_type =
  (a).rec__algorithm__gap_vectors__list

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref_9__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_discrs1 : us_split_discrs; us_split_fields5 :
us_split_fields4
}

function us_rep_13__projection(a: us_rep2) : us_split_discrs =
  (a).us_split_discrs1

function us_rep_14__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

logic bool_eq11 : us_rep2, us_rep2 -> bool

axiom bool_eq_def10 :
  (forall a:us_rep2. forall b:us_rep2 [bool_eq11(a, b)].
  ((((to_rep4(((a).us_split_discrs1).rec__algorithm__gap_vectors__list__capacity) = to_rep4(((b).us_split_discrs1).rec__algorithm__gap_vectors__list__capacity)) and
  (us_main_eq(((a).us_split_fields5).rec__algorithm__gap_vectors__list,
  ((b).us_split_fields5).rec__algorithm__gap_vectors__list) = true)) ->
  (bool_eq11(a, b) = true)) and
  ((not ((to_rep4(((a).us_split_discrs1).rec__algorithm__gap_vectors__list__capacity) = to_rep4(((b).us_split_discrs1).rec__algorithm__gap_vectors__list__capacity)) and
  (us_main_eq(((a).us_split_fields5).rec__algorithm__gap_vectors__list,
  ((b).us_split_fields5).rec__algorithm__gap_vectors__list) = true))) ->
  (bool_eq11(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep2 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep2 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:count_type. forall a1:us_main_type. (0 <= object__size2({
  us_split_discrs1 = { rec__algorithm__gap_vectors__list__capacity = a };
  us_split_fields5 = { rec__algorithm__gap_vectors__list = a1 } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:count_type. forall a1:us_main_type. (0 <= object__alignment2({
  us_split_discrs1 = { rec__algorithm__gap_vectors__list__capacity = a };
  us_split_fields5 = { rec__algorithm__gap_vectors__list = a1 } })))

logic algorithm__gap_vectors__list__capacity__first__bit : int

logic algorithm__gap_vectors__list__capacity__last__bit : int

logic algorithm__gap_vectors__list__capacity__position : int

axiom algorithm__gap_vectors__list__capacity__first__bit_axiom :
  (0 <= algorithm__gap_vectors__list__capacity__first__bit)

axiom algorithm__gap_vectors__list__capacity__last__bit_axiom :
  (algorithm__gap_vectors__list__capacity__first__bit <  algorithm__gap_vectors__list__capacity__last__bit)

axiom algorithm__gap_vectors__list__capacity__position_axiom :
  (0 <= algorithm__gap_vectors__list__capacity__position)

logic user_eq8 : us_rep2, us_rep2 -> bool

logic dummy10 : count_type

logic dummy11 : us_main_type

type list__ref = { list__content : us_rep2
}

function list__ref___projection(a: list__ref) : us_rep2 = (a).list__content

logic length : us_rep2 -> int

logic length__function_guard : int, us_rep2 -> prop

axiom length__post_axiom :
  (forall container:count_type. forall container1:us_main_type [length({
  us_split_discrs1 = { rec__algorithm__gap_vectors__list__capacity =
  container }; us_split_fields5 = { rec__algorithm__gap_vectors__list =
  container1 } })]. ((length({ us_split_discrs1 = {
  rec__algorithm__gap_vectors__list__capacity = container };
  us_split_fields5 = { rec__algorithm__gap_vectors__list = container1 }
  }) <= to_rep4(container)) and in_range6(length({ us_split_discrs1 = {
  rec__algorithm__gap_vectors__list__capacity = container };
  us_split_fields5 = { rec__algorithm__gap_vectors__list = container1 } }))))

type element_type__ref = { element_type__content : us_rep1
}

function element_type__ref___projection(a: element_type__ref) : us_rep1 =
  (a).element_type__content

type us_split_fields6 = { rec__algorithm__gap_vectors__cursor__node :
count_type
}

function us_split_fields_Node__projection(a: us_split_fields6) : count_type =
  (a).rec__algorithm__gap_vectors__cursor__node

type us_split_fields__ref3 = { us_split_fields__content3 : us_split_fields6
}

function us_split_fields__ref_10__projection(a: us_split_fields__ref3) : us_split_fields6 =
  (a).us_split_fields__content3

type us_rep3 = { us_split_fields7 : us_split_fields6
}

function us_rep_15__projection(a: us_rep3) : us_split_fields6 =
  (a).us_split_fields7

logic bool_eq12 : us_rep3, us_rep3 -> bool

axiom bool_eq_def11 :
  (forall a:us_rep3. forall b:us_rep3 [bool_eq12(a, b)].
  (((to_rep4(((a).us_split_fields7).rec__algorithm__gap_vectors__cursor__node) = to_rep4(((b).us_split_fields7).rec__algorithm__gap_vectors__cursor__node)) ->
  (bool_eq12(a, b) = true)) and
  ((not (to_rep4(((a).us_split_fields7).rec__algorithm__gap_vectors__cursor__node) = to_rep4(((b).us_split_fields7).rec__algorithm__gap_vectors__cursor__node))) ->
  (bool_eq12(a, b) = false))))

logic value__size3 : int

logic object__size3 : us_rep3 -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep3 -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:count_type. (0 <= object__size3({ us_split_fields7 = {
  rec__algorithm__gap_vectors__cursor__node = a } })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:count_type. (0 <= object__alignment3({ us_split_fields7 = {
  rec__algorithm__gap_vectors__cursor__node = a } })))

logic algorithm__gap_vectors__cursor__node__first__bit : int

logic algorithm__gap_vectors__cursor__node__last__bit : int

logic algorithm__gap_vectors__cursor__node__position : int

axiom algorithm__gap_vectors__cursor__node__first__bit_axiom :
  (0 <= algorithm__gap_vectors__cursor__node__first__bit)

axiom algorithm__gap_vectors__cursor__node__last__bit_axiom :
  (algorithm__gap_vectors__cursor__node__first__bit <  algorithm__gap_vectors__cursor__node__last__bit)

axiom algorithm__gap_vectors__cursor__node__position_axiom :
  (0 <= algorithm__gap_vectors__cursor__node__position)

logic user_eq9 : us_rep3, us_rep3 -> bool

logic dummy12 : count_type

type cursor__ref = { cursor__content : us_rep3
}

function cursor__ref___projection(a: cursor__ref) : us_rep3 =
  (a).cursor__content

type element_type__ref1 = { element_type__content1 : us_rep1
}

function element_type__ref_2__projection(a: element_type__ref1) : us_rep1 =
  (a).element_type__content1

type us_main_type1

logic us_main_eq1 : us_main_type1, us_main_type1 -> bool

type us_rep4

logic bool_eq13 : us_rep4, us_rep4 -> bool

logic value__size4 : int

logic object__size4 : us_rep4 -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep4 -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 : (forall a:us_rep4. (0 <= object__size4(a)))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:us_rep4. (0 <= object__alignment4(a)))

logic user_eq10 : us_rep4, us_rep4 -> bool

logic dummy13 : us_rep4

type sequence__ref = { sequence__content : us_rep4
}

function sequence__ref___projection(a: sequence__ref) : us_rep4 =
  (a).sequence__content

logic get : us_rep4, int -> us_rep1

logic get__function_guard : us_rep1, us_rep4, int -> prop

logic length1 : us_rep4 -> int

logic length__function_guard1 : int, us_rep4 -> prop

logic last__function_guard : int, us_rep4 -> prop

logic ole__function_guard : bool, us_rep4, us_rep4 -> prop

type us_main_type2

logic us_main_eq2 : us_main_type2, us_main_type2 -> bool

type us_rep5

logic bool_eq14 : us_rep5, us_rep5 -> bool

logic value__size5 : int

logic object__size5 : us_rep5 -> int

logic value__alignment5 : int

logic object__alignment5 : us_rep5 -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 : (forall a:us_rep5. (0 <= object__size5(a)))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:us_rep5. (0 <= object__alignment5(a)))

logic user_eq11 : us_rep5, us_rep5 -> bool

logic dummy14 : us_rep5

type map__ref = { map__content : us_rep5
}

function map__ref___projection(a: map__ref) : us_rep5 = (a).map__content

type key_type__ref = { key_type__content : us_rep3
}

function key_type__ref___projection(a: key_type__ref) : us_rep3 =
  (a).key_type__content

logic get1 : us_rep5, us_rep3 -> int

logic get__function_guard1 : int, us_rep5, us_rep3 -> prop

logic ole : us_rep5, us_rep5 -> bool

logic ole__function_guard1 : bool, us_rep5, us_rep5 -> prop

logic keys_included_except : us_rep5, us_rep5, us_rep3 -> bool

logic keys_included_except__function_guard : bool, us_rep5, us_rep5,
  us_rep3 -> prop

logic model__ : us_rep2 -> us_rep4

logic model____function_guard : us_rep4, us_rep2 -> prop

logic positions : us_rep2 -> us_rep5

logic positions__function_guard : us_rep5, us_rep2 -> prop

logic last : us_rep2 -> us_rep3

logic last__function_guard1 : us_rep3, us_rep2 -> prop

predicate in_range7(rec__algorithm__gap_vectors__list__capacity1: int,
  a: us_rep2) =
  (rec__algorithm__gap_vectors__list__capacity1 = to_rep4(((a).us_split_discrs1).rec__algorithm__gap_vectors__list__capacity))

logic value__size6 : int

logic object__size6 : us_rep2 -> int

logic value__alignment6 : int

logic object__alignment6 : us_rep2 -> int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 :
  (forall a:count_type. forall a1:us_main_type. (0 <= object__size6({
  us_split_discrs1 = { rec__algorithm__gap_vectors__list__capacity = a };
  us_split_fields5 = { rec__algorithm__gap_vectors__list = a1 } })))

axiom value__alignment_axiom6 : (0 <= value__alignment6)

axiom object__alignment_axiom6 :
  (forall a:count_type. forall a1:us_main_type. (0 <= object__alignment6({
  us_split_discrs1 = { rec__algorithm__gap_vectors__list__capacity = a };
  us_split_fields5 = { rec__algorithm__gap_vectors__list = a1 } })))

logic algorithm__gap_vectors__list__capacity__first__bit1 : int

logic algorithm__gap_vectors__list__capacity__last__bit1 : int

logic algorithm__gap_vectors__list__capacity__position1 : int

axiom algorithm__gap_vectors__list__capacity__first__bit_axiom1 :
  (0 <= algorithm__gap_vectors__list__capacity__first__bit1)

axiom algorithm__gap_vectors__list__capacity__last__bit_axiom1 :
  (algorithm__gap_vectors__list__capacity__first__bit1 <  algorithm__gap_vectors__list__capacity__last__bit1)

axiom algorithm__gap_vectors__list__capacity__position_axiom1 :
  (0 <= algorithm__gap_vectors__list__capacity__position1)

logic user_eq12 : us_rep2, us_rep2 -> bool

logic dummy15 : count_type

logic dummy16 : us_main_type

type list__ref1 = { list__content1 : us_rep2
}

function list__ref_2__projection(a: list__ref1) : us_rep2 =
  (a).list__content1

logic is_empty : us_rep2 -> bool

logic is_empty__function_guard : bool, us_rep2 -> prop

type us_split_fields8 = { rec__algorithm__laser_scan_data__first :
nonnegative_float; rec__algorithm__laser_scan_data__second : us_rep
}

function us_split_fields_second__projection(a: us_split_fields8) : us_rep =
  (a).rec__algorithm__laser_scan_data__second

type us_split_fields__ref4 = { us_split_fields__content4 : us_split_fields8
}

function us_split_fields__ref_11__projection(a: us_split_fields__ref4) : us_split_fields8 =
  (a).us_split_fields__content4

type us_rep6 = { us_split_fields9 : us_split_fields8
}

function us_rep_16__projection(a: us_rep6) : us_split_fields8 =
  (a).us_split_fields9

logic bool_eq15 : us_rep6, us_rep6 -> bool

axiom bool_eq_def12 :
  (forall a:us_rep6. forall b:us_rep6 [bool_eq15(a, b)].
  ((((to_rep(((a).us_split_fields9).rec__algorithm__laser_scan_data__first) = to_rep(((b).us_split_fields9).rec__algorithm__laser_scan_data__first)) and
  (bool_eq6(((a).us_split_fields9).rec__algorithm__laser_scan_data__second,
  ((b).us_split_fields9).rec__algorithm__laser_scan_data__second) = true)) ->
  (bool_eq15(a, b) = true)) and
  ((not ((to_rep(((a).us_split_fields9).rec__algorithm__laser_scan_data__first) = to_rep(((b).us_split_fields9).rec__algorithm__laser_scan_data__first)) and
  (bool_eq6(((a).us_split_fields9).rec__algorithm__laser_scan_data__second,
  ((b).us_split_fields9).rec__algorithm__laser_scan_data__second) = true))) ->
  (bool_eq15(a, b) = false))))

logic value__size7 : int

logic object__size7 : us_rep6 -> int

logic value__alignment7 : int

logic object__alignment7 : us_rep6 -> int

axiom value__size_axiom7 : (0 <= value__size7)

axiom object__size_axiom7 :
  (forall a:nonnegative_float. forall a1:normalized2pi. (0 <= object__size7({
  us_split_fields9 = { rec__algorithm__laser_scan_data__first = a;
  rec__algorithm__laser_scan_data__second = { us_split_fields1 = {
  rec__spaces__angles__angle__theta = a1 } } } })))

axiom value__alignment_axiom7 : (0 <= value__alignment7)

axiom object__alignment_axiom7 :
  (forall a:nonnegative_float. forall a1:normalized2pi.
  (0 <= object__alignment7({ us_split_fields9 = {
  rec__algorithm__laser_scan_data__first = a;
  rec__algorithm__laser_scan_data__second = { us_split_fields1 = {
  rec__spaces__angles__angle__theta = a1 } } } })))

logic algorithm__laser_scan_data__first__first__bit : int

logic algorithm__laser_scan_data__first__last__bit : int

logic algorithm__laser_scan_data__first__position : int

axiom algorithm__laser_scan_data__first__first__bit_axiom :
  (0 <= algorithm__laser_scan_data__first__first__bit)

axiom algorithm__laser_scan_data__first__last__bit_axiom :
  (algorithm__laser_scan_data__first__first__bit <  algorithm__laser_scan_data__first__last__bit)

axiom algorithm__laser_scan_data__first__position_axiom :
  (0 <= algorithm__laser_scan_data__first__position)

logic algorithm__laser_scan_data__second__first__bit : int

logic algorithm__laser_scan_data__second__last__bit : int

logic algorithm__laser_scan_data__second__position : int

axiom algorithm__laser_scan_data__second__first__bit_axiom :
  (0 <= algorithm__laser_scan_data__second__first__bit)

axiom algorithm__laser_scan_data__second__last__bit_axiom :
  (algorithm__laser_scan_data__second__first__bit <  algorithm__laser_scan_data__second__last__bit)

axiom algorithm__laser_scan_data__second__position_axiom :
  (0 <= algorithm__laser_scan_data__second__position)

logic user_eq13 : us_rep6, us_rep6 -> bool

logic dummy17 : nonnegative_float

logic dummy18 : normalized2pi

type laser_scan_data__ref = { laser_scan_data__content : us_rep6
}

function laser_scan_data__ref___projection(a: laser_scan_data__ref) : us_rep6 =
  (a).laser_scan_data__content

type map__ref1 = { map__content1 : (int,us_rep6) farray
}

logic slide : (int,us_rep6) farray, int, int -> (int,us_rep6) farray

axiom slide_eq :
  (forall a:(int,us_rep6) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep6) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,us_rep6) farray, int, int, (int,us_rep6) farray, int,
  int -> (int,us_rep6) farray

axiom concat_def :
  (forall a:(int,us_rep6) farray. forall b:(int,us_rep6) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : us_rep6, int -> (int,us_rep6) farray

axiom singleton_def :
  (forall v:nonnegative_float. forall v1:normalized2pi.
  (forall i:int [(singleton({ us_split_fields9 = {
  rec__algorithm__laser_scan_data__first = v;
  rec__algorithm__laser_scan_data__second = { us_split_fields1 = {
  rec__spaces__angles__angle__theta = v1 } } } }, i)[i])]. ((singleton({
  us_split_fields9 = { rec__algorithm__laser_scan_data__first = v;
  rec__algorithm__laser_scan_data__second = { us_split_fields1 = {
  rec__spaces__angles__angle__theta = v1 } } } }, i)[i]) = {
  us_split_fields9 = { rec__algorithm__laser_scan_data__first = v;
  rec__algorithm__laser_scan_data__second = { us_split_fields1 = {
  rec__spaces__angles__angle__theta = v1 } } } })))

logic bool_eq16 : (int,us_rep6) farray, int, int, (int,us_rep6) farray, int,
  int -> bool

axiom bool_eq_def13 :
  (forall a:(int,us_rep6) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep6) farray. forall b__first:int. forall b__last:int
  [bool_eq16(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_133:int. ((((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) and (bool_eq15((a[temp___idx_133]),
  (b[((b__first - a__first) + temp___idx_133)])) = true)) or
  (not ((a__first <= temp___idx_133) and (temp___idx_133 <= a__last)))))) ->
  (bool_eq16(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) -> (bool_eq15((a[temp___idx_133]),
  (b[((b__first - a__first) + temp___idx_133)])) = true))))) -> (bool_eq16(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,us_rep6) farray. forall b:(int,us_rep6) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq16(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) -> (bool_eq15((a[temp___idx_133]),
  (b[((b__first - a__first) + temp___idx_133)])) = true)))))))

logic gapvec__split_discrs : count_type

logic attr__ATTRIBUTE_ADDRESS : int

logic laserscan : (int,us_rep6) farray

logic attr__ATTRIBUTE_ADDRESS1 : int

logic robotradius : t

logic attr__ATTRIBUTE_ADDRESS2 : int

logic mingapwidth : t

logic attr__ATTRIBUTE_ADDRESS3 : int

logic fmaxrange : t

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic dist : t

logic attr__ATTRIBUTE_ADDRESS7 : int

type t27b

predicate in_range8(x: int) = ((2 <= x) and (x <= 999))

logic bool_eq17 : int, int -> bool

axiom bool_eq_def14 :
  (forall x:int. forall y:int [bool_eq17(x, y)]. (((x = y) -> (bool_eq17(x,
  y) = true)) and ((not (x = y)) -> (bool_eq17(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq14 : t27b, t27b -> bool

logic dummy19 : t27b

type t27b__ref = { t27b__content : t27b
}

function t27b__ref___projection(a: t27b__ref) : t27b = (a).t27b__content

logic attr__ATTRIBUTE_ADDRESS8 : int

logic dist1 : t

logic attr__ATTRIBUTE_ADDRESS9 : int

logic dist2 : t

logic attr__ATTRIBUTE_ADDRESS10 : int

logic no_element : count_type

logic attr__ATTRIBUTE_ADDRESS11 : int

axiom no_element__def_axiom : (no_element = of_rep4(0))

logic oeq__function_guard : bool, us_rep4, us_rep4 -> prop

axiom user_eq__def_axiom :
  (forall a:us_rep4. forall b:us_rep4 [user_eq10(a, b)].
  (((forall n:int. (((1 <= n) and (n <= (0 + length1(a)))) ->
    (bool_eq9(get(a, n), get(b, n)) = true))) ->
  (user_eq10(a, b) = match_bool(bool_eq7(length1(a), length1(b)), true,
  false))) and
  ((not (forall n:int. (((1 <= n) and (n <= (0 + length1(a)))) ->
        (bool_eq9(get(a, n), get(b, n)) = true)))) ->
  (user_eq10(a, b) = match_bool(bool_eq7(length1(a), length1(b)), false,
  false)))))

axiom model____post_axiom :
  (forall container:count_type. forall container1:us_main_type [model__({
  us_split_discrs1 = { rec__algorithm__gap_vectors__list__capacity =
  container }; us_split_fields5 = { rec__algorithm__gap_vectors__list =
  container1 } })]. (length1(model__({ us_split_discrs1 = {
  rec__algorithm__gap_vectors__list__capacity = container };
  us_split_fields5 = { rec__algorithm__gap_vectors__list = container1 }
  })) = length({ us_split_discrs1 = {
  rec__algorithm__gap_vectors__list__capacity = container };
  us_split_fields5 = { rec__algorithm__gap_vectors__list = container1 } })))

logic length2 : us_rep5 -> int

logic length__function_guard2 : int, us_rep5 -> prop

logic is_empty1 : us_rep5 -> bool

logic is_empty__function_guard1 : bool, us_rep5 -> prop

logic has_key : us_rep5, us_rep3 -> bool

logic has_key__function_guard : bool, us_rep5, us_rep3 -> prop

axiom positions__post_axiom :
  (forall container:count_type. forall container1:us_main_type [positions({
  us_split_discrs1 = { rec__algorithm__gap_vectors__list__capacity =
  container }; us_split_fields5 = { rec__algorithm__gap_vectors__list =
  container1 } })]. ((not (has_key(positions({ us_split_discrs1 = {
  rec__algorithm__gap_vectors__list__capacity = container };
  us_split_fields5 = { rec__algorithm__gap_vectors__list = container1 } }), {
  us_split_fields7 = { rec__algorithm__gap_vectors__cursor__node = no_element
  } }) = true)) and
  (forall i:count_type. ((has_key(positions({ us_split_discrs1 = {
  rec__algorithm__gap_vectors__list__capacity = container };
  us_split_fields5 = { rec__algorithm__gap_vectors__list = container1 } }), {
  us_split_fields7 = { rec__algorithm__gap_vectors__cursor__node = i }
  }) = true) -> (((1 <= get1(positions({ us_split_discrs1 = {
  rec__algorithm__gap_vectors__list__capacity = container };
  us_split_fields5 = { rec__algorithm__gap_vectors__list = container1 } }), {
  us_split_fields7 = { rec__algorithm__gap_vectors__cursor__node = i }
  })) and (get1(positions({ us_split_discrs1 = {
  rec__algorithm__gap_vectors__list__capacity = container };
  us_split_fields5 = { rec__algorithm__gap_vectors__list = container1 } }), {
  us_split_fields7 = { rec__algorithm__gap_vectors__cursor__node = i }
  }) <= length({ us_split_discrs1 = {
  rec__algorithm__gap_vectors__list__capacity = container };
  us_split_fields5 = { rec__algorithm__gap_vectors__list = container1 }
  }))) and
  (forall j:count_type. ((has_key(positions({ us_split_discrs1 = {
  rec__algorithm__gap_vectors__list__capacity = container };
  us_split_fields5 = { rec__algorithm__gap_vectors__list = container1 } }), {
  us_split_fields7 = { rec__algorithm__gap_vectors__cursor__node = j }
  }) = true) -> ((get1(positions({ us_split_discrs1 = {
  rec__algorithm__gap_vectors__list__capacity = container };
  us_split_fields5 = { rec__algorithm__gap_vectors__list = container1 } }), {
  us_split_fields7 = { rec__algorithm__gap_vectors__cursor__node = i }
  }) = get1(positions({ us_split_discrs1 = {
  rec__algorithm__gap_vectors__list__capacity = container };
  us_split_fields5 = { rec__algorithm__gap_vectors__list = container1 } }), {
  us_split_fields7 = { rec__algorithm__gap_vectors__cursor__node = j } })) ->
  (bool_eq12({ us_split_fields7 = {
  rec__algorithm__gap_vectors__cursor__node = i } }, { us_split_fields7 = {
  rec__algorithm__gap_vectors__cursor__node = j } }) = true)))))))))

axiom is_empty__post_axiom :
  (forall container:count_type. forall container1:us_main_type [is_empty({
  us_split_discrs1 = { rec__algorithm__gap_vectors__list__capacity =
  container }; us_split_fields5 = { rec__algorithm__gap_vectors__list =
  container1 } })]. ((is_empty({ us_split_discrs1 = {
  rec__algorithm__gap_vectors__list__capacity = container };
  us_split_fields5 = { rec__algorithm__gap_vectors__list = container1 }
  }) = true) <-> (length({ us_split_discrs1 = {
  rec__algorithm__gap_vectors__list__capacity = container };
  us_split_fields5 = { rec__algorithm__gap_vectors__list = container1 }
  }) = 0)))

logic has_element__function_guard : bool, us_rep2, us_rep3 -> prop

axiom last__post_axiom :
  (forall container:count_type. forall container1:us_main_type [last({
  us_split_discrs1 = { rec__algorithm__gap_vectors__list__capacity =
  container }; us_split_fields5 = { rec__algorithm__gap_vectors__list =
  container1 } })]. (((length({ us_split_discrs1 = {
  rec__algorithm__gap_vectors__list__capacity = container };
  us_split_fields5 = { rec__algorithm__gap_vectors__list = container1 }
  }) = 0) -> (bool_eq12(last({ us_split_discrs1 = {
  rec__algorithm__gap_vectors__list__capacity = container };
  us_split_fields5 = { rec__algorithm__gap_vectors__list = container1 } }), {
  us_split_fields7 = { rec__algorithm__gap_vectors__cursor__node = no_element
  } }) = true)) and ((not (length({ us_split_discrs1 = {
  rec__algorithm__gap_vectors__list__capacity = container };
  us_split_fields5 = { rec__algorithm__gap_vectors__list = container1 }
  }) = 0)) -> ((has_key(positions({ us_split_discrs1 = {
  rec__algorithm__gap_vectors__list__capacity = container };
  us_split_fields5 = { rec__algorithm__gap_vectors__list = container1 } }),
  last({ us_split_discrs1 = { rec__algorithm__gap_vectors__list__capacity =
  container }; us_split_fields5 = { rec__algorithm__gap_vectors__list =
  container1 } })) = true) and (get1(positions({ us_split_discrs1 = {
  rec__algorithm__gap_vectors__list__capacity = container };
  us_split_fields5 = { rec__algorithm__gap_vectors__list = container1 } }),
  last({ us_split_discrs1 = { rec__algorithm__gap_vectors__list__capacity =
  container }; us_split_fields5 = { rec__algorithm__gap_vectors__list =
  container1 } })) = length({ us_split_discrs1 = {
  rec__algorithm__gap_vectors__list__capacity = container };
  us_split_fields5 = { rec__algorithm__gap_vectors__list = container1 }
  }))))))

type extended_index

predicate in_range9(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq18 : int, int -> bool

axiom bool_eq_def15 :
  (forall x:int. forall y:int [bool_eq18(x, y)]. (((x = y) -> (bool_eq18(x,
  y) = true)) and ((not (x = y)) -> (bool_eq18(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq15 : extended_index, extended_index -> bool

logic dummy20 : extended_index

type extended_index__ref = { extended_index__content : extended_index
}

function extended_index__ref___projection(a: extended_index__ref) : extended_index =
  (a).extended_index__content

axiom length__post_axiom1 :
  (forall container:us_rep4 [length1(container)].
  (((0 + length1(container)) <= 2147483647) and
  in_range6(length1(container))))

axiom get__post_axiom : true

axiom has_key__post_axiom :
  (forall container:us_rep5.
  (forall key:count_type [has_key(container, { us_split_fields7 = {
  rec__algorithm__gap_vectors__cursor__node = key } })].
  ((of_int1(0) = true) ->
  ((exists k:count_type. ((has_key(container, { us_split_fields7 = {
   rec__algorithm__gap_vectors__cursor__node = k } }) = true) and
   (bool_eq12({ us_split_fields7 = {
   rec__algorithm__gap_vectors__cursor__node = k } }, { us_split_fields7 = {
   rec__algorithm__gap_vectors__cursor__node = key } }) = true))) ->
  (has_key(container, { us_split_fields7 = {
  rec__algorithm__gap_vectors__cursor__node = key } }) = true)))))

type element_type

predicate in_range10(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq19 : int, int -> bool

axiom bool_eq_def16 :
  (forall x:int. forall y:int [bool_eq19(x, y)]. (((x = y) -> (bool_eq19(x,
  y) = true)) and ((not (x = y)) -> (bool_eq19(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq16 : element_type, element_type -> bool

logic dummy21 : element_type

type element_type__ref2 = { element_type__content2 : element_type
}

function element_type__ref_3__projection(a: element_type__ref2) : element_type =
  (a).element_type__content2

logic witness : us_rep5, us_rep3 -> int

logic witness__function_guard : int, us_rep5, us_rep3 -> prop

logic w_get : us_rep5, int -> int

logic w_get__function_guard : int, us_rep5, int -> prop

axiom get__post_axiom1 :
  (forall container:us_rep5.
  (forall key:count_type [get1(container, { us_split_fields7 = {
  rec__algorithm__gap_vectors__cursor__node = key } })]. ((has_key(container,
  { us_split_fields7 = { rec__algorithm__gap_vectors__cursor__node = key }
  }) = true) -> (((of_int1(0) = true) -> ((get1(container, {
  us_split_fields7 = { rec__algorithm__gap_vectors__cursor__node = key }
  }) = w_get(container, witness(container, { us_split_fields7 = {
  rec__algorithm__gap_vectors__cursor__node = key } }))) and
  (forall k:count_type. ((has_key(container, { us_split_fields7 = {
  rec__algorithm__gap_vectors__cursor__node = k } }) = true) -> ((bool_eq12({
  us_split_fields7 = { rec__algorithm__gap_vectors__cursor__node = k } }, {
  us_split_fields7 = { rec__algorithm__gap_vectors__cursor__node = key }
  }) = true) <-> (witness(container, { us_split_fields7 = {
  rec__algorithm__gap_vectors__cursor__node = key } }) = witness(container, {
  us_split_fields7 = { rec__algorithm__gap_vectors__cursor__node = k } }))))))) and
  in_range10(get1(container, { us_split_fields7 = {
  rec__algorithm__gap_vectors__cursor__node = key } }))))))

axiom length__post_axiom2 :
  (forall container:us_rep5 [length2(container)].
  in_range6(length2(container)))

axiom ole__post_axiom :
  (forall left:us_rep5. forall right:us_rep5 [ole(left, right)]. ((ole(left,
  right) = true) <->
  (forall key:count_type. ((has_key(left, { us_split_fields7 = {
  rec__algorithm__gap_vectors__cursor__node = key } }) = true) ->
  ((has_key(right, { us_split_fields7 = {
  rec__algorithm__gap_vectors__cursor__node = key } }) = true) and
  (get1(right, { us_split_fields7 = {
  rec__algorithm__gap_vectors__cursor__node = key } }) = get1(left, {
  us_split_fields7 = { rec__algorithm__gap_vectors__cursor__node = key }
  })))))))

axiom is_empty__post_axiom1 :
  (forall container:us_rep5 [is_empty1(container)].
  ((is_empty1(container) = true) <->
  (forall key:count_type. (not (has_key(container, { us_split_fields7 = {
  rec__algorithm__gap_vectors__cursor__node = key } }) = true)))))

axiom keys_included_except__post_axiom :
  (forall left:us_rep5. forall right:us_rep5.
  (forall new_key:count_type [keys_included_except(left, right, {
  us_split_fields7 = { rec__algorithm__gap_vectors__cursor__node = new_key }
  })]. ((keys_included_except(left, right, { us_split_fields7 = {
  rec__algorithm__gap_vectors__cursor__node = new_key } }) = true) <->
  (forall key:count_type. ((has_key(left, { us_split_fields7 = {
  rec__algorithm__gap_vectors__cursor__node = key } }) = true) ->
  ((not (bool_eq12({ us_split_fields7 = {
  rec__algorithm__gap_vectors__cursor__node = key } }, { us_split_fields7 = {
  rec__algorithm__gap_vectors__cursor__node = new_key } }) = true)) ->
  (has_key(right, { us_split_fields7 = {
  rec__algorithm__gap_vectors__cursor__node = key } }) = true)))))))

logic has_witness : us_rep5, int -> bool

logic has_witness__function_guard : bool, us_rep5, int -> prop

axiom has_witness__post_axiom : true

axiom witness__post_axiom :
  (forall container:us_rep5.
  (forall key:count_type [witness(container, { us_split_fields7 = {
  rec__algorithm__gap_vectors__cursor__node = key } })]. ((has_key(container,
  { us_split_fields7 = { rec__algorithm__gap_vectors__cursor__node = key }
  }) = true) -> ((has_witness(container, witness(container, {
  us_split_fields7 = { rec__algorithm__gap_vectors__cursor__node = key }
  })) = true) and in_range6(witness(container, { us_split_fields7 = {
  rec__algorithm__gap_vectors__cursor__node = key } }))))))

axiom w_get__post_axiom :
  (forall container:us_rep5.
  (forall witness1:int [w_get(container, witness1)].
  ((in_range6(witness1) and (has_witness(container, witness1) = true)) ->
  in_range10(w_get(container, witness1)))))

logic fliteral4 : t

axiom fliteral_axiom4 : (tqtisFinite(fliteral4) and
  (tqtreal(fliteral4) = 2.0))

 (* File "algorithm.adb", line 132, characters 0-0 *)
goal WP_parameter_def :
  (forall i:int. forall temp___820:nonnegative_float.
  forall temp___8201:normalized2pi. forall temp___819:nonnegative_float.
  forall temp___8191:normalized2pi. forall temp___818:count_type.
  forall temp___8181:us_main_type. forall temp___817:int.
  forall algorithm__buildgapvector__B_9__dist__assume:t.
  forall o:normalized2pi. forall o1:float1. forall o2:idir_t.
  forall o3:normalized2pi. forall o4:float1. forall o5:idir_t. forall o6:t.
  forall o7:t. forall o8:t. forall o9:t. forall o10:t. forall o11:t.
  forall o12:t. forall o13:t. forall o14:t. forall o15:t. forall o16:t.
  forall o17:t. forall algorithm__buildgapvector__B_10__dist__assume:t.
  forall o18:normalized2pi. forall o19:float1. forall o20:idir_t.
  forall rayr__split_fields:us_split_fields8.
  forall rayl__split_fields:us_split_fields8.
  forall gapvec__split_fields:us_split_fields4. forall result:int__ref.
  forall i1:int. forall gapvec__split_fields1:us_split_fields4.
  forall rayr__split_fields1:us_split_fields8.
  forall rayl__split_fields1:us_split_fields8. forall i2:int.
  forall rho:us_split_fields4. forall rho1:us_split_fields4.
  forall result1:us_split_fields__ref4.
  forall rayr__split_fields2:us_split_fields8.
  forall result2:us_split_fields__ref4.
  forall rayl__split_fields2:us_split_fields8.
  forall algorithm__gap_vectors__append__container__fields:us_split_fields4.
  forall result3:us_split_fields__ref2.
  forall gapvec__split_fields2:us_split_fields4.
  forall algorithm__gap_vectors__append__container__fields1:us_split_fields4.
  forall result4:us_split_fields__ref2.
  forall gapvec__split_fields3:us_split_fields4.
  forall gapvec__split_fields4:us_split_fields__ref2.
  forall rayr__split_fields3:us_split_fields__ref4.
  forall rayl__split_fields3:us_split_fields__ref4. forall i3:int__ref.
  forall gapvec__split_fields5:us_split_fields4.
  forall rayr__split_fields4:us_split_fields8.
  forall rayl__split_fields4:us_split_fields8. forall i4:int.
  forall gapvec__split_fields6:us_split_fields__ref2.
  forall rayr__split_fields5:us_split_fields__ref4.
  forall rayl__split_fields5:us_split_fields__ref4. forall i5:int__ref.
  forall gapvec__split_fields7:us_split_fields4.
  forall rayr__split_fields6:us_split_fields8.
  forall rayl__split_fields6:us_split_fields8. forall i6:int.
  forall result5:us_split_fields__ref4.
  forall rayr__split_fields7:us_split_fields8.
  forall result6:us_split_fields__ref4.
  forall rayl__split_fields7:us_split_fields8.
  ((1000 = to_rep4(gapvec__split_discrs)) -> (in_range2(robotradius) ->
  (in_range2(mingapwidth) -> (in_range2(fmaxrange) ->
  (((to_rep4(gapvec__split_discrs) = 1000) and (length({ us_split_discrs1 = {
  rec__algorithm__gap_vectors__list__capacity = gapvec__split_discrs };
  us_split_fields5 = gapvec__split_fields }) <= 1)) -> ((((result = {
  int__content = i }) and (i1 = 2)) and ((((2 <= i1) and (i1 <= 999)) and
  (((({ rec__algorithm__laser_scan_data__first = temp___820;
  rec__algorithm__laser_scan_data__second = { us_split_fields1 = {
  rec__spaces__angles__angle__theta = temp___8201 } }
  } = rayl__split_fields) and (({ rec__algorithm__laser_scan_data__first =
  temp___819; rec__algorithm__laser_scan_data__second = { us_split_fields1 =
  { rec__spaces__angles__angle__theta = temp___8191 } }
  } = rayr__split_fields) and (((temp___818 = gapvec__split_discrs) and ({
  rec__algorithm__gap_vectors__list = temp___8181
  } = gapvec__split_fields)) and ((temp___817 = i1) and
  (((to_rep4(gapvec__split_discrs) = 1000) and (length({ us_split_discrs1 = {
  rec__algorithm__gap_vectors__list__capacity = gapvec__split_discrs };
  us_split_fields5 = gapvec__split_fields1 }) <  i2)) and ((((2 <= 999) ->
  in_range8(i2)) and ((2 <= i2) and (i2 <= 999))) and (((result1 = {
  us_split_fields__content4 = rayr__split_fields1 }) and
  (rayr__split_fields2 = rayl__split_fields1)) and (((result2 = {
  us_split_fields__content4 = rayl__split_fields1 }) and
  (rayl__split_fields2 = ((laserscan[i2])).us_split_fields9)) and
  (((((algorithm__buildgapvector__B_9__dist__assume = sub(RNE,
  to_rep((rayl__split_fields2).rec__algorithm__laser_scan_data__first),
  to_rep((rayr__split_fields2).rec__algorithm__laser_scan_data__first))) and
  tqtisFinite(sub(RNE,
  to_rep((rayl__split_fields2).rec__algorithm__laser_scan_data__first),
  to_rep((rayr__split_fields2).rec__algorithm__laser_scan_data__first)))) and
  (algorithm__buildgapvector__B_9__dist__assume = dist1)) and
  tqtisFinite(dist1)) and ((((le(mingapwidth, dist1) or
  (eq(to_rep((rayl__split_fields2).rec__algorithm__laser_scan_data__first),
  fmaxrange) and
  lt(to_rep((rayr__split_fields2).rec__algorithm__laser_scan_data__first),
  fmaxrange))) and (((({ us_split_fields3 = { rec__gaps__gap__bearing = {
  us_split_fields1 = { rec__spaces__angles__angle__theta = o } };
  rec__gaps__gap__distance = o1; rec__gaps__gap__idir = o2 }
  } = create__2((rayr__split_fields2).rec__algorithm__laser_scan_data__second,
  to_rep((rayr__split_fields2).rec__algorithm__laser_scan_data__first),
  (-1))) and ((((((length({ us_split_discrs1 = {
  rec__algorithm__gap_vectors__list__capacity = gapvec__split_discrs };
  us_split_fields5 = algorithm__gap_vectors__append__container__fields
  }) = (length({ us_split_discrs1 = {
  rec__algorithm__gap_vectors__list__capacity = gapvec__split_discrs };
  us_split_fields5 = gapvec__split_fields1 }) + 1)) and (get1(positions({
  us_split_discrs1 = { rec__algorithm__gap_vectors__list__capacity =
  gapvec__split_discrs }; us_split_fields5 =
  algorithm__gap_vectors__append__container__fields }), last({
  us_split_discrs1 = { rec__algorithm__gap_vectors__list__capacity =
  gapvec__split_discrs }; us_split_fields5 =
  algorithm__gap_vectors__append__container__fields })) = length({
  us_split_discrs1 = { rec__algorithm__gap_vectors__list__capacity =
  gapvec__split_discrs }; us_split_fields5 =
  algorithm__gap_vectors__append__container__fields }))) and
  (keys_included_except(positions({ us_split_discrs1 = {
  rec__algorithm__gap_vectors__list__capacity = gapvec__split_discrs };
  us_split_fields5 = algorithm__gap_vectors__append__container__fields }),
  positions({ us_split_discrs1 = {
  rec__algorithm__gap_vectors__list__capacity = gapvec__split_discrs };
  us_split_fields5 = gapvec__split_fields1 }), last({ us_split_discrs1 = {
  rec__algorithm__gap_vectors__list__capacity = gapvec__split_discrs };
  us_split_fields5 = algorithm__gap_vectors__append__container__fields
  })) = true)) and (ole(positions({ us_split_discrs1 = {
  rec__algorithm__gap_vectors__list__capacity = gapvec__split_discrs };
  us_split_fields5 = gapvec__split_fields1 }), positions({ us_split_discrs1 =
  { rec__algorithm__gap_vectors__list__capacity = gapvec__split_discrs };
  us_split_fields5 = algorithm__gap_vectors__append__container__fields
  })) = true)) and (bool_eq9(get(model__({ us_split_discrs1 = {
  rec__algorithm__gap_vectors__list__capacity = gapvec__split_discrs };
  us_split_fields5 = algorithm__gap_vectors__append__container__fields }),
  length({ us_split_discrs1 = { rec__algorithm__gap_vectors__list__capacity =
  gapvec__split_discrs }; us_split_fields5 =
  algorithm__gap_vectors__append__container__fields })), { us_split_fields3 =
  { rec__gaps__gap__bearing = { us_split_fields1 = {
  rec__spaces__angles__angle__theta = o } }; rec__gaps__gap__distance = o1;
  rec__gaps__gap__idir = o2 } }) = true)) and ((bool_le1(length1(model__({
  us_split_discrs1 = { rec__algorithm__gap_vectors__list__capacity =
  gapvec__split_discrs }; us_split_fields5 = gapvec__split_fields1 })),
  length1(model__({ us_split_discrs1 = {
  rec__algorithm__gap_vectors__list__capacity = gapvec__split_discrs };
  us_split_fields5 = algorithm__gap_vectors__append__container__fields
  }))) = true) and
  (forall n:int. (((1 <= n) and (n <= (0 + length1(model__({
  us_split_discrs1 = { rec__algorithm__gap_vectors__list__capacity =
  gapvec__split_discrs }; us_split_fields5 = gapvec__split_fields1 }))))) ->
  (bool_eq9(get(model__({ us_split_discrs1 = {
  rec__algorithm__gap_vectors__list__capacity = gapvec__split_discrs };
  us_split_fields5 = gapvec__split_fields1 }), n), get(model__({
  us_split_discrs1 = { rec__algorithm__gap_vectors__list__capacity =
  gapvec__split_discrs }; us_split_fields5 =
  algorithm__gap_vectors__append__container__fields }), n)) = true)))))) and
  ((result3 = { us_split_fields__content2 = gapvec__split_fields1 }) and
  (gapvec__split_fields2 = algorithm__gap_vectors__append__container__fields))) and
  (algorithm__gap_vectors__append__container__fields1 = rho1))) or
  ((not (le(mingapwidth, dist1) or
  (eq(to_rep((rayl__split_fields2).rec__algorithm__laser_scan_data__first),
  fmaxrange) and
  lt(to_rep((rayr__split_fields2).rec__algorithm__laser_scan_data__first),
  fmaxrange)))) and ((((le(dist1, neg(mingapwidth)) or
  (eq(to_rep((rayr__split_fields2).rec__algorithm__laser_scan_data__first),
  fmaxrange) and
  lt(to_rep((rayl__split_fields2).rec__algorithm__laser_scan_data__first),
  fmaxrange))) and ((({ us_split_fields3 = { rec__gaps__gap__bearing = {
  us_split_fields1 = { rec__spaces__angles__angle__theta = o3 } };
  rec__gaps__gap__distance = o4; rec__gaps__gap__idir = o5 }
  } = create__2((rayl__split_fields2).rec__algorithm__laser_scan_data__second,
  to_rep((rayl__split_fields2).rec__algorithm__laser_scan_data__first),
  1)) and ((((((length({ us_split_discrs1 = {
  rec__algorithm__gap_vectors__list__capacity = gapvec__split_discrs };
  us_split_fields5 = algorithm__gap_vectors__append__container__fields1
  }) = (length({ us_split_discrs1 = {
  rec__algorithm__gap_vectors__list__capacity = gapvec__split_discrs };
  us_split_fields5 = gapvec__split_fields1 }) + 1)) and (get1(positions({
  us_split_discrs1 = { rec__algorithm__gap_vectors__list__capacity =
  gapvec__split_discrs }; us_split_fields5 =
  algorithm__gap_vectors__append__container__fields1 }), last({
  us_split_discrs1 = { rec__algorithm__gap_vectors__list__capacity =
  gapvec__split_discrs }; us_split_fields5 =
  algorithm__gap_vectors__append__container__fields1 })) = length({
  us_split_discrs1 = { rec__algorithm__gap_vectors__list__capacity =
  gapvec__split_discrs }; us_split_fields5 =
  algorithm__gap_vectors__append__container__fields1 }))) and
  (keys_included_except(positions({ us_split_discrs1 = {
  rec__algorithm__gap_vectors__list__capacity = gapvec__split_discrs };
  us_split_fields5 = algorithm__gap_vectors__append__container__fields1 }),
  positions({ us_split_discrs1 = {
  rec__algorithm__gap_vectors__list__capacity = gapvec__split_discrs };
  us_split_fields5 = gapvec__split_fields1 }), last({ us_split_discrs1 = {
  rec__algorithm__gap_vectors__list__capacity = gapvec__split_discrs };
  us_split_fields5 = algorithm__gap_vectors__append__container__fields1
  })) = true)) and (ole(positions({ us_split_discrs1 = {
  rec__algorithm__gap_vectors__list__capacity = gapvec__split_discrs };
  us_split_fields5 = gapvec__split_fields1 }), positions({ us_split_discrs1 =
  { rec__algorithm__gap_vectors__list__capacity = gapvec__split_discrs };
  us_split_fields5 = algorithm__gap_vectors__append__container__fields1
  })) = true)) and (bool_eq9(get(model__({ us_split_discrs1 = {
  rec__algorithm__gap_vectors__list__capacity = gapvec__split_discrs };
  us_split_fields5 = algorithm__gap_vectors__append__container__fields1 }),
  length({ us_split_discrs1 = { rec__algorithm__gap_vectors__list__capacity =
  gapvec__split_discrs }; us_split_fields5 =
  algorithm__gap_vectors__append__container__fields1 })), {
  us_split_fields3 = { rec__gaps__gap__bearing = { us_split_fields1 = {
  rec__spaces__angles__angle__theta = o3 } }; rec__gaps__gap__distance = o4;
  rec__gaps__gap__idir = o5 } }) = true)) and ((bool_le1(length1(model__({
  us_split_discrs1 = { rec__algorithm__gap_vectors__list__capacity =
  gapvec__split_discrs }; us_split_fields5 = gapvec__split_fields1 })),
  length1(model__({ us_split_discrs1 = {
  rec__algorithm__gap_vectors__list__capacity = gapvec__split_discrs };
  us_split_fields5 = algorithm__gap_vectors__append__container__fields1
  }))) = true) and
  (forall n:int. (((1 <= n) and (n <= (0 + length1(model__({
  us_split_discrs1 = { rec__algorithm__gap_vectors__list__capacity =
  gapvec__split_discrs }; us_split_fields5 = gapvec__split_fields1 }))))) ->
  (bool_eq9(get(model__({ us_split_discrs1 = {
  rec__algorithm__gap_vectors__list__capacity = gapvec__split_discrs };
  us_split_fields5 = gapvec__split_fields1 }), n), get(model__({
  us_split_discrs1 = { rec__algorithm__gap_vectors__list__capacity =
  gapvec__split_discrs }; us_split_fields5 =
  algorithm__gap_vectors__append__container__fields1 }), n)) = true)))))) and
  ((result4 = { us_split_fields__content2 = gapvec__split_fields1 }) and
  (gapvec__split_fields3 = algorithm__gap_vectors__append__container__fields1)))) or
  ((not (le(dist1, neg(mingapwidth)) or
  (eq(to_rep((rayr__split_fields2).rec__algorithm__laser_scan_data__first),
  fmaxrange) and
  lt(to_rep((rayl__split_fields2).rec__algorithm__laser_scan_data__first),
  fmaxrange)))) and ((gapvec__split_fields3 = gapvec__split_fields1) and
  ((algorithm__gap_vectors__append__container__fields1 = rho1) and
  (gapvec__split_fields3 = gapvec__split_fields1))))) and
  ((gapvec__split_fields2 = gapvec__split_fields3) and
  ((algorithm__gap_vectors__append__container__fields = rho) and
  (gapvec__split_fields2 = gapvec__split_fields3)))))) and
  (i2 = 999))))))))))) and (((i3 = { int__content = i2 }) and
  ((rayl__split_fields3 = { us_split_fields__content4 = rayl__split_fields2
  }) and ((rayr__split_fields3 = { us_split_fields__content4 =
  rayr__split_fields2 }) and (gapvec__split_fields4 = {
  us_split_fields__content2 = gapvec__split_fields2 })))) and ((i4 = i2) and
  ((rayl__split_fields4 = rayl__split_fields2) and
  ((rayr__split_fields4 = rayr__split_fields2) and
  (gapvec__split_fields5 = gapvec__split_fields2)))))) and (((i5 = i3) and
  ((rayl__split_fields5 = rayl__split_fields3) and
  ((rayr__split_fields5 = rayr__split_fields3) and
  (gapvec__split_fields6 = gapvec__split_fields4)))) and ((i6 = i4) and
  ((rayl__split_fields6 = rayl__split_fields4) and
  ((rayr__split_fields6 = rayr__split_fields4) and
  (gapvec__split_fields7 = gapvec__split_fields5))))))) or
  ((not ((2 <= i1) and (i1 <= 999))) and (((i5 = { int__content = i1 }) and
  ((rayl__split_fields5 = { us_split_fields__content4 = rayl__split_fields
  }) and ((rayr__split_fields5 = { us_split_fields__content4 =
  rayr__split_fields }) and (gapvec__split_fields6 = {
  us_split_fields__content2 = gapvec__split_fields })))) and ((i6 = i1) and
  ((rayl__split_fields6 = rayl__split_fields) and
  ((rayr__split_fields6 = rayr__split_fields) and
  (gapvec__split_fields7 = gapvec__split_fields)))))))) ->
  (((result5 = rayr__split_fields5) and
  (rayr__split_fields7 = ((laserscan[1000])).us_split_fields9)) ->
  (((result6 = rayl__split_fields5) and
  (rayl__split_fields7 = ((laserscan[1])).us_split_fields9)) ->
  (((((((((o11 = ccwdiff((rayr__split_fields7).rec__algorithm__laser_scan_data__second,
  (rayl__split_fields7).rec__algorithm__laser_scan_data__second)) and
  tqtisFinite(o11)) and ((o12 = cos(o11)) and (tqtisFinite(o12) and
  ((le(neg(fliteral), o12) and le(o12, fliteral)) and (eq(o11, fliteral1) ->
  eq(o12, fliteral)))))) and (((((o9 = mul(RNE, fliteral4,
  to_rep((rayr__split_fields7).rec__algorithm__laser_scan_data__first))) and
  tqtisFinite(mul(RNE, fliteral4,
  to_rep((rayr__split_fields7).rec__algorithm__laser_scan_data__first)))) and
  (o10 = mul(RNE, o9,
  to_rep((rayl__split_fields7).rec__algorithm__laser_scan_data__first)))) and
  ((o13 = o10) and tqtisFinite(o10))) and (o14 = mul(RNE, o13, o12)))) and
  ((o15 = o14) and tqtisFinite(o14))) and (((((o6 = mul(RNE,
  to_rep((rayl__split_fields7).rec__algorithm__laser_scan_data__first),
  to_rep((rayl__split_fields7).rec__algorithm__laser_scan_data__first))) and
  tqtisFinite(mul(RNE,
  to_rep((rayl__split_fields7).rec__algorithm__laser_scan_data__first),
  to_rep((rayl__split_fields7).rec__algorithm__laser_scan_data__first)))) and
  (((o7 = mul(RNE,
  to_rep((rayr__split_fields7).rec__algorithm__laser_scan_data__first),
  to_rep((rayr__split_fields7).rec__algorithm__laser_scan_data__first))) and
  tqtisFinite(mul(RNE,
  to_rep((rayr__split_fields7).rec__algorithm__laser_scan_data__first),
  to_rep((rayr__split_fields7).rec__algorithm__laser_scan_data__first)))) and
  (o8 = add(RNE, o7, o6)))) and ((o16 = o8) and tqtisFinite(o8))) and
  (o17 = sub(RNE, o16, o15)))) and
  ((algorithm__buildgapvector__B_10__dist__assume = o17) and
  tqtisFinite(o17))) and
  (algorithm__buildgapvector__B_10__dist__assume = dist2)) ->
  (tqtisFinite(dist2) -> (le(mingapwidth, dist2) -> (({ us_split_fields3 = {
  rec__gaps__gap__bearing = { us_split_fields1 = {
  rec__spaces__angles__angle__theta = o18 } }; rec__gaps__gap__distance =
  o19; rec__gaps__gap__idir = o20 }
  } = create__2((rayr__split_fields7).rec__algorithm__laser_scan_data__second,
  neg(robotradius), 1)) -> (length({ us_split_discrs1 = {
  rec__algorithm__gap_vectors__list__capacity = gapvec__split_discrs };
  us_split_fields5 = (gapvec__split_fields6).us_split_fields__content2
  }) <  to_rep4(gapvec__split_discrs)))))))))))))))
