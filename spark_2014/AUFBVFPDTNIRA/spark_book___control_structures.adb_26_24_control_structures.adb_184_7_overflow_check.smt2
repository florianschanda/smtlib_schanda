;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(define-fun __cdiv ((x Int) (y Int)) Int (ite (>= x 0) (div x y) (- (div (- x) y))))
(define-fun __cmod ((x Int) (y Int)) Int (ite (>= x 0) (mod x y) (- (mod (- x) y))))
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun mod1 ((x Int)
  (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))

(declare-fun pow2 (Int) Int)

(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                (fp.isPositive x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                 (fp.isNegative x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x)
                                            (fp.isPositive x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x)
                                             (fp.isNegative x)))

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y))
                    (and (fp.isNegative x) (fp.isNegative y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y))
                    (and (fp.isNegative x) (fp.isPositive y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z))
                    (=> (diff_sign x y) (fp.isNegative z))))

(define-fun sqr ((x Real)) Real (* x x))

(declare-fun sqrt1 (Real) Real)

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r))
                 (and (fp.isNegative x) (< r 0.0))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content Float32)))))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range1 temp___expr_18)))

(declare-sort float 0)

(declare-fun user_eq1 (float float) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE2 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Float32)

(declare-const dummy1 float)

(declare-datatypes () ((float__ref (mk_float__ref (float__content float)))))
(define-fun float__ref___projection ((a float__ref)) float (float__content a))

(define-fun dynamic_invariant1 ((temp___expr_60 Float32)
  (temp___is_init_56 Bool) (temp___skip_constant_57 Bool)
  (temp___do_toplevel_58 Bool)
  (temp___do_typ_inv_59 Bool)) Bool (=>
                                    (or (= temp___is_init_56 true)
                                    (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                    (fp.isFinite32 temp___expr_60)))

(declare-sort character 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-const dummy2 character)

(declare-datatypes ()
((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character
  (character__content a))

(define-fun dynamic_invariant2 ((temp___expr_74 Int) (temp___is_init_70 Bool)
  (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool)
  (temp___do_typ_inv_73 Bool)) Bool (=>
                                    (or (= temp___is_init_70 true)
                                    (<= 0 255)) (in_range2 temp___expr_74)))

(declare-sort num 0)

(declare-fun numqtint (num) Int)

;; num'axiom
  (assert
  (forall ((i num))
  (and (<= (- 2147483648) (numqtint i)) (<= (numqtint i) 2147483647))))

(define-fun in_range3 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (num num) Bool)

(declare-const dummy3 num)

(declare-datatypes () ((num__ref (mk_num__ref (num__content num)))))
(define-fun num__ref___projection ((a num__ref)) num (num__content a))

(define-fun dynamic_invariant3 ((temp___expr_572 Int)
  (temp___is_init_568 Bool) (temp___skip_constant_569 Bool)
  (temp___do_toplevel_570 Bool)
  (temp___do_typ_inv_571 Bool)) Bool (=>
                                     (or (= temp___is_init_568 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range3 temp___expr_572)))

(declare-sort field 0)

(declare-fun fieldqtint (field) Int)

;; field'axiom
  (assert
  (forall ((i field)) (and (<= 0 (fieldqtint i)) (<= (fieldqtint i) 255))))

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq4 (field field) Bool)

(declare-const dummy4 field)

(declare-datatypes () ((field__ref (mk_field__ref (field__content field)))))
(define-fun field__ref___projection ((a field__ref)) field (field__content a))

(define-fun dynamic_invariant4 ((temp___expr_527 Int)
  (temp___is_init_523 Bool) (temp___skip_constant_524 Bool)
  (temp___do_toplevel_525 Bool)
  (temp___do_typ_inv_526 Bool)) Bool (=>
                                     (or (= temp___is_init_523 true)
                                     (<= 0 255)) (in_range4 temp___expr_527)))

(declare-sort number_base 0)

(declare-fun number_baseqtint (number_base) Int)

;; number_base'axiom
  (assert
  (forall ((i number_base))
  (and (<= 2 (number_baseqtint i)) (<= (number_baseqtint i) 16))))

(define-fun in_range5 ((x Int)) Bool (and (<= 2 x) (<= x 16)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq5 (number_base number_base) Bool)

(declare-const dummy5 number_base)

(declare-datatypes ()
((number_base__ref (mk_number_base__ref (number_base__content number_base)))))
(define-fun number_base__ref___projection ((a number_base__ref)) number_base
  (number_base__content a))

(define-fun dynamic_invariant5 ((temp___expr_534 Int)
  (temp___is_init_530 Bool) (temp___skip_constant_531 Bool)
  (temp___do_toplevel_532 Bool)
  (temp___do_typ_inv_533 Bool)) Bool (=>
                                     (or (= temp___is_init_530 true)
                                     (<= 2 16)) (in_range5 temp___expr_534)))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-sort uppercase 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 65 x) (<= x 90)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq6 (uppercase uppercase) Bool)

(declare-const dummy6 uppercase)

(declare-datatypes ()
((uppercase__ref (mk_uppercase__ref (uppercase__content uppercase)))))
(define-fun uppercase__ref___projection ((a uppercase__ref)) uppercase
  (uppercase__content a))

(define-fun dynamic_invariant6 ((temp___expr_587 Int)
  (temp___is_init_583 Bool) (temp___skip_constant_584 Bool)
  (temp___do_toplevel_585 Bool)
  (temp___do_typ_inv_586 Bool)) Bool (=>
                                     (or (= temp___is_init_583 true)
                                     (<= 65 90)) (in_range6 temp___expr_587)))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(declare-const attr__ATTRIBUTE_ADDRESS11 Int)

(declare-const attr__ATTRIBUTE_ADDRESS12 Int)

(declare-const attr__ATTRIBUTE_ADDRESS13 Int)

(declare-const attr__ATTRIBUTE_ADDRESS14 Int)

(declare-const attr__ATTRIBUTE_ADDRESS15 Int)

(declare-const attr__ATTRIBUTE_ADDRESS16 Int)

(declare-const attr__ATTRIBUTE_ADDRESS17 Int)

(declare-const attr__ATTRIBUTE_ADDRESS18 Int)

(declare-const tolerance Float32)

(declare-const attr__ATTRIBUTE_ADDRESS19 Int)

(declare-const attr__ATTRIBUTE_ADDRESS20 Int)

(declare-const attr__ATTRIBUTE_ADDRESS21 Int)

(declare-const attr__ATTRIBUTE_ADDRESS22 Int)

(declare-const r4b Int)

(declare-const attr__ATTRIBUTE_ADDRESS23 Int)

(declare-const r5b Int)

(declare-const attr__ATTRIBUTE_ADDRESS24 Int)

(declare-const attr__ATTRIBUTE_ADDRESS25 Int)

(declare-const r7b Int)

(declare-const attr__ATTRIBUTE_ADDRESS26 Int)

(declare-const r8b Int)

(declare-const attr__ATTRIBUTE_ADDRESS27 Int)

(declare-const attr__ATTRIBUTE_ADDRESS28 Int)

(declare-const c10b Int)

(declare-const attr__ATTRIBUTE_ADDRESS29 Int)

;; tolerance__def_axiom
  (assert (= tolerance (fp #b0 #b01110001 #b10100011011011100010111)))

(declare-const default_width Int)

(declare-const default_base Int)

(declare-const a Int)

(declare-const b Int)

(declare-const c Int)

(declare-const d Int)

(declare-const e Int)

(declare-const f Int)

(declare-const g Int)

(declare-const h Int)

(declare-const ch Int)

(declare-const temperature Int)

(declare-const valve_setting Int)

(declare-const value Int)

(declare-const sum Int)

(declare-const success Bool)

(declare-const approx Float32)

(declare-const x Float32)

(declare-const y Float32)

(declare-const letter Int)

(declare-const count Int)

(declare-const count1 int__ref)

(declare-const count2 int__ref)

(declare-const count3 int__ref)

(declare-const o Int)

(declare-const o1 Int)

(declare-const o2 Int)

(declare-const o3 Int)

(declare-const o4 Int)

(declare-const o5 Int)

(declare-const o6 Float32)

(declare-const o7 Float32)

(declare-const o8 Float32)

(declare-const o9 Float32)

(declare-const o10 Float32)

(declare-const o11 Float32)

(declare-const o12 Int)

(declare-const o13 Int)

(declare-const o14 Int)

(declare-const temp___591 Int)

(declare-const temp___590 Int)

(declare-const o15 Float32)

(declare-const o16 Float32)

(declare-const o17 Float32)

(declare-const o18 Float32)

(declare-const temp___592 Float32)

(declare-const o19 Float32)

(declare-const o20 Float32)

(declare-const o21 Float32)

(declare-const o22 Float32)

(declare-const o23 Float32)

(declare-const o24 Float32)

(declare-const o25 Float32)

(declare-const o26 Float32)

(declare-const o27 Bool)

(declare-const g1 Int)

(declare-const result int__ref)

(declare-const letter1 Int)

(declare-const result1 int__ref)

(declare-const a1 Int)

(declare-const result2 int__ref)

(declare-const b1 Int)

(declare-const result3 int__ref)

(declare-const c1 Int)

(declare-const result4 int__ref)

(declare-const d1 Int)

(declare-const result5 int__ref)

(declare-const e1 Int)

(declare-const result6 int__ref)

(declare-const ch1 Int)

(declare-const result7 t__ref)

(declare-const x1 Float32)

(declare-const result8 int__ref)

(declare-const a2 Int)

(declare-const result9 int__ref)

(declare-const d2 Int)

(declare-const result10 int__ref)

(declare-const b2 Int)

(declare-const result11 int__ref)

(declare-const e2 Int)

(declare-const result12 int__ref)

(declare-const f1 Int)

(declare-const result13 int__ref)

(declare-const e3 Int)

(declare-const result14 int__ref)

(declare-const f2 Int)

(declare-const result15 int__ref)

(declare-const f3 Int)

(declare-const result16 int__ref)

(declare-const f4 Int)

(declare-const result17 int__ref)

(declare-const f5 Int)

(declare-const result18 int__ref)

(declare-const g2 Int)

(declare-const result19 int__ref)

(declare-const g3 Int)

(declare-const result20 int__ref)

(declare-const g4 Int)

(declare-const result21 bool__ref)

(declare-const success1 Bool)

(declare-const result22 int__ref)

(declare-const h1 Int)

(declare-const result23 int__ref)

(declare-const h2 Int)

(declare-const result24 int__ref)

(declare-const h3 Int)

(declare-const result25 int__ref)

(declare-const h4 Int)

(declare-const result26 int__ref)

(declare-const h5 Int)

(declare-const result27 bool__ref)

(declare-const success2 Bool)

(declare-const result28 int__ref)

(declare-const c2 Int)

(declare-const result29 int__ref)

(declare-const c3 Int)

(declare-const result30 int__ref)

(declare-const c4 Int)

(declare-const result31 int__ref)

(declare-const c5 Int)

(declare-const result32 int__ref)

(declare-const c6 Int)

(declare-const result33 int__ref)

(declare-const c7 Int)

(declare-const result34 int__ref)

(declare-const c8 Int)

(declare-const result35 t__ref)

(declare-const y1 Float32)

(declare-const result36 t__ref)

(declare-const y2 Float32)

(declare-const result37 t__ref)

(declare-const y3 Float32)

(declare-const result38 Bool)

(declare-const result39 Bool)

(declare-const result40 Bool)

(declare-const result41 Bool)

(declare-const result42 Bool)

(declare-const result43 int__ref)

(declare-const value1 Int)

(declare-const result44 int__ref)

(declare-const sum1 Int)

(declare-const value2 Int)

(declare-const sum2 Int)

(declare-const ada__integer_text_io__get__2__item Int)

(declare-const result45 int__ref)

(declare-const value3 Int)

(declare-const sum3 int__ref)

(declare-const sum4 Int)

(declare-const value4 int__ref)

(declare-const sum5 int__ref)

(declare-const value5 Int)

(declare-const sum6 Int)

(declare-const value6 int__ref)

(declare-const sum7 int__ref)

(declare-const value7 Int)

(declare-const sum8 Int)

(declare-const result46 t__ref)

(declare-const approx1 Float32)

(declare-const result47 Bool)

(declare-const approx2 Float32)

(declare-const result48 t__ref)

(declare-const approx3 Float32)

(declare-const result49 Bool)

(declare-const approx4 t__ref)

(declare-const approx5 Float32)

(declare-const approx6 t__ref)

(declare-const approx7 Float32)

(declare-const result50 int__ref)

(declare-const count4 Int)

(declare-const result51 int__ref)

(declare-const count5 Int)

(declare-const result52 int__ref)

(declare-const count6 Int)

(declare-const result53 int__ref)

(declare-const count7 Int)

(declare-const result54 int__ref)

(declare-const count8 Int)

(declare-const result55 int__ref)

(declare-const count9 Int)

(declare-const result56 int__ref)

(declare-const count10 Int)

(declare-const result57 int__ref)

(declare-const count11 Int)

(declare-const result58 int__ref)

(declare-const a3 Int)

(declare-const result59 int__ref)

(declare-const b3 Int)

(declare-const result60 int__ref)

(declare-const count12 Int)

(declare-const count13 Int)

(declare-const count14 int__ref)

(declare-const count15 Int)

(declare-const count16 int__ref)

(declare-const count17 Int)

(declare-const result61 int__ref)

(declare-const count18 Int)

(declare-const count19 Int)

(declare-const count20 int__ref)

(declare-const count21 Int)

(declare-const count22 int__ref)

(declare-const count23 Int)

(declare-const temperature1 Int)

(declare-const valve_setting1 Int)

(declare-const temperature2 Int)

(define-fun y4 () t__ref (mk_t__ref y))

(define-fun h6 () int__ref (mk_int__ref h))

(define-fun g5 () int__ref (mk_int__ref g))

(define-fun f6 () int__ref (mk_int__ref f))

;; H
  (assert (in_range4 default_width))

;; H
  (assert (in_range5 default_base))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range1 a)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range1 b)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range1 c)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range1 d)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range1 e)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range1 f)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range1 g)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range1 h)))

;; H
  (assert (=> (<= 0 255) (in_range2 ch)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range1 temperature)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range1 valve_setting)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range1 value)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range1 sum)))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (fp.isFinite32 approx)))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (fp.isFinite32 x)))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (fp.isFinite32 y)))

;; H
  (assert (fp.isFinite32 tolerance))

;; H
  (assert (= result (mk_int__ref letter)))

;; H
  (assert (= letter1 81))

;; H
  (assert (in_range6 letter1))

;; H
  (assert (= result1 (mk_int__ref a)))

;; H
  (assert (= a1 1))

;; H
  (assert (= result2 (mk_int__ref b)))

;; H
  (assert (= b1 2))

;; H
  (assert (= result3 (mk_int__ref c)))

;; H
  (assert (= c1 3))

;; H
  (assert (= result4 (mk_int__ref d)))

;; H
  (assert (= d1 3))

;; H
  (assert (= result5 (mk_int__ref e)))

;; H
  (assert (= e1 4))

;; H
  (assert (= result6 (mk_int__ref ch)))

;; H
  (assert (= ch1 68))

;; H
  (assert (= result7 (mk_t__ref x)))

;; H
  (assert (= x1 (fp #b0 #b10000101 #b11101101110100011000001)))

;; H
  (assert (=> (< a1 0) (and (= o (- a1)) (in_range1 (- a1)))))

;; H
  (assert (=> (< a1 0) (= result8 (mk_int__ref a1))))

;; H
  (assert (=> (< a1 0) (= a2 o)))

;; H
  (assert (=> (< a1 0) (= result9 (mk_int__ref d1))))

;; H
  (assert (=> (< a1 0) (= d2 1)))

;; H
  (assert (=> (not (< a1 0)) (= d2 d1)))

;; H
  (assert (=> (not (< a1 0)) (= a2 a1)))

;; H
  (assert (=> (and (<= 1 a2) (<= a2 12)) (= result10 (mk_int__ref b1))))

;; H
  (assert (=> (and (<= 1 a2) (<= a2 12)) (= b2 17)))

;; H
  (assert (=> (not (and (<= 1 a2) (<= a2 12))) (= b2 b1)))

;; H
  (assert (=> (< b2 a2) (= result11 (mk_int__ref e1))))

;; H
  (assert (=> (< b2 a2) (= e2 1)))

;; H
  (assert (=> (< b2 a2) (= result12 f6)))

;; H
  (assert (=> (< b2 a2) (= f1 a2)))

;; H
  (assert (=> (not (< b2 a2)) (= result13 (mk_int__ref e1))))

;; H
  (assert (=> (not (< b2 a2)) (= e3 2)))

;; H
  (assert (=> (not (< b2 a2)) (= result14 f6)))

;; H
  (assert (=> (not (< b2 a2)) (= f2 b2)))

;; H
  (assert (=> (not (< b2 a2)) (= f1 f2)))

;; H
  (assert (=> (not (< b2 a2)) (= e2 e3)))

;; H
  (assert (=> (= a2 b2) (= result15 (mk_int__ref f1))))

;; H
  (assert (=> (= a2 b2) (= f3 3)))

;; H
  (assert (=> (not (= a2 b2)) (=> (< b2 a2) (= result16 (mk_int__ref f1)))))

;; H
  (assert (=> (not (= a2 b2)) (=> (< b2 a2) (= f4 4))))

;; H
  (assert
  (=> (not (= a2 b2)) (=> (not (< b2 a2)) (= result17 (mk_int__ref f1)))))

;; H
  (assert (=> (not (= a2 b2)) (=> (not (< b2 a2)) (= f5 5))))

;; H
  (assert (=> (not (= a2 b2)) (=> (not (< b2 a2)) (= f4 f5))))

;; H
  (assert (=> (not (= a2 b2)) (= f3 f4)))

;; H
  (assert (=> (and (< b2 a2) (< c1 a2)) (= result18 g5)))

;; H
  (assert (=> (and (< b2 a2) (< c1 a2)) (= g2 6)))

;; H
  (assert
  (=> (not (and (< b2 a2) (< c1 a2)))
  (=> (and (< a2 b2) (< c1 b2)) (= result19 g5))))

;; H
  (assert
  (=> (not (and (< b2 a2) (< c1 a2)))
  (=> (and (< a2 b2) (< c1 b2)) (= g3 7))))

;; H
  (assert
  (=> (not (and (< b2 a2) (< c1 a2)))
  (=> (not (and (< a2 b2) (< c1 b2)))
  (=> (and (< a2 c1) (< b2 c1)) (= result20 g5)))))

;; H
  (assert
  (=> (not (and (< b2 a2) (< c1 a2)))
  (=> (not (and (< a2 b2) (< c1 b2)))
  (=> (and (< a2 c1) (< b2 c1)) (= g4 8)))))

;; H
  (assert
  (=> (not (and (< b2 a2) (< c1 a2)))
  (=> (not (and (< a2 b2) (< c1 b2)))
  (=> (not (and (< a2 c1) (< b2 c1))) (= g4 g)))))

;; H
  (assert
  (=> (not (and (< b2 a2) (< c1 a2)))
  (=> (not (and (< a2 b2) (< c1 b2)))
  (=> (not (and (< a2 c1) (< b2 c1))) (= g4 g1)))))

;; H
  (assert
  (=> (not (and (< b2 a2) (< c1 a2)))
  (=> (not (and (< a2 b2) (< c1 b2))) (= g3 g4))))

;; H
  (assert (=> (not (and (< b2 a2) (< c1 a2))) (= g2 g3)))

;; H
  (assert (= result21 (mk_bool__ref success)))

;; H
  (assert (= success1 (distinct 1 0)))

;; H
  (assert (=> (and (<= 97 ch1) (<= ch1 122)) (= result22 h6)))

;; H
  (assert (=> (and (<= 97 ch1) (<= ch1 122)) (= h1 1)))

;; H
  (assert (=> (and (<= 97 ch1) (<= ch1 122)) (= success2 success1)))

;; H
  (assert
  (=> (not (and (<= 97 ch1) (<= ch1 122)))
  (=> (and (<= 65 ch1) (<= ch1 90)) (= result23 h6))))

;; H
  (assert
  (=> (not (and (<= 97 ch1) (<= ch1 122)))
  (=> (and (<= 65 ch1) (<= ch1 90)) (= h2 2))))

;; H
  (assert
  (=> (not (and (<= 97 ch1) (<= ch1 122)))
  (=> (and (<= 65 ch1) (<= ch1 90)) (= success2 success1))))

;; H
  (assert
  (=> (not (and (<= 97 ch1) (<= ch1 122)))
  (=> (not (and (<= 65 ch1) (<= ch1 90)))
  (=> (and (<= 48 ch1) (<= ch1 57)) (= result24 h6)))))

;; H
  (assert
  (=> (not (and (<= 97 ch1) (<= ch1 122)))
  (=> (not (and (<= 65 ch1) (<= ch1 90)))
  (=> (and (<= 48 ch1) (<= ch1 57)) (= h3 3)))))

;; H
  (assert
  (=> (not (and (<= 97 ch1) (<= ch1 122)))
  (=> (not (and (<= 65 ch1) (<= ch1 90)))
  (=> (and (<= 48 ch1) (<= ch1 57)) (= success2 success1)))))

;; H
  (assert
  (=> (not (and (<= 97 ch1) (<= ch1 122)))
  (=> (not (and (<= 65 ch1) (<= ch1 90)))
  (=> (not (and (<= 48 ch1) (<= ch1 57)))
  (=> (=> (not (= ch1 46)) (=> (not (= ch1 33)) (= ch1 63))) (= result25 h6))))))

;; H
  (assert
  (=> (not (and (<= 97 ch1) (<= ch1 122)))
  (=> (not (and (<= 65 ch1) (<= ch1 90)))
  (=> (not (and (<= 48 ch1) (<= ch1 57)))
  (=> (=> (not (= ch1 46)) (=> (not (= ch1 33)) (= ch1 63))) (= h4 4))))))

;; H
  (assert
  (=> (not (and (<= 97 ch1) (<= ch1 122)))
  (=> (not (and (<= 65 ch1) (<= ch1 90)))
  (=> (not (and (<= 48 ch1) (<= ch1 57)))
  (=> (=> (not (= ch1 46)) (=> (not (= ch1 33)) (= ch1 63)))
  (= success2 success1))))))

;; H
  (assert
  (=> (not (and (<= 97 ch1) (<= ch1 122)))
  (=> (not (and (<= 65 ch1) (<= ch1 90)))
  (=> (not (and (<= 48 ch1) (<= ch1 57)))
  (=> (not (=> (not (= ch1 46)) (=> (not (= ch1 33)) (= ch1 63))))
  (= result26 h6))))))

;; H
  (assert
  (=> (not (and (<= 97 ch1) (<= ch1 122)))
  (=> (not (and (<= 65 ch1) (<= ch1 90)))
  (=> (not (and (<= 48 ch1) (<= ch1 57)))
  (=> (not (=> (not (= ch1 46)) (=> (not (= ch1 33)) (= ch1 63)))) (= h5 5))))))

;; H
  (assert
  (=> (not (and (<= 97 ch1) (<= ch1 122)))
  (=> (not (and (<= 65 ch1) (<= ch1 90)))
  (=> (not (and (<= 48 ch1) (<= ch1 57)))
  (=> (not (=> (not (= ch1 46)) (=> (not (= ch1 33)) (= ch1 63))))
  (= result27 (mk_bool__ref success1)))))))

;; H
  (assert
  (=> (not (and (<= 97 ch1) (<= ch1 122)))
  (=> (not (and (<= 65 ch1) (<= ch1 90)))
  (=> (not (and (<= 48 ch1) (<= ch1 57)))
  (=> (not (=> (not (= ch1 46)) (=> (not (= ch1 33)) (= ch1 63))))
  (= success2 (distinct 0 0)))))))

;; H
  (assert
  (=> (not (and (<= 97 ch1) (<= ch1 122)))
  (=> (not (and (<= 65 ch1) (<= ch1 90)))
  (=> (not (and (<= 48 ch1) (<= ch1 57)))
  (=> (not (=> (not (= ch1 46)) (=> (not (= ch1 33)) (= ch1 63)))) (= h4 h5))))))

;; H
  (assert
  (=> (not (and (<= 97 ch1) (<= ch1 122)))
  (=> (not (and (<= 65 ch1) (<= ch1 90)))
  (=> (not (and (<= 48 ch1) (<= ch1 57))) (= h3 h4)))))

;; H
  (assert
  (=> (not (and (<= 97 ch1) (<= ch1 122)))
  (=> (not (and (<= 65 ch1) (<= ch1 90))) (= h2 h3))))

;; H
  (assert (=> (not (and (<= 97 ch1) (<= ch1 122))) (= h1 h2)))

;; H
  (assert (=> (< b2 a2) (and (= o1 (+ d2 5)) (in_range1 (+ d2 5)))))

;; H
  (assert (=> (< b2 a2) (= result28 (mk_int__ref c1))))

;; H
  (assert (=> (< b2 a2) (= c2 o1)))

;; H
  (assert (=> (not (< b2 a2)) (= result29 (mk_int__ref c1))))

;; H
  (assert (=> (not (< b2 a2)) (= c3 (__cdiv f3 2))))

;; H
  (assert (=> (not (< b2 a2)) (= c2 c3)))

;; H
  (assert (=> (< b2 a2) (and (= o2 (+ d2 5)) (in_range1 (+ d2 5)))))

;; H
  (assert (=> (not (< b2 a2)) (= o2 (__cdiv f3 2))))

;; H
  (assert (= result30 (mk_int__ref c2)))

;; H
  (assert (= c4 o2))

;; H
  (assert (=> (< b2 a2) (and (= o3 (+ d2 5)) (in_range1 (+ d2 5)))))

;; H
  (assert (=> (< b2 a2) (= result31 (mk_int__ref c4))))

;; H
  (assert (=> (< b2 a2) (= c5 o3)))

;; H
  (assert
  (=> (not (< b2 a2))
  (=> (= a2 b2) (and (= o4 (* 2 a2)) (in_range1 (* 2 a2))))))

;; H
  (assert (=> (not (< b2 a2)) (=> (= a2 b2) (= result32 (mk_int__ref c4)))))

;; H
  (assert (=> (not (< b2 a2)) (=> (= a2 b2) (= c6 o4))))

;; H
  (assert
  (=> (not (< b2 a2)) (=> (not (= a2 b2)) (= result33 (mk_int__ref c4)))))

;; H
  (assert (=> (not (< b2 a2)) (=> (not (= a2 b2)) (= c7 (__cdiv f3 2)))))

;; H
  (assert (=> (not (< b2 a2)) (=> (not (= a2 b2)) (= c6 c7))))

;; H
  (assert (=> (not (< b2 a2)) (= c5 c6)))

;; H
  (assert (=> (< b2 a2) (and (= o5 (+ d2 5)) (in_range1 (+ d2 5)))))

;; H
  (assert
  (=> (not (< b2 a2))
  (=> (= a2 b2) (and (= o5 (* 2 a2)) (in_range1 (* 2 a2))))))

;; H
  (assert (=> (not (< b2 a2)) (=> (not (= a2 b2)) (= o5 (__cdiv f3 2)))))

;; H
  (assert (= result34 (mk_int__ref c5)))

;; H
  (assert (= c8 o5))

;; H
  (assert
  (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x1)
  (= result35 y4)))

;; H
  (assert
  (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x1)
  (= y1 (fp.sqrt RNE x1))))

;; H
  (assert
  (=> (not (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x1))
  (and (= o6 (fp.mul RNE (fp #b0 #b10000000 #b00000000000000000000000)
  x1))
  (fp.isFinite32 (fp.mul RNE (fp #b0 #b10000000 #b00000000000000000000000)
  x1)))))

;; H
  (assert
  (=> (not (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x1))
  (= o7 (fp.neg o6))))

;; H
  (assert
  (=> (not (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x1))
  (= o8 (fp.sqrt RNE o7))))

;; H
  (assert
  (=> (not (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x1))
  (= result36 y4)))

;; H
  (assert
  (=> (not (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x1))
  (= y2 o8)))

;; H
  (assert
  (=> (not (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x1))
  (= y1 y2)))

;; H
  (assert
  (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x1) (= o10 x1)))

;; H
  (assert
  (=> (not (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x1))
  (and (= o9 (fp.mul RNE (fp #b0 #b10000000 #b00000000000000000000000)
  x1))
  (fp.isFinite32 (fp.mul RNE (fp #b0 #b10000000 #b00000000000000000000000)
  x1)))))

;; H
  (assert
  (=> (not (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x1))
  (= o10 (fp.neg o9))))

;; H
  (assert (= o11 (fp.sqrt RNE o10)))

;; H
  (assert (= result37 (mk_t__ref y1)))

;; H
  (assert (= y3 o11))

;; H
  (assert (and (= o12 (- c8 d2)) (in_range1 (- c8 d2))))

;; H
  (assert (= result39 (ite (= o12 0) true false)))

;; H
  (assert (=> (= result39 true) (= result38 (ite (< 2 e2) true false))))

;; H
  (assert (=> (not (= result39 true)) (= result38 (distinct 1 0))))

;; H
  (assert (and (= o13 (- c8 d2)) (in_range1 (- c8 d2))))

;; H
  (assert (= result41 (ite (= o13 0) true false)))

;; H
  (assert (=> (= result41 true) (= result40 (ite (< 2 e2) true false))))

;; H
  (assert (=> (not (= result41 true)) (= result40 (distinct 1 0))))

;; H
  (assert (=> (< a2 0) (= result42 (ite (< b2 0) true false))))

;; H
  (assert (=> (not (< a2 0)) (= result42 (distinct 1 0))))

;; H
  (assert
  (=>
  (=> (not (= letter1 65))
  (=> (not (= letter1 69))
  (=> (not (= letter1 73))
  (=> (not (= letter1 76))
  (=> (not (= letter1 85))
  (=> (not (= letter1 78))
  (=> (not (= letter1 79))
  (=> (not (= letter1 82)) (=> (not (= letter1 83)) (= letter1 84))))))))))
  (= o14 1)))

;; H
  (assert
  (=>
  (not
  (=> (not (= letter1 65))
  (=> (not (= letter1 69))
  (=> (not (= letter1 73))
  (=> (not (= letter1 76))
  (=> (not (= letter1 85))
  (=> (not (= letter1 78))
  (=> (not (= letter1 79))
  (=> (not (= letter1 82)) (=> (not (= letter1 83)) (= letter1 84)))))))))))
  (=> (=> (not (= letter1 68)) (= letter1 71)) (= o14 2))))

;; H
  (assert
  (=>
  (not
  (=> (not (= letter1 65))
  (=> (not (= letter1 69))
  (=> (not (= letter1 73))
  (=> (not (= letter1 76))
  (=> (not (= letter1 85))
  (=> (not (= letter1 78))
  (=> (not (= letter1 79))
  (=> (not (= letter1 82)) (=> (not (= letter1 83)) (= letter1 84)))))))))))
  (=> (not (=> (not (= letter1 68)) (= letter1 71)))
  (=>
  (=> (not (= letter1 66))
  (=> (not (= letter1 67)) (=> (not (= letter1 77)) (= letter1 80))))
  (= o14 3)))))

;; H
  (assert
  (=>
  (not
  (=> (not (= letter1 65))
  (=> (not (= letter1 69))
  (=> (not (= letter1 73))
  (=> (not (= letter1 76))
  (=> (not (= letter1 85))
  (=> (not (= letter1 78))
  (=> (not (= letter1 79))
  (=> (not (= letter1 82)) (=> (not (= letter1 83)) (= letter1 84)))))))))))
  (=> (not (=> (not (= letter1 68)) (= letter1 71)))
  (=>
  (not
  (=> (not (= letter1 66))
  (=> (not (= letter1 67)) (=> (not (= letter1 77)) (= letter1 80)))))
  (=>
  (=> (not (= letter1 70))
  (=> (not (= letter1 72))
  (=> (not (= letter1 86)) (=> (not (= letter1 87)) (= letter1 89)))))
  (= o14 4))))))

;; H
  (assert
  (=>
  (not
  (=> (not (= letter1 65))
  (=> (not (= letter1 69))
  (=> (not (= letter1 73))
  (=> (not (= letter1 76))
  (=> (not (= letter1 85))
  (=> (not (= letter1 78))
  (=> (not (= letter1 79))
  (=> (not (= letter1 82)) (=> (not (= letter1 83)) (= letter1 84)))))))))))
  (=> (not (=> (not (= letter1 68)) (= letter1 71)))
  (=>
  (not
  (=> (not (= letter1 66))
  (=> (not (= letter1 67)) (=> (not (= letter1 77)) (= letter1 80)))))
  (=>
  (not
  (=> (not (= letter1 70))
  (=> (not (= letter1 72))
  (=> (not (= letter1 86)) (=> (not (= letter1 87)) (= letter1 89))))))
  (=> (= letter1 75) (= o14 5)))))))

;; H
  (assert
  (=>
  (not
  (=> (not (= letter1 65))
  (=> (not (= letter1 69))
  (=> (not (= letter1 73))
  (=> (not (= letter1 76))
  (=> (not (= letter1 85))
  (=> (not (= letter1 78))
  (=> (not (= letter1 79))
  (=> (not (= letter1 82)) (=> (not (= letter1 83)) (= letter1 84)))))))))))
  (=> (not (=> (not (= letter1 68)) (= letter1 71)))
  (=>
  (not
  (=> (not (= letter1 66))
  (=> (not (= letter1 67)) (=> (not (= letter1 77)) (= letter1 80)))))
  (=>
  (not
  (=> (not (= letter1 70))
  (=> (not (= letter1 72))
  (=> (not (= letter1 86)) (=> (not (= letter1 87)) (= letter1 89))))))
  (=> (not (= letter1 75))
  (=> (=> (not (= letter1 74)) (= letter1 88)) (= o14 8))))))))

;; H
  (assert
  (=>
  (not
  (=> (not (= letter1 65))
  (=> (not (= letter1 69))
  (=> (not (= letter1 73))
  (=> (not (= letter1 76))
  (=> (not (= letter1 85))
  (=> (not (= letter1 78))
  (=> (not (= letter1 79))
  (=> (not (= letter1 82)) (=> (not (= letter1 83)) (= letter1 84)))))))))))
  (=> (not (=> (not (= letter1 68)) (= letter1 71)))
  (=>
  (not
  (=> (not (= letter1 66))
  (=> (not (= letter1 67)) (=> (not (= letter1 77)) (= letter1 80)))))
  (=>
  (not
  (=> (not (= letter1 70))
  (=> (not (= letter1 72))
  (=> (not (= letter1 86)) (=> (not (= letter1 87)) (= letter1 89))))))
  (=> (not (= letter1 75))
  (=> (not (=> (not (= letter1 74)) (= letter1 88))) (= o14 10))))))))

;; H
  (assert (= result43 (mk_int__ref value)))

;; H
  (assert (= value1 o14))

;; H
  (assert (= result44 (mk_int__ref sum)))

;; H
  (assert (= sum1 0))

;; H
  (assert (= temp___591 sum1))

;; H
  (assert (= temp___590 value1))

;; H
  (assert
  (and (=> (<= (- 2147483648) 2147483647) (in_range1 value2))
  (=> (<= (- 2147483648) 2147483647) (in_range1 sum2))))

;; H
  (assert (in_range3 ada__integer_text_io__get__2__item))

;; H
  (assert (= result45 (mk_int__ref value2)))

;; H
  (assert (= value3 ada__integer_text_io__get__2__item))

;; H
  (assert (= sum3 (mk_int__ref sum2)))

;; H
  (assert (= sum4 sum2))

;; H
  (assert (< value3 0))

;; H
  (assert (= sum5 sum3))

;; H
  (assert (= value4 (mk_int__ref value3)))

;; H
  (assert (= sum6 sum4))

;; H
  (assert (= value5 value3))

;; H
  (assert (= sum7 sum5))

;; H
  (assert (= value6 value4))

;; H
  (assert (= sum8 sum6))

;; H
  (assert (= value7 value5))

;; H
  (assert (= result46 (mk_t__ref approx)))

;; H
  (assert
  (= approx1 (fp.div RNE x1 (fp #b0 #b10000000 #b00000000000000000000000))))

;; H
  (assert
  (and (= o15 (fp.mul RNE approx1 approx1))
  (fp.isFinite32 (fp.mul RNE approx1 approx1))))

;; H
  (assert (= o16 (fp.sub RNE x1 o15)))

;; H
  (assert (and (= o17 o16) (fp.isFinite32 o16)))

;; H
  (assert (= o18 (fp.abs o17)))

;; H
  (assert (= result47 (ite (fp.lt tolerance o18) true false)))

;; H
  (assert (=> (= result47 true) (= temp___592 approx1)))

;; H
  (assert
  (=> (= result47 true)
  (and
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (fp.isFinite32 approx2))
  (fp.lt tolerance (fp.abs (fp.sub RNE x1 (fp.mul RNE approx2 approx2)))))))

;; H
  (assert
  (=> (= result47 true)
  (and (= o19 (fp.div RNE x1 approx2))
  (fp.isFinite32 (fp.div RNE x1 approx2)))))

;; H
  (assert (=> (= result47 true) (= o20 (fp.add RNE approx2 o19))))

;; H
  (assert (=> (= result47 true) (and (= o21 o20) (fp.isFinite32 o20))))

;; H
  (assert
  (=> (= result47 true)
  (= o22 (fp.mul RNE (fp #b0 #b01111110 #b00000000000000000000000) o21))))

;; H
  (assert (=> (= result47 true) (= result48 (mk_t__ref approx2))))

;; H
  (assert (=> (= result47 true) (= approx3 o22)))

;; H
  (assert
  (=> (= result47 true)
  (and (= o23 (fp.mul RNE approx3 approx3))
  (fp.isFinite32 (fp.mul RNE approx3 approx3)))))

;; H
  (assert (=> (= result47 true) (= o24 (fp.sub RNE x1 o23))))

;; H
  (assert (=> (= result47 true) (and (= o25 o24) (fp.isFinite32 o24))))

;; H
  (assert (=> (= result47 true) (= o26 (fp.abs o25))))

;; H
  (assert
  (=> (= result47 true) (= o27 (ite (fp.lt tolerance o26) true false))))

;; H
  (assert
  (=> (= result47 true) (= result49 (ite (not (= o27 true)) true false))))

;; H
  (assert (=> (= result47 true) (= result49 true)))

;; H
  (assert (=> (= result47 true) (= approx4 (mk_t__ref approx3))))

;; H
  (assert (=> (= result47 true) (= approx5 approx3)))

;; H
  (assert (=> (= result47 true) (= approx6 approx4)))

;; H
  (assert (=> (= result47 true) (= approx7 approx5)))

;; H
  (assert (=> (not (= result47 true)) (= approx6 (mk_t__ref approx1))))

;; H
  (assert (=> (not (= result47 true)) (= approx7 approx1)))

;; H
  (assert (= result50 (mk_int__ref count)))

;; H
  (assert (= count4 5))

;; H
  (assert (= result51 (mk_int__ref count4)))

;; H
  (assert (= count5 6))

;; H
  (assert (= result52 (mk_int__ref count5)))

;; H
  (assert (= count6 7))

;; H
  (assert (= result53 (mk_int__ref count6)))

;; H
  (assert (= count7 8))

;; H
  (assert (= result54 count1))

;; H
  (assert (= (let ((subject count1)) count8) 8))

;; H
  (assert (= result55 (let ((subject count1)) (mk_int__ref count8))))

;; H
  (assert (= (let ((subject count1)) count9) 7))

;; H
  (assert (= result56 (let ((subject count1)) (mk_int__ref count9))))

;; H
  (assert (= (let ((subject count1)) count10) 6))

;; H
  (assert (= result57 (let ((subject count1)) (mk_int__ref count10))))

;; H
  (assert (= (let ((subject count1)) count11) 5))

;; H
  (assert (= result58 (mk_int__ref a2)))

;; H
  (assert (= a3 9))

;; H
  (assert (= result59 (mk_int__ref b2)))

;; H
  (assert (= b3 2))

;; H
  (assert (= a3 r4b))

;; H
  (assert (in_range1 r4b))

;; H
  (assert (= b3 r5b))

;; H
  (assert (in_range1 r5b))

;; H
  (assert (= result60 count2))

;; H
  (assert (= (let ((subject count2)) count12) r4b))

;; H
  (assert
  (=>
  (and (<= r4b (let ((subject count2)) count12))
  (<= (let ((subject count2)) count12) r5b))
  (and (<= r4b (let ((subject count2)) count13))
  (<= (let ((subject count2)) count13) r5b))))

;; H
  (assert
  (=>
  (and (<= r4b (let ((subject count2)) count12))
  (<= (let ((subject count2)) count12) r5b))
  (= (let ((subject count2)) count13) r5b)))

;; H
  (assert
  (=>
  (and (<= r4b (let ((subject count2)) count12))
  (<= (let ((subject count2)) count12) r5b))
  (= count14 (let ((subject count2)) (mk_int__ref count13)))))

;; H
  (assert
  (=>
  (and (<= r4b (let ((subject count2)) count12))
  (<= (let ((subject count2)) count12) r5b)) (= count15 count13)))

;; H
  (assert
  (=>
  (and (<= r4b (let ((subject count2)) count12))
  (<= (let ((subject count2)) count12) r5b)) (= count16 count14)))

;; H
  (assert
  (=>
  (and (<= r4b (let ((subject count2)) count12))
  (<= (let ((subject count2)) count12) r5b)) (= count17 count15)))

;; H
  (assert
  (=>
  (not
  (and (<= r4b (let ((subject count2)) count12))
  (<= (let ((subject count2)) count12) r5b)))
  (= count16 (let ((subject count2)) (mk_int__ref count12)))))

;; H
  (assert
  (=>
  (not
  (and (<= r4b (let ((subject count2)) count12))
  (<= (let ((subject count2)) count12) r5b))) (= count17 count12)))

;; H
  (assert (= a3 r7b))

;; H
  (assert (in_range1 r7b))

;; H
  (assert (= b3 r8b))

;; H
  (assert (in_range1 r8b))

;; H
  (assert (= result61 count3))

;; H
  (assert (= (let ((subject count3)) count18) r8b))

;; H
  (assert
  (=>
  (and (<= r7b (let ((subject count3)) count18))
  (<= (let ((subject count3)) count18) r8b))
  (and (<= r7b (let ((subject count3)) count19))
  (<= (let ((subject count3)) count19) r8b))))

;; H
  (assert
  (=>
  (and (<= r7b (let ((subject count3)) count18))
  (<= (let ((subject count3)) count18) r8b))
  (= (let ((subject count3)) count19) r7b)))

;; H
  (assert
  (=>
  (and (<= r7b (let ((subject count3)) count18))
  (<= (let ((subject count3)) count18) r8b))
  (= count20 (let ((subject count3)) (mk_int__ref count19)))))

;; H
  (assert
  (=>
  (and (<= r7b (let ((subject count3)) count18))
  (<= (let ((subject count3)) count18) r8b)) (= count21 count19)))

;; H
  (assert
  (=>
  (and (<= r7b (let ((subject count3)) count18))
  (<= (let ((subject count3)) count18) r8b)) (= count22 count20)))

;; H
  (assert
  (=>
  (and (<= r7b (let ((subject count3)) count18))
  (<= (let ((subject count3)) count18) r8b)) (= count23 count21)))

;; H
  (assert
  (=>
  (not
  (and (<= r7b (let ((subject count3)) count18))
  (<= (let ((subject count3)) count18) r8b)))
  (= count22 (let ((subject count3)) (mk_int__ref count18)))))

;; H
  (assert
  (=>
  (not
  (and (<= r7b (let ((subject count3)) count18))
  (<= (let ((subject count3)) count18) r8b))) (= count23 count18)))

;; H
  (assert
  (and (=> (<= (- 2147483648) 2147483647) (in_range1 valve_setting1))
  (=> (<= (- 2147483648) 2147483647) (in_range1 temperature1))))

;; H
  (assert (in_range1 temperature2))

;; H
  (assert (= temperature2 c10b))

;; H
  (assert (in_range1 c10b))

(assert
;; WP_parameter_def
 ;; File "control_structures.adb", line 29, characters 0-0
  (not (in_range1 (* 2 c10b))))
(check-sat)
(exit)
