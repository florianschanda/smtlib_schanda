;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun pow2 (Int) Int)

(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-fun of_int (RoundingMode Int) Float32)

(declare-fun round (RoundingMode Real) Real)

(declare-fun max_int () Int)

(define-fun in_range ((x Real)) Bool (and
                                     (<= (- (* 33554430.0 10141204801825835211973625643008.0)) x)
                                     (<= x (* 33554430.0 10141204801825835211973625643008.0))))

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun no_overflow ((m RoundingMode) (x Real)) Bool (in_range
  (round m x)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(declare-fun sqrt (Real) Real)

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(declare-fun is_int1 (Float32) Bool)

(declare-datatypes () ((t__ref (mk_t__ref (t__content Float32)))))
(declare-sort float 0)

(declare-fun user_eq (float float) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Float32)

(declare-fun dummy () float)

(declare-datatypes () ((float__ref (mk_float__ref (float__content float)))))
(define-fun float__ref_2__projection ((a float__ref)) float (float__content
                                                            a))

(define-fun dynamic_invariant ((temp___expr_135 Float32)
  (temp___is_init_132 Bool) (temp___skip_constant_133 Bool)
  (temp___do_toplevel_134 Bool)) Bool (=>
                                      (or (= temp___is_init_132 true)
                                      (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                      (not (or (fp.isInfinite temp___expr_135) (fp.isNaN temp___expr_135)))))

(declare-sort t 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 14)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (t t) Bool)

(declare-fun dummy1 () t)

(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 t)))))
(define-fun t__ref___projection ((a t__ref1)) t (t__content1 a))

(define-fun dynamic_invariant1 ((temp___expr_141 Int)
  (temp___is_init_138 Bool) (temp___skip_constant_139 Bool)
  (temp___do_toplevel_140 Bool)) Bool (=>
                                      (or (= temp___is_init_138 true)
                                      (<= 0 14)) (in_range1 temp___expr_141)))

(declare-sort u 0)

(define-fun in_range2 ((x Float32)) Bool (and
                                         (not (or (fp.isInfinite x) (fp.isNaN x)))
                                         (and
                                         (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x)
                                         (fp.leq x (fp #b0 #b10000010 #b11000000000000000000000)))))

(declare-fun user_eq2 (u u) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE2 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Float32)

(declare-fun dummy2 () u)

(declare-datatypes () ((u__ref (mk_u__ref (u__content u)))))
(define-fun u__ref___projection ((a u__ref)) u (u__content a))

(define-fun dynamic_invariant2 ((temp___expr_147 Float32)
  (temp___is_init_144 Bool) (temp___skip_constant_145 Bool)
  (temp___do_toplevel_146 Bool)) Bool (=>
                                      (or (= temp___is_init_144 true)
                                      (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000010 #b11000000000000000000000)))
                                      (in_range2 temp___expr_147)))

(declare-fun x1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun x2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun x3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun x4 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun a (Int) Float32)

(declare-fun a__function_guard (Float32 Int) Bool)

(declare-fun c (Int) Float32)

(declare-fun c__function_guard (Float32 Int) Bool)

;; a__post_axiom
  (assert
  (forall ((x Int))
  (! (=> (dynamic_invariant1 x true true true)
     (let ((result (a x)))
     (and
     (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) result)
     (fp.leq result (fp #b0 #b10000010 #b11000000000000000000000)))
     (dynamic_invariant result true false true)))) :pattern ((a x)) )))

;; a__def_axiom
  (assert
  (forall ((x Int))
  (! (=> (dynamic_invariant1 x true true true) (= (a x) (c x))) :pattern (
  (a x)) )))

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-sort integer 0)

(define-fun in_range3 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq3 (integer integer) Bool)

(declare-fun dummy3 () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a1 integer__ref)) integer (integer__content
                                                                  a1))

(define-fun dynamic_invariant3 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range3 temp___expr_15)))

;; c__post_axiom
  (assert
  (forall ((x Int))
  (! (=> (dynamic_invariant3 x true true true) (dynamic_invariant (c x) true
     false true)) :pattern ((c x)) )))

;; c__def_axiom
  (assert
  (forall ((x Int))
  (! (=> (dynamic_invariant3 x true true true) (= (c x) (of_int RNE x))) :pattern (
  (c x)) )))

(declare-fun r1 () Float32)

(declare-fun r2 () Float32)

(declare-fun o () Float32)

(declare-fun o1 () Float32)

(declare-fun o2 () Float32)

(declare-fun result () Float32)

(declare-fun r11 () Float32)

(declare-fun result1 () Float32)

(declare-fun r21 () Float32)

;; H
  (assert (in_range1 x1))

;; H
  (assert (in_range1 x2))

;; H
  (assert (in_range1 x3))

;; H
  (assert (in_range1 x4))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (not (or (fp.isInfinite r1) (fp.isNaN r1)))))

;; H
  (assert
  (=>
  (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000010 #b11000000000000000000000))
  (in_range2 r2)))

;; H
  (assert (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (a x1)))

;; H
  (assert (fp.leq (a x1) (fp #b0 #b10000010 #b11000000000000000000000)))

;; H
  (assert (fp.leq (a x2) (fp #b0 #b10000010 #b11000000000000000000000)))

;; H
  (assert (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (a x2)))

;; H
  (assert
  (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (a x3))
  (fp.leq (a x3) (fp #b0 #b10000010 #b11000000000000000000000))))

;; H
  (assert
  (and (= o (a x4))
  (and (not (or (fp.isInfinite o) (fp.isNaN o)))
  (and (= o (c x4))
  (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) o)
  (fp.leq o (fp #b0 #b10000010 #b11000000000000000000000)))))))

;; H
  (assert (= result r1))

;; H
  (assert (= r11 o))

;; H
  (assert
  (and (= o1 (a x4))
  (and (not (or (fp.isInfinite o1) (fp.isNaN o1)))
  (and (= o1 (c x4))
  (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) o1)
  (fp.leq o1 (fp #b0 #b10000010 #b11000000000000000000000)))))))

;; H
  (assert (and (= o2 o1) (not (or (fp.isInfinite o1) (fp.isNaN o1)))))

;; H
  (assert (= result1 r2))

;; H
  (assert (= r21 o2))

;; H
  (assert (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) r11))

(assert
;; WP_parameter_def
 ;; File "sgs.ads", line 3, characters 0-0
  (not (fp.leq r11 (fp #b0 #b10000010 #b11000000000000000000000))))
(check-sat)
(exit)
