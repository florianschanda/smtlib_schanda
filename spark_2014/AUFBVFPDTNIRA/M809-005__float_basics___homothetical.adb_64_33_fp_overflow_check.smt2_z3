;; produced by z3_gnatprove.drv ;;
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun pow2 (Int) Int)

(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-fun of_int (RoundingMode Int) Float32)

(declare-fun round (RoundingMode Real) Real)

(declare-fun max_int () Int)

(define-fun in_range ((x Real)) Bool (and
                                     (<= (- (* 33554430.0 10141204801825835211973625643008.0)) x)
                                     (<= x (* 33554430.0 10141204801825835211973625643008.0))))

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun no_overflow ((m RoundingMode) (x Real)) Bool (in_range
  (round m x)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(declare-fun sqrt (Real) Real)

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(declare-fun is_int1 (Float32) Bool)

(declare-datatypes () ((t__ref (mk_t__ref (t__content Float32)))))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int1 ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range1 ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort float 0)

(declare-fun user_eq (float float) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE1 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Float32)

(declare-fun dummy () float)

(declare-datatypes () ((float__ref (mk_float__ref (float__content float)))))
(define-fun float__ref___projection ((a float__ref)) float (float__content a))

(declare-fun to_rep (float) Float32)

(declare-fun of_rep (Float32) float)

;; inversion_axiom
  (assert
  (forall ((x float)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x float))
  (! (not (or (fp.isInfinite (to_rep x)) (fp.isNaN (to_rep x)))) :pattern (
  (to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Float32))
  (! (=> (not (or (fp.isInfinite x) (fp.isNaN x))) (= (to_rep (of_rep x)) x)) :pattern (
  (to_rep (of_rep x))) )))

(declare-sort joint_index 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (joint_index joint_index) Bool)

(declare-fun dummy1 () joint_index)

(declare-datatypes ()
((joint_index__ref (mk_joint_index__ref (joint_index__content joint_index)))))
(define-fun joint_index__ref___projection ((a joint_index__ref)) joint_index
  (joint_index__content a))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int float))))))
(declare-fun slide ((Array Int float) Int Int) (Array Int float))

;; slide_eq
  (assert
  (forall ((a (Array Int float)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int float)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int float) Int Int (Array Int float) Int
  Int) (Array Int float))

;; concat_def
  (assert
  (forall ((a (Array Int float)) (b (Array Int float)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (float Int) (Array Int float))

;; singleton_def
  (assert
  (forall ((v float))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int float)) (a__first Int) (a__last Int)
  (b (Array Int float)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep (select a temp___idx_132)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int float)) (b (Array Int float)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun d () (Array Int float))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun kv () (Array Int float))

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun ka () (Array Int float))

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(define-fun dynamic_invariant ((temp___expr_51 Float32)
  (temp___is_init_48 Bool) (temp___skip_constant_49 Bool)
  (temp___do_toplevel_50 Bool)) Bool (=>
                                     (or (= temp___is_init_48 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                     (not (or (fp.isInfinite temp___expr_51) (fp.isNaN temp___expr_51)))))

(declare-fun adjust2triangle (Float32 Float32 Float32) Float32)

(declare-fun adjust2triangle__function_guard (Float32 Float32 Float32
  Float32) Bool)

;; adjust2triangle__post_axiom
  (assert
  (forall ((d1 Float32) (kv1 Float32) (ka1 Float32))
  (! (=>
     (and
     (and
     (and (dynamic_invariant d1 true true true) (dynamic_invariant kv1 true
     true true)) (dynamic_invariant ka1 true true true))
     (and
     (and (not (fp.eq d1 (fp #b0 #b00000000 #b00000000000000000000000)))
     (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) kv1))
     (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) ka1)))
     (let ((result (adjust2triangle d1 kv1 ka1)))
     (and
     (and (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) result)
     (fp.leq result kv1)) (dynamic_invariant result true false true)))) :pattern (
  (adjust2triangle d1 kv1 ka1)) )))

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS7 () Int)

(declare-sort t11b 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (t11b t11b) Bool)

(declare-fun dummy2 () t11b)

(declare-datatypes () ((t11b__ref (mk_t11b__ref (t11b__content t11b)))))
(define-fun t11b__ref___projection ((a t11b__ref)) t11b (t11b__content a))

(declare-fun attr__ATTRIBUTE_ADDRESS8 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS9 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS10 () Int)

(declare-fun homothetical__homothetical__lambda__aggregate_def (Float32) (Array Int float))

;; def_axiom
  (assert
  (forall ((temp___160 Float32))
  (forall ((temp___161 Int))
  (= (select (homothetical__homothetical__lambda__aggregate_def temp___160) temp___161)
  (of_rep temp___160)))))

(declare-fun homothetical__homothetical__upsilon__aggregate_def (Float32) (Array Int float))

;; def_axiom
  (assert
  (forall ((temp___163 Float32))
  (forall ((temp___164 Int))
  (= (select (homothetical__homothetical__upsilon__aggregate_def temp___163) temp___164)
  (of_rep temp___163)))))

(declare-fun homothetical__homothetical__kvp__aggregate_def (Float32) (Array Int float))

;; def_axiom
  (assert
  (forall ((temp___166 Float32))
  (forall ((temp___167 Int))
  (= (select (homothetical__homothetical__kvp__aggregate_def temp___166) temp___167)
  (of_rep temp___166)))))

(declare-fun temp___173 (Float32) (Array Int float))

;; def_axiom
  (assert
  (forall ((temp___175 Float32))
  (forall ((temp___176 Int))
  (= (select (temp___173 temp___175) temp___176) (of_rep temp___175)))))

(declare-fun temp___177 (Float32) (Array Int float))

;; def_axiom
  (assert
  (forall ((temp___179 Float32))
  (forall ((temp___180 Int))
  (= (select (temp___177 temp___179) temp___180) (of_rep temp___179)))))

(define-fun dynamic_invariant1 ((temp___expr_142 Int)
  (temp___is_init_139 Bool) (temp___skip_constant_140 Bool)
  (temp___do_toplevel_141 Bool)) Bool (=>
                                      (or (= temp___is_init_139 true)
                                      (<= 1 2)) (in_range2 temp___expr_142)))

(declare-fun kvmax () (Array Int float))

(declare-fun kamax () (Array Int float))

(declare-fun lambda () (Array Int float))

(declare-fun upsilon () (Array Int float))

(declare-fun kvp () (Array Int float))

(declare-fun i () Int)

(declare-fun i1 () Int)

(declare-fun j () Int)

(declare-fun temp___169 () (Array Int float))

(declare-fun temp___168 () Int)

(declare-fun j1 () Int)

(declare-fun o () Float32)

(declare-fun o1 () float)

(declare-fun o2 () (Array Int float))

(declare-fun temp___193 () (Array Int float))

(declare-fun temp___191 () (Array Int float))

(declare-fun temp___189 () (Array Int float))

(declare-fun temp___187 () (Array Int float))

(declare-fun temp___183 () (Array Int float))

(declare-fun temp___181 () (Array Int float))

(declare-fun o3 () Float32)

(declare-fun o4 () Float32)

(declare-fun o5 () Float32)

(declare-fun o6 () Float32)

(declare-fun o7 () Float32)

(declare-fun o8 () float)

(declare-fun o9 () (Array Int float))

(declare-fun o10 () Float32)

(declare-fun o11 () Float32)

(declare-fun o12 () Float32)

(declare-fun o13 () Float32)

(declare-fun o14 () Float32)

(declare-fun o15 () float)

(declare-fun o16 () (Array Int float))

(declare-fun o17 () Float32)

(declare-fun o18 () float)

(declare-fun o19 () (Array Int float))

(declare-fun o20 () Float32)

(declare-fun o21 () float)

(declare-fun o22 () (Array Int float))

(declare-fun j2 () Int)

(declare-fun result () (Array Int float))

(declare-fun lambda1 () (Array Int float))

(declare-fun result1 () (Array Int float))

(declare-fun upsilon1 () (Array Int float))

(declare-fun result2 () (Array Int float))

(declare-fun kvp1 () (Array Int float))

(declare-fun result3 () Int)

(declare-fun i2 () Int)

(declare-fun kvp2 () (Array Int float))

(declare-fun i3 () Int)

(declare-fun result4 () (Array Int float))

(declare-fun kvp3 () (Array Int float))

(declare-fun result5 () Int)

(declare-fun i4 () Int)

(declare-fun kvp4 () (Array Int float))

(declare-fun i5 () Int)

(declare-fun kvp5 () (Array Int float))

(declare-fun i6 () Int)

(declare-fun kvp6 () (Array Int float))

(declare-fun i7 () Int)

(declare-fun kvp7 () (Array Int float))

(declare-fun i8 () Int)

(declare-fun kvp8 () (Array Int float))

(declare-fun i9 () Int)

(declare-fun kvp9 () (Array Int float))

(declare-fun i10 () Int)

(declare-fun result6 () (Array Int float))

(declare-fun kvmax1 () (Array Int float))

(declare-fun result7 () map__ref)

(declare-fun kamax1 () (Array Int float))

(declare-fun result8 () int__ref)

(declare-fun i11 () Int)

(declare-fun kvmax2 () (Array Int float))

(declare-fun kamax2 () (Array Int float))

(declare-fun lambda2 () (Array Int float))

(declare-fun upsilon2 () (Array Int float))

(declare-fun i12 () Int)

(declare-fun j3 () Int)

(declare-fun result9 () int__ref)

(declare-fun j4 () Int)

(declare-fun lambda3 () (Array Int float))

(declare-fun upsilon3 () (Array Int float))

(declare-fun j5 () Int)

(declare-fun result10 () map__ref)

(declare-fun lambda4 () (Array Int float))

(declare-fun result11 () map__ref)

(declare-fun upsilon4 () (Array Int float))

(declare-fun lambda5 () map__ref)

(declare-fun upsilon5 () map__ref)

(declare-fun lambda6 () (Array Int float))

(declare-fun upsilon6 () (Array Int float))

(declare-fun lambda7 () map__ref)

(declare-fun upsilon7 () map__ref)

(declare-fun j6 () int__ref)

(declare-fun lambda8 () (Array Int float))

(declare-fun upsilon8 () (Array Int float))

(declare-fun j7 () Int)

(declare-fun lambda9 () map__ref)

(declare-fun upsilon9 () map__ref)

(declare-fun j8 () int__ref)

(declare-fun lambda10 () (Array Int float))

(declare-fun upsilon10 () (Array Int float))

(declare-fun j9 () Int)

(declare-fun result12 () map__ref)

(declare-fun kvmax3 () (Array Int float))

(declare-fun result13 () map__ref)

(declare-fun kamax3 () (Array Int float))

(declare-fun kvmax4 () map__ref)

(declare-fun kamax4 () map__ref)

(declare-fun lambda11 () map__ref)

(declare-fun upsilon11 () map__ref)

(declare-fun i13 () int__ref)

(declare-fun j10 () int__ref)

(declare-fun kvmax5 () (Array Int float))

(declare-fun kamax5 () (Array Int float))

(declare-fun lambda12 () (Array Int float))

(declare-fun upsilon12 () (Array Int float))

(declare-fun i14 () Int)

(declare-fun j11 () Int)

(declare-fun kvmax6 () map__ref)

(declare-fun kamax6 () map__ref)

(declare-fun lambda13 () map__ref)

(declare-fun upsilon13 () map__ref)

(declare-fun i15 () int__ref)

(declare-fun j12 () int__ref)

(declare-fun kvmax7 () (Array Int float))

(declare-fun kamax7 () (Array Int float))

(declare-fun lambda14 () (Array Int float))

(declare-fun upsilon14 () (Array Int float))

(declare-fun i16 () Int)

(declare-fun j13 () Int)

(declare-fun kvmax8 () map__ref)

(declare-fun kamax8 () map__ref)

(declare-fun lambda15 () map__ref)

(declare-fun upsilon15 () map__ref)

(declare-fun kvp10 () map__ref)

(declare-fun i17 () int__ref)

(declare-fun i18 () int__ref)

(declare-fun j14 () int__ref)

(declare-fun kvmax9 () (Array Int float))

(declare-fun kamax9 () (Array Int float))

(declare-fun lambda16 () (Array Int float))

(declare-fun upsilon16 () (Array Int float))

(declare-fun kvp11 () (Array Int float))

(declare-fun i19 () Int)

(declare-fun i20 () Int)

(declare-fun j15 () Int)

(define-fun i21 () int__ref (mk_int__ref i9))

(define-fun kvp12 () map__ref (mk_map__ref kvp8))

(define-fun i22 () int__ref (mk_int__ref i7))

(define-fun kvp13 () map__ref (mk_map__ref kvp6))

(define-fun result14 () int__ref (mk_int__ref result3))

(define-fun result15 () map__ref (mk_map__ref result2))

(define-fun result16 () map__ref (mk_map__ref result1))

(define-fun result17 () map__ref (mk_map__ref result))

(define-fun i23 () int__ref (mk_int__ref i1))

(define-fun i24 () int__ref (mk_int__ref i))

(define-fun kvp14 () map__ref (mk_map__ref kvp))

(define-fun upsilon17 () map__ref (mk_map__ref upsilon))

(define-fun lambda17 () map__ref (mk_map__ref lambda))

;; H
  (assert
  (forall ((j16 Int))
  (=> (and (<= 1 j16) (<= j16 2))
  (and
  (and
  (not (fp.eq (to_rep (select d j16)) (fp #b0 #b00000000 #b00000000000000000000000)))
  (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) (to_rep
                                                       (select kv j16))))
  (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) (to_rep
                                                       (select ka j16)))))))

;; H
  (assert (= result17 lambda17))

;; H
  (assert
  (= lambda1 (homothetical__homothetical__lambda__aggregate_def
             (fp #b0 #b01111111 #b00000000000000000000000))))

;; H
  (assert (= result16 upsilon17))

;; H
  (assert
  (= upsilon1 (homothetical__homothetical__upsilon__aggregate_def
              (fp #b0 #b01111111 #b00000000000000000000000))))

;; H
  (assert (= result15 kvp14))

;; H
  (assert
  (= kvp1 (homothetical__homothetical__kvp__aggregate_def
          (fp #b0 #b00000000 #b00000000000000000000000))))

;; H
  (assert
  (forall ((i25 Int))
  (=> (and (<= 1 i25) (<= i25 2))
  (and
  (and
  (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) (to_rep
                                                       (select ka i25)))
  (not (fp.eq (to_rep (select kvp8 i25)) (fp #b0 #b00000000 #b00000000000000000000000))))
  (not (fp.eq (to_rep (select d i25)) (fp #b0 #b00000000 #b00000000000000000000000)))))))

;; H
  (assert (= result8 i23))

;; H
  (assert (= i11 1))

;; H
  (assert (<= 1 i11))

;; H
  (assert (<= i11 2))

;; H
  (assert
  (and
  (and
  (and
  (and
  (forall ((temp___188 Int))
  (=> (and (<= 1 temp___188) (<= temp___188 2))
  (=> (<= i12 temp___188)
  (= (select kvmax2 temp___188) (select kvmax1 temp___188)))))
  (forall ((temp___190 Int))
  (=> (and (<= 1 temp___190) (<= temp___190 2))
  (=> (<= i12 temp___190)
  (= (select lambda2 temp___190) (select lambda1 temp___190))))))
  (forall ((temp___192 Int))
  (=> (and (<= 1 temp___192) (<= temp___192 2))
  (=> (<= i12 temp___192)
  (= (select kamax2 temp___192) (select kamax1 temp___192))))))
  (forall ((temp___194 Int))
  (=> (and (<= 1 temp___194) (<= temp___194 2))
  (=> (<= i12 temp___194)
  (= (select upsilon2 temp___194) (select upsilon1 temp___194))))))
  (and (<= 1 i12) (<= i12 2))))

;; H
  (assert (= result9 (mk_int__ref j3)))

;; H
  (assert (= j4 1))

;; H
  (assert (=> (and (<= 1 j4) (<= j4 2)) (= temp___183 upsilon2)))

;; H
  (assert (=> (and (<= 1 j4) (<= j4 2)) (= temp___181 lambda2)))

;; H
  (assert
  (=> (and (<= 1 j4) (<= j4 2))
  (and
  (and
  (forall ((temp___182 Int))
  (=> (and (<= 1 temp___182) (<= temp___182 2))
  (=> (not (= i12 temp___182))
  (= (select lambda3 temp___182) (select temp___181 temp___182)))))
  (forall ((temp___184 Int))
  (=> (and (<= 1 temp___184) (<= temp___184 2))
  (=> (not (= i12 temp___184))
  (= (select upsilon3 temp___184) (select temp___183 temp___184))))))
  (and (<= 1 j5) (<= j5 2)))))

;; H
  (assert
  (=> (and (<= 1 j4) (<= j4 2))
  (=> (not (= i12 j5))
  (and
  (= o4 (fp.mul RNE (to_rep (select kvp8 i12)) (fp.abs (to_rep (select d j5)))))
  (not (or (fp.isInfinite (fp.mul RNE (to_rep (select kvp8 i12)) (fp.abs
  (to_rep (select d j5))))) (fp.isNaN (fp.mul RNE (to_rep (select kvp8 i12)) (fp.abs
  (to_rep (select d j5)))))))))))

;; H
  (assert
  (=> (and (<= 1 j4) (<= j4 2))
  (=> (not (= i12 j5))
  (and
  (= o3 (fp.mul RNE (to_rep (select kvp8 j5)) (fp.abs (to_rep (select d i12)))))
  (not (or (fp.isInfinite (fp.mul RNE (to_rep (select kvp8 j5)) (fp.abs
  (to_rep (select d i12))))) (fp.isNaN (fp.mul RNE (to_rep (select kvp8 j5)) (fp.abs
  (to_rep (select d i12)))))))))))

;; H
  (assert
  (=> (and (<= 1 j4) (<= j4 2))
  (=> (not (= i12 j5)) (= o5 (fp.div RNE o3 o4)))))

;; H
  (assert
  (=> (and (<= 1 j4) (<= j4 2))
  (=> (not (= i12 j5))
  (and (= o6 o5) (not (or (fp.isInfinite o5) (fp.isNaN o5)))))))

;; H
  (assert
  (=> (and (<= 1 j4) (<= j4 2))
  (=> (not (= i12 j5)) (= o7 (fp.min (to_rep (select lambda3 i12)) o6)))))

;; H
  (assert
  (=> (and (<= 1 j4) (<= j4 2)) (=> (not (= i12 j5)) (= (to_rep o8) o7))))

;; H
  (assert
  (=> (and (<= 1 j4) (<= j4 2))
  (=> (not (= i12 j5)) (= o9 (store lambda3 i12 o8)))))

;; H
  (assert
  (=> (and (<= 1 j4) (<= j4 2))
  (=> (not (= i12 j5)) (= result10 (mk_map__ref lambda3)))))

;; H
  (assert
  (=> (and (<= 1 j4) (<= j4 2)) (=> (not (= i12 j5)) (= lambda4 o9))))

;; H
  (assert
  (=> (and (<= 1 j4) (<= j4 2))
  (=> (not (= i12 j5))
  (and
  (= o11 (fp.mul RNE (to_rep (select ka i12)) (fp.abs (to_rep (select d j5)))))
  (not (or (fp.isInfinite (fp.mul RNE (to_rep (select ka i12)) (fp.abs
  (to_rep (select d j5))))) (fp.isNaN (fp.mul RNE (to_rep (select ka i12)) (fp.abs
  (to_rep (select d j5)))))))))))

;; H
  (assert
  (=> (and (<= 1 j4) (<= j4 2))
  (=> (not (= i12 j5))
  (and
  (= o10 (fp.mul RNE (to_rep (select ka j5)) (fp.abs (to_rep (select d i12)))))
  (not (or (fp.isInfinite (fp.mul RNE (to_rep (select ka j5)) (fp.abs
  (to_rep (select d i12))))) (fp.isNaN (fp.mul RNE (to_rep (select ka j5)) (fp.abs
  (to_rep (select d i12)))))))))))

;; H
  (assert
  (=> (and (<= 1 j4) (<= j4 2))
  (=> (not (= i12 j5)) (= o12 (fp.div RNE o10 o11)))))

;; H
  (assert
  (=> (and (<= 1 j4) (<= j4 2))
  (=> (not (= i12 j5))
  (and (= o13 o12) (not (or (fp.isInfinite o12) (fp.isNaN o12)))))))

;; H
  (assert
  (=> (and (<= 1 j4) (<= j4 2))
  (=> (not (= i12 j5)) (= o14 (fp.min (to_rep (select upsilon3 i12)) o13)))))

;; H
  (assert
  (=> (and (<= 1 j4) (<= j4 2)) (=> (not (= i12 j5)) (= (to_rep o15) o14))))

;; H
  (assert
  (=> (and (<= 1 j4) (<= j4 2))
  (=> (not (= i12 j5)) (= o16 (store upsilon3 i12 o15)))))

;; H
  (assert
  (=> (and (<= 1 j4) (<= j4 2))
  (=> (not (= i12 j5)) (= result11 (mk_map__ref upsilon3)))))

;; H
  (assert
  (=> (and (<= 1 j4) (<= j4 2)) (=> (not (= i12 j5)) (= upsilon4 o16))))

;; H
  (assert
  (=> (and (<= 1 j4) (<= j4 2))
  (=> (not (= i12 j5)) (= upsilon5 (mk_map__ref upsilon4)))))

;; H
  (assert
  (=> (and (<= 1 j4) (<= j4 2))
  (=> (not (= i12 j5)) (= lambda5 (mk_map__ref lambda4)))))

;; H
  (assert
  (=> (and (<= 1 j4) (<= j4 2)) (=> (not (= i12 j5)) (= upsilon6 upsilon4))))

;; H
  (assert
  (=> (and (<= 1 j4) (<= j4 2)) (=> (not (= i12 j5)) (= lambda6 lambda4))))

;; H
  (assert
  (=> (and (<= 1 j4) (<= j4 2))
  (=> (= i12 j5) (= upsilon5 (mk_map__ref upsilon3)))))

;; H
  (assert
  (=> (and (<= 1 j4) (<= j4 2))
  (=> (= i12 j5) (= lambda5 (mk_map__ref lambda3)))))

;; H
  (assert
  (=> (and (<= 1 j4) (<= j4 2)) (=> (= i12 j5) (= upsilon6 upsilon3))))

;; H
  (assert (=> (and (<= 1 j4) (<= j4 2)) (=> (= i12 j5) (= lambda6 lambda3))))

;; H
  (assert (=> (and (<= 1 j4) (<= j4 2)) (= j5 2)))

;; H
  (assert (=> (and (<= 1 j4) (<= j4 2)) (= j6 (mk_int__ref j5))))

;; H
  (assert (=> (and (<= 1 j4) (<= j4 2)) (= upsilon7 upsilon5)))

;; H
  (assert (=> (and (<= 1 j4) (<= j4 2)) (= lambda7 lambda5)))

;; H
  (assert (=> (and (<= 1 j4) (<= j4 2)) (= j7 j5)))

;; H
  (assert (=> (and (<= 1 j4) (<= j4 2)) (= upsilon8 upsilon6)))

;; H
  (assert (=> (and (<= 1 j4) (<= j4 2)) (= lambda8 lambda6)))

;; H
  (assert (=> (and (<= 1 j4) (<= j4 2)) (= j8 j6)))

;; H
  (assert (=> (and (<= 1 j4) (<= j4 2)) (= upsilon9 upsilon7)))

;; H
  (assert (=> (and (<= 1 j4) (<= j4 2)) (= lambda9 lambda7)))

;; H
  (assert (=> (and (<= 1 j4) (<= j4 2)) (= j9 j7)))

;; H
  (assert (=> (and (<= 1 j4) (<= j4 2)) (= upsilon10 upsilon8)))

;; H
  (assert (=> (and (<= 1 j4) (<= j4 2)) (= lambda10 lambda8)))

;; H
  (assert (=> (not (and (<= 1 j4) (<= j4 2))) (= j8 (mk_int__ref j4))))

;; H
  (assert
  (=> (not (and (<= 1 j4) (<= j4 2))) (= upsilon9 (mk_map__ref upsilon2))))

;; H
  (assert
  (=> (not (and (<= 1 j4) (<= j4 2))) (= lambda9 (mk_map__ref lambda2))))

;; H
  (assert (=> (not (and (<= 1 j4) (<= j4 2))) (= j9 j4)))

;; H
  (assert (=> (not (and (<= 1 j4) (<= j4 2))) (= upsilon10 upsilon2)))

;; H
  (assert (=> (not (and (<= 1 j4) (<= j4 2))) (= lambda10 lambda2)))

(assert
;; WP_parameter_def
 ;; File "homothetical.ads", line 5, characters 0-0
  (not
  (not (or (fp.isInfinite (fp.mul RNE (to_rep
                                      (select (map__content lambda9)
                                      i12)) (to_rep (select kvp8 i12)))) (fp.isNaN (fp.mul RNE
  (to_rep (select (map__content lambda9) i12)) (to_rep (select kvp8 i12))))))))
(check-sat)
(exit)
