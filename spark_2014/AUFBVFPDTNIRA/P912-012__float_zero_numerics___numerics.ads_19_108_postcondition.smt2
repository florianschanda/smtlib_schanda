;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun pow2 (Int) Int)

(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                (fp.isPositive x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                 (fp.isNegative x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x)
                                            (fp.isPositive x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x)
                                             (fp.isNegative x)))

(declare-fun of_int (RoundingMode Int) Float32)

(declare-fun to_int1 (RoundingMode Float32) Int)

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y))
                    (and (fp.isNegative x) (fp.isNegative y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y))
                    (and (fp.isNegative x) (fp.isPositive y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z))
                    (=> (diff_sign x y) (fp.isNegative z))))

(define-fun sqr ((x Real)) Real (* x x))

(declare-fun sqrt (Real) Real)

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r))
                 (and (fp.isNegative x) (< r 0.0))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content Float32)))))
(declare-sort tt_base_floatB 0)

(declare-fun user_eq (tt_base_floatB tt_base_floatB) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Float32)

(declare-const dummy tt_base_floatB)

(declare-datatypes ()
((tt_base_floatB__ref
 (mk_tt_base_floatB__ref (tt_base_floatB__content tt_base_floatB)))))
(define-fun tt_base_floatB__ref___projection ((a tt_base_floatB__ref)) tt_base_floatB
  (tt_base_floatB__content a))

(declare-sort t_float 0)

(declare-fun user_eq1 (t_float t_float) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE1 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Float32)

(declare-const dummy1 t_float)

(declare-datatypes ()
((t_float__ref (mk_t_float__ref (t_float__content t_float)))))
(define-fun t_float__ref___projection ((a t_float__ref)) t_float (t_float__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_141 Float32)
  (temp___is_init_138 Bool) (temp___skip_constant_139 Bool)
  (temp___do_toplevel_140 Bool)) Bool (=>
                                      (or (= temp___is_init_138 true)
                                      (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                      (fp.isFinite32 temp___expr_141)))

(declare-const left Float32)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const right Float32)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const numerics__Odivide__result Float32)

(declare-const o Float32)

(declare-const o1 Float32)

(declare-const result Float32)

(declare-const numerics__Odivide__result1 Float32)

(declare-const numerics__Odivide__result2 Float32)

(declare-const numerics__Odivide__result3 Float32)

(declare-const numerics__Odivide__result4 Float32)

(declare-const numerics__Odivide__result5 Float32)

(declare-const result1 Float32)

;; H
  (assert (fp.isFinite32 left))

;; H
  (assert (fp.isFinite32 right))

;; H
  (assert (not (fp.eq right (fp #b0 #b00000000 #b00000000000000000000000))))

;; H
  (assert (= numerics__Odivide__result1 numerics__Odivide__result2))

;; H
  (assert (= numerics__Odivide__result3 numerics__Odivide__result1))

;; H
  (assert
  (and (= o (fp.div RNE left right)) (fp.isFinite32 (fp.div RNE left right))))

;; H
  (assert (= (mk_t__ref result) (mk_t__ref numerics__Odivide__result)))

;; H
  (assert (= numerics__Odivide__result1 o))

;; H
  (assert
  (= (mk_t__ref numerics__Odivide__result4) (mk_t__ref
                                            numerics__Odivide__result2)))

;; H
  (assert (= numerics__Odivide__result5 numerics__Odivide__result3))

;; H
  (assert (= result1 numerics__Odivide__result4))

(assert
;; WP_parameter_def
 ;; File "numerics.ads", line 7, characters 0-0
  (not (fp.eq numerics__Odivide__result4 (fp.div RNE left right))))
(check-sat)
(exit)
