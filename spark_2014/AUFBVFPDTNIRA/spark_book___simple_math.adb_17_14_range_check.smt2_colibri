;; produced by colibri_gnatprove.drv ;;
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(define-fun mod1 ((x Int)
  (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 1000000)))

(define-fun dynamic_invariant ((temp___expr_135 Int)
  (temp___is_init_132 Bool) (temp___skip_constant_133 Bool)
  (temp___do_toplevel_134 Bool)) Bool (=>
                                      (or (= temp___is_init_132 true)
                                      (<= 0 1000000)) (in_range
                                      temp___expr_135)))

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 1000)))

(declare-fun n () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(define-fun dynamic_invariant1 ((temp___expr_141 Int)
  (temp___is_init_138 Bool) (temp___skip_constant_139 Bool)
  (temp___do_toplevel_140 Bool)) Bool (=>
                                      (or (= temp___is_init_138 true)
                                      (<= 0 1000)) (in_range1
                                      temp___expr_141)))

(declare-fun q () Int)

(declare-fun r () Int)

(declare-fun temp___145 () Int)

(declare-fun temp___144 () Int)

(declare-fun o () Int)

(declare-fun o1 () Int)

(declare-fun r1 () Int)

(declare-fun result () Int)

(declare-fun q1 () Int)

(declare-fun q2 () Int)

(declare-fun r2 () Int)

(declare-fun result1 () Int)

(declare-fun r3 () Int)

(declare-fun q3 () Int)

(declare-fun q4 () Int)

(declare-fun q5 () Int)

(declare-fun r4 () Int)

(declare-fun q6 () Int)

(declare-fun r5 () Int)

(declare-fun q7 () Int)

(declare-fun r6 () Int)

(declare-fun q8 () Int)

(declare-fun r7 () Int)

(declare-fun q9 () Int)

(declare-fun r8 () Int)

(declare-fun q10 () Int)

(declare-fun r9 () Int)

;; H
  (assert (in_range n))

;; H
  (assert (=> (<= 0 1000000) (in_range q)))

;; H
  (assert (=> (<= 0 1000000) (in_range r)))

;; H
  (assert (= result q))

;; H
  (assert (= q1 n))

;; H
  (assert (=> (< 0 q1) (= temp___145 q1)))

;; H
  (assert (=> (< 0 q1) (= temp___144 r)))

;; H
  (assert
  (=> (< 0 q1)
  (and (=> (<= 0 1000000) (in_range r2)) (=> (<= 0 1000000) (in_range q2)))))

(declare-fun abstr () Int)

;; H
  (assert (=> (< 0 q1) (and (= o abstr) (in_range abstr))))

;; H
  (assert (=> (< 0 q1) (= r2 result1)))

;; H
  (assert (=> (< 0 q1) (= r3 o)))

;; H
  (assert (=> (< 0 q1) (= q2 q3)))

;; H
  (assert (=> (< 0 q1) (= q4 q2)))

;; H
  (assert (=> (< 0 q1) (<= q2 r3)))

;; H
  (assert (=> (< 0 q1) (= r3 r4)))

;; H
  (assert (=> (< 0 q1) (= r5 r3)))

;; H
  (assert (=> (< 0 q1) (= q6 q4)))

;; H
  (assert (=> (< 0 q1) (= r7 r5)))

;; H
  (assert (=> (< 0 q1) (= q8 q6)))

;; H
  (assert (=> (< 0 q1) (= r9 r7)))

;; H
  (assert (=> (< 0 q1) (= q10 q8)))

;; H
  (assert (=> (not (< 0 q1)) (= q1 q9)))

;; H
  (assert (=> (not (< 0 q1)) (= r9 r1)))

;; H
  (assert (=> (not (< 0 q1)) (= q10 q1)))

(assert
;; WP_parameter_def
 ;; File "simple_math.ads", line 6, characters 0-0
  (not (in_range1 q9)))
(check-sat)
(exit)
