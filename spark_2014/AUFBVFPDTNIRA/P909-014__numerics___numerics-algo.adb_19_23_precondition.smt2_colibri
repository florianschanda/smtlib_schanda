;; produced by colibri_gnatprove.drv ;;
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-fun max_int () Int)

(define-fun in_range ((x Real)) Bool (and
                                     (<= (- (* 33554430.0 10141204801825835211973625643008.0)) x)
                                     (<= x (* 33554430.0 10141204801825835211973625643008.0))))

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(declare-fun abstr () Real)

(define-fun no_overflow ((m RoundingMode) (x Real)) Bool (in_range abstr))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(define-fun dynamic_invariant ((temp___expr_141 Float32)
  (temp___is_init_138 Bool) (temp___skip_constant_139 Bool)
  (temp___do_toplevel_140 Bool)) Bool (=>
                                      (or (= temp___is_init_138 true)
                                      (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                      (not (or (fp.isInfinite temp___expr_141) (fp.isNaN temp___expr_141)))))

(declare-fun x () Float32)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun x1 () Float32)

(declare-fun x2 () Float32)

(declare-fun x3 () Float32)

(declare-fun x4 () Float32)

(declare-fun x5 () Float32)

(declare-fun o () Float32)

(declare-fun o1 () Float32)

(declare-fun o2 () Float32)

(declare-fun o3 () Float32)

(declare-fun o4 () Float32)

(declare-fun o5 () Float32)

(declare-fun result () Float32)

(declare-fun x11 () Float32)

(declare-fun result1 () Float32)

(declare-fun x12 () Float32)

(declare-fun result2 () Float32)

(declare-fun x21 () Float32)

(declare-fun result3 () Float32)

(declare-fun x22 () Float32)

(declare-fun result4 () Float32)

(declare-fun x31 () Float32)

(declare-fun result5 () Float32)

(declare-fun x32 () Float32)

(declare-fun result6 () Float32)

(declare-fun x41 () Float32)

(declare-fun result7 () Float32)

(declare-fun x42 () Float32)

;; H
  (assert (not (or (fp.isInfinite x) (fp.isNaN x))))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (not (or (fp.isInfinite x1) (fp.isNaN x1)))))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (not (or (fp.isInfinite x2) (fp.isNaN x2)))))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (not (or (fp.isInfinite x3) (fp.isNaN x3)))))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (not (or (fp.isInfinite x4) (fp.isNaN x4)))))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (not (or (fp.isInfinite x5) (fp.isNaN x5)))))

;; H
  (assert (= result x1))

;; H
  (assert (= x11 (fp #b0 #b11111110 #b11111111111111111111111)))

(declare-fun abstr1 () Float32)

;; H
  (assert
  (and (= o abstr1)
  (and (not (or (fp.isInfinite o) (fp.isNaN o))) (= o (fp.add RNE x11 x11)))))

;; H
  (assert (= result1 x11))

;; H
  (assert (= x12 o))

;; H
  (assert (= result2 x2))

;; H
  (assert (= x21 (fp #b0 #b11111110 #b11111111111111111111111)))

(declare-fun abstr2 () Float32)

;; H
  (assert
  (and (= o1 abstr2)
  (and (not (or (fp.isInfinite o1) (fp.isNaN o1)))
  (= o1 (fp.sub RNE (fp.neg x21) x21)))))

;; H
  (assert (= result3 x21))

;; H
  (assert (= x22 o1))

;; H
  (assert (= result4 x3))

;; H
  (assert (= x31 (fp #b0 #b11111110 #b11111111111111111111111)))

(declare-fun abstr3 () Float32)

;; H
  (assert
  (and (= o2 abstr3)
  (and (not (or (fp.isInfinite o2) (fp.isNaN o2)))
  (= o2 (fp.mul RNE x31 x31)))))

;; H
  (assert (= result5 x31))

;; H
  (assert (= x32 o2))

;; H
  (assert (= result6 x4))

;; H
  (assert (= x41 (fp #b0 #b10000000 #b10000000000000000000000)))

(assert
;; WP_parameter_def
 ;; File "numerics-algo.ads", line 10, characters 0-0
  (not true))
(check-sat)
(exit)
