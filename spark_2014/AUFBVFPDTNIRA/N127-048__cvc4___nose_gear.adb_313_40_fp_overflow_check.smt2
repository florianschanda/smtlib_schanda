;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite64 ((x Float64)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral64 ((x Float64)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun lsr ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun asr ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun lsl ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_right1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_left1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun pow2 (Int) Int)

(define-fun to_int1 ((x (_ BitVec 16))) Int (ite (bvsge x (_ bv0 16))
                                            (bv2nat x)
                                            (- (- 65536 (bv2nat x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 65535)))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 16))))))
(declare-fun power ((_ BitVec 16) Int) (_ BitVec 16))

(define-fun bv_min ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) y x))

(define-fun is_plus_infinity ((x Float64)) Bool (and (fp.isInfinite x)
                                                (fp.isPositive x)))

(define-fun is_minus_infinity ((x Float64)) Bool (and (fp.isInfinite x)
                                                 (fp.isNegative x)))

(define-fun is_plus_zero ((x Float64)) Bool (and (fp.isZero x)
                                            (fp.isPositive x)))

(define-fun is_minus_zero ((x Float64)) Bool (and (fp.isZero x)
                                             (fp.isNegative x)))

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 9007199254740992) i)
                                             (<= i 9007199254740992)))

(define-fun same_sign ((x Float64)
  (y Float64)) Bool (or (and (fp.isPositive x) (fp.isPositive y))
                    (and (fp.isNegative x) (fp.isNegative y))))

(define-fun diff_sign ((x Float64)
  (y Float64)) Bool (or (and (fp.isPositive x) (fp.isNegative y))
                    (and (fp.isNegative x) (fp.isPositive y))))

(define-fun product_sign ((z Float64) (x Float64)
  (y Float64)) Bool (and (=> (same_sign x y) (fp.isPositive z))
                    (=> (diff_sign x y) (fp.isNegative z))))

(define-fun sqr ((x Real)) Real (* x x))

(declare-fun sqrt1 (Real) Real)

(define-fun same_sign_real ((x Float64)
  (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r))
                 (and (fp.isNegative x) (< r 0.0))))

(declare-fun lsr1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_right2 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left2 ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun to_int2 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8))
                                           (bv2nat x) (- (- 256 (bv2nat x)))))

(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 255)))

(declare-fun lsr2 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun asr2 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun lsl2 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_right3 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_left3 ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun to_int3 ((x (_ BitVec 32))) Int (ite (bvsge x (_ bv0 32))
                                            (bv2nat x)
                                            (- (- 4294967296 (bv2nat x)))))

(define-fun uint_in_range2 ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

(declare-fun lsr3 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun asr3 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun lsl3 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_right4 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_left4 ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun to_int4 ((x (_ BitVec 64))) Int (ite (bvsge x (_ bv0 64))
                                            (bv2nat x)
                                            (- (- 18446744073709551616 (bv2nat x)))))

(define-fun uint_in_range3 ((i Int)) Bool (and (<= 0 i)
                                          (<= i 18446744073709551615)))

(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 Float64)))))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort long_float 0)

(declare-fun user_eq (long_float long_float) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE1 (Float64) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Float64)

(declare-const dummy long_float)

(declare-datatypes ()
((long_float__ref (mk_long_float__ref (long_float__content long_float)))))
(define-fun long_float__ref___projection ((a long_float__ref)) long_float
  (long_float__content a))

(define-fun dynamic_invariant ((temp___expr_67 Float64)
  (temp___is_init_63 Bool) (temp___skip_constant_64 Bool)
  (temp___do_toplevel_65 Bool)
  (temp___do_typ_inv_66 Bool)) Bool (=>
                                    (or (= temp___is_init_63 true)
                                    (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
                                    (fp.isFinite64 temp___expr_67)))

(declare-const validity_period Float64)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-sort tinteger_32B 0)

(declare-fun tinteger_32Bqtint (tinteger_32B) Int)

;; tinteger_32B'axiom
  (assert
  (forall ((i tinteger_32B))
  (and (<= (- 2147483648) (tinteger_32Bqtint i))
  (<= (tinteger_32Bqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (tinteger_32B tinteger_32B) Bool)

(declare-const dummy1 tinteger_32B)

(declare-datatypes ()
((tinteger_32B__ref
 (mk_tinteger_32B__ref (tinteger_32B__content tinteger_32B)))))
(define-fun tinteger_32B__ref___projection ((a tinteger_32B__ref)) tinteger_32B
  (tinteger_32B__content a))

(declare-sort integer_32 0)

(declare-fun integer_32qtint (integer_32) Int)

;; integer_32'axiom
  (assert
  (forall ((i integer_32))
  (and (<= (- 2147483648) (integer_32qtint i))
  (<= (integer_32qtint i) 2147483647))))

(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (integer_32 integer_32) Bool)

(declare-const dummy2 integer_32)

(declare-datatypes ()
((integer_32__ref (mk_integer_32__ref (integer_32__content integer_32)))))
(define-fun integer_32__ref___2__projection ((a integer_32__ref)) integer_32
  (integer_32__content a))

(define-fun dynamic_invariant1 ((temp___expr_172 Int)
  (temp___is_init_168 Bool) (temp___skip_constant_169 Bool)
  (temp___do_toplevel_170 Bool)
  (temp___do_typ_inv_171 Bool)) Bool (=>
                                     (or (= temp___is_init_168 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range2 temp___expr_172)))

(declare-sort unsigned_16 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 16))

(declare-fun attr__ATTRIBUTE_IMAGE4 ((_ BitVec 16)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) (_ BitVec 16))

(declare-fun user_eq3 (unsigned_16 unsigned_16) Bool)

(declare-const dummy3 unsigned_16)

(declare-datatypes ()
((unsigned_16__ref (mk_unsigned_16__ref (unsigned_16__content unsigned_16)))))
(define-fun unsigned_16__ref___projection ((a unsigned_16__ref)) unsigned_16
  (unsigned_16__content a))

(define-fun dynamic_invariant2 ((temp___expr_193 (_ BitVec 16))
  (temp___is_init_189 Bool) (temp___skip_constant_190 Bool)
  (temp___do_toplevel_191 Bool) (temp___do_typ_inv_192 Bool)) Bool true)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const ngrotations (_ BitVec 16))

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const ngclicktime (_ BitVec 16))

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const millisecs (_ BitVec 16))

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(declare-const attr__ATTRIBUTE_ADDRESS11 Int)

(declare-const attr__ATTRIBUTE_ADDRESS12 Int)

(declare-const attr__ATTRIBUTE_ADDRESS13 Int)

(declare-const attr__ATTRIBUTE_ADDRESS14 Int)

(declare-const attr__ATTRIBUTE_ADDRESS15 Int)

(declare-const attr__ATTRIBUTE_ADDRESS16 Int)

(declare-const attr__ATTRIBUTE_ADDRESS17 Int)

(declare-const attr__ATTRIBUTE_ADDRESS18 Int)

(declare-const attr__ATTRIBUTE_ADDRESS19 Int)

(declare-const attr__ATTRIBUTE_ADDRESS20 Int)

(declare-const attr__ATTRIBUTE_ADDRESS21 Int)

(declare-const attr__ATTRIBUTE_ADDRESS22 Int)

(declare-const attr__ATTRIBUTE_ADDRESS23 Int)

(declare-const attr__ATTRIBUTE_ADDRESS24 Int)

(declare-const attr__ATTRIBUTE_ADDRESS25 Int)

(declare-const attr__ATTRIBUTE_ADDRESS26 Int)

(declare-const attr__ATTRIBUTE_ADDRESS27 Int)

(declare-const attr__ATTRIBUTE_ADDRESS28 Int)

(declare-const attr__ATTRIBUTE_ADDRESS29 Int)

(declare-const attr__ATTRIBUTE_ADDRESS30 Int)

(declare-const attr__ATTRIBUTE_ADDRESS31 Int)

(declare-const attr__ATTRIBUTE_ADDRESS32 Int)

(declare-const attr__ATTRIBUTE_ADDRESS33 Int)

(declare-const attr__ATTRIBUTE_ADDRESS34 Int)

(declare-const attr__ATTRIBUTE_ADDRESS35 Int)

(declare-const attr__ATTRIBUTE_ADDRESS36 Int)

(declare-const attr__ATTRIBUTE_ADDRESS37 Int)

(declare-const attr__ATTRIBUTE_ADDRESS38 Int)

(declare-const attr__ATTRIBUTE_ADDRESS39 Int)

(declare-const attr__ATTRIBUTE_ADDRESS40 Int)

(declare-const attr__ATTRIBUTE_ADDRESS41 Int)

(declare-const attr__ATTRIBUTE_ADDRESS42 Int)

(declare-const attr__ATTRIBUTE_ADDRESS43 Int)

(declare-const attr__ATTRIBUTE_ADDRESS44 Int)

(declare-const attr__ATTRIBUTE_ADDRESS45 Int)

(declare-const attr__ATTRIBUTE_ADDRESS46 Int)

(declare-const attr__ATTRIBUTE_ADDRESS47 Int)

(declare-const attr__ATTRIBUTE_ADDRESS48 Int)

(declare-const attr__ATTRIBUTE_ADDRESS49 Int)

(declare-const attr__ATTRIBUTE_ADDRESS50 Int)

(declare-const attr__ATTRIBUTE_ADDRESS51 Int)

(declare-const attr__ATTRIBUTE_ADDRESS52 Int)

(declare-const attr__ATTRIBUTE_ADDRESS53 Int)

(declare-const attr__ATTRIBUTE_ADDRESS54 Int)

(declare-const attr__ATTRIBUTE_ADDRESS55 Int)

;; validity_period__def_axiom
  (assert
  (= validity_period (fp #b0 #b10000001010 #b0111011100000000000000000000000000000000000000000000)))

(declare-const estimatedgroundvelocity Float64)

(declare-const old_ngclicktime_memory (_ BitVec 16))

(declare-const old_ngrotations_memory (_ BitVec 16))

(declare-const old_estimatedgroundvelocity_memory Float64)

(declare-const old_estimatedgroundvelocity_out1 Float64)

(declare-const max_uint16_out1 Int)

(declare-const max_uint16_1_out1 Int)

(declare-const max_uint16_2_out1 Int)

(declare-const wheel_circunference_out1 Float64)

(declare-const ms_in_hour_out1 Float64)

(declare-const ms_in_our1_out1 Float64)

(declare-const to_int32_left_out1 Int)

(declare-const to_int32_left_1_out1 Int)

(declare-const to_int32_left_2_out1 int__ref)

(declare-const to_int32_right_out1 int__ref)

(declare-const to_int32_right_1_out1 int__ref)

(declare-const to_int32_right_2_out1 int__ref)

(declare-const data_type_conversion1_out1 int__ref)

(declare-const data_type_conversion_out1 int__ref)

(declare-const sum1_2_out1 t__ref)

(declare-const sum1_out1 int__ref)

(declare-const sum1_1_out1 int__ref)

(declare-const sum2_out1 int__ref)

(declare-const sum2_1_out1 int__ref)

(declare-const sum1_1_1_out1 int__ref)

(declare-const sum_out1 int__ref)

(declare-const sum2_2_out1 int__ref)

(declare-const compare_to_constant_out1 bool__ref)

(declare-const sum_1_out1 int__ref)

(declare-const sum_2_out1 int__ref)

(declare-const sum_3_out1 int__ref)

(declare-const left_out1 int__ref)

(declare-const left_1_out1 int__ref)

(declare-const left_2_out1 int__ref)

(declare-const to_uint16_result_out1 t__ref)

(declare-const to_uint16_result_1_out1 t__ref)

(declare-const to_uint16_result_2_out1 t__ref)

(declare-const distance_km_out1 t__ref1)

(declare-const elapsed_time_h_out1 t__ref1)

(declare-const relational_operator_out1 bool__ref)

(declare-const avoid_div_by_zero_out1 t__ref1)

(declare-const relational_operator_out1_1 bool__ref)

(declare-const speed_out1 t__ref1)

(declare-const old_output_if_new_invalid_out1 t__ref1)

(declare-const o Int)

(declare-const o1 Int)

(declare-const o2 Int)

(declare-const o3 Int)

(declare-const o4 Int)

(declare-const o5 Int)

(declare-const o6 Int)

(declare-const o7 Int)

(declare-const o8 Int)

(declare-const o9 Int)

(declare-const o10 Int)

(declare-const o11 (_ BitVec 16))

(declare-const o12 Int)

(declare-const o13 (_ BitVec 16))

(declare-const o14 Int)

(declare-const o15 (_ BitVec 16))

(declare-const o16 Float64)

(declare-const o17 Float64)

(declare-const old_ngclicktime_out1 (_ BitVec 16))

(declare-const old_ngrotations_out1 (_ BitVec 16))

(declare-const max_uint16_out11 Int)

(declare-const max_uint16_1_out11 Int)

(declare-const max_uint16_2_out11 Int)

(declare-const millisecs_out1 (_ BitVec 16))

(declare-const ngclicktime_out1 (_ BitVec 16))

(declare-const ngrotations_out1 (_ BitVec 16))

(declare-const wheel_circunference_out11 Float64)

(declare-const ms_in_hour_out11 Float64)

(declare-const ms_in_our1_out11 Float64)

(declare-const update_period_os_interrupt_out1 (_ BitVec 16))

(declare-const validity_period_out1 (_ BitVec 16))

(declare-const to_int32_left_out11 Int)

(declare-const to_int32_left_1_out11 Int)

(declare-const to_int32_left_2_out11 Int)

(declare-const to_int32_right_out11 Int)

(declare-const to_int32_right_1_out11 Int)

(declare-const to_int32_right_2_out11 Int)

(declare-const data_type_conversion1_out11 Int)

(declare-const data_type_conversion_out11 Int)

(declare-const sum1_2_out11 (_ BitVec 16))

(declare-const sum1_out11 Int)

(declare-const sum1_1_out11 Int)

(declare-const sum2_out11 Int)

(declare-const sum2_1_out11 Int)

(declare-const sum1_1_1_out11 Int)

(declare-const sum_out11 Int)

(declare-const sum2_2_out11 Int)

(declare-const compare_to_constant_out11 Bool)

(declare-const sum_1_out11 Int)

(declare-const sum_2_out11 Int)

(declare-const sum_3_out11 Int)

(declare-const result int__ref)

(declare-const left_out11 Int)

(declare-const result1 int__ref)

(declare-const left_out12 Int)

(declare-const result2 int__ref)

(declare-const left_1_out11 Int)

(declare-const result3 int__ref)

(declare-const left_1_out12 Int)

(declare-const result4 int__ref)

(declare-const left_2_out11 Int)

(declare-const result5 int__ref)

(declare-const left_2_out12 Int)

(declare-const to_uint16_result_out11 (_ BitVec 16))

(declare-const to_uint16_result_1_out11 (_ BitVec 16))

(declare-const to_uint16_result_2_out11 (_ BitVec 16))

(declare-const distance_km_out11 Float64)

(declare-const elapsed_time_h_out11 Float64)

(declare-const relational_operator_out11 Bool)

(declare-const result6 t__ref1)

(declare-const avoid_div_by_zero_out11 Float64)

(declare-const result7 t__ref1)

(declare-const avoid_div_by_zero_out12 Float64)

(declare-const relational_operator_out1_11 Bool)

;; H
  (assert (fp.isFinite64 validity_period))

;; H
  (assert
  (= (fp #b0 #b10000001010 #b0111011100000000000000000000000000000000000000000000)
  validity_period))

;; H
  (assert (= old_ngclicktime_out1 old_ngclicktime_memory))

;; H
  (assert (= old_ngrotations_out1 old_ngrotations_memory))

;; H
  (assert (fp.isFinite64 old_estimatedgroundvelocity_memory))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111))
  (fp.isFinite64 estimatedgroundvelocity)))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111))
  (fp.isFinite64 old_estimatedgroundvelocity_out1)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range2 max_uint16_out1)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range2 max_uint16_1_out1)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range2 max_uint16_2_out1)))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111))
  (fp.isFinite64 wheel_circunference_out1)))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111))
  (fp.isFinite64 ms_in_hour_out1)))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111))
  (fp.isFinite64 ms_in_our1_out1)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range2 to_int32_left_out1)))

;; H
  (assert
  (=> (<= (- 2147483648) 2147483647) (in_range2 to_int32_left_1_out1)))

;; H
  (assert
  (=> (<= (- 2147483648) 2147483647) (in_range2
  (int__content to_int32_left_2_out1))))

;; H
  (assert
  (=> (<= (- 2147483648) 2147483647) (in_range2
  (int__content to_int32_right_out1))))

;; H
  (assert
  (=> (<= (- 2147483648) 2147483647) (in_range2
  (int__content to_int32_right_1_out1))))

;; H
  (assert
  (=> (<= (- 2147483648) 2147483647) (in_range2
  (int__content to_int32_right_2_out1))))

;; H
  (assert
  (=> (<= (- 2147483648) 2147483647) (in_range2
  (int__content data_type_conversion1_out1))))

;; H
  (assert
  (=> (<= (- 2147483648) 2147483647) (in_range2
  (int__content data_type_conversion_out1))))

;; H
  (assert
  (=> (<= (- 2147483648) 2147483647) (in_range2 (int__content sum1_out1))))

;; H
  (assert
  (=> (<= (- 2147483648) 2147483647) (in_range2 (int__content sum1_1_out1))))

;; H
  (assert
  (=> (<= (- 2147483648) 2147483647) (in_range2 (int__content sum2_out1))))

;; H
  (assert
  (=> (<= (- 2147483648) 2147483647) (in_range2 (int__content sum2_1_out1))))

;; H
  (assert
  (=> (<= (- 2147483648) 2147483647) (in_range2
  (int__content sum1_1_1_out1))))

;; H
  (assert
  (=> (<= (- 2147483648) 2147483647) (in_range2 (int__content sum_out1))))

;; H
  (assert
  (=> (<= (- 2147483648) 2147483647) (in_range2 (int__content sum2_2_out1))))

;; H
  (assert
  (=> (<= (- 2147483648) 2147483647) (in_range2 (int__content sum_1_out1))))

;; H
  (assert
  (=> (<= (- 2147483648) 2147483647) (in_range2 (int__content sum_2_out1))))

;; H
  (assert
  (=> (<= (- 2147483648) 2147483647) (in_range2 (int__content sum_3_out1))))

;; H
  (assert
  (=> (<= (- 2147483648) 2147483647) (in_range2 (int__content left_out1))))

;; H
  (assert
  (=> (<= (- 2147483648) 2147483647) (in_range2 (int__content left_1_out1))))

;; H
  (assert
  (=> (<= (- 2147483648) 2147483647) (in_range2 (int__content left_2_out1))))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111))
  (fp.isFinite64 (t__content1 distance_km_out1))))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111))
  (fp.isFinite64 (t__content1 elapsed_time_h_out1))))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111))
  (fp.isFinite64 (t__content1 avoid_div_by_zero_out1))))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111))
  (fp.isFinite64 (t__content1 speed_out1))))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111))
  (fp.isFinite64 (t__content1 old_output_if_new_invalid_out1))))

;; H
  (assert (= max_uint16_out11 65535))

;; H
  (assert (= max_uint16_1_out11 65535))

;; H
  (assert (= max_uint16_2_out11 65535))

;; H
  (assert (= millisecs_out1 millisecs))

;; H
  (assert (= ngclicktime_out1 ngclicktime))

;; H
  (assert (= ngrotations_out1 ngrotations))

;; H
  (assert
  (= wheel_circunference_out11 (fp #b0 #b01111110101 #b1100101111110111010111000011100111011111000101100101)))

;; H
  (assert
  (= ms_in_hour_out11 (fp #b0 #b10000010100 #b1011011101110100000000000000000000000000000000000000)))

;; H
  (assert
  (= ms_in_our1_out11 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))

;; H
  (assert (= update_period_os_interrupt_out1 #x01F4))

;; H
  (assert (= validity_period_out1 #x0BB8))

;; H
  (assert (= to_int32_left_out11 (bv2nat ngrotations_out1)))

;; H
  (assert (= to_int32_left_1_out11 (bv2nat ngclicktime_out1)))

;; H
  (assert
  (= (let ((subject to_int32_left_2_out1)) to_int32_left_2_out11) (bv2nat
  millisecs_out1)))

;; H
  (assert
  (= (let ((subject to_int32_right_out1)) to_int32_right_out11) (bv2nat
  old_ngrotations_out1)))

;; H
  (assert
  (= (let ((subject to_int32_right_1_out1)) to_int32_right_1_out11) (bv2nat
  old_ngclicktime_out1)))

;; H
  (assert
  (= (let ((subject to_int32_right_2_out1)) to_int32_right_2_out11) (bv2nat
  old_ngclicktime_out1)))

;; H
  (assert
  (= (let ((subject data_type_conversion1_out1)) data_type_conversion1_out11) (bv2nat
  millisecs_out1)))

;; H
  (assert
  (= (let ((subject data_type_conversion_out1)) data_type_conversion_out11) (bv2nat
  old_ngclicktime_out1)))

;; H
  (assert
  (= (let ((subject sum1_2_out1)) sum1_2_out11) (bvsub validity_period_out1
  update_period_os_interrupt_out1)))

;; H
  (assert
  (= o (- (let ((subject to_int32_right_out1)) to_int32_right_out11)
  to_int32_left_out11)))

;; H
  (assert (= (let ((subject sum1_out1)) sum1_out11) o))

;; H
  (assert (in_range1
  (- (let ((subject to_int32_right_out1)) to_int32_right_out11) to_int32_left_out11)))

;; H
  (assert
  (= o1 (- (let ((subject to_int32_right_1_out1)) to_int32_right_1_out11)
  to_int32_left_1_out11)))

;; H
  (assert (= (let ((subject sum1_1_out1)) sum1_1_out11) o1))

;; H
  (assert (in_range1
  (- (let ((subject to_int32_right_1_out1)) to_int32_right_1_out11) to_int32_left_1_out11)))

;; H
  (assert
  (= o2 (- to_int32_left_out11 (let ((subject to_int32_right_out1))
                               to_int32_right_out11))))

;; H
  (assert (= (let ((subject sum2_out1)) sum2_out11) o2))

;; H
  (assert (in_range1
  (- to_int32_left_out11 (let ((subject to_int32_right_out1))
                         to_int32_right_out11))))

;; H
  (assert
  (= o3 (- to_int32_left_1_out11 (let ((subject to_int32_right_1_out1))
                                 to_int32_right_1_out11))))

;; H
  (assert (= (let ((subject sum2_1_out1)) sum2_1_out11) o3))

;; H
  (assert (in_range1
  (- to_int32_left_1_out11 (let ((subject to_int32_right_1_out1))
                           to_int32_right_1_out11))))

;; H
  (assert
  (= o4 (- (let ((subject to_int32_right_2_out1)) to_int32_right_2_out11)
  (let ((subject to_int32_left_2_out1)) to_int32_left_2_out11))))

;; H
  (assert (= (let ((subject sum1_1_1_out1)) sum1_1_1_out11) o4))

;; H
  (assert (in_range1
  (- (let ((subject to_int32_right_2_out1)) to_int32_right_2_out11) (let ((subject
                                                                    to_int32_left_2_out1))
                                                                    to_int32_left_2_out11))))

;; H
  (assert
  (= o5 (- (let ((subject data_type_conversion1_out1))
           data_type_conversion1_out11) (let ((subject data_type_conversion_out1))
                                        data_type_conversion_out11))))

;; H
  (assert (= (let ((subject sum_out1)) sum_out11) o5))

;; H
  (assert (in_range1
  (- (let ((subject data_type_conversion1_out1)) data_type_conversion1_out11)
  (let ((subject data_type_conversion_out1)) data_type_conversion_out11))))

;; H
  (assert
  (= o6 (- (let ((subject to_int32_left_2_out1)) to_int32_left_2_out11)
  (let ((subject to_int32_right_2_out1)) to_int32_right_2_out11))))

;; H
  (assert (= (let ((subject sum2_2_out1)) sum2_2_out11) o6))

;; H
  (assert (in_range1
  (- (let ((subject to_int32_left_2_out1)) to_int32_left_2_out11) (let ((subject
                                                                  to_int32_right_2_out1))
                                                                  to_int32_right_2_out11))))

;; H
  (assert
  (= (let ((subject compare_to_constant_out1)) compare_to_constant_out11)
  (ite (fp.leq ((_ to_fp 11 53) RNE (to_real (let ((subject sum_out1))
                                             sum_out11))) validity_period)
  true false)))

;; H
  (assert (= o7 (- max_uint16_out11 (let ((subject sum1_out1)) sum1_out11))))

;; H
  (assert (= (let ((subject sum_1_out1)) sum_1_out11) o7))

;; H
  (assert (in_range1
  (- max_uint16_out11 (let ((subject sum1_out1)) sum1_out11))))

;; H
  (assert
  (= o8 (- max_uint16_1_out11 (let ((subject sum1_1_out1)) sum1_1_out11))))

;; H
  (assert (= (let ((subject sum_2_out1)) sum_2_out11) o8))

;; H
  (assert (in_range1
  (- max_uint16_1_out11 (let ((subject sum1_1_out1)) sum1_1_out11))))

;; H
  (assert
  (= o9 (- max_uint16_2_out11 (let ((subject sum1_1_1_out1)) sum1_1_1_out11))))

;; H
  (assert (= (let ((subject sum_3_out1)) sum_3_out11) o9))

;; H
  (assert (in_range1
  (- max_uint16_2_out11 (let ((subject sum1_1_1_out1)) sum1_1_1_out11))))

;; H
  (assert
  (=> (<= 0 (let ((subject sum2_out1)) sum2_out11)) (= result left_out1)))

;; H
  (assert
  (=> (<= 0 (let ((subject sum2_out1)) sum2_out11))
  (= (let ((subject left_out1)) left_out11) (let ((subject sum2_out1))
                                            sum2_out11))))

;; H
  (assert
  (=> (not (<= 0 (let ((subject sum2_out1)) sum2_out11)))
  (= result1 left_out1)))

;; H
  (assert
  (=> (not (<= 0 (let ((subject sum2_out1)) sum2_out11)))
  (= (let ((subject left_out1)) left_out12) (let ((subject sum_1_out1))
                                            sum_1_out11))))

;; H
  (assert
  (=> (not (<= 0 (let ((subject sum2_out1)) sum2_out11)))
  (= (let ((subject left_out1)) (mk_int__ref left_out11)) (let ((subject
                                                          left_out1))
                                                          (mk_int__ref
                                                          left_out12)))))

;; H
  (assert
  (=> (not (<= 0 (let ((subject sum2_out1)) sum2_out11)))
  (= left_out11 left_out12)))

;; H
  (assert
  (=> (<= 0 (let ((subject sum2_1_out1)) sum2_1_out11))
  (= result2 left_1_out1)))

;; H
  (assert
  (=> (<= 0 (let ((subject sum2_1_out1)) sum2_1_out11))
  (= (let ((subject left_1_out1)) left_1_out11) (let ((subject sum2_1_out1))
                                                sum2_1_out11))))

;; H
  (assert
  (=> (not (<= 0 (let ((subject sum2_1_out1)) sum2_1_out11)))
  (= result3 left_1_out1)))

;; H
  (assert
  (=> (not (<= 0 (let ((subject sum2_1_out1)) sum2_1_out11)))
  (= (let ((subject left_1_out1)) left_1_out12) (let ((subject sum_2_out1))
                                                sum_2_out11))))

;; H
  (assert
  (=> (not (<= 0 (let ((subject sum2_1_out1)) sum2_1_out11)))
  (= (let ((subject left_1_out1)) (mk_int__ref left_1_out11)) (let ((subject
                                                              left_1_out1))
                                                              (mk_int__ref
                                                              left_1_out12)))))

;; H
  (assert
  (=> (not (<= 0 (let ((subject sum2_1_out1)) sum2_1_out11)))
  (= left_1_out11 left_1_out12)))

;; H
  (assert
  (=> (<= 0 (let ((subject sum2_2_out1)) sum2_2_out11))
  (= result4 left_2_out1)))

;; H
  (assert
  (=> (<= 0 (let ((subject sum2_2_out1)) sum2_2_out11))
  (= (let ((subject left_2_out1)) left_2_out11) (let ((subject sum2_2_out1))
                                                sum2_2_out11))))

;; H
  (assert
  (=> (not (<= 0 (let ((subject sum2_2_out1)) sum2_2_out11)))
  (= result5 left_2_out1)))

;; H
  (assert
  (=> (not (<= 0 (let ((subject sum2_2_out1)) sum2_2_out11)))
  (= (let ((subject left_2_out1)) left_2_out12) (let ((subject sum_3_out1))
                                                sum_3_out11))))

;; H
  (assert
  (=> (not (<= 0 (let ((subject sum2_2_out1)) sum2_2_out11)))
  (= (let ((subject left_2_out1)) (mk_int__ref left_2_out11)) (let ((subject
                                                              left_2_out1))
                                                              (mk_int__ref
                                                              left_2_out12)))))

;; H
  (assert
  (=> (not (<= 0 (let ((subject sum2_2_out1)) sum2_2_out11)))
  (= left_2_out11 left_2_out12)))

;; H
  (assert (= o10 (let ((subject left_out1)) left_out11)))

;; H
  (assert (uint_in_range (let ((subject left_out1)) left_out11)))

;; H
  (assert (= o11 ((_ int2bv 16) o10)))

;; H
  (assert
  (= (let ((subject to_uint16_result_out1)) to_uint16_result_out11) o11))

;; H
  (assert (<= (let ((subject left_1_out1)) left_1_out11) 65535))

;; H
  (assert (= o12 (let ((subject left_1_out1)) left_1_out11)))

;; H
  (assert (uint_in_range (let ((subject left_1_out1)) left_1_out11)))

;; H
  (assert (= o13 ((_ int2bv 16) o12)))

;; H
  (assert
  (= (let ((subject to_uint16_result_1_out1)) to_uint16_result_1_out11)
  o13))

;; H
  (assert (= o14 (let ((subject left_2_out1)) left_2_out11)))

;; H
  (assert (uint_in_range (let ((subject left_2_out1)) left_2_out11)))

;; H
  (assert (= o15 ((_ int2bv 16) o14)))

;; H
  (assert
  (= (let ((subject to_uint16_result_2_out1)) to_uint16_result_2_out11)
  o15))

;; H
  (assert
  (= o16 (fp.mul RNE ((_ to_fp_unsigned 11 53) RNE (let ((subject to_uint16_result_out1))
                                                   to_uint16_result_out11))
  wheel_circunference_out11)))

;; H
  (assert (= (let ((subject distance_km_out1)) distance_km_out11) o16))

;; H
  (assert
  (fp.isFinite64 (fp.mul RNE ((_ to_fp_unsigned 11 53) RNE (let ((subject
                                                           to_uint16_result_out1))
                                                           to_uint16_result_out11))
  wheel_circunference_out11)))

;; H
  (assert
  (= o17 (fp.div RNE ((_ to_fp_unsigned 11 53) RNE (let ((subject to_uint16_result_1_out1))
                                                   to_uint16_result_1_out11))
  ms_in_hour_out11)))

;; H
  (assert (= (let ((subject elapsed_time_h_out1)) elapsed_time_h_out11)
  o17))

;; H
  (assert
  (fp.isFinite64 (fp.div RNE ((_ to_fp_unsigned 11 53) RNE (let ((subject
                                                           to_uint16_result_1_out1))
                                                           to_uint16_result_1_out11))
  ms_in_hour_out11)))

;; H
  (assert
  (= (let ((subject relational_operator_out1)) relational_operator_out11)
  (ite (bvule (let ((subject to_uint16_result_2_out1))
              to_uint16_result_2_out11) (let ((subject sum1_2_out1))
                                        sum1_2_out11))
  true false)))

;; H
  (assert
  (=>
  (bvugt (let ((subject to_uint16_result_1_out1)) to_uint16_result_1_out11) #x0000)
  (= result6 avoid_div_by_zero_out1)))

;; H
  (assert
  (=>
  (bvugt (let ((subject to_uint16_result_1_out1)) to_uint16_result_1_out11) #x0000)
  (= (let ((subject avoid_div_by_zero_out1)) avoid_div_by_zero_out11)
  (let ((subject elapsed_time_h_out1)) elapsed_time_h_out11))))

;; H
  (assert
  (=>
  (not
  (bvugt (let ((subject to_uint16_result_1_out1)) to_uint16_result_1_out11) #x0000))
  (= result7 avoid_div_by_zero_out1)))

;; H
  (assert
  (=>
  (not
  (bvugt (let ((subject to_uint16_result_1_out1)) to_uint16_result_1_out11) #x0000))
  (= (let ((subject avoid_div_by_zero_out1)) avoid_div_by_zero_out12)
  ms_in_our1_out11)))

;; H
  (assert
  (=>
  (not
  (bvugt (let ((subject to_uint16_result_1_out1)) to_uint16_result_1_out11) #x0000))
  (= (let ((subject avoid_div_by_zero_out1))
     (mk_t__ref1 avoid_div_by_zero_out11)) (let ((subject avoid_div_by_zero_out1))
                                           (mk_t__ref1
                                           avoid_div_by_zero_out12)))))

;; H
  (assert
  (=>
  (not
  (bvugt (let ((subject to_uint16_result_1_out1)) to_uint16_result_1_out11) #x0000))
  (= avoid_div_by_zero_out11 avoid_div_by_zero_out12)))

;; H
  (assert
  (= (let ((subject relational_operator_out1_1)) relational_operator_out1_11)
  (ite (= (ite (let ((subject relational_operator_out1))
               relational_operator_out11) 1 0) (ite (let ((subject compare_to_constant_out1))
                                                    compare_to_constant_out11) 1 0))
  true false)))

(assert
;; WP_parameter_def
 ;; File "nose_gear.adb", line 24, characters 0-0
  (not
  (fp.isFinite64 (fp.div RNE (let ((subject distance_km_out1))
                             distance_km_out11) (let ((subject avoid_div_by_zero_out1))
                                                avoid_div_by_zero_out11)))))
(check-sat)
(exit)
