;; produced by cvc4_14.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort integer 0)

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort positive 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-fun dummy1 () positive)

(declare-datatypes ()
((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(declare-sort character 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-fun dummy2 () character)

(declare-datatypes ()
((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character 
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int
  Int) (Array Int character))

;; concat_def
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (character Int) (Array Int character))

;; singleton_def
  (assert
  (forall ((v character))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_78 Int))
                           (=>
                           (and (<= a__first temp___idx_78)
                           (<= temp___idx_78 a__last))
                           (= (to_rep (select a temp___idx_78)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_78)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_78 Int))
  (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last))
  (= (to_rep (select a temp___idx_78)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_78)))))))))))

(declare-fun compare ((Array Int character) Int Int (Array Int character) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun to_rep1 (integer) Int)

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                             (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range f)
     (=> (in_range l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range low)
                   (and (in_range high)
                   (=> (<= low high) (and (in_range1 low) (in_range1 high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-fun value__size () Int)

(declare-fun object__size ((Array Int character)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int character)) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-fun dummy3 () us_t)

(declare-fun to_string (us_image) us_t)

(declare-fun from_string (us_t) us_image)

(declare-datatypes ()
((string__ref (mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content
                                                            a))

(declare-sort index_type 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq4 (index_type index_type) Bool)

(declare-fun dummy4 () index_type)

(declare-datatypes ()
((index_type__ref (mk_index_type__ref (index_type__content index_type)))))
(define-fun index_type__ref___projection ((a index_type__ref)) index_type 
  (index_type__content a))

(define-fun dynamic_invariant ((temp___expr_514 Int)
  (temp___is_init_511 Bool) (temp___skip_constant_512 Bool)
  (temp___do_toplevel_513 Bool)) Bool (=>
                                      (or (= temp___is_init_511 true)
                                      (<= 1 10)) (in_range3 temp___expr_514)))

(declare-sort natural 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq5 (natural natural) Bool)

(declare-fun dummy5 () natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(declare-fun to_rep2 (natural) Int)

(declare-fun of_rep2 (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range4 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-datatypes ()
((map__ref1 (mk_map__ref1 (map__content1 (Array Int natural))))))
(declare-fun slide1 ((Array Int natural) Int Int) (Array Int natural))

;; slide_eq
  (assert
  (forall ((a (Array Int natural)))
  (forall ((first2 Int))
  (! (= (slide1 a first2 first2) a) :pattern ((slide1 a first2 first2)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int natural)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int natural) Int Int (Array Int natural) Int
  Int) (Array Int natural))

;; concat_def
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 (natural Int) (Array Int natural))

;; singleton_def
  (assert
  (forall ((v natural))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq2 ((a (Array Int natural)) (a__first Int) (a__last Int)
  (b (Array Int natural)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_142 Int))
                           (=>
                           (and (<= a__first temp___idx_142)
                           (<= temp___idx_142 a__last))
                           (= (to_rep2 (select a temp___idx_142)) (to_rep2
                                                                  (select b (+ (- b__first a__first) temp___idx_142)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq2 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_142 Int))
  (=> (and (<= a__first temp___idx_142) (<= temp___idx_142 a__last))
  (= (to_rep2 (select a temp___idx_142)) (to_rep2
                                         (select b (+ (- b__first a__first) temp___idx_142)))))))))))

(declare-fun compare1 ((Array Int natural) Int Int (Array Int natural) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare1 a a_first a_last b b_first b_last) 0)
     (= (bool_eq2 a a_first a_last b b_first b_last) true)) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare1 a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq2 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep2 (select a (+ i 1))) (to_rep2 (select b (+ j 1))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare1 a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq2 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep2 (select b (+ i 1))) (to_rep2 (select a (+ j 1))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-sort index_type1 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq6 (index_type1 index_type1) Bool)

(declare-fun dummy6 () index_type1)

(declare-datatypes ()
((index_type__ref1 (mk_index_type__ref1 (index_type__content1 index_type1)))))
(define-fun index_type__ref_2__projection ((a index_type__ref1)) index_type1 
  (index_type__content1 a))

(define-fun dynamic_invariant1 ((temp___expr_535 Int)
  (temp___is_init_532 Bool) (temp___skip_constant_533 Bool)
  (temp___do_toplevel_534 Bool)) Bool (=>
                                      (or (= temp___is_init_532 true)
                                      (<= 1 10)) (in_range5 temp___expr_535)))

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun search_demo__search_array__aggregate_def (Int Int Int Int Int
  Int Int Int Int Int) (Array Int natural))

;; def_axiom
  (assert
  (forall ((temp___549 Int) (temp___550 Int) (temp___551 Int)
  (temp___552 Int) (temp___553 Int) (temp___554 Int) (temp___555 Int)
  (temp___556 Int) (temp___557 Int) (temp___558 Int))
  (let ((temp___548 (search_demo__search_array__aggregate_def temp___549
                    temp___550 temp___551 temp___552 temp___553 temp___554
                    temp___555 temp___556 temp___557 temp___558)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and (= (select temp___548 1) (of_rep2 temp___549))
  (= (select temp___548 2) (of_rep2 temp___550)))
  (= (select temp___548 3) (of_rep2 temp___551)))
  (= (select temp___548 4) (of_rep2 temp___552)))
  (= (select temp___548 5) (of_rep2 temp___553)))
  (= (select temp___548 6) (of_rep2 temp___554)))
  (= (select temp___548 7) (of_rep2 temp___555)))
  (= (select temp___548 8) (of_rep2 temp___556)))
  (= (select temp___548 9) (of_rep2 temp___557)))
  (= (select temp___548 10) (of_rep2 temp___558))))))

(declare-fun temp___String_Literal_560 (tuple0) (Array Int character))

;; temp___String_Literal_560__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_560 us_void_param) 1)) 84)
     (= (to_rep (select (temp___String_Literal_560 us_void_param) 2)) 104))
     (= (to_rep (select (temp___String_Literal_560 us_void_param) 3)) 101))
     (= (to_rep (select (temp___String_Literal_560 us_void_param) 4)) 32))
     (= (to_rep (select (temp___String_Literal_560 us_void_param) 5)) 118))
     (= (to_rep (select (temp___String_Literal_560 us_void_param) 6)) 97))
     (= (to_rep (select (temp___String_Literal_560 us_void_param) 7)) 108))
     (= (to_rep (select (temp___String_Literal_560 us_void_param) 8)) 117))
     (= (to_rep (select (temp___String_Literal_560 us_void_param) 9)) 101))
     (= (to_rep (select (temp___String_Literal_560 us_void_param) 10)) 32))
     (= (to_rep (select (temp___String_Literal_560 us_void_param) 11)) 49))
     (= (to_rep (select (temp___String_Literal_560 us_void_param) 12)) 48))
     (= (to_rep (select (temp___String_Literal_560 us_void_param) 13)) 32))
     (= (to_rep (select (temp___String_Literal_560 us_void_param) 14)) 119))
     (= (to_rep (select (temp___String_Literal_560 us_void_param) 15)) 97))
     (= (to_rep (select (temp___String_Literal_560 us_void_param) 16)) 115))
     (= (to_rep (select (temp___String_Literal_560 us_void_param) 17)) 32))
     (= (to_rep (select (temp___String_Literal_560 us_void_param) 18)) 102))
     (= (to_rep (select (temp___String_Literal_560 us_void_param) 19)) 111))
     (= (to_rep (select (temp___String_Literal_560 us_void_param) 20)) 117))
     (= (to_rep (select (temp___String_Literal_560 us_void_param) 21)) 110))
     (= (to_rep (select (temp___String_Literal_560 us_void_param) 22)) 100))
     (= (to_rep (select (temp___String_Literal_560 us_void_param) 23)) 32))
     (= (to_rep (select (temp___String_Literal_560 us_void_param) 24)) 97))
     (= (to_rep (select (temp___String_Literal_560 us_void_param) 25)) 116))
     (= (to_rep (select (temp___String_Literal_560 us_void_param) 26)) 32))
     (= (to_rep (select (temp___String_Literal_560 us_void_param) 27)) 105))
     (= (to_rep (select (temp___String_Literal_560 us_void_param) 28)) 110))
     (= (to_rep (select (temp___String_Literal_560 us_void_param) 29)) 100))
     (= (to_rep (select (temp___String_Literal_560 us_void_param) 30)) 101))
     (= (to_rep (select (temp___String_Literal_560 us_void_param) 31)) 120))
     (= (to_rep (select (temp___String_Literal_560 us_void_param) 32)) 32)) :pattern (
  (temp___String_Literal_560 us_void_param)) )))

(declare-fun temp___String_Literal_563 (tuple0) (Array Int character))

;; temp___String_Literal_563__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_563 us_void_param) 1)) 84)
     (= (to_rep (select (temp___String_Literal_563 us_void_param) 2)) 104))
     (= (to_rep (select (temp___String_Literal_563 us_void_param) 3)) 101))
     (= (to_rep (select (temp___String_Literal_563 us_void_param) 4)) 32))
     (= (to_rep (select (temp___String_Literal_563 us_void_param) 5)) 118))
     (= (to_rep (select (temp___String_Literal_563 us_void_param) 6)) 97))
     (= (to_rep (select (temp___String_Literal_563 us_void_param) 7)) 108))
     (= (to_rep (select (temp___String_Literal_563 us_void_param) 8)) 117))
     (= (to_rep (select (temp___String_Literal_563 us_void_param) 9)) 101))
     (= (to_rep (select (temp___String_Literal_563 us_void_param) 10)) 32))
     (= (to_rep (select (temp___String_Literal_563 us_void_param) 11)) 49))
     (= (to_rep (select (temp___String_Literal_563 us_void_param) 12)) 48))
     (= (to_rep (select (temp___String_Literal_563 us_void_param) 13)) 32))
     (= (to_rep (select (temp___String_Literal_563 us_void_param) 14)) 119))
     (= (to_rep (select (temp___String_Literal_563 us_void_param) 15)) 97))
     (= (to_rep (select (temp___String_Literal_563 us_void_param) 16)) 115))
     (= (to_rep (select (temp___String_Literal_563 us_void_param) 17)) 32))
     (= (to_rep (select (temp___String_Literal_563 us_void_param) 18)) 110))
     (= (to_rep (select (temp___String_Literal_563 us_void_param) 19)) 111))
     (= (to_rep (select (temp___String_Literal_563 us_void_param) 20)) 116))
     (= (to_rep (select (temp___String_Literal_563 us_void_param) 21)) 32))
     (= (to_rep (select (temp___String_Literal_563 us_void_param) 22)) 102))
     (= (to_rep (select (temp___String_Literal_563 us_void_param) 23)) 111))
     (= (to_rep (select (temp___String_Literal_563 us_void_param) 24)) 117))
     (= (to_rep (select (temp___String_Literal_563 us_void_param) 25)) 110))
     (= (to_rep (select (temp___String_Literal_563 us_void_param) 26)) 100)) :pattern (
  (temp___String_Literal_563 us_void_param)) )))

(define-fun dynamic_invariant2 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range temp___expr_15)))

(define-fun dynamic_invariant3 ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range4
                                     temp___expr_33)))

(define-fun dynamic_invariant4 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range1
                                     temp___expr_39)))

(define-fun dynamic_invariant5 ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range2 temp___expr_63)))

(define-fun dynamic_invariant6 ((temp___expr_82 us_t)
  (temp___is_init_79 Bool) (temp___skip_constant_80 Bool)
  (temp___do_toplevel_81 Bool)) Bool (=>
                                     (not (= temp___skip_constant_80 true))
                                     (dynamic_property 1 2147483647
                                     (first1 temp___expr_82)
                                     (last1 temp___expr_82))))

(declare-fun search_array () (Array Int natural))

(declare-fun result_index () Int)

(declare-fun o () Int)

(declare-fun o1 () Int)

(declare-fun o2 () Int)

(declare-fun o3 () Int)

(declare-fun o4 () Int)

(declare-fun result () (Array Int natural))

(declare-fun search_array1 () (Array Int natural))

(declare-fun found () Bool)

(declare-fun search_demo__searcher__result () Int)

(declare-fun result1 () Int)

(declare-fun result_index1 () Int)

;; H
  (assert (= result search_array))

;; H
  (assert
  (= search_array1 (search_demo__search_array__aggregate_def 2 4 6 8 10 12 14
                   16 18 20)))

;; H
  (assert (=> (<= 1 10) (in_range3 result_index)))

;; H
  (assert
  (and
  (ite (= found true)
  (= 10 (to_rep2 (select search_array1 search_demo__searcher__result)))
  (forall ((j Int))
  (=> (and (<= 1 j) (<= j 10))
  (not (= (to_rep2 (select search_array1 j)) 10))))) (in_range5
  search_demo__searcher__result)))

;; H
  (assert (= result1 result_index))

;; H
  (assert (= result_index1 search_demo__searcher__result))

;; H
  (assert (= found true))

;; H
  (assert
  (=>
  (<= (to_rep1
      (first (rt (to_string (attr__ATTRIBUTE_IMAGE result_index1))))) 
  (to_rep1 (last (rt (to_string (attr__ATTRIBUTE_IMAGE result_index1))))))
  (= o (+ (- (to_rep1
             (last (rt (to_string (attr__ATTRIBUTE_IMAGE result_index1))))) 
  (to_rep1 (first (rt (to_string (attr__ATTRIBUTE_IMAGE result_index1)))))) 1))))

;; H
  (assert
  (=>
  (not
  (<= (to_rep1
      (first (rt (to_string (attr__ATTRIBUTE_IMAGE result_index1))))) 
  (to_rep1 (last (rt (to_string (attr__ATTRIBUTE_IMAGE result_index1)))))))
  (= o 0)))

;; H
  (assert (=> (<= 1 32) (= o1 (+ (- 32 1) 1))))

;; H
  (assert (=> (not (<= 1 32)) (= o1 0)))

;; H
  (assert (= o2 (+ o1 o)))

;; H
  (assert (= o3 (+ 1 o2)))

;; H
  (assert (= o4 (- o3 1)))

(assert
;; WP_parameter_def
 ;; File "generic_searchers.ads", line 12, characters 0-0
  (not (in_range1 o4)))
(check-sat)
