;; produced by cvc4_14.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort integer 0)

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort positive 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-fun dummy1 () positive)

(declare-datatypes ()
((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(declare-sort character 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-fun dummy2 () character)

(declare-datatypes ()
((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int
  Int) (Array Int character))

;; concat_def
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (character Int) (Array Int character))

;; singleton_def
  (assert
  (forall ((v character))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_78 Int))
                           (=>
                           (and (<= a__first temp___idx_78)
                           (<= temp___idx_78 a__last))
                           (= (to_rep (select a temp___idx_78)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_78)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_78 Int))
  (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last))
  (= (to_rep (select a temp___idx_78)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_78)))))))))))

(declare-fun compare ((Array Int character) Int Int (Array Int character) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun to_rep1 (integer) Int)

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                             (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range f)
     (=> (in_range l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range low)
                   (and (in_range high)
                   (=> (<= low high) (and (in_range1 low) (in_range1 high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-fun value__size () Int)

(declare-fun object__size ((Array Int character)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int character)) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-fun dummy3 () us_t)

(declare-fun to_string (us_image) us_t)

(declare-fun from_string (us_t) us_image)

(declare-datatypes ()
((string__ref (mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content
                                                            a))

(declare-sort natural 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq4 (natural natural) Bool)

(declare-fun dummy4 () natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range3
                                     temp___expr_33)))

(declare-sort field 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq5 (field field) Bool)

(declare-fun dummy5 () field)

(declare-datatypes () ((field__ref (mk_field__ref (field__content field)))))
(define-fun field__ref___projection ((a field__ref)) field (field__content a))

(define-fun dynamic_invariant1 ((temp___expr_473 Int)
  (temp___is_init_470 Bool) (temp___skip_constant_471 Bool)
  (temp___do_toplevel_472 Bool)) Bool (=>
                                      (or (= temp___is_init_470 true)
                                      (<= 0 255)) (in_range4
                                      temp___expr_473)))

(declare-sort number_base 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 2 x) (<= x 16)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq6 (number_base number_base) Bool)

(declare-fun dummy6 () number_base)

(declare-datatypes ()
((number_base__ref (mk_number_base__ref (number_base__content number_base)))))
(define-fun number_base__ref___projection ((a number_base__ref)) number_base
  (number_base__content a))

(define-fun dynamic_invariant2 ((temp___expr_479 Int)
  (temp___is_init_476 Bool) (temp___skip_constant_477 Bool)
  (temp___do_toplevel_478 Bool)) Bool (=>
                                      (or (= temp___is_init_476 true)
                                      (<= 2 16)) (in_range5 temp___expr_479)))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(define-fun dynamic_invariant3 ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range2 temp___expr_63)))

(define-fun dynamic_invariant4 ((temp___expr_82 us_t)
  (temp___is_init_79 Bool) (temp___skip_constant_80 Bool)
  (temp___do_toplevel_81 Bool)) Bool (=>
                                     (not (= temp___skip_constant_80 true))
                                     (dynamic_property 1 2147483647
                                     (first1 temp___expr_82)
                                     (last1 temp___expr_82))))

(declare-fun count (us_t Int) Int)

(declare-fun count__function_guard (Int us_t Int) Bool)

;; count__post_axiom
  (assert
  (forall ((source us_t))
  (forall ((pattern Int))
  (! (=>
     (and (dynamic_invariant4 source true true true) (dynamic_invariant3
     pattern true true true)) (dynamic_invariant (count source pattern) true
     false true)) :pattern ((count source pattern)) ))))

(declare-sort t1 0)

(declare-fun first2 (t1) integer)

(declare-fun last2 (t1) integer)

(declare-fun mk1 (Int Int) t1)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range f)
     (=> (in_range l)
     (and (= (to_rep1 (first2 (mk1 f l))) f)
     (= (to_rep1 (last2 (mk1 f l))) l)))) :pattern ((mk1 f l)) )))

(define-fun dynamic_property1 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range low)
                   (and (in_range high)
                   (=> (<= low high) (and (in_range1 low) (in_range1 high))))))

(declare-datatypes ()
((us_t1 (mk___t1 (elts1 (Array Int character))(rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array Int character) (elts1 a))

(define-fun of_array1 ((a (Array Int character)) (f Int)
  (l Int)) us_t1 (mk___t1 a (mk1 f l)))

(define-fun first3 ((a us_t1)) Int (to_rep1 (first2 (rt1 a))))

(define-fun last3 ((a us_t1)) Int (to_rep1 (last2 (rt1 a))))

(define-fun length1 ((a us_t1)) Int (ite (<= (first3 a) (last3 a))
                                    (+ (- (last3 a) (first3 a)) 1) 0))

(declare-fun value__size1 () Int)

(declare-fun object__size1 ((Array Int character)) Int)

(declare-fun value__component__size1 () Int)

(declare-fun object__component__size1 ((Array Int character)) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size1 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment1 a))))

(define-fun bool_eq2 ((x us_t1)
  (y us_t1)) Bool (bool_eq (elts1 x) (to_rep1 (first2 (rt1 x)))
                  (to_rep1 (last2 (rt1 x))) (elts1 y)
                  (to_rep1 (first2 (rt1 y))) (to_rep1 (last2 (rt1 y)))))

(declare-fun user_eq7 (us_t1 us_t1) Bool)

(declare-fun dummy7 () us_t1)

(declare-datatypes ()
((array_type__ref (mk_array_type__ref (array_type__content us_t1)))))
(define-fun array_type__ref___projection ((a array_type__ref)) us_t1
  (array_type__content a))

(declare-sort component_type 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq8 (component_type component_type) Bool)

(declare-fun dummy8 () component_type)

(declare-datatypes ()
((component_type__ref
 (mk_component_type__ref (component_type__content component_type)))))
(define-fun component_type__ref___projection ((a component_type__ref)) component_type
  (component_type__content a))

(define-fun dynamic_invariant5 ((temp___expr_535 Int)
  (temp___is_init_532 Bool) (temp___skip_constant_533 Bool)
  (temp___do_toplevel_534 Bool)) Bool (=>
                                      (or (= temp___is_init_532 true)
                                      (<= 0 255)) (in_range6
                                      temp___expr_535)))

(define-fun dynamic_invariant6 ((temp___expr_547 us_t1)
  (temp___is_init_544 Bool) (temp___skip_constant_545 Bool)
  (temp___do_toplevel_546 Bool)) Bool (=>
                                      (not (= temp___skip_constant_545 true))
                                      (dynamic_property1 1 2147483647
                                      (first3 temp___expr_547)
                                      (last3 temp___expr_547))))

(declare-fun char_count (us_t1 Int) Int)

(declare-fun char_count__function_guard (Int us_t1 Int) Bool)

;; char_count__post_axiom
  (assert
  (forall ((source us_t1))
  (forall ((pattern Int))
  (! (=>
     (and (dynamic_invariant6 source true true true) (dynamic_invariant5
     pattern true true true)) (dynamic_invariant (char_count source pattern)
     true false true)) :pattern ((char_count source pattern)) ))))

(declare-sort percent 0)

(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq9 (percent percent) Bool)

(declare-fun dummy9 () percent)

(declare-datatypes ()
((percent__ref (mk_percent__ref (percent__content percent)))))
(define-fun percent__ref___projection ((a percent__ref)) percent (percent__content
                                                                 a))

(declare-fun to_rep2 (percent) Int)

(declare-fun of_rep2 (Int) percent)

;; inversion_axiom
  (assert
  (forall ((x percent))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x percent)) (! (in_range7 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range7 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-datatypes ()
((map__ref1 (mk_map__ref1 (map__content1 (Array Int percent))))))
(declare-fun slide1 ((Array Int percent) Int Int) (Array Int percent))

;; slide_eq
  (assert
  (forall ((a (Array Int percent)))
  (forall ((first4 Int))
  (! (= (slide1 a first4 first4) a) :pattern ((slide1 a first4 first4)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int percent)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int percent) Int Int (Array Int percent) Int
  Int) (Array Int percent))

;; concat_def
  (assert
  (forall ((a (Array Int percent)) (b (Array Int percent)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 (percent Int) (Array Int percent))

;; singleton_def
  (assert
  (forall ((v percent))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq3 ((a (Array Int percent)) (a__first Int) (a__last Int)
  (b (Array Int percent)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_151 Int))
                           (=>
                           (and (<= a__first temp___idx_151)
                           (<= temp___idx_151 a__last))
                           (= (to_rep2 (select a temp___idx_151)) (to_rep2
                                                                  (select b (+ (- b__first a__first) temp___idx_151)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int percent)) (b (Array Int percent)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq3 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_151 Int))
  (=> (and (<= a__first temp___idx_151) (<= temp___idx_151 a__last))
  (= (to_rep2 (select a temp___idx_151)) (to_rep2
                                         (select b (+ (- b__first a__first) temp___idx_151)))))))))))

(declare-fun compare1 ((Array Int percent) Int Int (Array Int percent) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int percent)) (b (Array Int percent)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare1 a a_first a_last b b_first b_last) 0)
     (= (bool_eq3 a a_first a_last b b_first b_last) true)) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int percent)) (b (Array Int percent)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare1 a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq3 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep2 (select a (+ i 1))) (to_rep2 (select b (+ j 1))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int percent)) (b (Array Int percent)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare1 a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq3 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep2 (select b (+ i 1))) (to_rep2 (select a (+ j 1))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

(declare-sort t2 0)

(declare-fun first4 (t2) character)

(declare-fun last4 (t2) character)

(declare-fun mk2 (Int Int) t2)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range2 f)
     (=> (in_range2 l)
     (and (= (to_rep (first4 (mk2 f l))) f) (= (to_rep (last4 (mk2 f l))) l)))) :pattern (
  (mk2 f l)) )))

(define-fun dynamic_property2 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range2 low)
                   (and (in_range2 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes ()
((us_t2 (mk___t2 (elts2 (Array Int percent))(rt2 t2)))))
(define-fun to_array2 ((a us_t2)) (Array Int percent) (elts2 a))

(define-fun of_array2 ((a (Array Int percent)) (f Int)
  (l Int)) us_t2 (mk___t2 a (mk2 f l)))

(define-fun first5 ((a us_t2)) Int (to_rep (first4 (rt2 a))))

(define-fun last5 ((a us_t2)) Int (to_rep (last4 (rt2 a))))

(define-fun length2 ((a us_t2)) Int (ite (<= (first5 a) (last5 a))
                                    (+ (- (last5 a) (first5 a)) 1) 0))

(declare-fun value__size2 () Int)

(declare-fun object__size2 ((Array Int percent)) Int)

(declare-fun value__component__size2 () Int)

(declare-fun object__component__size2 ((Array Int percent)) Int)

(declare-fun value__alignment2 () Int)

(declare-fun object__alignment2 ((Array Int percent)) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a (Array Int percent))) (<= 0 (object__size2 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size2))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int percent))) (<= 0 (object__component__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a (Array Int percent))) (<= 0 (object__alignment2 a))))

(define-fun bool_eq4 ((x us_t2)
  (y us_t2)) Bool (bool_eq3 (elts2 x) (to_rep (first4 (rt2 x)))
                  (to_rep (last4 (rt2 x))) (elts2 y)
                  (to_rep (first4 (rt2 y))) (to_rep (last4 (rt2 y)))))

(declare-fun user_eq10 (us_t2 us_t2) Bool)

(declare-fun dummy10 () us_t2)

(declare-datatypes ()
((percent_array__ref (mk_percent_array__ref (percent_array__content us_t2)))))
(define-fun percent_array__ref___projection ((a percent_array__ref)) us_t2
  (percent_array__content a))

(declare-sort t3 0)

(declare-fun first6 (t3) character)

(declare-fun last6 (t3) character)

(declare-fun mk3 (Int Int) t3)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range2 f)
     (=> (in_range2 l)
     (and (= (to_rep (first6 (mk3 f l))) f) (= (to_rep (last6 (mk3 f l))) l)))) :pattern (
  (mk3 f l)) )))

(define-fun dynamic_property3 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range2 low)
                   (and (in_range2 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes ()
((us_t3 (mk___t3 (elts3 (Array Int percent))(rt3 t3)))))
(define-fun to_array3 ((a us_t3)) (Array Int percent) (elts3 a))

(define-fun of_array3 ((a (Array Int percent)) (f Int)
  (l Int)) us_t3 (mk___t3 a (mk3 f l)))

(define-fun first7 ((a us_t3)) Int (to_rep (first6 (rt3 a))))

(define-fun last7 ((a us_t3)) Int (to_rep (last6 (rt3 a))))

(define-fun length3 ((a us_t3)) Int (ite (<= (first7 a) (last7 a))
                                    (+ (- (last7 a) (first7 a)) 1) 0))

(declare-fun value__size3 () Int)

(declare-fun object__size3 ((Array Int percent)) Int)

(declare-fun value__component__size3 () Int)

(declare-fun object__component__size3 ((Array Int percent)) Int)

(declare-fun value__alignment3 () Int)

(declare-fun object__alignment3 ((Array Int percent)) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a (Array Int percent))) (<= 0 (object__size3 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size3))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int percent))) (<= 0 (object__component__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a (Array Int percent))) (<= 0 (object__alignment3 a))))

(define-fun bool_eq5 ((x us_t3)
  (y us_t3)) Bool (bool_eq3 (elts3 x) (to_rep (first6 (rt3 x)))
                  (to_rep (last6 (rt3 x))) (elts3 y)
                  (to_rep (first6 (rt3 y))) (to_rep (last6 (rt3 y)))))

(declare-fun user_eq11 (us_t3 us_t3) Bool)

(declare-fun dummy11 () us_t3)

(declare-datatypes ()
((array_type__ref1 (mk_array_type__ref1 (array_type__content1 us_t3)))))
(define-fun array_type__ref_2__projection ((a array_type__ref1)) us_t3
  (array_type__content1 a))

(declare-sort component_type1 0)

(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq12 (component_type1 component_type1) Bool)

(declare-fun dummy12 () component_type1)

(declare-datatypes ()
((component_type__ref1
 (mk_component_type__ref1 (component_type__content1 component_type1)))))
(define-fun component_type__ref_2__projection ((a component_type__ref1)) component_type1
  (component_type__content1 a))

(define-fun dynamic_invariant7 ((temp___expr_574 Int)
  (temp___is_init_571 Bool) (temp___skip_constant_572 Bool)
  (temp___do_toplevel_573 Bool)) Bool (=>
                                      (or (= temp___is_init_571 true)
                                      (<= 0 100)) (in_range8
                                      temp___expr_574)))

(define-fun dynamic_invariant8 ((temp___expr_586 us_t3)
  (temp___is_init_583 Bool) (temp___skip_constant_584 Bool)
  (temp___do_toplevel_585 Bool)) Bool (=>
                                      (not (= temp___skip_constant_584 true))
                                      (dynamic_property3 0 255
                                      (first7 temp___expr_586)
                                      (last7 temp___expr_586))))

(declare-fun percent_count (us_t3 Int) Int)

(declare-fun percent_count__function_guard (Int us_t3 Int) Bool)

;; percent_count__post_axiom
  (assert
  (forall ((source us_t3))
  (forall ((pattern Int))
  (! (=>
     (and (dynamic_invariant8 source true true true) (dynamic_invariant7
     pattern true true true)) (dynamic_invariant
     (percent_count source pattern) true false true)) :pattern ((percent_count
                                                                source
                                                                pattern)) ))))

(declare-sort t4 0)

(declare-fun first8 (t4) character)

(declare-fun last8 (t4) character)

(declare-fun mk4 (Int Int) t4)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range2 f)
     (=> (in_range2 l)
     (and (= (to_rep (first8 (mk4 f l))) f) (= (to_rep (last8 (mk4 f l))) l)))) :pattern (
  (mk4 f l)) )))

(define-fun dynamic_property4 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range2 low)
                   (and (in_range2 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes ()
((us_t4 (mk___t4 (elts4 (Array Int percent))(rt4 t4)))))
(define-fun to_array4 ((a us_t4)) (Array Int percent) (elts4 a))

(define-fun of_array4 ((a (Array Int percent)) (f Int)
  (l Int)) us_t4 (mk___t4 a (mk4 f l)))

(define-fun first9 ((a us_t4)) Int (to_rep (first8 (rt4 a))))

(define-fun last9 ((a us_t4)) Int (to_rep (last8 (rt4 a))))

(define-fun length4 ((a us_t4)) Int (ite (<= (first9 a) (last9 a))
                                    (+ (- (last9 a) (first9 a)) 1) 0))

(declare-fun value__size4 () Int)

(declare-fun object__size4 ((Array Int percent)) Int)

(declare-fun value__component__size4 () Int)

(declare-fun object__component__size4 ((Array Int percent)) Int)

(declare-fun value__alignment4 () Int)

(declare-fun object__alignment4 ((Array Int percent)) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a (Array Int percent))) (<= 0 (object__size4 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size4))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int percent))) (<= 0 (object__component__size4 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a (Array Int percent))) (<= 0 (object__alignment4 a))))

(define-fun bool_eq6 ((x us_t4)
  (y us_t4)) Bool (bool_eq3 (elts4 x) (to_rep (first8 (rt4 x)))
                  (to_rep (last8 (rt4 x))) (elts4 y)
                  (to_rep (first8 (rt4 y))) (to_rep (last8 (rt4 y)))))

(declare-fun user_eq13 (us_t4 us_t4) Bool)

(declare-fun dummy13 () us_t4)

(declare-datatypes ()
((array_type__ref2 (mk_array_type__ref2 (array_type__content2 us_t4)))))
(define-fun array_type__ref_3__projection ((a array_type__ref2)) us_t4
  (array_type__content2 a))

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-sort t17b 0)

(define-fun in_range9 ((x Int)) Bool (and (<= 0 x) (<= x 12)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq14 (t17b t17b) Bool)

(declare-fun dummy14 () t17b)

(declare-datatypes () ((t17b__ref (mk_t17b__ref (t17b__content t17b)))))
(define-fun t17b__ref___projection ((a t17b__ref)) t17b (t17b__content a))

(declare-fun my_percents__first () character)

(declare-fun my_percents__last () character)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun generic_examples__my_percents__aggregate_def (Int Int Int Int
  Int Int Int Int Int Int Int Int Int) (Array Int percent))

;; def_axiom
  (assert
  (forall ((temp___627 Int) (temp___628 Int) (temp___629 Int)
  (temp___630 Int) (temp___631 Int) (temp___632 Int) (temp___633 Int)
  (temp___634 Int) (temp___635 Int) (temp___636 Int) (temp___637 Int)
  (temp___638 Int) (temp___639 Int))
  (let ((temp___626 (generic_examples__my_percents__aggregate_def temp___627
                    temp___628 temp___629 temp___630 temp___631 temp___632
                    temp___633 temp___634 temp___635 temp___636 temp___637
                    temp___638 temp___639)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and (= (select temp___626 0) (of_rep2 temp___627))
  (= (select temp___626 1) (of_rep2 temp___628)))
  (= (select temp___626 2) (of_rep2 temp___629)))
  (= (select temp___626 3) (of_rep2 temp___630)))
  (= (select temp___626 4) (of_rep2 temp___631)))
  (= (select temp___626 5) (of_rep2 temp___632)))
  (= (select temp___626 6) (of_rep2 temp___633)))
  (= (select temp___626 7) (of_rep2 temp___634)))
  (= (select temp___626 8) (of_rep2 temp___635)))
  (= (select temp___626 9) (of_rep2 temp___636)))
  (= (select temp___626 10) (of_rep2 temp___637)))
  (= (select temp___626 11) (of_rep2 temp___638)))
  (= (select temp___626 12) (of_rep2 temp___639))))))

(declare-fun temp___String_Literal_642 (tuple0) (Array Int character))

;; temp___String_Literal_642__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_642 us_void_param) 1)) 72)
     (= (to_rep (select (temp___String_Literal_642 us_void_param) 2)) 111))
     (= (to_rep (select (temp___String_Literal_642 us_void_param) 3)) 119))
     (= (to_rep (select (temp___String_Literal_642 us_void_param) 4)) 32))
     (= (to_rep (select (temp___String_Literal_642 us_void_param) 5)) 110))
     (= (to_rep (select (temp___String_Literal_642 us_void_param) 6)) 111))
     (= (to_rep (select (temp___String_Literal_642 us_void_param) 7)) 119))
     (= (to_rep (select (temp___String_Literal_642 us_void_param) 8)) 32))
     (= (to_rep (select (temp___String_Literal_642 us_void_param) 9)) 98))
     (= (to_rep (select (temp___String_Literal_642 us_void_param) 10)) 114))
     (= (to_rep (select (temp___String_Literal_642 us_void_param) 11)) 111))
     (= (to_rep (select (temp___String_Literal_642 us_void_param) 12)) 119))
     (= (to_rep (select (temp___String_Literal_642 us_void_param) 13)) 110))
     (= (to_rep (select (temp___String_Literal_642 us_void_param) 14)) 32))
     (= (to_rep (select (temp___String_Literal_642 us_void_param) 15)) 99))
     (= (to_rep (select (temp___String_Literal_642 us_void_param) 16)) 111))
     (= (to_rep (select (temp___String_Literal_642 us_void_param) 17)) 119)) :pattern (
  (temp___String_Literal_642 us_void_param)) )))

(declare-fun temp___String_Literal_643 (tuple0) (Array Int character))

;; temp___String_Literal_643__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_643 us_void_param) 1)) 72)
     (= (to_rep (select (temp___String_Literal_643 us_void_param) 2)) 111))
     (= (to_rep (select (temp___String_Literal_643 us_void_param) 3)) 119))
     (= (to_rep (select (temp___String_Literal_643 us_void_param) 4)) 32))
     (= (to_rep (select (temp___String_Literal_643 us_void_param) 5)) 110))
     (= (to_rep (select (temp___String_Literal_643 us_void_param) 6)) 111))
     (= (to_rep (select (temp___String_Literal_643 us_void_param) 7)) 119))
     (= (to_rep (select (temp___String_Literal_643 us_void_param) 8)) 32))
     (= (to_rep (select (temp___String_Literal_643 us_void_param) 9)) 98))
     (= (to_rep (select (temp___String_Literal_643 us_void_param) 10)) 114))
     (= (to_rep (select (temp___String_Literal_643 us_void_param) 11)) 111))
     (= (to_rep (select (temp___String_Literal_643 us_void_param) 12)) 119))
     (= (to_rep (select (temp___String_Literal_643 us_void_param) 13)) 110))
     (= (to_rep (select (temp___String_Literal_643 us_void_param) 14)) 32))
     (= (to_rep (select (temp___String_Literal_643 us_void_param) 15)) 99))
     (= (to_rep (select (temp___String_Literal_643 us_void_param) 16)) 111))
     (= (to_rep (select (temp___String_Literal_643 us_void_param) 17)) 119)) :pattern (
  (temp___String_Literal_643 us_void_param)) )))

(define-fun dynamic_invariant9 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range1
                                     temp___expr_39)))

(define-fun dynamic_invariant10 ((temp___expr_15 Int)
  (temp___is_init_12 Bool) (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range temp___expr_15)))

(define-fun dynamic_invariant11 ((temp___expr_563 Int)
  (temp___is_init_560 Bool) (temp___skip_constant_561 Bool)
  (temp___do_toplevel_562 Bool)) Bool (=>
                                      (or (= temp___is_init_560 true)
                                      (<= 0 100)) (in_range7
                                      temp___expr_563)))

(define-fun dynamic_invariant12 ((temp___expr_569 us_t2)
  (temp___is_init_566 Bool) (temp___skip_constant_567 Bool)
  (temp___do_toplevel_568 Bool)) Bool (=>
                                      (not (= temp___skip_constant_567 true))
                                      (dynamic_property2 0 255
                                      (first5 temp___expr_569)
                                      (last5 temp___expr_569))))

(define-fun dynamic_invariant13 ((temp___expr_614 us_t4)
  (temp___is_init_611 Bool) (temp___skip_constant_612 Bool)
  (temp___do_toplevel_613 Bool)) Bool (=>
                                      (not (= temp___skip_constant_612 true))
                                      (dynamic_property4 0 255
                                      (first9 temp___expr_614)
                                      (last9 temp___expr_614))))

(declare-fun default_width () Int)

(declare-fun default_base () Int)

(declare-fun the_count () Int)

(declare-fun my_percents () (Array Int percent))

(declare-fun o () Int)

(declare-fun o1 () (Array Int character))

(declare-fun o2 () t1)

(declare-fun o3 () Int)

(declare-fun o4 () (Array Int percent))

(declare-fun o5 () t3)

(declare-fun o6 () Int)

(declare-fun result () (Array Int percent))

(declare-fun my_percents1 () (Array Int percent))

(declare-fun result1 () Int)

(declare-fun the_count1 () Int)

(declare-fun result2 () Int)

(declare-fun the_count2 () Int)

(declare-fun result3 () Int)

(declare-fun the_count3 () Int)

;; H
  (assert (in_range4 default_width))

;; H
  (assert (in_range5 default_base))

;; H
  (assert (=> (<= 0 2147483647) (in_range3 the_count)))

;; H
  (assert (= result my_percents))

;; H
  (assert
  (= my_percents1 (generic_examples__my_percents__aggregate_def 5 6 7 5 3 4
                  19 16 5 23 45 4 3)))

;; H
  (assert (= (to_rep my_percents__first) (to_rep (first4 (mk2 0 12)))))

;; H
  (assert (= (to_rep my_percents__last) (to_rep (last4 (mk2 0 12)))))

;; H
  (assert (dynamic_property2 0 255 (to_rep my_percents__first)
  (to_rep my_percents__last)))

;; H
  (assert
  (and
  (= o (count (mk___t (temp___String_Literal_642 Tuple0) (mk 1 17)) 119))
  (in_range3 o)))

;; H
  (assert (= result1 the_count))

;; H
  (assert (= the_count1 o))

;; H
  (assert (dynamic_property1 1 2147483647 1 17))

;; H
  (assert (= (temp___String_Literal_643 Tuple0) o1))

;; H
  (assert (= (mk1 1 17) o2))

;; H
  (assert (and (= o3 (char_count (mk___t1 o1 o2) 119)) (in_range3 o3)))

;; H
  (assert (= result2 the_count1))

;; H
  (assert (= the_count2 o3))

;; H
  (assert (dynamic_property3 0 255 (to_rep my_percents__first)
  (to_rep my_percents__last)))

;; H
  (assert (= my_percents1 o4))

;; H
  (assert
  (= (mk3 (to_rep my_percents__first) (to_rep my_percents__last)) o5))

;; H
  (assert (and (= o6 (percent_count (mk___t3 o4 o5) 5)) (in_range3 o6)))

;; H
  (assert (= result3 the_count2))

;; H
  (assert (= the_count3 o6))

(assert
;; WP_parameter_def
 ;; File "generic_examples.adb", line 59, characters 0-0
  (not (dynamic_property4 0 255 (to_rep my_percents__first)
  (to_rep my_percents__last))))
(check-sat)
(exit)
