;; produced by z3_gnatprove.drv ;;
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort character 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (character character) Bool)

(declare-fun dummy () character)

(declare-datatypes ()
((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character
  (character__content a))

(define-fun dynamic_invariant ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range1 temp___expr_63)))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int
  Int) (Array Int character))

;; concat_def
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (character Int) (Array Int character))

;; singleton_def
  (assert
  (forall ((v character))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_78 Int))
                           (=>
                           (and (<= a__first temp___idx_78)
                           (<= temp___idx_78 a__last))
                           (= (to_rep (select a temp___idx_78)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_78)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_78 Int))
  (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last))
  (= (to_rep (select a temp___idx_78)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_78)))))))))))

(declare-fun compare ((Array Int character) Int Int (Array Int character) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-sort buffer_count_type 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 1024)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (buffer_count_type buffer_count_type) Bool)

(declare-fun dummy1 () buffer_count_type)

(declare-datatypes ()
((buffer_count_type__ref
 (mk_buffer_count_type__ref (buffer_count_type__content buffer_count_type)))))
(define-fun buffer_count_type__ref___projection ((a buffer_count_type__ref)) buffer_count_type
  (buffer_count_type__content a))

(define-fun dynamic_invariant1 ((temp___expr_135 Int)
  (temp___is_init_132 Bool) (temp___skip_constant_133 Bool)
  (temp___do_toplevel_134 Bool)) Bool (=>
                                      (or (= temp___is_init_132 true)
                                      (<= 0 1024)) (in_range2
                                      temp___expr_135)))

(declare-sort buffer_index_type 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 1024)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (buffer_index_type buffer_index_type) Bool)

(declare-fun dummy2 () buffer_index_type)

(declare-datatypes ()
((buffer_index_type__ref
 (mk_buffer_index_type__ref (buffer_index_type__content buffer_index_type)))))
(define-fun buffer_index_type__ref___projection ((a buffer_index_type__ref)) buffer_index_type
  (buffer_index_type__content a))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun erase_character () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun fill_character () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(declare-fun r9b () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS7 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS8 () Int)

(declare-fun temp___235 (Int) (Array Int character))

;; def_axiom
  (assert
  (forall ((temp___237 Int))
  (forall ((temp___238 Int))
  (= (select (temp___235 temp___237) temp___238) (of_rep temp___237)))))

(define-fun dynamic_invariant2 ((temp___expr_141 Int)
  (temp___is_init_138 Bool) (temp___skip_constant_139 Bool)
  (temp___do_toplevel_140 Bool)) Bool (=>
                                      (or (= temp___is_init_138 true)
                                      (<= 1 1024)) (in_range3
                                      temp___expr_141)))

(declare-fun buffer () (Array Int character))

(declare-fun valid () Int)

(declare-fun workspace () (Array Int character))

(declare-fun offset () Int)

(declare-fun i () Int)

(declare-fun i1 () Int)

(declare-fun temp___243 () Int)

(declare-fun temp___241 () (Array Int character))

(declare-fun temp___240 () Int)

(declare-fun o () character)

(declare-fun o1 () Int)

(declare-fun o2 () (Array Int character))

(declare-fun o3 () Int)

(declare-fun o4 () character)

(declare-fun result () (Array Int character))

(declare-fun workspace1 () (Array Int character))

(declare-fun result1 () Int)

(declare-fun offset1 () Int)

(declare-fun result2 () Int)

(declare-fun i2 () Int)

(declare-fun workspace2 () (Array Int character))

(declare-fun offset2 () Int)

(declare-fun i3 () Int)

(declare-fun result3 () (Array Int character))

(declare-fun workspace3 () (Array Int character))

(declare-fun result4 () Int)

(declare-fun offset3 () Int)

(declare-fun result5 () Int)

(declare-fun i4 () Int)

(declare-fun workspace4 () (Array Int character))

(declare-fun offset4 () Int)

(declare-fun i5 () Int)

(declare-fun workspace5 () (Array Int character))

(declare-fun offset5 () Int)

(declare-fun i6 () Int)

(declare-fun workspace6 () (Array Int character))

(declare-fun offset6 () Int)

(declare-fun i7 () Int)

(declare-fun workspace7 () (Array Int character))

(declare-fun offset7 () Int)

(declare-fun i8 () Int)

(declare-fun workspace8 () (Array Int character))

(declare-fun offset8 () Int)

(declare-fun i9 () Int)

(declare-fun workspace9 () (Array Int character))

(declare-fun offset9 () Int)

(declare-fun i10 () Int)

(declare-fun result6 () int__ref)

(declare-fun valid1 () Int)

(declare-fun result7 () int__ref)

(declare-fun i11 () Int)

(declare-fun i12 () Int)

(define-fun i13 () int__ref (mk_int__ref i7))

(define-fun offset10 () int__ref (mk_int__ref offset6))

(define-fun workspace10 () map__ref (mk_map__ref workspace6))

(define-fun result8 () int__ref (mk_int__ref result2))

(define-fun i14 () int__ref (mk_int__ref i))

;; H
  (assert (in_range1 erase_character))

;; H
  (assert (in_range1 fill_character))

;; H
  (assert (=> (<= 0 1024) (in_range2 valid)))

;; H
  (assert (=> (<= 0 1024) (in_range2 offset)))

;; H
  (assert (= result workspace))

;; H
  (assert (= workspace1 (temp___235 32)))

;; H
  (assert (= result1 offset))

;; H
  (assert (= offset1 0))

;; H
  (assert (= result8 i14))

;; H
  (assert (= i2 1))

;; H
  (assert
  (=> (and (<= 1 i2) (<= i2 1024))
  (and
  (and (= temp___243 offset1)
  (and (= temp___241 workspace1)
  (and (= temp___240 i2)
  (and (< offset2 i3)
  (and
  (and
  (and (=> (<= 1 1024) (in_range3 i3)) (=> (<= 0 1024) (in_range2 offset2)))
  (and (<= 1 i3) (<= i3 1024)))
  (and
  (ite (not (= (to_rep (select buffer i3)) erase_character))
  (and
  (and
  (and (= (to_rep o) (to_rep (select buffer i3)))
  (and
  (and (and (<= 1 (+ 1 offset2)) (<= (+ 1 offset2) 1024))
  (= o1 (+ 1 offset2))) (= o2 (store workspace2 o1 o))))
  (and (= workspace2 result3) (= workspace3 o2)))
  (and (and (= o3 (+ offset2 1)) (in_range2 (+ offset2 1)))
  (and (= offset2 result4) (= offset3 o3))))
  (and (= offset3 offset2) (= workspace3 workspace2))) (= i3 1024)))))))
  (and (and (= i3 i7) (and (= offset3 offset6) (= workspace3 workspace6)))
  (and (= i8 i3) (and (= offset7 offset3) (= workspace7 workspace3)))))))

;; H
  (assert (=> (and (<= 1 i2) (<= i2 1024)) (= (mk_int__ref i9) i13)))

;; H
  (assert
  (=> (and (<= 1 i2) (<= i2 1024)) (= (mk_int__ref offset8) offset10)))

;; H
  (assert
  (=> (and (<= 1 i2) (<= i2 1024)) (= (mk_map__ref workspace8) workspace10)))

;; H
  (assert (=> (and (<= 1 i2) (<= i2 1024)) (= i10 i8)))

;; H
  (assert (=> (and (<= 1 i2) (<= i2 1024)) (= offset9 offset7)))

;; H
  (assert (=> (and (<= 1 i2) (<= i2 1024)) (= workspace9 workspace7)))

;; H
  (assert (=> (not (and (<= 1 i2) (<= i2 1024))) (= i2 i9)))

;; H
  (assert (=> (not (and (<= 1 i2) (<= i2 1024))) (= offset1 offset8)))

;; H
  (assert (=> (not (and (<= 1 i2) (<= i2 1024))) (= workspace1 workspace8)))

;; H
  (assert (=> (not (and (<= 1 i2) (<= i2 1024))) (= i10 i2)))

;; H
  (assert (=> (not (and (<= 1 i2) (<= i2 1024))) (= offset9 offset1)))

;; H
  (assert (=> (not (and (<= 1 i2) (<= i2 1024))) (= workspace9 workspace1)))

;; H
  (assert (= result6 (mk_int__ref valid)))

;; H
  (assert (= valid1 offset8))

;; H
  (assert (= offset8 r9b))

;; H
  (assert (in_range2 r9b))

;; H
  (assert (<= r9b 1023))

(assert
;; WP_parameter_def
 ;; File "buffers.adb", line 52, characters 0-0
  (not (<= 0 r9b)))
(check-sat)
(exit)
