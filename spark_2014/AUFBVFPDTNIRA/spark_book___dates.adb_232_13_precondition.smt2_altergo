(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type day_advance_type

predicate in_range1(x: int) = (((-36524) <= x) and (x <= 36524))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : day_advance_type, day_advance_type -> bool

logic dummy : day_advance_type

type day_advance_type__ref = { day_advance_type__content : day_advance_type
}

function day_advance_type__ref___projection(a: day_advance_type__ref) : day_advance_type =
  (a).day_advance_type__content

type year_type

predicate in_range2(x: int) = ((2000 <= x) and (x <= 2099))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : year_type, year_type -> bool

logic dummy1 : year_type

type year_type__ref = { year_type__content : year_type
}

function year_type__ref___projection(a: year_type__ref) : year_type =
  (a).year_type__content

logic to_rep : year_type -> int

logic of_rep : int -> year_type

axiom inversion_axiom :
  (forall x:year_type [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:year_type [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type month_type

predicate in_range3(x: int) = ((1 <= x) and (x <= 12))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : month_type, month_type -> bool

logic dummy2 : month_type

type month_type__ref = { month_type__content : month_type
}

function month_type__ref___projection(a: month_type__ref) : month_type =
  (a).month_type__content

logic to_rep1 : month_type -> int

logic of_rep1 : int -> month_type

axiom inversion_axiom1 :
  (forall x:month_type [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:month_type [to_rep1(x)]. in_range3(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range3(x) ->
  (to_rep1(of_rep1(x)) = x)))

type day_type

predicate in_range4(x: int) = ((1 <= x) and (x <= 31))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : day_type, day_type -> bool

logic dummy3 : day_type

type day_type__ref = { day_type__content : day_type
}

function day_type__ref___projection(a: day_type__ref) : day_type =
  (a).day_type__content

logic to_rep2 : day_type -> int

logic of_rep2 : int -> day_type

axiom inversion_axiom2 :
  (forall x:day_type [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:day_type [to_rep2(x)]. in_range4(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range4(x) ->
  (to_rep2(of_rep2(x)) = x)))

type us_split_fields = { rec__dates__date__day : day_type;
rec__dates__date__month : month_type; rec__dates__date__year : year_type
}

function us_split_fields_Day__projection(a: us_split_fields) : day_type =
  (a).rec__dates__date__day

function us_split_fields_Month__projection(a: us_split_fields) : month_type =
  (a).rec__dates__date__month

function us_split_fields_Year__projection(a: us_split_fields) : year_type =
  (a).rec__dates__date__year

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq6 : us_rep, us_rep -> bool

axiom bool_eq_def5 :
  (forall a:us_rep. forall b:us_rep [bool_eq6(a, b)].
  (((((to_rep2(((a).us_split_fields1).rec__dates__date__day) = to_rep2(((b).us_split_fields1).rec__dates__date__day)) and
  (to_rep1(((a).us_split_fields1).rec__dates__date__month) = to_rep1(((b).us_split_fields1).rec__dates__date__month))) and
  (to_rep(((a).us_split_fields1).rec__dates__date__year) = to_rep(((b).us_split_fields1).rec__dates__date__year))) ->
  (bool_eq6(a, b) = true)) and
  ((not (((to_rep2(((a).us_split_fields1).rec__dates__date__day) = to_rep2(((b).us_split_fields1).rec__dates__date__day)) and
  (to_rep1(((a).us_split_fields1).rec__dates__date__month) = to_rep1(((b).us_split_fields1).rec__dates__date__month))) and
  (to_rep(((a).us_split_fields1).rec__dates__date__year) = to_rep(((b).us_split_fields1).rec__dates__date__year)))) ->
  (bool_eq6(a, b) = false))))

logic user_eq4 : us_rep, us_rep -> bool

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:day_type. forall a1:month_type. forall a2:year_type.
  (0 <= object__size({ us_split_fields1 = { rec__dates__date__day = a;
  rec__dates__date__month = a1; rec__dates__date__year = a2 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:day_type. forall a1:month_type. forall a2:year_type.
  (0 <= object__alignment({ us_split_fields1 = { rec__dates__date__day = a;
  rec__dates__date__month = a1; rec__dates__date__year = a2 } })))

logic dates__date__day__first__bit : int

logic dates__date__day__last__bit : int

logic dates__date__day__position : int

axiom dates__date__day__first__bit_axiom :
  (0 <= dates__date__day__first__bit)

axiom dates__date__day__last__bit_axiom :
  (dates__date__day__first__bit <  dates__date__day__last__bit)

axiom dates__date__day__position_axiom : (0 <= dates__date__day__position)

logic dates__date__month__first__bit : int

logic dates__date__month__last__bit : int

logic dates__date__month__position : int

axiom dates__date__month__first__bit_axiom :
  (0 <= dates__date__month__first__bit)

axiom dates__date__month__last__bit_axiom :
  (dates__date__month__first__bit <  dates__date__month__last__bit)

axiom dates__date__month__position_axiom :
  (0 <= dates__date__month__position)

logic dates__date__year__first__bit : int

logic dates__date__year__last__bit : int

logic dates__date__year__position : int

axiom dates__date__year__first__bit_axiom :
  (0 <= dates__date__year__first__bit)

axiom dates__date__year__last__bit_axiom :
  (dates__date__year__first__bit <  dates__date__year__last__bit)

axiom dates__date__year__position_axiom : (0 <= dates__date__year__position)

logic dummy4 : day_type

logic dummy5 : month_type

logic dummy6 : year_type

type date__ref = { date__content : us_rep
}

function date__ref___projection(a: date__ref) : us_rep = (a).date__content

logic attr__ATTRIBUTE_ADDRESS : int

logic by__ : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic maximum_date : unit -> us_rep

logic maximum_date__function_guard : us_rep, unit -> prop

axiom maximum_date__post_axiom : true

axiom maximum_date__def_axiom : (maximum_date(void) = { us_split_fields1 = {
  rec__dates__date__day = of_rep2(31); rec__dates__date__month = of_rep1(12);
  rec__dates__date__year = of_rep(2099) } })

logic minimum_date : unit -> us_rep

logic minimum_date__function_guard : us_rep, unit -> prop

axiom minimum_date__post_axiom : true

axiom minimum_date__def_axiom : (minimum_date(void) = { us_split_fields1 = {
  rec__dates__date__day = of_rep2(1); rec__dates__date__month = of_rep1(1);
  rec__dates__date__year = of_rep(2000) } })

logic attr__ATTRIBUTE_ADDRESS3 : int

logic r36b : int

logic attr__ATTRIBUTE_ADDRESS4 : int

type integer

predicate in_range5(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : integer, integer -> bool

logic dummy7 : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep3 : integer -> int

logic of_rep3 : int -> integer

axiom inversion_axiom3 :
  (forall x:integer [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 : (forall x:integer [to_rep3(x)]. in_range5(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range5(x) ->
  (to_rep3(of_rep3(x)) = x)))

predicate dynamic_property(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : integer, integer -> bool

logic dummy8 : integer

type t37b__ref = { t37b__content : integer
}

function t37b__ref___projection(a: t37b__ref) : integer = (a).t37b__content

logic attr__ATTRIBUTE_ADDRESS5 : int

logic r38b : int

logic attr__ATTRIBUTE_ADDRESS6 : int

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq7 : integer, integer -> bool

logic dummy9 : integer

type t39b__ref = { t39b__content : integer
}

function t39b__ref___projection(a: t39b__ref) : integer = (a).t39b__content

logic attr__ATTRIBUTE_ADDRESS7 : int

 (* File "dates.ads", line 89, characters 0-0 *)
goal WP_parameter_def :
  (forall current_date__split_fields:day_type.
  forall current_date__split_fields1:month_type.
  forall current_date__split_fields2:year_type. forall valid:bool.
  forall steps:int. forall i:int. forall o:day_type. forall o1:month_type.
  forall o2:year_type. forall result:bool. forall valid1:bool.
  forall result1:int. forall steps1:int. forall result2:int. forall i1:int.
  forall result3:bool. forall valid2:bool.
  forall current_date__split_fields3:day_type.
  forall current_date__split_fields4:month_type.
  forall current_date__split_fields5:year_type. forall i2:int.
  (in_range1(by__) -> ((((-36524) <= 36524) -> in_range1(steps)) ->
  (((result = valid) and (valid1 = of_int(1))) -> ((0 <= by__) ->
  (((result1 = steps) and (steps1 = by__)) -> (((steps1 = r36b) and
  in_range1(r36b)) -> (((result2 = i) and (i1 = 1)) -> (((1 <= i1) and
  (i1 <= r36b)) -> ((((({ us_split_fields1 = { rec__dates__date__day = o;
  rec__dates__date__month = o1; rec__dates__date__year = o2 }
  } = maximum_date(void)) and ((of_rep2(31) = o) and ((of_rep1(12) = o1) and
  (of_rep(2099) = o2)))) and (result3 = bool_eq6({ us_split_fields1 = {
  rec__dates__date__day = current_date__split_fields;
  rec__dates__date__month = current_date__split_fields1;
  rec__dates__date__year = current_date__split_fields2 } }, {
  us_split_fields1 = { rec__dates__date__day = o; rec__dates__date__month =
  o1; rec__dates__date__year = o2 } }))) and ((not (result3 = true)) and
  (valid2 = valid1))) -> ((not (bool_eq6({ us_split_fields1 = {
  rec__dates__date__day = current_date__split_fields3;
  rec__dates__date__month = current_date__split_fields4;
  rec__dates__date__year = current_date__split_fields5 } },
  maximum_date(void)) = true)) -> ((((1 <= r36b) -> dynamic_property(1, r36b,
  i2)) and ((1 <= i2) and (i2 <= r36b))) -> (not (bool_eq6({
  us_split_fields1 = { rec__dates__date__day = current_date__split_fields3;
  rec__dates__date__month = current_date__split_fields4;
  rec__dates__date__year = current_date__split_fields5 } },
  maximum_date(void)) = true))))))))))))))
