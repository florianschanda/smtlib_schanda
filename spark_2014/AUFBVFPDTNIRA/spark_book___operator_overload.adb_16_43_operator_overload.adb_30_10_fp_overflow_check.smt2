;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun pow2 (Int) Int)

(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                (fp.isPositive x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                 (fp.isNegative x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x)
                                            (fp.isPositive x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x)
                                             (fp.isNegative x)))

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y))
                    (and (fp.isNegative x) (fp.isNegative y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y))
                    (and (fp.isNegative x) (fp.isPositive y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z))
                    (=> (diff_sign x y) (fp.isNegative z))))

(define-fun sqr ((x Real)) Real (* x x))

(declare-fun sqrt1 (Real) Real)

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r))
                 (and (fp.isNegative x) (< r 0.0))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content Float32)))))
(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort positive 0)

(declare-fun positiveqtint (positive) Int)

;; positive'axiom
  (assert
  (forall ((i positive))
  (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-const dummy1 positive)

(declare-datatypes ()
((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(declare-sort character 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-const dummy2 character)

(declare-datatypes ()
((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_91 Int))
                           (=>
                           (and (<= a__first temp___idx_91)
                           (<= temp___idx_91 a__last))
                           (= (to_rep (select a temp___idx_91)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_91)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_91 Int))
  (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last))
  (= (to_rep (select a temp___idx_91)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_91)))))))))))

(define-fun to_rep1 ((x integer)) Int (integerqtint x))

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                             (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range f)
     (=> (in_range l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range low)
                   (and (in_range high)
                   (=> (<= low high) (and (in_range1 low) (in_range1 high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-fun object__size ((Array Int character)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int character)) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-const dummy3 us_t)

(declare-fun to_string (us_image) us_t)

(declare-fun from_string (us_t) us_image)

(declare-datatypes ()
((string__ref (mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content
                                                            a))

(declare-sort float 0)

(declare-fun user_eq4 (float float) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE3 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Float32)

(declare-const dummy4 float)

(declare-datatypes () ((float__ref (mk_float__ref (float__content float)))))
(define-fun float__ref___projection ((a float__ref)) float (float__content a))

(define-fun dynamic_invariant ((temp___expr_60 Float32)
  (temp___is_init_56 Bool) (temp___skip_constant_57 Bool)
  (temp___do_toplevel_58 Bool)
  (temp___do_typ_inv_59 Bool)) Bool (=>
                                    (or (= temp___is_init_56 true)
                                    (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                    (fp.isFinite32 temp___expr_60)))

(declare-fun to_rep2 (float) Float32)

(declare-fun of_rep2 (Float32) float)

;; inversion_axiom
  (assert
  (forall ((x float))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x float))
  (! (fp.isFinite32 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Float32))
  (! (=> (fp.isFinite32 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                                  (of_rep2 x))) )))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__operator_overload__point__x_coord float)(rec__operator_overload__point__y_coord float)))))
(define-fun us_split_fields_X_Coord__projection ((a us_split_fields)) float
  (rec__operator_overload__point__x_coord a))

(define-fun us_split_fields_Y_Coord__projection ((a us_split_fields)) float
  (rec__operator_overload__point__y_coord a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___3__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                                a))

(define-fun bool_eq2 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep2
                           (rec__operator_overload__point__x_coord
                           (us_split_fields1 a))) (to_rep2
                                                  (rec__operator_overload__point__x_coord
                                                  (us_split_fields1 b))))
                        (= (to_rep2
                           (rec__operator_overload__point__y_coord
                           (us_split_fields1 a))) (to_rep2
                                                  (rec__operator_overload__point__y_coord
                                                  (us_split_fields1 b)))))
                   true false))

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-const operator_overload__point__x_coord__first__bit Int)

(declare-const operator_overload__point__x_coord__last__bit Int)

(declare-const operator_overload__point__x_coord__position Int)

;; operator_overload__point__x_coord__first__bit_axiom
  (assert (<= 0 operator_overload__point__x_coord__first__bit))

;; operator_overload__point__x_coord__last__bit_axiom
  (assert
  (< operator_overload__point__x_coord__first__bit operator_overload__point__x_coord__last__bit))

;; operator_overload__point__x_coord__position_axiom
  (assert (<= 0 operator_overload__point__x_coord__position))

(declare-const operator_overload__point__y_coord__first__bit Int)

(declare-const operator_overload__point__y_coord__last__bit Int)

(declare-const operator_overload__point__y_coord__position Int)

;; operator_overload__point__y_coord__first__bit_axiom
  (assert (<= 0 operator_overload__point__y_coord__first__bit))

;; operator_overload__point__y_coord__last__bit_axiom
  (assert
  (< operator_overload__point__y_coord__first__bit operator_overload__point__y_coord__last__bit))

;; operator_overload__point__y_coord__position_axiom
  (assert (<= 0 operator_overload__point__y_coord__position))

(declare-fun user_eq5 (us_rep us_rep) Bool)

(declare-const dummy5 us_rep)

(declare-datatypes () ((point__ref (mk_point__ref (point__content us_rep)))))
(define-fun point__ref___projection ((a point__ref)) us_rep (point__content
                                                            a))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const c3b us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const c4b us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const c10b us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const c11b us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(declare-const attr__ATTRIBUTE_ADDRESS11 Int)

(declare-fun temp___String_Literal_583 (tuple0) (Array Int character))

;; temp___String_Literal_583__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_583 us_void_param) 1)) 80)
     (= (to_rep (select (temp___String_Literal_583 us_void_param) 2)) 49))
     (= (to_rep (select (temp___String_Literal_583 us_void_param) 3)) 32))
     (= (to_rep (select (temp___String_Literal_583 us_void_param) 4)) 105))
     (= (to_rep (select (temp___String_Literal_583 us_void_param) 5)) 115))
     (= (to_rep (select (temp___String_Literal_583 us_void_param) 6)) 32))
     (= (to_rep (select (temp___String_Literal_583 us_void_param) 7)) 102))
     (= (to_rep (select (temp___String_Literal_583 us_void_param) 8)) 117))
     (= (to_rep (select (temp___String_Literal_583 us_void_param) 9)) 114))
     (= (to_rep (select (temp___String_Literal_583 us_void_param) 10)) 116))
     (= (to_rep (select (temp___String_Literal_583 us_void_param) 11)) 104))
     (= (to_rep (select (temp___String_Literal_583 us_void_param) 12)) 101))
     (= (to_rep (select (temp___String_Literal_583 us_void_param) 13)) 114))
     (= (to_rep (select (temp___String_Literal_583 us_void_param) 14)) 32))
     (= (to_rep (select (temp___String_Literal_583 us_void_param) 15)) 102))
     (= (to_rep (select (temp___String_Literal_583 us_void_param) 16)) 114))
     (= (to_rep (select (temp___String_Literal_583 us_void_param) 17)) 111))
     (= (to_rep (select (temp___String_Literal_583 us_void_param) 18)) 109))
     (= (to_rep (select (temp___String_Literal_583 us_void_param) 19)) 32))
     (= (to_rep (select (temp___String_Literal_583 us_void_param) 20)) 116))
     (= (to_rep (select (temp___String_Literal_583 us_void_param) 21)) 104))
     (= (to_rep (select (temp___String_Literal_583 us_void_param) 22)) 101))
     (= (to_rep (select (temp___String_Literal_583 us_void_param) 23)) 32))
     (= (to_rep (select (temp___String_Literal_583 us_void_param) 24)) 111))
     (= (to_rep (select (temp___String_Literal_583 us_void_param) 25)) 114))
     (= (to_rep (select (temp___String_Literal_583 us_void_param) 26)) 105))
     (= (to_rep (select (temp___String_Literal_583 us_void_param) 27)) 103))
     (= (to_rep (select (temp___String_Literal_583 us_void_param) 28)) 105))
     (= (to_rep (select (temp___String_Literal_583 us_void_param) 29)) 110))
     (= (to_rep (select (temp___String_Literal_583 us_void_param) 30)) 32))
     (= (to_rep (select (temp___String_Literal_583 us_void_param) 31)) 116))
     (= (to_rep (select (temp___String_Literal_583 us_void_param) 32)) 104))
     (= (to_rep (select (temp___String_Literal_583 us_void_param) 33)) 97))
     (= (to_rep (select (temp___String_Literal_583 us_void_param) 34)) 110))
     (= (to_rep (select (temp___String_Literal_583 us_void_param) 35)) 32))
     (= (to_rep (select (temp___String_Literal_583 us_void_param) 36)) 80))
     (= (to_rep (select (temp___String_Literal_583 us_void_param) 37)) 50)) :pattern (
  (temp___String_Literal_583 us_void_param)) )))

(declare-fun temp___String_Literal_584 (tuple0) (Array Int character))

;; temp___String_Literal_584__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_584 us_void_param) 1)) 80)
     (= (to_rep (select (temp___String_Literal_584 us_void_param) 2)) 49))
     (= (to_rep (select (temp___String_Literal_584 us_void_param) 3)) 32))
     (= (to_rep (select (temp___String_Literal_584 us_void_param) 4)) 105))
     (= (to_rep (select (temp___String_Literal_584 us_void_param) 5)) 115))
     (= (to_rep (select (temp___String_Literal_584 us_void_param) 6)) 32))
     (= (to_rep (select (temp___String_Literal_584 us_void_param) 7)) 110))
     (= (to_rep (select (temp___String_Literal_584 us_void_param) 8)) 111))
     (= (to_rep (select (temp___String_Literal_584 us_void_param) 9)) 116))
     (= (to_rep (select (temp___String_Literal_584 us_void_param) 10)) 32))
     (= (to_rep (select (temp___String_Literal_584 us_void_param) 11)) 102))
     (= (to_rep (select (temp___String_Literal_584 us_void_param) 12)) 117))
     (= (to_rep (select (temp___String_Literal_584 us_void_param) 13)) 114))
     (= (to_rep (select (temp___String_Literal_584 us_void_param) 14)) 116))
     (= (to_rep (select (temp___String_Literal_584 us_void_param) 15)) 104))
     (= (to_rep (select (temp___String_Literal_584 us_void_param) 16)) 101))
     (= (to_rep (select (temp___String_Literal_584 us_void_param) 17)) 114))
     (= (to_rep (select (temp___String_Literal_584 us_void_param) 18)) 32))
     (= (to_rep (select (temp___String_Literal_584 us_void_param) 19)) 102))
     (= (to_rep (select (temp___String_Literal_584 us_void_param) 20)) 114))
     (= (to_rep (select (temp___String_Literal_584 us_void_param) 21)) 111))
     (= (to_rep (select (temp___String_Literal_584 us_void_param) 22)) 109))
     (= (to_rep (select (temp___String_Literal_584 us_void_param) 23)) 32))
     (= (to_rep (select (temp___String_Literal_584 us_void_param) 24)) 116))
     (= (to_rep (select (temp___String_Literal_584 us_void_param) 25)) 104))
     (= (to_rep (select (temp___String_Literal_584 us_void_param) 26)) 101))
     (= (to_rep (select (temp___String_Literal_584 us_void_param) 27)) 32))
     (= (to_rep (select (temp___String_Literal_584 us_void_param) 28)) 111))
     (= (to_rep (select (temp___String_Literal_584 us_void_param) 29)) 114))
     (= (to_rep (select (temp___String_Literal_584 us_void_param) 30)) 105))
     (= (to_rep (select (temp___String_Literal_584 us_void_param) 31)) 103))
     (= (to_rep (select (temp___String_Literal_584 us_void_param) 32)) 105))
     (= (to_rep (select (temp___String_Literal_584 us_void_param) 33)) 110))
     (= (to_rep (select (temp___String_Literal_584 us_void_param) 34)) 32))
     (= (to_rep (select (temp___String_Literal_584 us_void_param) 35)) 116))
     (= (to_rep (select (temp___String_Literal_584 us_void_param) 36)) 104))
     (= (to_rep (select (temp___String_Literal_584 us_void_param) 37)) 97))
     (= (to_rep (select (temp___String_Literal_584 us_void_param) 38)) 110))
     (= (to_rep (select (temp___String_Literal_584 us_void_param) 39)) 32))
     (= (to_rep (select (temp___String_Literal_584 us_void_param) 40)) 80))
     (= (to_rep (select (temp___String_Literal_584 us_void_param) 41)) 50)) :pattern (
  (temp___String_Literal_584 us_void_param)) )))

(declare-fun temp___String_Literal_585 (tuple0) (Array Int character))

;; temp___String_Literal_585__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_585 us_void_param) 1)) 80)
     (= (to_rep (select (temp___String_Literal_585 us_void_param) 2)) 49))
     (= (to_rep (select (temp___String_Literal_585 us_void_param) 3)) 32))
     (= (to_rep (select (temp___String_Literal_585 us_void_param) 4)) 105))
     (= (to_rep (select (temp___String_Literal_585 us_void_param) 5)) 115))
     (= (to_rep (select (temp___String_Literal_585 us_void_param) 6)) 32))
     (= (to_rep (select (temp___String_Literal_585 us_void_param) 7)) 102))
     (= (to_rep (select (temp___String_Literal_585 us_void_param) 8)) 117))
     (= (to_rep (select (temp___String_Literal_585 us_void_param) 9)) 114))
     (= (to_rep (select (temp___String_Literal_585 us_void_param) 10)) 116))
     (= (to_rep (select (temp___String_Literal_585 us_void_param) 11)) 104))
     (= (to_rep (select (temp___String_Literal_585 us_void_param) 12)) 101))
     (= (to_rep (select (temp___String_Literal_585 us_void_param) 13)) 114))
     (= (to_rep (select (temp___String_Literal_585 us_void_param) 14)) 32))
     (= (to_rep (select (temp___String_Literal_585 us_void_param) 15)) 102))
     (= (to_rep (select (temp___String_Literal_585 us_void_param) 16)) 114))
     (= (to_rep (select (temp___String_Literal_585 us_void_param) 17)) 111))
     (= (to_rep (select (temp___String_Literal_585 us_void_param) 18)) 109))
     (= (to_rep (select (temp___String_Literal_585 us_void_param) 19)) 32))
     (= (to_rep (select (temp___String_Literal_585 us_void_param) 20)) 116))
     (= (to_rep (select (temp___String_Literal_585 us_void_param) 21)) 104))
     (= (to_rep (select (temp___String_Literal_585 us_void_param) 22)) 101))
     (= (to_rep (select (temp___String_Literal_585 us_void_param) 23)) 32))
     (= (to_rep (select (temp___String_Literal_585 us_void_param) 24)) 111))
     (= (to_rep (select (temp___String_Literal_585 us_void_param) 25)) 114))
     (= (to_rep (select (temp___String_Literal_585 us_void_param) 26)) 105))
     (= (to_rep (select (temp___String_Literal_585 us_void_param) 27)) 103))
     (= (to_rep (select (temp___String_Literal_585 us_void_param) 28)) 105))
     (= (to_rep (select (temp___String_Literal_585 us_void_param) 29)) 110))
     (= (to_rep (select (temp___String_Literal_585 us_void_param) 30)) 32))
     (= (to_rep (select (temp___String_Literal_585 us_void_param) 31)) 116))
     (= (to_rep (select (temp___String_Literal_585 us_void_param) 32)) 104))
     (= (to_rep (select (temp___String_Literal_585 us_void_param) 33)) 97))
     (= (to_rep (select (temp___String_Literal_585 us_void_param) 34)) 110))
     (= (to_rep (select (temp___String_Literal_585 us_void_param) 35)) 32))
     (= (to_rep (select (temp___String_Literal_585 us_void_param) 36)) 80))
     (= (to_rep (select (temp___String_Literal_585 us_void_param) 37)) 50)) :pattern (
  (temp___String_Literal_585 us_void_param)) )))

(declare-fun temp___String_Literal_586 (tuple0) (Array Int character))

;; temp___String_Literal_586__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_586 us_void_param) 1)) 80)
     (= (to_rep (select (temp___String_Literal_586 us_void_param) 2)) 49))
     (= (to_rep (select (temp___String_Literal_586 us_void_param) 3)) 32))
     (= (to_rep (select (temp___String_Literal_586 us_void_param) 4)) 105))
     (= (to_rep (select (temp___String_Literal_586 us_void_param) 5)) 115))
     (= (to_rep (select (temp___String_Literal_586 us_void_param) 6)) 32))
     (= (to_rep (select (temp___String_Literal_586 us_void_param) 7)) 110))
     (= (to_rep (select (temp___String_Literal_586 us_void_param) 8)) 111))
     (= (to_rep (select (temp___String_Literal_586 us_void_param) 9)) 116))
     (= (to_rep (select (temp___String_Literal_586 us_void_param) 10)) 32))
     (= (to_rep (select (temp___String_Literal_586 us_void_param) 11)) 102))
     (= (to_rep (select (temp___String_Literal_586 us_void_param) 12)) 117))
     (= (to_rep (select (temp___String_Literal_586 us_void_param) 13)) 114))
     (= (to_rep (select (temp___String_Literal_586 us_void_param) 14)) 116))
     (= (to_rep (select (temp___String_Literal_586 us_void_param) 15)) 104))
     (= (to_rep (select (temp___String_Literal_586 us_void_param) 16)) 101))
     (= (to_rep (select (temp___String_Literal_586 us_void_param) 17)) 114))
     (= (to_rep (select (temp___String_Literal_586 us_void_param) 18)) 32))
     (= (to_rep (select (temp___String_Literal_586 us_void_param) 19)) 102))
     (= (to_rep (select (temp___String_Literal_586 us_void_param) 20)) 114))
     (= (to_rep (select (temp___String_Literal_586 us_void_param) 21)) 111))
     (= (to_rep (select (temp___String_Literal_586 us_void_param) 22)) 109))
     (= (to_rep (select (temp___String_Literal_586 us_void_param) 23)) 32))
     (= (to_rep (select (temp___String_Literal_586 us_void_param) 24)) 116))
     (= (to_rep (select (temp___String_Literal_586 us_void_param) 25)) 104))
     (= (to_rep (select (temp___String_Literal_586 us_void_param) 26)) 101))
     (= (to_rep (select (temp___String_Literal_586 us_void_param) 27)) 32))
     (= (to_rep (select (temp___String_Literal_586 us_void_param) 28)) 111))
     (= (to_rep (select (temp___String_Literal_586 us_void_param) 29)) 114))
     (= (to_rep (select (temp___String_Literal_586 us_void_param) 30)) 105))
     (= (to_rep (select (temp___String_Literal_586 us_void_param) 31)) 103))
     (= (to_rep (select (temp___String_Literal_586 us_void_param) 32)) 105))
     (= (to_rep (select (temp___String_Literal_586 us_void_param) 33)) 110))
     (= (to_rep (select (temp___String_Literal_586 us_void_param) 34)) 32))
     (= (to_rep (select (temp___String_Literal_586 us_void_param) 35)) 116))
     (= (to_rep (select (temp___String_Literal_586 us_void_param) 36)) 104))
     (= (to_rep (select (temp___String_Literal_586 us_void_param) 37)) 97))
     (= (to_rep (select (temp___String_Literal_586 us_void_param) 38)) 110))
     (= (to_rep (select (temp___String_Literal_586 us_void_param) 39)) 32))
     (= (to_rep (select (temp___String_Literal_586 us_void_param) 40)) 80))
     (= (to_rep (select (temp___String_Literal_586 us_void_param) 41)) 50)) :pattern (
  (temp___String_Literal_586 us_void_param)) )))

(define-fun dynamic_invariant1 ((temp___expr_46 Int) (temp___is_init_42 Bool)
  (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool)
  (temp___do_typ_inv_45 Bool)) Bool (=>
                                    (or (= temp___is_init_42 true)
                                    (<= 1 2147483647)) (in_range1
                                    temp___expr_46)))

(define-fun dynamic_invariant2 ((temp___expr_74 Int) (temp___is_init_70 Bool)
  (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool)
  (temp___do_typ_inv_73 Bool)) Bool (=>
                                    (or (= temp___is_init_70 true)
                                    (<= 0 255)) (in_range2 temp___expr_74)))

(define-fun dynamic_invariant3 ((temp___expr_96 us_t)
  (temp___is_init_92 Bool) (temp___skip_constant_93 Bool)
  (temp___do_toplevel_94 Bool)
  (temp___do_typ_inv_95 Bool)) Bool (=>
                                    (not (= temp___skip_constant_93 true))
                                    (dynamic_property 1 2147483647
                                    (first1 temp___expr_96)
                                    (last1 temp___expr_96))))

(define-fun dynamic_invariant4 ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647)) (in_range
                                    temp___expr_18)))

(declare-const p1__split_fields float)

(declare-const p1__split_fields1 float)

(declare-const p2__split_fields float)

(declare-const p2__split_fields1 float)

(declare-const left_squared Float32)

(declare-const right_squared Float32)

(declare-const o float)

(declare-const o1 float)

(declare-const o2 float)

(declare-const o3 float)

(declare-const temp___581 float)

(declare-const temp___5811 float)

(declare-const o4 float)

(declare-const o5 float)

(declare-const o6 float)

(declare-const o7 float)

(declare-const temp___582 float)

(declare-const temp___5821 float)

(declare-const o8 Float32)

(declare-const o9 Float32)

(declare-const o10 Float32)

(declare-const result float)

(declare-const result1 float)

(declare-const p1__split_fields2 float)

(declare-const p1__split_fields3 float)

(declare-const result2 float)

(declare-const result3 float)

(declare-const p2__split_fields2 float)

(declare-const p2__split_fields3 float)

;; H
  (assert (= (to_rep2 o) (fp #b0 #b10000011 #b00111001100110011001101)))

;; H
  (assert (= (to_rep2 o1) (fp #b0 #b10000010 #b10001100110011001100110)))

;; H
  (assert (= o1 o2))

;; H
  (assert (= o o3))

;; H
  (assert (= temp___581 o2))

;; H
  (assert (= temp___5811 o3))

;; H
  (assert (= result p1__split_fields))

;; H
  (assert (= result1 p1__split_fields1))

;; H
  (assert (= temp___581 p1__split_fields2))

;; H
  (assert (= temp___5811 p1__split_fields3))

;; H
  (assert (= (to_rep2 o4) (fp #b0 #b10000011 #b01011110011001100110011)))

;; H
  (assert (= (to_rep2 o5) (fp #b0 #b10000001 #b00010011001100110011010)))

;; H
  (assert (= o5 o6))

;; H
  (assert (= o4 o7))

;; H
  (assert (= temp___582 o6))

;; H
  (assert (= temp___5821 o7))

;; H
  (assert (= result2 p2__split_fields))

;; H
  (assert (= result3 p2__split_fields1))

;; H
  (assert (= temp___582 p2__split_fields2))

;; H
  (assert (= temp___5821 p2__split_fields3))

;; H
  (assert
  (= (mk___rep (mk___split_fields p1__split_fields2 p1__split_fields3))
  c3b))

;; H
  (assert
  (= (mk___rep (mk___split_fields p2__split_fields2 p2__split_fields3))
  c4b))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (fp.isFinite32 left_squared)))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (fp.isFinite32 right_squared)))

;; H
  (assert
  (and
  (= o8 (fp.mul RNE (to_rep2
                    (rec__operator_overload__point__y_coord
                    (us_split_fields1 c3b))) (to_rep2
                                             (rec__operator_overload__point__y_coord
                                             (us_split_fields1 c3b)))))
  (fp.isFinite32 (fp.mul RNE (to_rep2
                             (rec__operator_overload__point__y_coord
                             (us_split_fields1 c3b))) (to_rep2
                                                      (rec__operator_overload__point__y_coord
                                                      (us_split_fields1 c3b)))))))

;; H
  (assert
  (and
  (= o9 (fp.mul RNE (to_rep2
                    (rec__operator_overload__point__x_coord
                    (us_split_fields1 c3b))) (to_rep2
                                             (rec__operator_overload__point__x_coord
                                             (us_split_fields1 c3b)))))
  (fp.isFinite32 (fp.mul RNE (to_rep2
                             (rec__operator_overload__point__x_coord
                             (us_split_fields1 c3b))) (to_rep2
                                                      (rec__operator_overload__point__x_coord
                                                      (us_split_fields1 c3b)))))))

;; H
  (assert (= o10 (fp.add RNE o9 o8)))

(assert
;; WP_parameter_def
 ;; File "operator_overload.adb", line 2, characters 0-0
  (not (fp.isFinite32 o10)))
(check-sat)
(exit)
