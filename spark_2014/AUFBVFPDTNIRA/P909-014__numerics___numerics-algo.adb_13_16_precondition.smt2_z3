;; produced by z3_gnatprove.drv ;;
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun pow2 (Int) Int)

(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-fun of_int (RoundingMode Int) Float32)

(declare-fun round (RoundingMode Real) Real)

(declare-fun max_int () Int)

(define-fun in_range ((x Real)) Bool (and
                                     (<= (- (* 33554430.0 10141204801825835211973625643008.0)) x)
                                     (<= x (* 33554430.0 10141204801825835211973625643008.0))))

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun no_overflow ((m RoundingMode) (x Real)) Bool (in_range
  (round m x)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(declare-fun sqrt (Real) Real)

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(declare-fun is_int1 (Float32) Bool)

(declare-datatypes () ((t__ref (mk_t__ref (t__content Float32)))))
(declare-sort t_float 0)

(declare-fun user_eq (t_float t_float) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Float32)

(declare-fun dummy () t_float)

(declare-datatypes ()
((t_float__ref (mk_t_float__ref (t_float__content t_float)))))
(define-fun t_float__ref___projection ((a t_float__ref)) t_float (t_float__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_141 Float32)
  (temp___is_init_138 Bool) (temp___skip_constant_139 Bool)
  (temp___do_toplevel_140 Bool)) Bool (=>
                                      (or (= temp___is_init_138 true)
                                      (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                      (not (or (fp.isInfinite temp___expr_141) (fp.isNaN temp___expr_141)))))

(declare-fun oadd (Float32 Float32) Float32)

(declare-fun oadd__function_guard (Float32 Float32 Float32) Bool)

;; oadd__post_axiom
  (assert
  (forall ((left Float32) (right Float32))
  (! (=>
     (and (dynamic_invariant left true true true) (dynamic_invariant right
     true true true)) (dynamic_invariant (oadd left right) true false true)) :pattern (
  (oadd left right)) )))

;; oadd__def_axiom
  (assert
  (forall ((left Float32) (right Float32))
  (! (=>
     (and (dynamic_invariant left true true true) (dynamic_invariant right
     true true true)) (= (oadd left right) (fp.add RNE left right))) :pattern (
  (oadd left right)) )))

(declare-fun osubtract (Float32 Float32) Float32)

(declare-fun osubtract__function_guard (Float32 Float32 Float32) Bool)

;; osubtract__post_axiom
  (assert
  (forall ((left Float32) (right Float32))
  (! (=>
     (and (dynamic_invariant left true true true) (dynamic_invariant right
     true true true)) (dynamic_invariant (osubtract left right) true false
     true)) :pattern ((osubtract left right)) )))

;; osubtract__def_axiom
  (assert
  (forall ((left Float32) (right Float32))
  (! (=>
     (and (dynamic_invariant left true true true) (dynamic_invariant right
     true true true)) (= (osubtract left right) (fp.sub RNE left right))) :pattern (
  (osubtract left right)) )))

(declare-fun omultiply (Float32 Float32) Float32)

(declare-fun omultiply__function_guard (Float32 Float32 Float32) Bool)

;; omultiply__post_axiom
  (assert
  (forall ((left Float32) (right Float32))
  (! (=>
     (and (dynamic_invariant left true true true) (dynamic_invariant right
     true true true)) (dynamic_invariant (omultiply left right) true false
     true)) :pattern ((omultiply left right)) )))

;; omultiply__def_axiom
  (assert
  (forall ((left Float32) (right Float32))
  (! (=>
     (and (dynamic_invariant left true true true) (dynamic_invariant right
     true true true)) (= (omultiply left right) (fp.mul RNE left right))) :pattern (
  (omultiply left right)) )))

(declare-fun odivide (Float32 Float32) Float32)

(declare-fun odivide__function_guard (Float32 Float32 Float32) Bool)

;; odivide__post_axiom
  (assert
  (forall ((left Float32) (right Float32))
  (! (=>
     (and
     (and (dynamic_invariant left true true true) (dynamic_invariant right
     true true true))
     (not (fp.eq right (fp #b0 #b00000000 #b00000000000000000000000))))
     (dynamic_invariant (odivide left right) true false true)) :pattern (
  (odivide left right)) )))

;; odivide__def_axiom
  (assert
  (forall ((left Float32) (right Float32))
  (! (=>
     (and (dynamic_invariant left true true true) (dynamic_invariant right
     true true true)) (= (odivide left right) (fp.div RNE left right))) :pattern (
  (odivide left right)) )))

(declare-fun x () Float32)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun x1 () Float32)

(declare-fun x2 () Float32)

(declare-fun x3 () Float32)

(declare-fun x4 () Float32)

(declare-fun x5 () Float32)

(declare-fun o () Float32)

(declare-fun o1 () Float32)

(declare-fun o2 () Float32)

(declare-fun o3 () Float32)

(declare-fun o4 () Float32)

(declare-fun o5 () Float32)

(declare-fun result () Float32)

(declare-fun x11 () Float32)

(declare-fun result1 () Float32)

(declare-fun x12 () Float32)

(declare-fun result2 () Float32)

(declare-fun x21 () Float32)

(declare-fun result3 () Float32)

(declare-fun x22 () Float32)

(declare-fun result4 () Float32)

(declare-fun x31 () Float32)

(declare-fun result5 () Float32)

(declare-fun x32 () Float32)

(declare-fun result6 () Float32)

(declare-fun x41 () Float32)

(declare-fun result7 () Float32)

(declare-fun x42 () Float32)

;; H
  (assert (not (or (fp.isInfinite x) (fp.isNaN x))))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (not (or (fp.isInfinite x1) (fp.isNaN x1)))))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (not (or (fp.isInfinite x2) (fp.isNaN x2)))))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (not (or (fp.isInfinite x3) (fp.isNaN x3)))))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (not (or (fp.isInfinite x4) (fp.isNaN x4)))))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (not (or (fp.isInfinite x5) (fp.isNaN x5)))))

;; H
  (assert (= result x1))

;; H
  (assert (= x11 (fp #b0 #b11111110 #b11111111111111111111111)))

(assert
;; WP_parameter_def
 ;; File "numerics-algo.ads", line 10, characters 0-0
  (not true))
(check-sat)
(exit)
