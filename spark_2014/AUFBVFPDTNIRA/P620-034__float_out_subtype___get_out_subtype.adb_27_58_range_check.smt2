;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun pow2 (Int) Int)

(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(declare-fun sqrt (Real) Real)

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(declare-fun is_int1 (Float32) Bool)

(declare-datatypes () ((t__ref (mk_t__ref (t__content Float32)))))
(declare-sort float 0)

(declare-fun user_eq (float float) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Float32)

(declare-const dummy float)

(declare-datatypes () ((float__ref (mk_float__ref (float__content float)))))
(define-fun float__ref___projection ((a float__ref)) float (float__content a))

(define-fun dynamic_invariant ((temp___expr_51 Float32)
  (temp___is_init_48 Bool) (temp___skip_constant_49 Bool)
  (temp___do_toplevel_50 Bool)) Bool (=>
                                     (or (= temp___is_init_48 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                     (fp.isFinite32 temp___expr_51)))

(declare-const x Float32)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const y Float32)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const z Float32)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-sort t_rate 0)

(define-fun in_range ((x1 Float32)) Bool (and (fp.isFinite32 x1)
                                         (and
                                         (fp.leq (fp.neg (fp #b0 #b10001010 #b01110111000000000000000)) x1)
                                         (fp.leq x1 (fp #b0 #b10001010 #b01110111000000000000000)))))

(declare-fun user_eq1 (t_rate t_rate) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE1 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Float32)

(declare-const dummy1 t_rate)

(declare-datatypes ()
((t_rate__ref (mk_t_rate__ref (t_rate__content t_rate)))))
(define-fun t_rate__ref___projection ((a t_rate__ref)) t_rate (t_rate__content
                                                              a))

(define-fun dynamic_invariant1 ((temp___expr_135 Float32)
  (temp___is_init_132 Bool) (temp___skip_constant_133 Bool)
  (temp___do_toplevel_134 Bool)) Bool (=>
                                      (or (= temp___is_init_132 true)
                                      (fp.leq (fp.neg (fp #b0 #b10001010 #b01110111000000000000000)) (fp #b0 #b10001010 #b01110111000000000000000)))
                                      (in_range temp___expr_135)))

(declare-fun to_rep (t_rate) Float32)

(declare-fun of_rep (Float32) t_rate)

;; inversion_axiom
  (assert
  (forall ((x1 t_rate))
  (! (= (of_rep (to_rep x1)) x1) :pattern ((to_rep x1)) )))

;; range_axiom
  (assert
  (forall ((x1 t_rate)) (! (in_range (to_rep x1)) :pattern ((to_rep x1)) )))

;; coerce_axiom
  (assert
  (forall ((x1 Float32))
  (! (=> (in_range x1) (= (to_rep (of_rep x1)) x1)) :pattern ((to_rep
                                                              (of_rep x1))) )))

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const roll_rate_desired Float32)

(declare-const pitch_rate_desired Float32)

(declare-const yaw_rate_desired Float32)

(declare-const result Float32)

(declare-const roll_rate_desired1 Float32)

(declare-const result1 Float32)

(declare-const pitch_rate_desired1 Float32)

(declare-const result2 Float32)

(declare-const yaw_rate_desired1 Float32)

;; H
  (assert (fp.isFinite32 x))

;; H
  (assert (fp.isFinite32 y))

;; H
  (assert (fp.isFinite32 z))

;; H
  (assert (= result roll_rate_desired))

;; H
  (assert
  (= roll_rate_desired1 (fp #b0 #b00000000 #b00000000000000000000000)))

;; H
  (assert (in_range roll_rate_desired1))

;; H
  (assert (= result1 pitch_rate_desired))

;; H
  (assert
  (= pitch_rate_desired1 (fp #b0 #b00000000 #b00000000000000000000000)))

;; H
  (assert (in_range pitch_rate_desired1))

;; H
  (assert (= result2 yaw_rate_desired))

;; H
  (assert
  (= yaw_rate_desired1 (fp #b0 #b00000000 #b00000000000000000000000)))

;; H
  (assert (in_range yaw_rate_desired1))

(assert
;; WP_parameter_def
 ;; File "get_out_subtype.adb", line 7, characters 0-0
  (not (fp.isFinite32 pitch_rate_desired1)))
(check-sat)
(exit)
