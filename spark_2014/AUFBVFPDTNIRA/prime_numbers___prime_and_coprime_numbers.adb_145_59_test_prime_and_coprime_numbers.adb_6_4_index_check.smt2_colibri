;; produced by colibri_gnatprove.drv ;;
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun dynamic_invariant1 ((temp___expr_178 Int)
  (temp___is_init_175 Bool) (temp___skip_constant_176 Bool)
  (temp___do_toplevel_177 Bool)) Bool (=>
                                      (or (= temp___is_init_175 true)
                                      (<= 0 2147483647)) (in_range2
                                      temp___expr_178)))

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 100000)))

(declare-fun abstr () Bool)

(define-fun bool_eq ((a (Array Int Bool)) (a__first Int) (a__last Int)
  (b (Array Int Bool)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first)) abstr)
                      true false))

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(define-fun dynamic_invariant2 ((temp___expr_193 Int)
  (temp___is_init_190 Bool) (temp___skip_constant_191 Bool)
  (temp___do_toplevel_192 Bool)) Bool (=>
                                      (or (= temp___is_init_190 true)
                                      (<= 0 2)) (in_range4 temp___expr_193)))

(declare-fun number_list () (Array Int Bool))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun mode () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun value () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(declare-fun right () Int)

(declare-fun left () Int)

(declare-fun right_is_out () Bool)

(declare-fun left_is_out () Bool)

(declare-fun test_prime_and_coprime_numbers__p__nearest_number__result () Int)

(declare-fun o () Int)

(declare-fun o1 () Int)

(declare-fun o2 () Int)

(declare-fun temp___236 () Bool)

(declare-fun temp___235 () Int)

(declare-fun o3 () Int)

(declare-fun o4 () Int)

(declare-fun v () Int)

(declare-fun o5 () Int)

(declare-fun o6 () Int)

(declare-fun o7 () Int)

(declare-fun o8 () Int)

(declare-fun o9 () Int)

(declare-fun temp___238 () Bool)

(declare-fun temp___237 () Int)

(declare-fun o10 () Int)

(declare-fun v1 () Int)

(declare-fun o11 () Int)

(declare-fun o12 () Int)

(declare-fun o13 () Int)

(declare-fun o14 () Int)

(declare-fun o15 () Int)

(declare-fun o16 () Int)

(declare-fun o17 () Int)

(declare-fun o18 () Int)

(declare-fun o19 () Int)

(declare-fun o20 () Int)

(declare-fun o21 () Int)

(declare-fun o22 () Int)

(declare-fun o23 () Int)

(declare-fun v2 () Int)

(declare-fun v3 () Int)

(declare-fun o24 () Int)

(declare-fun o25 () Bool)

(declare-fun v4 () Int)

(declare-fun o26 () Int)

(declare-fun o27 () Int)

(declare-fun o28 () Int)

(declare-fun o29 () Int)

(declare-fun o30 () Int)

(declare-fun o31 () Int)

(declare-fun o32 () Int)

(declare-fun o33 () Int)

(declare-fun o34 () Bool)

(declare-fun v5 () Int)

(declare-fun o35 () Int)

(declare-fun o36 () Int)

(declare-fun o37 () Int)

(declare-fun o38 () Int)

(declare-fun o39 () Int)

(declare-fun o40 () Int)

(declare-fun o41 () Int)

(declare-fun o42 () Int)

(declare-fun o43 () Bool)

(declare-fun right_is_out1 () Bool)

(declare-fun left_is_out1 () Bool)

(declare-fun test_prime_and_coprime_numbers__p__nearest_number__result1 () Int)

(declare-fun result () Int)

(declare-fun right1 () Int)

(declare-fun result1 () Int)

(declare-fun left1 () Int)

(declare-fun result2 () Bool)

(declare-fun result3 () Int)

(declare-fun test_prime_and_coprime_numbers__p__nearest_number__result2 () Int)

(declare-fun result4 () Int)

(declare-fun right2 () Int)

(declare-fun result5 () Bool)

(declare-fun right_is_out2 () Bool)

(declare-fun result6 () Bool)

(declare-fun right3 () Int)

(declare-fun right_is_out3 () Bool)

(declare-fun result7 () Int)

(declare-fun right4 () Int)

(declare-fun result8 () Bool)

(declare-fun right_is_out4 () Bool)

(declare-fun result9 () Bool)

(declare-fun right_is_out5 () Bool)

(declare-fun right_is_out6 () Bool)

(declare-fun right5 () Int)

(declare-fun right_is_out7 () Bool)

(declare-fun right6 () Int)

(declare-fun right_is_out8 () Bool)

(declare-fun right7 () Int)

(declare-fun right_is_out9 () Bool)

(declare-fun right8 () Int)

(declare-fun right_is_out10 () Bool)

(declare-fun right9 () Int)

(declare-fun right_is_out11 () Bool)

(declare-fun right10 () Int)

(declare-fun right_is_out12 () Bool)

(declare-fun right_is_out13 () Bool)

(declare-fun right11 () Int)

(declare-fun right_is_out14 () Bool)

(declare-fun left2 () Int)

(declare-fun left_is_out2 () Bool)

(declare-fun result10 () Bool)

(declare-fun left3 () Int)

(declare-fun left_is_out3 () Bool)

(declare-fun left4 () Int)

(declare-fun left_is_out4 () Bool)

(declare-fun result11 () Bool)

(declare-fun left_is_out5 () Bool)

(declare-fun left5 () Int)

(declare-fun left_is_out6 () Bool)

(declare-fun left6 () Int)

(declare-fun left_is_out7 () Bool)

(declare-fun left7 () Int)

(declare-fun left_is_out8 () Bool)

(declare-fun left8 () Int)

(declare-fun left_is_out9 () Bool)

(declare-fun left_is_out10 () Bool)

(declare-fun left9 () Int)

(declare-fun left_is_out11 () Bool)

(declare-fun result12 () Bool)

(declare-fun test_prime_and_coprime_numbers__p__nearest_number__result3 () Int)

(declare-fun test_prime_and_coprime_numbers__p__nearest_number__result4 () Int)

(declare-fun test_prime_and_coprime_numbers__p__nearest_number__result5 () Int)

(declare-fun test_prime_and_coprime_numbers__p__nearest_number__result6 () Int)

(declare-fun test_prime_and_coprime_numbers__p__nearest_number__result7 () Int)

(declare-fun test_prime_and_coprime_numbers__p__nearest_number__result8 () Int)

(declare-fun test_prime_and_coprime_numbers__p__nearest_number__result9 () Int)

(declare-fun test_prime_and_coprime_numbers__p__nearest_number__result10 () Int)

(declare-fun test_prime_and_coprime_numbers__p__nearest_number__result11 () Int)

(declare-fun test_prime_and_coprime_numbers__p__nearest_number__result12 () Int)

(declare-fun test_prime_and_coprime_numbers__p__nearest_number__result13 () Int)

(declare-fun test_prime_and_coprime_numbers__p__nearest_number__result14 () Int)

(declare-fun right12 () Int)

(declare-fun left10 () Int)

(declare-fun right_is_out15 () Bool)

(declare-fun left_is_out12 () Bool)

(declare-fun test_prime_and_coprime_numbers__p__nearest_number__result15 () Int)

(declare-fun right13 () Int)

(declare-fun left11 () Int)

(declare-fun right_is_out16 () Bool)

(declare-fun left_is_out13 () Bool)

(declare-fun test_prime_and_coprime_numbers__p__nearest_number__result16 () Int)

(declare-fun result13 () Bool)

(declare-fun result14 () Bool)

(declare-fun result15 () Bool)

(declare-fun result16 () Bool)

;; H
  (assert (in_range4 mode))

;; H
  (assert (in_range2 value))

(declare-fun abstr1 () Bool)

(declare-fun abstr2 () Bool)

(declare-fun abstr3 () Bool)

;; H
  (assert
  (and (and (<= 0 value) (<= value 100000))
  (ite (= mode 0) (= abstr3 true)
  (ite (= mode 1) (= abstr2 true) (= abstr1 true)))))

;; H
  (assert (= right1 0))

;; H
  (assert (in_range1 right1))

;; H
  (assert (= left1 0))

;; H
  (assert (in_range1 left1))

;; H
  (assert (and (<= 0 value) (<= value 100000)))

;; H
  (assert (= o value))

;; H
  (assert (= result2 (select number_list o)))

;; H
  (assert (not (= result2 true)))

;; H
  (assert
  (= test_prime_and_coprime_numbers__p__nearest_number__result2 test_prime_and_coprime_numbers__p__nearest_number__result))

;; H
  (assert
  (= test_prime_and_coprime_numbers__p__nearest_number__result2 test_prime_and_coprime_numbers__p__nearest_number__result1))

;; H
  (assert
  (=> (or (= mode 0) (= mode 2))
  (and (= o1 value) (not (= value 2147483647)))))

;; H
  (assert (=> (or (= mode 0) (= mode 2)) (= o2 (+ o1 1))))

;; H
  (assert (=> (or (= mode 0) (= mode 2)) (= right1 result4)))

;; H
  (assert (=> (or (= mode 0) (= mode 2)) (= right2 o2)))

;; H
  (assert (=> (or (= mode 0) (= mode 2)) (= temp___236 right_is_out)))

;; H
  (assert (=> (or (= mode 0) (= mode 2)) (= temp___235 right2)))

;; H
  (assert
  (=> (or (= mode 0) (= mode 2))
  (= right_is_out2 (ite (< 100000 right2) true false))))

;; H
  (assert (=> (or (= mode 0) (= mode 2)) (= right_is_out10 right_is_out8)))

;; H
  (assert (=> (or (= mode 0) (= mode 2)) (= right8 right6)))

;; H
  (assert (=> (or (= mode 0) (= mode 2)) (= right_is_out12 right_is_out10)))

;; H
  (assert (=> (or (= mode 0) (= mode 2)) (= right10 right8)))

;; H
  (assert (=> (or (= mode 0) (= mode 2)) (= right_is_out14 right_is_out12)))

;; H
  (assert (=> (or (= mode 0) (= mode 2)) (= right11 right10)))

;; H
  (assert
  (=> (not (or (= mode 0) (= mode 2))) (= right_is_out13 (of_int 1))))

;; H
  (assert
  (=> (not (or (= mode 0) (= mode 2))) (= right_is_out14 right_is_out13)))

;; H
  (assert (=> (not (or (= mode 0) (= mode 2))) (= right11 right1)))

;; H
  (assert (or (= mode 1) (= mode 2)))

;; H
  (assert (and (= o8 value) (not (= value (- 2147483648)))))

;; H
  (assert (= o9 (- o8 1)))

;; H
  (assert (= left2 o9))

;; H
  (assert (= left_is_out2 (ite (< left2 0) true false)))

;; H
  (assert (=> (= left_is_out2 true) (= result10 true)))

;; H
  (assert
  (=> (not (= left_is_out2 true)) (and (<= 0 left2) (<= left2 100000))))

;; H
  (assert (=> (not (= left_is_out2 true)) (= o10 left2)))

;; H
  (assert
  (=> (not (= left_is_out2 true)) (= result10 (select number_list o10))))

;; H
  (assert (not (= result10 true)))

;; H
  (assert (and (<= 0 left3) (<= left3 (- value 1))))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range1 left3)))

;; H
  (assert (<= left3 v1))

;; H
  (assert (<= v1 value))

(assert
;; WP_parameter_def
 ;; File "prime_and_coprime_numbers.ads", line 3, characters 0-0
  (not (<= 0 v1)))
(check-sat)
(exit)
