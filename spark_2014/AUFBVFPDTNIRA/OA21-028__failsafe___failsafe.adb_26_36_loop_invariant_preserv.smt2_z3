;; produced by z3_gnatprove.drv ;;
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(declare-fun to_int1 ((_ BitVec 8)) Int)

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-fun of_int (RoundingMode Int) Float32)

(declare-fun round (RoundingMode Real) Real)

(declare-fun max_int () Int)

(define-fun in_range ((x Real)) Bool (and
                                     (<= (- (* 33554430.0 10141204801825835211973625643008.0)) x)
                                     (<= x (* 33554430.0 10141204801825835211973625643008.0))))

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun no_overflow ((m RoundingMode) (x Real)) Bool (in_range
  (round m x)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(declare-fun sqrt (Real) Real)

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(declare-fun is_int1 (Float32) Bool)

(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 Float32)))))
(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int1 ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range1 ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort battery_level_type 0)

(declare-fun user_eq (battery_level_type battery_level_type) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE1 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Float32)

(declare-fun dummy () battery_level_type)

(declare-datatypes ()
((battery_level_type__ref
 (mk_battery_level_type__ref
 (battery_level_type__content battery_level_type)))))
(define-fun battery_level_type__ref___projection ((a battery_level_type__ref)) battery_level_type
  (battery_level_type__content a))

(declare-fun to_rep (battery_level_type) Float32)

(declare-fun of_rep (Float32) battery_level_type)

;; inversion_axiom
  (assert
  (forall ((x battery_level_type))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x battery_level_type))
  (! (not (or (fp.isInfinite (to_rep x)) (fp.isNaN (to_rep x)))) :pattern (
  (to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Float32))
  (! (=> (not (or (fp.isInfinite x) (fp.isNaN x))) (= (to_rep (of_rep x)) x)) :pattern (
  (to_rep (of_rep x))) )))

(declare-sort time_slot 0)

(define-fun in_range2 ((x (_ BitVec 8))) Bool (and (bvule ((_ int2bv 8) 0) x)
                                              (bvule x ((_ int2bv 8) 49))))

(define-fun in_range_int ((x Int)) Bool (and (<= 0 x) (<= x 49)))

(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 8))

(declare-fun user_eq1 (time_slot time_slot) Bool)

(declare-fun dummy1 () time_slot)

(declare-datatypes ()
((time_slot__ref (mk_time_slot__ref (time_slot__content time_slot)))))
(define-fun time_slot__ref___projection ((a time_slot__ref)) time_slot
  (time_slot__content a))

(define-fun dynamic_invariant ((temp___expr_208 (_ BitVec 8))
  (temp___is_init_205 Bool) (temp___skip_constant_206 Bool)
  (temp___do_toplevel_207 Bool)) Bool (=>
                                      (or (= temp___is_init_205 true)
                                      (bvule ((_ int2bv 8) 0) ((_ int2bv 8) 49)))
                                      (in_range2 temp___expr_208)))

(declare-sort time_slot_length 0)

(declare-fun attr__ATTRIBUTE_MODULUS () (_ BitVec 8))

(define-fun in_range3 ((x (_ BitVec 8))) Bool (and (bvule ((_ int2bv 8) 0) x)
                                              (bvule x ((_ int2bv 8) 50))))

(define-fun in_range_int1 ((x Int)) Bool (and (<= 0 x) (<= x 50)))

(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 8))

(declare-fun user_eq2 (time_slot_length time_slot_length) Bool)

(declare-fun dummy2 () time_slot_length)

(declare-datatypes ()
((time_slot_length__ref
 (mk_time_slot_length__ref (time_slot_length__content time_slot_length)))))
(define-fun time_slot_length__ref___projection ((a time_slot_length__ref)) time_slot_length
  (time_slot_length__content a))

(define-fun dynamic_invariant1 ((temp___expr_214 (_ BitVec 8))
  (temp___is_init_211 Bool) (temp___skip_constant_212 Bool)
  (temp___do_toplevel_213 Bool)) Bool (=>
                                      (or (= temp___is_init_211 true)
                                      (bvule ((_ int2bv 8) 0) ((_ int2bv 8) 50)))
                                      (in_range3 temp___expr_214)))

(declare-datatypes ()
((map__ref
 (mk_map__ref (map__content (Array (_ BitVec 8) battery_level_type))))))
(declare-fun slide ((Array (_ BitVec 8) battery_level_type) (_ BitVec 8)
  (_ BitVec 8)) (Array (_ BitVec 8) battery_level_type))

;; slide_eq
  (assert
  (forall ((a (Array (_ BitVec 8) battery_level_type)))
  (forall ((first (_ BitVec 8)))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array (_ BitVec 8) battery_level_type)))
  (forall ((old_first (_ BitVec 8)))
  (forall ((new_first (_ BitVec 8)))
  (forall ((i (_ BitVec 8)))
  (! (= (select (slide a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array (_ BitVec 8) battery_level_type) (_ BitVec 8)
  (_ BitVec 8) (Array (_ BitVec 8) battery_level_type) (_ BitVec 8)
  (_ BitVec 8)) (Array (_ BitVec 8) battery_level_type))

;; concat_def
  (assert
  (forall ((a (Array (_ BitVec 8) battery_level_type))
  (b (Array (_ BitVec 8) battery_level_type)))
  (forall ((a_first (_ BitVec 8)) (a_last (_ BitVec 8))
  (b_first (_ BitVec 8)) (b_last (_ BitVec 8)))
  (forall ((i (_ BitVec 8)))
  (! (and
     (=> (and (bvule a_first i) (bvule i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (bvugt i a_last)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (bvadd (bvsub i a_last) (bvsub b_first #x01)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (battery_level_type
  (_ BitVec 8)) (Array (_ BitVec 8) battery_level_type))

;; singleton_def
  (assert
  (forall ((v battery_level_type))
  (forall ((i (_ BitVec 8)))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array (_ BitVec 8) battery_level_type))
  (a__first (_ BitVec 8)) (a__last (_ BitVec 8))
  (b (Array (_ BitVec 8) battery_level_type)) (b__first (_ BitVec 8))
  (b__last (_ BitVec 8))) Bool (ite (and
                                    (ite (bvule a__first a__last)
                                    (and (bvule b__first b__last)
                                    (= (bvsub a__last a__first) (bvsub b__last b__first)))
                                    (bvugt b__first b__last))
                                    (forall ((temp___idx_132 (_ BitVec 8)))
                                    (=>
                                    (and (bvule a__first temp___idx_132)
                                    (bvule temp___idx_132 a__last))
                                    (= (to_rep (select a temp___idx_132))
                                    (to_rep
                                    (select b (bvadd (bvsub b__first a__first) temp___idx_132)))))))
                               true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array (_ BitVec 8) battery_level_type))
  (b (Array (_ BitVec 8) battery_level_type)))
  (forall ((a__first (_ BitVec 8)) (a__last (_ BitVec 8))
  (b__first (_ BitVec 8)) (b__last (_ BitVec 8)))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (bvule a__first a__last)
  (and (bvule b__first b__last)
  (= (bvsub a__last a__first) (bvsub b__last b__first)))
  (bvugt b__first b__last))
  (forall ((temp___idx_132 (_ BitVec 8)))
  (=> (and (bvule a__first temp___idx_132) (bvule temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (bvadd (bvsub b__first a__first) temp___idx_132)))))))))))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(define-fun dynamic_invariant2 ((temp___expr_202 Float32)
  (temp___is_init_199 Bool) (temp___skip_constant_200 Bool)
  (temp___do_toplevel_201 Bool)) Bool (=>
                                      (or (= temp___is_init_199 true)
                                      (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                      (not (or (fp.isInfinite temp___expr_202) (fp.isNaN temp___expr_202)))))

(declare-fun battery_level_at () (Array (_ BitVec 8) battery_level_type))

(declare-fun current_time () (_ BitVec 8))

(declare-fun res () (_ BitVec 8))

(declare-fun s () (_ BitVec 8))

(declare-fun failsafe__model__time_below_threshold__result () (_ BitVec 8))

(declare-fun temp___256 () (_ BitVec 8))

(declare-fun temp___255 () (_ BitVec 8))

(declare-fun o () (_ BitVec 8))

(declare-fun o1 () battery_level_type)

(declare-fun o2 () Float32)

(declare-fun o3 () (_ BitVec 8))

(declare-fun o4 () (_ BitVec 8))

(declare-fun o5 () (_ BitVec 8))

(declare-fun temp___257 () (_ BitVec 8))

(declare-fun o6 () (_ BitVec 8))

(declare-fun o7 () (_ BitVec 8))

(declare-fun temp___259 () (_ BitVec 8))

(declare-fun o8 () (_ BitVec 8))

(declare-fun o9 () (_ BitVec 8))

(declare-fun o10 () battery_level_type)

(declare-fun o11 () Float32)

(declare-fun o12 () (_ BitVec 8))

(declare-fun o13 () (_ BitVec 8))

(declare-fun o14 () (_ BitVec 8))

(declare-fun temp___266 () (_ BitVec 8))

(declare-fun o15 () (_ BitVec 8))

(declare-fun o16 () (_ BitVec 8))

(declare-fun temp___268 () (_ BitVec 8))

(declare-fun o17 () (_ BitVec 8))

(declare-fun o18 () (_ BitVec 8))

(declare-fun temp___265 () (_ BitVec 8))

(declare-fun o19 () (_ BitVec 8))

(declare-fun o20 () (_ BitVec 8))

(declare-fun o21 () battery_level_type)

(declare-fun o22 () Float32)

(declare-fun result () (_ BitVec 8))

(declare-fun res1 () (_ BitVec 8))

(declare-fun result1 () (_ BitVec 8))

(declare-fun s1 () (_ BitVec 8))

(declare-fun result2 () Bool)

(declare-fun result3 () (_ BitVec 8))

(declare-fun res2 () (_ BitVec 8))

(declare-fun res3 () (_ BitVec 8))

(declare-fun s2 () (_ BitVec 8))

(declare-fun result4 () Bool)

(declare-fun result5 () Bool)

(declare-fun result6 () (_ BitVec 8))

(declare-fun s3 () (_ BitVec 8))

(declare-fun result7 () Bool)

(declare-fun result8 () (_ BitVec 8))

(declare-fun res4 () (_ BitVec 8))

(declare-fun s4 () (_ BitVec 8))

(declare-fun s5 () (_ BitVec 8))

(declare-fun res5 () (_ BitVec 8))

(declare-fun s6 () (_ BitVec 8))

(declare-fun res6 () (_ BitVec 8))

(declare-fun s7 () (_ BitVec 8))

(declare-fun res7 () (_ BitVec 8))

(declare-fun s8 () (_ BitVec 8))

(declare-fun res8 () (_ BitVec 8))

(declare-fun s9 () (_ BitVec 8))

(declare-fun res9 () (_ BitVec 8))

(declare-fun s10 () (_ BitVec 8))

(declare-fun res10 () (_ BitVec 8))

(declare-fun s11 () (_ BitVec 8))

(declare-fun res11 () (_ BitVec 8))

(declare-fun s12 () (_ BitVec 8))

(declare-fun res12 () (_ BitVec 8))

(declare-fun s13 () (_ BitVec 8))

(declare-fun result9 () (_ BitVec 8))

(declare-fun failsafe__model__time_below_threshold__result1 () (_ BitVec 8))

(declare-fun failsafe__model__time_below_threshold__result2 () (_ BitVec 8))

(declare-fun failsafe__model__time_below_threshold__result3 () (_ BitVec 8))

(declare-fun res13 () t__ref)

(declare-fun s14 () t__ref)

(declare-fun failsafe__model__time_below_threshold__result4 () t__ref)

(declare-fun res14 () (_ BitVec 8))

(declare-fun s15 () (_ BitVec 8))

(declare-fun failsafe__model__time_below_threshold__result5 () (_ BitVec 8))

(declare-fun result10 () Bool)

(declare-fun result11 () Bool)

(declare-fun result12 () Bool)

(declare-fun result13 () Bool)

(define-fun s16 () t__ref (mk_t__ref s12))

(define-fun res15 () t__ref (mk_t__ref res11))

(define-fun s17 () t__ref (mk_t__ref s10))

(define-fun res16 () t__ref (mk_t__ref res9))

(define-fun s18 () t__ref (mk_t__ref s8))

(define-fun result14 () t__ref (mk_t__ref result1))

(define-fun result15 () t__ref (mk_t__ref result))

(define-fun s19 () t__ref (mk_t__ref s))

(define-fun res17 () t__ref (mk_t__ref res))

;; H
  (assert (in_range2 current_time))

;; H
  (assert (= result15 res17))

;; H
  (assert (= res1 ((_ int2bv 8) 0)))

;; H
  (assert (in_range3 res1))

;; H
  (assert (= result14 s19))

;; H
  (assert (= s1 ((_ int2bv 8) 0)))

;; H
  (assert (bvule ((_ int2bv 8) 0) s1))

;; H
  (assert (bvule s1 ((_ int2bv 8) 49)))

;; H
  (assert
  (=> (bvult current_time s1)
  (= o (bvadd (bvsub current_time s1) ((_ int2bv 8) 50)))))

;; H
  (assert (=> (not (bvult current_time s1)) (= o (bvsub current_time s1))))

;; H
  (assert (= o1 (select battery_level_at o)))

;; H
  (assert (= o2 (to_rep o1)))

;; H
  (assert
  (= result2 (ite (fp.lt o2 (fp #b0 #b01111100 #b10011001100110011001101))
             true false)))

;; H
  (assert (= result2 true))

;; H
  (assert
  (and (= o3 (bvadd res1 ((_ int2bv 8) 1))) (in_range3
  (bvadd res1 ((_ int2bv 8) 1)))))

;; H
  (assert (= res1 result3))

;; H
  (assert (= res2 o3))

;; H
  (assert (and (bvule ((_ int2bv 8) 1) res2) (bvule res2 ((_ int2bv 8) 50))))

;; H
  (assert
  (ite (bvuge current_time (bvsub res3 ((_ int2bv 8) 1)))
  (forall ((s20 (_ BitVec 8)))
  (=>
  (and
  (bvule (let ((temp___261 (bvsub current_time (bvsub res3 ((_ int2bv 8) 1)))))
         (ite (bvult current_time (bvsub res3 ((_ int2bv 8) 1)))
         (bvadd temp___261 ((_ int2bv 8) 50)) temp___261)) s20)
  (bvule s20 current_time))
  (fp.lt (to_rep (select battery_level_at s20)) (fp #b0 #b01111100 #b10011001100110011001101))))
  (and
  (forall ((s20 (_ BitVec 8)))
  (=> (and (bvule ((_ int2bv 8) 0) s20) (bvule s20 current_time))
  (fp.lt (to_rep (select battery_level_at s20)) (fp #b0 #b01111100 #b10011001100110011001101))))
  (forall ((s20 (_ BitVec 8)))
  (=>
  (and
  (bvule (let ((temp___262 (bvsub current_time (bvsub res3 ((_ int2bv 8) 1)))))
         (ite (bvult current_time (bvsub res3 ((_ int2bv 8) 1)))
         (bvadd temp___262 ((_ int2bv 8) 50)) temp___262)) s20)
  (bvule s20 ((_ int2bv 8) 49)))
  (fp.lt (to_rep (select battery_level_at s20)) (fp #b0 #b01111100 #b10011001100110011001101)))))))

;; H
  (assert (= res3 (bvadd s2 ((_ int2bv 8) 1))))

;; H
  (assert
  (and
  (and (=> (bvule ((_ int2bv 8) 0) ((_ int2bv 8) 49)) (in_range2 s2))
  (=> (bvule ((_ int2bv 8) 0) ((_ int2bv 8) 50)) (in_range3 res3)))
  (and (bvule ((_ int2bv 8) 0) s2) (bvule s2 ((_ int2bv 8) 49)))))

;; H
  (assert (not (= s2 ((_ int2bv 8) 49))))

;; H
  (assert (= s2 result6))

;; H
  (assert (= s3 (bvadd s2 ((_ int2bv 8) 1))))

;; H
  (assert
  (=> (bvult current_time s3)
  (= o9 (bvadd (bvsub current_time s3) ((_ int2bv 8) 50)))))

;; H
  (assert (=> (not (bvult current_time s3)) (= o9 (bvsub current_time s3))))

;; H
  (assert (= o10 (select battery_level_at o9)))

;; H
  (assert (= o11 (to_rep o10)))

;; H
  (assert
  (= result7 (ite (fp.lt o11 (fp #b0 #b01111100 #b10011001100110011001101))
             true false)))

;; H
  (assert (= result7 true))

;; H
  (assert
  (and (= o12 (bvadd res3 ((_ int2bv 8) 1))) (in_range3
  (bvadd res3 ((_ int2bv 8) 1)))))

;; H
  (assert (= res3 result8))

;; H
  (assert (= res4 o12))

;; H
  (assert (and (bvule ((_ int2bv 8) 1) res4) (bvule res4 ((_ int2bv 8) 50))))

(assert
;; WP_parameter_def
 ;; File "failsafe.ads", line 16, characters 0-0
  (not (= res4 (bvadd s3 ((_ int2bv 8) 1)))))
(check-sat)
(exit)
