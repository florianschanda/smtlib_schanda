(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type bingo_number

predicate in_range1(x: int) = ((0 <= x) and (x <= 75))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : bingo_number, bingo_number -> bool

logic dummy : bingo_number

type bingo_number__ref = { bingo_number__content : bingo_number
}

function bingo_number__ref___projection(a: bingo_number__ref) : bingo_number =
  (a).bingo_number__content

type callable_number

predicate in_range2(x: int) = ((1 <= x) and (x <= 75))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : callable_number, callable_number -> bool

logic dummy1 : callable_number

type callable_number__ref = { callable_number__content : callable_number
}

function callable_number__ref___projection(a: callable_number__ref) : callable_number =
  (a).callable_number__content

logic to_rep : callable_number -> int

logic of_rep : int -> callable_number

axiom inversion_axiom :
  (forall x:callable_number [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom :
  (forall x:callable_number [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

logic attr__ATTRIBUTE_ADDRESS : int

logic empty : int -> bool

logic empty__function_guard : bool, int -> prop

axiom empty__post_axiom : true

axiom empty__def_axiom :
  (forall bingo_basket__the_count:int [empty(bingo_basket__the_count)].
  ((empty(bingo_basket__the_count) = true) <->
  (bingo_basket__the_count = 0)))

type map__ref = { map__content : (int,callable_number) farray
}

logic slide : (int,callable_number) farray, int,
  int -> (int,callable_number) farray

axiom slide_eq :
  (forall a:(int,callable_number) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,callable_number) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,callable_number) farray, int, int,
  (int,callable_number) farray, int, int -> (int,callable_number) farray

axiom concat_def :
  (forall a:(int,callable_number) farray.
  forall b:(int,callable_number) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : callable_number, int -> (int,callable_number) farray

axiom singleton_def :
  (forall v:callable_number.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq4 : (int,callable_number) farray, int, int,
  (int,callable_number) farray, int, int -> bool

axiom bool_eq_def3 :
  (forall a:(int,callable_number) farray. forall a__first:int.
  forall a__last:int. forall b:(int,callable_number) farray.
  forall b__first:int. forall b__last:int [bool_eq4(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,callable_number) farray.
  forall b:(int,callable_number) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,callable_number) farray, int, int,
  (int,callable_number) farray, int, int -> int

axiom compare_def_eq :
  (forall a:(int,callable_number) farray.
  forall b:(int,callable_number) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq4(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,callable_number) farray.
  forall b:(int,callable_number) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq4(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,callable_number) farray.
  forall b:(int,callable_number) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq4(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic attr__ATTRIBUTE_ADDRESS1 : int

logic random_number : us_private -> int

logic random_number__function_guard : int, us_private -> prop

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic r6b : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

 (* File "bingo_basket.adb", line 15, characters 0-0 *)
goal WP_parameter_def :
  (forall the_basket:(int,callable_number) farray. forall the_count:int.
  forall random_index:int. forall number:int. forall index:int.
  forall temp:int. forall bingo_gen:us_private.
  forall temp___192:(int,callable_number) farray. forall o:callable_number.
  forall o1:(int,callable_number) farray.
  forall temp___197:(int,callable_number) farray. forall temp___196:int.
  forall o2:int. forall o3:callable_number.
  forall o4:(int,callable_number) farray. forall o5:callable_number.
  forall o6:(int,callable_number) farray.
  forall the_basket1:(int,callable_number) farray. forall random_index1:int.
  forall temp1:int. forall result:int. forall number1:int.
  forall the_basket2:(int,callable_number) farray. forall number2:int.
  forall result1:(int,callable_number) farray.
  forall the_basket3:(int,callable_number) farray.
  forall the_basket4:(int,callable_number) farray. forall number3:int.
  forall the_basket5:(int,callable_number) farray. forall number4:int.
  forall the_basket6:(int,callable_number) farray. forall number5:int.
  forall the_basket7:(int,callable_number) farray. forall number6:int.
  forall result2:int. forall index1:int.
  forall the_basket8:(int,callable_number) farray. forall random_index2:int.
  forall index2:int. forall temp2:int. forall result3:int.
  forall random_index3:int. forall result4:int. forall temp3:int.
  forall result5:(int,callable_number) farray.
  forall the_basket9:(int,callable_number) farray.
  forall result6:(int,callable_number) farray.
  forall the_basket10:(int,callable_number) farray.
  forall the_basket11:(int,callable_number) farray. forall random_index4:int.
  forall index3:int. forall temp4:int.
  forall the_basket12:(int,callable_number) farray. forall random_index5:int.
  forall index4:int. forall temp5:int.
  forall the_basket13:(int,callable_number) farray. forall random_index6:int.
  forall index5:int. forall temp6:int.
  forall the_basket14:(int,callable_number) farray. forall random_index7:int.
  forall index6:int. forall temp7:int. forall result7:int.
  forall the_count1:int. forall the_basket15:(int,callable_number) farray.
  forall the_count2:int. forall random_index8:int. forall number7:int.
  forall index7:int. forall temp8:int.
  forall the_basket16:(int,callable_number) farray. forall the_count3:int.
  forall random_index9:int. forall number8:int. forall index8:int.
  forall temp9:int. ((in_range1(the_count) and ((((1 <= 75) ->
  in_range2(random_index)) and ((((result = number) and (number1 = 1)) and
  ((((1 <= number1) and (number1 <= 75)) and ((((temp___192 = the_basket) and
  (((forall temp___193:int. (((1 <= temp___193) and (temp___193 <= 75)) ->
    ((number2 <= temp___193) ->
    ((the_basket2[temp___193]) = (temp___192[temp___193]))))) and
  ((1 <= number2) and (number2 <= 75))) and ((((to_rep(o) = number2) and
  (o1 = (the_basket2[number2 <- o]))) and ((result1 = the_basket2) and
  (the_basket3 = o1))) and (number2 = 75)))) and (((number2 = number3) and
  (the_basket3 = the_basket4)) and ((number4 = number2) and
  (the_basket5 = the_basket3)))) and (((number3 = number5) and
  (the_basket4 = the_basket6)) and ((number6 = number4) and
  (the_basket7 = the_basket5))))) or ((not ((1 <= number1) and
  (number1 <= 75))) and (((number1 = number5) and
  (the_basket = the_basket6)) and ((number6 = number1) and
  (the_basket7 = the_basket1)))))) and ((((result2 = index) and
  (index1 = 1)) and ((((1 <= index1) and (index1 <= 75)) and
  ((((temp___197 = the_basket6) and ((temp___196 = random_index) and
  ((((1 <= 75) -> in_range2(random_index2)) and ((1 <= index2) and
  (index2 <= 75))) and ((((o2 = random_number(bingo_gen)) and
  in_range2(o2)) and ((result3 = random_index2) and
  (random_index3 = o2))) and (((random_index3 = r6b) and in_range2(r6b)) and
  (((1 <= 75) -> in_range2(temp2)) and (((result4 = temp2) and
  (temp3 = to_rep((the_basket8[index2])))) and
  ((((to_rep(o3) = to_rep((the_basket8[r6b]))) and
  (o4 = (the_basket8[index2 <- o3]))) and ((result5 = the_basket8) and
  (the_basket9 = o4))) and ((((to_rep(o5) = temp3) and
  (o6 = (the_basket9[r6b <- o5]))) and ((result6 = the_basket9) and
  (the_basket10 = o6))) and (index2 = 75)))))))))) and (((temp3 = temp4) and
  ((index2 = index3) and ((random_index3 = random_index4) and
  (the_basket10 = the_basket11)))) and ((temp5 = temp3) and
  ((index4 = index2) and ((random_index5 = random_index3) and
  (the_basket12 = the_basket10)))))) and ((({ int__content = temp6 } = {
  int__content = temp4 }) and (({ int__content = index5 } = { int__content =
  index3 }) and (({ int__content = random_index6 } = { int__content =
  random_index4 }) and ({ map__content = the_basket13 } = { map__content =
  the_basket11 })))) and ((temp7 = temp5) and ((index6 = index4) and
  ((random_index7 = random_index5) and (the_basket14 = the_basket12))))))) or
  ((not ((1 <= index1) and (index1 <= 75))) and (((temp = temp6) and
  ((index1 = index5) and ((random_index = random_index6) and ({
  map__content = the_basket13 } = { map__content = the_basket6 })))) and
  ((temp7 = temp1) and ((index6 = index1) and
  ((random_index7 = random_index1) and
  (the_basket14 = the_basket7)))))))) and ((result7 = the_count) and
  (the_count1 = 75))))) and (((temp8 = temp6) and ((index7 = index5) and
  ((number7 = number5) and ((random_index8 = random_index6) and
  ((the_count1 = the_count2) and (the_basket15 = the_basket13)))))) and
  ((temp9 = temp7) and ((index8 = index6) and ((number8 = number6) and
  ((random_index9 = random_index7) and ((the_count3 = the_count1) and
  (the_basket16 = the_basket14))))))))) -> (not (empty(the_count2) = true))))
