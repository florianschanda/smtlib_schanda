;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite64 ((x Float64)) Bool (or (fp.isZero x) (fp.isSubnormal x) (fp.isNormal x)))
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun pow2 (Int) Int)

(define-fun is_plus_infinity ((x Float64)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float64)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float64)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float64)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-fun of_int (RoundingMode Int) Float64)

(declare-fun to_int1 (RoundingMode Float64) Int)

(declare-fun round (RoundingMode Real) Real)

(declare-const max_int Int)

(define-fun in_range ((x Real)) Bool (and
                                     (<= (- (* 9007199254740991.0 19958403095347198116563727130368385660674512604354575415025472424372118918689640657849579654926357010893424468441924952439724379883935936607391717982848314203200056729510856765175377214443629871826533567445439239933308104551208703888888552684480441575071209068757560416423584952303440099278848.0)) x)
                                     (<= x (* 9007199254740991.0 19958403095347198116563727130368385660674512604354575415025472424372118918689640657849579654926357010893424468441924952439724379883935936607391717982848314203200056729510856765175377214443629871826533567445439239933308104551208703888888552684480441575071209068757560416423584952303440099278848.0))))

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun no_overflow ((m RoundingMode) (x Real)) Bool (in_range
  (round m x)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 9007199254740992) i)
                                             (<= i 9007199254740992)))

(define-fun same_sign ((x Float64)
  (y Float64)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float64)
  (y Float64)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float64) (x Float64)
  (y Float64)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(declare-fun sqrt (Real) Real)

(define-fun same_sign_real ((x Float64)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(declare-fun is_int1 (Float64) Bool)

(declare-datatypes ((t__ref 0)) (((mk_t__ref (t__content Float64)))))
(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort positive 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-const dummy1 positive)

(declare-datatypes ((positive__ref 0))
(((mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(declare-sort character 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-const dummy2 character)

(declare-datatypes ((character__ref 0))
(((mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ((map__ref 0))
(((mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int
  Int) (Array Int character))

;; concat_def
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (character Int) (Array Int character))

;; singleton_def
  (assert
  (forall ((v character))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_78 Int))
                           (=>
                           (and (<= a__first temp___idx_78)
                           (<= temp___idx_78 a__last))
                           (= (to_rep (select a temp___idx_78)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_78)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_78 Int))
  (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last))
  (= (to_rep (select a temp___idx_78)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_78)))))))))))

(declare-fun compare ((Array Int character) Int Int (Array Int character) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun to_rep1 (integer) Int)

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes ((us_t 0))
(((mk___t (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-fun object__size ((Array Int character)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int character)) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-const dummy3 us_t)

(declare-fun to_string (us_image) us_t)

(declare-fun from_string (us_t) us_image)

(declare-datatypes ((string__ref 0))
(((mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content
                                                            a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-sort coordinate_type 0)

(define-fun in_range4 ((x Float64)) Bool (and (fp.isFinite64 x)
                                         (and
                                         (fp.leq (fp.neg (fp #b0 #b10000000101 #b1001000000000000000000000000000000000000000000000000)) x)
                                         (fp.leq x (fp #b0 #b10000000101 #b1001000000000000000000000000000000000000000000000000)))))

(declare-fun user_eq4 (coordinate_type coordinate_type) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE3 (Float64) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Float64)

(declare-const dummy4 coordinate_type)

(declare-datatypes ((coordinate_type__ref 0))
(((mk_coordinate_type__ref (coordinate_type__content coordinate_type)))))
(define-fun coordinate_type__ref___projection ((a coordinate_type__ref)) coordinate_type
  (coordinate_type__content a))

(declare-fun to_rep2 (coordinate_type) Float64)

(declare-fun of_rep2 (Float64) coordinate_type)

;; inversion_axiom
  (assert
  (forall ((x coordinate_type))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x coordinate_type)) (! (in_range4
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Float64))
  (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-sort radius_type 0)

(define-fun in_range5 ((x Float64)) Bool (and (fp.isFinite64 x)
                                         (and
                                         (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) x)
                                         (fp.leq x (fp #b0 #b10000000010 #b0100000000000000000000000000000000000000000000000000)))))

(declare-fun user_eq5 (radius_type radius_type) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE4 (Float64) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Float64)

(declare-const dummy5 radius_type)

(declare-datatypes ((radius_type__ref 0))
(((mk_radius_type__ref (radius_type__content radius_type)))))
(define-fun radius_type__ref___projection ((a radius_type__ref)) radius_type
  (radius_type__content a))

(declare-fun to_rep3 (radius_type) Float64)

(declare-fun of_rep3 (Float64) radius_type)

;; inversion_axiom
  (assert
  (forall ((x radius_type))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x radius_type)) (! (in_range5
  (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Float64))
  (! (=> (in_range5 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-datatypes ((us_split_fields 0))
(((mk___split_fields
  (rec__shapes5__circle__center_x coordinate_type)(rec__shapes5__circle__center_y coordinate_type)(rec__shapes5__circle__radius radius_type)))))
(declare-datatypes ((us_split_fields__ref 0))
(((mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref_2__projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep_3__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                              a))

(define-fun bool_eq2 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (to_rep2
                           (rec__shapes5__circle__center_x
                           (us_split_fields1 a))) (to_rep2
                                                  (rec__shapes5__circle__center_x
                                                  (us_split_fields1 b))))
                        (= (to_rep2
                           (rec__shapes5__circle__center_y
                           (us_split_fields1 a))) (to_rep2
                                                  (rec__shapes5__circle__center_y
                                                  (us_split_fields1 b)))))
                        (= (to_rep3
                           (rec__shapes5__circle__radius
                           (us_split_fields1 a))) (to_rep3
                                                  (rec__shapes5__circle__radius
                                                  (us_split_fields1 b)))))
                   true false))

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-const shapes5__circle__center_x__first__bit Int)

(declare-const shapes5__circle__center_x__last__bit Int)

(declare-const shapes5__circle__center_x__position Int)

;; shapes5__circle__center_x__first__bit_axiom
  (assert (<= 0 shapes5__circle__center_x__first__bit))

;; shapes5__circle__center_x__last__bit_axiom
  (assert
  (< shapes5__circle__center_x__first__bit shapes5__circle__center_x__last__bit))

;; shapes5__circle__center_x__position_axiom
  (assert (<= 0 shapes5__circle__center_x__position))

(declare-const shapes5__circle__center_y__first__bit Int)

(declare-const shapes5__circle__center_y__last__bit Int)

(declare-const shapes5__circle__center_y__position Int)

;; shapes5__circle__center_y__first__bit_axiom
  (assert (<= 0 shapes5__circle__center_y__first__bit))

;; shapes5__circle__center_y__last__bit_axiom
  (assert
  (< shapes5__circle__center_y__first__bit shapes5__circle__center_y__last__bit))

;; shapes5__circle__center_y__position_axiom
  (assert (<= 0 shapes5__circle__center_y__position))

(declare-const shapes5__circle__radius__first__bit Int)

(declare-const shapes5__circle__radius__last__bit Int)

(declare-const shapes5__circle__radius__position Int)

;; shapes5__circle__radius__first__bit_axiom
  (assert (<= 0 shapes5__circle__radius__first__bit))

;; shapes5__circle__radius__last__bit_axiom
  (assert
  (< shapes5__circle__radius__first__bit shapes5__circle__radius__last__bit))

;; shapes5__circle__radius__position_axiom
  (assert (<= 0 shapes5__circle__radius__position))

(declare-fun user_eq6 (us_rep us_rep) Bool)

(declare-const dummy6 us_rep)

(declare-datatypes ((circle__ref 0))
(((mk_circle__ref (circle__content us_rep)))))
(define-fun circle__ref___projection ((a circle__ref)) us_rep (circle__content
                                                              a))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(define-fun dynamic_invariant1 ((temp___expr_514 Float64)
  (temp___is_init_511 Bool) (temp___skip_constant_512 Bool)
  (temp___do_toplevel_513 Bool)) Bool (=>
                                      (or (= temp___is_init_511 true)
                                      (fp.leq (fp.neg (fp #b0 #b10000000101 #b1001000000000000000000000000000000000000000000000000)) (fp #b0 #b10000000101 #b1001000000000000000000000000000000000000000000000000)))
                                      (in_range4 temp___expr_514)))

(define-fun dynamic_invariant2 ((temp___expr_520 Float64)
  (temp___is_init_517 Bool) (temp___skip_constant_518 Bool)
  (temp___do_toplevel_519 Bool)) Bool (=>
                                      (or (= temp___is_init_517 true)
                                      (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b10000000010 #b0100000000000000000000000000000000000000000000000000)))
                                      (in_range5 temp___expr_520)))

(declare-fun in_bounds (us_rep Int) Bool)

(declare-fun in_bounds__function_guard (Bool us_rep Int) Bool)

(declare-fun make_circle (Float64 Float64 Float64 Int) us_rep)

(declare-fun make_circle__function_guard (us_rep Float64 Float64 Float64
  Int) Bool)

;; make_circle__post_axiom
  (assert
  (forall ((x Float64) (y Float64) (radius Float64))
  (forall ((shapes5__wild_man Int))
  (! (=>
     (and
     (and
     (and (dynamic_invariant1 x true true true) (dynamic_invariant1 y true
     true true)) (dynamic_invariant2 radius true true true))
     (dynamic_invariant shapes5__wild_man true true true))
     (= (in_bounds (make_circle x y radius shapes5__wild_man)
        shapes5__wild_man) true)) :pattern ((make_circle x y radius
                                            shapes5__wild_man)) ))))

(declare-fun inside_circle (Float64 Float64 us_rep Int) Bool)

(declare-fun inside_circle__function_guard (Bool Float64 Float64 us_rep
  Int) Bool)

;; inside_circle__post_axiom
  (assert true)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-fun temp___String_Literal_535 (tuple0) (Array Int character))

;; temp___String_Literal_535__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_535 us_void_param) 1)) 84)
     (= (to_rep (select (temp___String_Literal_535 us_void_param) 2)) 104))
     (= (to_rep (select (temp___String_Literal_535 us_void_param) 3)) 101))
     (= (to_rep (select (temp___String_Literal_535 us_void_param) 4)) 32))
     (= (to_rep (select (temp___String_Literal_535 us_void_param) 5)) 111))
     (= (to_rep (select (temp___String_Literal_535 us_void_param) 6)) 114))
     (= (to_rep (select (temp___String_Literal_535 us_void_param) 7)) 105))
     (= (to_rep (select (temp___String_Literal_535 us_void_param) 8)) 103))
     (= (to_rep (select (temp___String_Literal_535 us_void_param) 9)) 105))
     (= (to_rep (select (temp___String_Literal_535 us_void_param) 10)) 110))
     (= (to_rep (select (temp___String_Literal_535 us_void_param) 11)) 32))
     (= (to_rep (select (temp___String_Literal_535 us_void_param) 12)) 105))
     (= (to_rep (select (temp___String_Literal_535 us_void_param) 13)) 115))
     (= (to_rep (select (temp___String_Literal_535 us_void_param) 14)) 32))
     (= (to_rep (select (temp___String_Literal_535 us_void_param) 15)) 110))
     (= (to_rep (select (temp___String_Literal_535 us_void_param) 16)) 111))
     (= (to_rep (select (temp___String_Literal_535 us_void_param) 17)) 116))
     (= (to_rep (select (temp___String_Literal_535 us_void_param) 18)) 32))
     (= (to_rep (select (temp___String_Literal_535 us_void_param) 19)) 105))
     (= (to_rep (select (temp___String_Literal_535 us_void_param) 20)) 110))
     (= (to_rep (select (temp___String_Literal_535 us_void_param) 21)) 115))
     (= (to_rep (select (temp___String_Literal_535 us_void_param) 22)) 105))
     (= (to_rep (select (temp___String_Literal_535 us_void_param) 23)) 100))
     (= (to_rep (select (temp___String_Literal_535 us_void_param) 24)) 101))
     (= (to_rep (select (temp___String_Literal_535 us_void_param) 25)) 32))
     (= (to_rep (select (temp___String_Literal_535 us_void_param) 26)) 116))
     (= (to_rep (select (temp___String_Literal_535 us_void_param) 27)) 104))
     (= (to_rep (select (temp___String_Literal_535 us_void_param) 28)) 101))
     (= (to_rep (select (temp___String_Literal_535 us_void_param) 29)) 32))
     (= (to_rep (select (temp___String_Literal_535 us_void_param) 30)) 99))
     (= (to_rep (select (temp___String_Literal_535 us_void_param) 31)) 105))
     (= (to_rep (select (temp___String_Literal_535 us_void_param) 32)) 114))
     (= (to_rep (select (temp___String_Literal_535 us_void_param) 33)) 99))
     (= (to_rep (select (temp___String_Literal_535 us_void_param) 34)) 108))
     (= (to_rep (select (temp___String_Literal_535 us_void_param) 35)) 101)) :pattern (
  (temp___String_Literal_535 us_void_param)) )))

(declare-fun temp___String_Literal_536 (tuple0) (Array Int character))

;; temp___String_Literal_536__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_536 us_void_param) 1)) 84)
     (= (to_rep (select (temp___String_Literal_536 us_void_param) 2)) 104))
     (= (to_rep (select (temp___String_Literal_536 us_void_param) 3)) 101))
     (= (to_rep (select (temp___String_Literal_536 us_void_param) 4)) 32))
     (= (to_rep (select (temp___String_Literal_536 us_void_param) 5)) 111))
     (= (to_rep (select (temp___String_Literal_536 us_void_param) 6)) 114))
     (= (to_rep (select (temp___String_Literal_536 us_void_param) 7)) 105))
     (= (to_rep (select (temp___String_Literal_536 us_void_param) 8)) 103))
     (= (to_rep (select (temp___String_Literal_536 us_void_param) 9)) 105))
     (= (to_rep (select (temp___String_Literal_536 us_void_param) 10)) 110))
     (= (to_rep (select (temp___String_Literal_536 us_void_param) 11)) 32))
     (= (to_rep (select (temp___String_Literal_536 us_void_param) 12)) 105))
     (= (to_rep (select (temp___String_Literal_536 us_void_param) 13)) 115))
     (= (to_rep (select (temp___String_Literal_536 us_void_param) 14)) 32))
     (= (to_rep (select (temp___String_Literal_536 us_void_param) 15)) 105))
     (= (to_rep (select (temp___String_Literal_536 us_void_param) 16)) 110))
     (= (to_rep (select (temp___String_Literal_536 us_void_param) 17)) 115))
     (= (to_rep (select (temp___String_Literal_536 us_void_param) 18)) 105))
     (= (to_rep (select (temp___String_Literal_536 us_void_param) 19)) 100))
     (= (to_rep (select (temp___String_Literal_536 us_void_param) 20)) 101))
     (= (to_rep (select (temp___String_Literal_536 us_void_param) 21)) 32))
     (= (to_rep (select (temp___String_Literal_536 us_void_param) 22)) 116))
     (= (to_rep (select (temp___String_Literal_536 us_void_param) 23)) 104))
     (= (to_rep (select (temp___String_Literal_536 us_void_param) 24)) 101))
     (= (to_rep (select (temp___String_Literal_536 us_void_param) 25)) 32))
     (= (to_rep (select (temp___String_Literal_536 us_void_param) 26)) 99))
     (= (to_rep (select (temp___String_Literal_536 us_void_param) 27)) 105))
     (= (to_rep (select (temp___String_Literal_536 us_void_param) 28)) 114))
     (= (to_rep (select (temp___String_Literal_536 us_void_param) 29)) 99))
     (= (to_rep (select (temp___String_Literal_536 us_void_param) 30)) 108))
     (= (to_rep (select (temp___String_Literal_536 us_void_param) 31)) 101)) :pattern (
  (temp___String_Literal_536 us_void_param)) )))

(define-fun dynamic_invariant3 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range2
                                     temp___expr_39)))

(define-fun dynamic_invariant4 ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range3 temp___expr_63)))

(define-fun dynamic_invariant5 ((temp___expr_82 us_t)
  (temp___is_init_79 Bool) (temp___skip_constant_80 Bool)
  (temp___do_toplevel_81 Bool)) Bool (=>
                                     (not (= temp___skip_constant_80 true))
                                     (dynamic_property 1 2147483647
                                     (first1 temp___expr_82)
                                     (last1 temp___expr_82))))

;; in_bounds__post_axiom
  (assert true)

(declare-const wild_man Int)

(declare-const my_circle__split_fields coordinate_type)

(declare-const my_circle__split_fields1 coordinate_type)

(declare-const my_circle__split_fields2 radius_type)

(declare-const temp___534 coordinate_type)

(declare-const temp___5341 coordinate_type)

(declare-const temp___5342 radius_type)

(declare-const result coordinate_type)

(declare-const result1 coordinate_type)

(declare-const result2 radius_type)

(declare-const my_circle__split_fields3 coordinate_type)

(declare-const my_circle__split_fields4 coordinate_type)

(declare-const my_circle__split_fields5 radius_type)

(declare-const result3 Int)

(declare-const wild_man1 Int)

(define-fun temp___5343 () us_rep (mk___rep
                                  (mk___split_fields temp___534 temp___5341
                                  temp___5342)))

;; H
  (assert (in_range1 wild_man))

;; H
  (assert
  (and
  (= temp___5343 (make_circle
                 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)
                 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)
                 (fp #b0 #b10000000001 #b0100000000000000000000000000000000000000000000000000)
                 wild_man))
  (= (in_bounds temp___5343 wild_man) true)))

;; H
  (assert (= result my_circle__split_fields))

;; H
  (assert (= result1 my_circle__split_fields1))

;; H
  (assert (= result2 my_circle__split_fields2))

;; H
  (assert (= temp___534 my_circle__split_fields3))

;; H
  (assert (= temp___5341 my_circle__split_fields4))

;; H
  (assert (= temp___5342 my_circle__split_fields5))

;; H
  (assert (= result3 wild_man))

;; H
  (assert (= wild_man1 (- 1)))

(assert
;; WP_parameter_def
 ;; File "shapes5.ads", line 20, characters 0-0
  (not
  (= (in_bounds
     (mk___rep
     (mk___split_fields my_circle__split_fields3 my_circle__split_fields4
     my_circle__split_fields5)) wild_man1) true)))
(check-sat)
(exit)
