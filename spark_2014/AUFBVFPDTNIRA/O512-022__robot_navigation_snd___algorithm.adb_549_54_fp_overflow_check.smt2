;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite32 ((x Float32)) Bool (or (fp.isZero x) (fp.isSubnormal x) (fp.isNormal x)))
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun pow2 (Int) Int)

(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-fun of_int (RoundingMode Int) Float32)

(declare-fun to_int1 (RoundingMode Float32) Int)

(declare-fun round (RoundingMode Real) Real)

(declare-const max_int Int)

(define-fun in_range ((x Real)) Bool (and
                                     (<= (- (* 33554430.0 10141204801825835211973625643008.0)) x)
                                     (<= x (* 33554430.0 10141204801825835211973625643008.0))))

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun no_overflow ((m RoundingMode) (x Real)) Bool (in_range
  (round m x)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(declare-fun sqrt (Real) Real)

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(declare-fun is_int1 (Float32) Bool)

(declare-datatypes ((t__ref 0)) (((mk_t__ref (t__content Float32)))))
(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int1 ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range1 ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort float 0)

(declare-fun user_eq (float float) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE1 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Float32)

(declare-const dummy float)

(declare-datatypes ((float__ref 0))
(((mk_float__ref (float__content float)))))
(define-fun float__ref___projection ((a float__ref)) float (float__content a))

(define-fun dynamic_invariant ((temp___expr_51 Float32)
  (temp___is_init_48 Bool) (temp___skip_constant_49 Bool)
  (temp___do_toplevel_50 Bool)) Bool (=>
                                     (or (= temp___is_init_48 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                     (fp.isFinite32 temp___expr_51)))

(declare-sort positive_float 0)

(define-fun in_range2 ((x Float32)) Bool (and (fp.isFinite32 x)
                                         (and
                                         (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x)
                                         (fp.leq x (fp #b0 #b11111110 #b11111111111111111111111)))))

(declare-fun user_eq1 (positive_float positive_float) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE2 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Float32)

(declare-const dummy1 positive_float)

(declare-datatypes ((positive_float__ref 0))
(((mk_positive_float__ref (positive_float__content positive_float)))))
(define-fun positive_float__ref___projection ((a positive_float__ref)) positive_float
  (positive_float__content a))

(declare-fun to_rep (positive_float) Float32)

(declare-fun of_rep (Float32) positive_float)

;; inversion_axiom
  (assert
  (forall ((x positive_float))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x positive_float)) (! (in_range2
  (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Float32))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort nonnegative_float 0)

(define-fun in_range3 ((x Float32)) Bool (and (fp.isFinite32 x)
                                         (and
                                         (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x)
                                         (fp.leq x (fp #b0 #b11111110 #b11111111111111111111111)))))

(declare-fun user_eq2 (nonnegative_float nonnegative_float) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE3 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Float32)

(declare-const dummy2 nonnegative_float)

(declare-datatypes ((nonnegative_float__ref 0))
(((mk_nonnegative_float__ref (nonnegative_float__content nonnegative_float)))))
(define-fun nonnegative_float__ref___projection ((a nonnegative_float__ref)) nonnegative_float
  (nonnegative_float__content a))

(define-fun dynamic_invariant1 ((temp___expr_146 Float32)
  (temp___is_init_143 Bool) (temp___skip_constant_144 Bool)
  (temp___do_toplevel_145 Bool)) Bool (=>
                                      (or (= temp___is_init_143 true)
                                      (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b11111110 #b11111111111111111111111)))
                                      (in_range3 temp___expr_146)))

(declare-fun to_rep1 (nonnegative_float) Float32)

(declare-fun of_rep1 (Float32) nonnegative_float)

;; inversion_axiom
  (assert
  (forall ((x nonnegative_float))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x nonnegative_float)) (! (in_range3
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Float32))
  (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort normalized2pi 0)

(define-fun in_range4 ((x Float32)) Bool (and (fp.isFinite32 x)
                                         (and
                                         (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x)
                                         (fp.leq x (fp #b0 #b10000001 #b10010010000111111011011)))))

(declare-fun user_eq3 (normalized2pi normalized2pi) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE4 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Float32)

(declare-const dummy3 normalized2pi)

(declare-datatypes ((normalized2pi__ref 0))
(((mk_normalized2pi__ref (normalized2pi__content normalized2pi)))))
(define-fun normalized2pi__ref___projection ((a normalized2pi__ref)) normalized2pi
  (normalized2pi__content a))

(declare-fun to_rep2 (normalized2pi) Float32)

(declare-fun of_rep2 (Float32) normalized2pi)

;; inversion_axiom
  (assert
  (forall ((x normalized2pi))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x normalized2pi)) (! (in_range4
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Float32))
  (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-datatypes ((us_split_fields 0))
(((mk___split_fields (rec__spaces__angles__angle__theta normalized2pi)))))
(declare-datatypes ((us_split_fields__ref 0))
(((mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (= (to_rep2
                           (rec__spaces__angles__angle__theta
                           (us_split_fields1 a))) (to_rep2
                                                  (rec__spaces__angles__angle__theta
                                                  (us_split_fields1 b))))
                   true false))

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const spaces__angles__angle__theta__first__bit Int)

(declare-const spaces__angles__angle__theta__last__bit Int)

(declare-const spaces__angles__angle__theta__position Int)

;; spaces__angles__angle__theta__first__bit_axiom
  (assert (<= 0 spaces__angles__angle__theta__first__bit))

;; spaces__angles__angle__theta__last__bit_axiom
  (assert
  (< spaces__angles__angle__theta__first__bit spaces__angles__angle__theta__last__bit))

;; spaces__angles__angle__theta__position_axiom
  (assert (<= 0 spaces__angles__angle__theta__position))

(declare-fun user_eq4 (us_rep us_rep) Bool)

(declare-const dummy4 us_rep)

(declare-datatypes ((angle__ref 0))
(((mk_angle__ref (angle__content us_rep)))))
(define-fun angle__ref___projection ((a angle__ref)) us_rep (angle__content
                                                            a))

(declare-fun create__2 (Float32) us_rep)

(declare-fun create__2__function_guard (us_rep Float32) Bool)

(declare-fun oadd (us_rep us_rep) us_rep)

(declare-fun oadd__function_guard (us_rep us_rep us_rep) Bool)

(declare-fun aldiff (us_rep us_rep) Float32)

(declare-fun aldiff__function_guard (Float32 us_rep us_rep) Bool)

(declare-sort natural 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (natural natural) Bool)

(declare-const dummy5 natural)

(declare-datatypes ((natural__ref 0))
(((mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(declare-fun to_rep3 (natural) Int)

(declare-fun of_rep3 (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range5 (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-fun to_rep4 (float) Float32)

(declare-fun of_rep4 (Float32) float)

;; inversion_axiom
  (assert
  (forall ((x float))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x float))
  (! (fp.isFinite32 (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Float32))
  (! (=> (fp.isFinite32 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                                  (of_rep4 x))) )))

(declare-sort unbounded_float 0)

(declare-fun user_eq6 (unbounded_float unbounded_float) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE6 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Float32)

(declare-const dummy6 unbounded_float)

(declare-datatypes ((unbounded_float__ref 0))
(((mk_unbounded_float__ref (unbounded_float__content unbounded_float)))))
(define-fun unbounded_float__ref___projection ((a unbounded_float__ref)) unbounded_float
  (unbounded_float__content a))

(declare-fun to_rep5 (unbounded_float) Float32)

(declare-fun of_rep5 (Float32) unbounded_float)

;; inversion_axiom
  (assert
  (forall ((x unbounded_float))
  (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)) )))

;; range_axiom
  (assert
  (forall ((x unbounded_float))
  (! (fp.isFinite32 (to_rep5 x)) :pattern ((to_rep5 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Float32))
  (! (=> (fp.isFinite32 x) (= (to_rep5 (of_rep5 x)) x)) :pattern ((to_rep5
                                                                  (of_rep5 x))) )))

(declare-datatypes ((map__ref 0))
(((mk_map__ref (map__content (Array Int nonnegative_float))))))
(declare-fun slide ((Array Int nonnegative_float) Int
  Int) (Array Int nonnegative_float))

;; slide_eq
  (assert
  (forall ((a (Array Int nonnegative_float)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int nonnegative_float)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int nonnegative_float) Int Int
  (Array Int nonnegative_float) Int Int) (Array Int nonnegative_float))

;; concat_def
  (assert
  (forall ((a (Array Int nonnegative_float))
  (b (Array Int nonnegative_float)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (nonnegative_float
  Int) (Array Int nonnegative_float))

;; singleton_def
  (assert
  (forall ((v nonnegative_float))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq1 ((a (Array Int nonnegative_float)) (a__first Int)
  (a__last Int) (b (Array Int nonnegative_float)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep1 (select a temp___idx_132)) (to_rep1
                                                                  (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int nonnegative_float))
  (b (Array Int nonnegative_float)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq1 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep1 (select a temp___idx_132)) (to_rep1
                                         (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-const dummy7 (Array Int nonnegative_float))

(declare-const value__size1 Int)

(declare-fun object__size1 ((Array Int nonnegative_float)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int nonnegative_float)) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 ((Array Int nonnegative_float)) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert
  (forall ((a (Array Int nonnegative_float))) (<= 0 (object__size1 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int nonnegative_float)))
  (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert
  (forall ((a (Array Int nonnegative_float))) (<= 0 (object__alignment1 a))))

(declare-fun user_eq7 ((Array Int nonnegative_float)
  (Array Int nonnegative_float)) Bool)

(declare-sort option 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq8 (option option) Bool)

(declare-const dummy8 option)

(declare-datatypes ((option__ref 0))
(((mk_option__ref (option__content option)))))
(define-fun option__ref___projection ((a option__ref)) option (option__content
                                                              a))

(declare-fun to_rep6 (option) Int)

(declare-fun of_rep6 (Int) option)

;; inversion_axiom
  (assert
  (forall ((x option))
  (! (= (of_rep6 (to_rep6 x)) x) :pattern ((to_rep6 x)) )))

;; range_axiom
  (assert
  (forall ((x option)) (! (in_range6 (to_rep6 x)) :pattern ((to_rep6 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range6 x) (= (to_rep6 (of_rep6 x)) x)) :pattern ((to_rep6
                                                              (of_rep6 x))) )))

(declare-datatypes ((us_split_discrs 0))
(((mk___split_discrs (rec__robot_iface__speed_option__opt option)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) option
  (rec__robot_iface__speed_option__opt a))

(declare-datatypes ((us_split_discrs__ref 0))
(((mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields2 0))
(((mk___split_fields1
  (rec__robot_iface__speed_option__modulus float)(rec__robot_iface__speed_option__angle float)))))
(declare-datatypes ((us_split_fields__ref1 0))
(((mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_4__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((mk___rep1
  (us_split_discrs1 us_split_discrs)(us_split_fields3 us_split_fields2)(attr__constrained Bool)))))
(define-fun us_rep_4__projection ((a us_rep1)) us_split_discrs (us_split_discrs1
                                                               a))

(define-fun us_rep_5__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                a))

(define-fun us_rep_6__projection ((a us_rep1)) Bool (attr__constrained a))

(define-fun robot_iface__speed_option__modulus__pred ((a us_rep1)) Bool (=
  (to_rep6 (rec__robot_iface__speed_option__opt (us_split_discrs1 a))) 1))

(define-fun robot_iface__speed_option__angle__pred ((a us_rep1)) Bool (=
  (to_rep6 (rec__robot_iface__speed_option__opt (us_split_discrs1 a))) 1))

(define-fun bool_eq2 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (and
                         (= (to_rep6
                            (rec__robot_iface__speed_option__opt
                            (us_split_discrs1 a))) (to_rep6
                                                   (rec__robot_iface__speed_option__opt
                                                   (us_split_discrs1 b))))
                         (=> (robot_iface__speed_option__modulus__pred a)
                         (= (to_rep4
                            (rec__robot_iface__speed_option__modulus
                            (us_split_fields3 a))) (to_rep4
                                                   (rec__robot_iface__speed_option__modulus
                                                   (us_split_fields3 b))))))
                         (=> (robot_iface__speed_option__angle__pred a)
                         (= (to_rep4
                            (rec__robot_iface__speed_option__angle
                            (us_split_fields3 a))) (to_rep4
                                                   (rec__robot_iface__speed_option__angle
                                                   (us_split_fields3 b))))))
                    true false))

(declare-const value__size2 Int)

(declare-fun object__size2 (us_rep1) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))

(declare-const robot_iface__speed_option__opt__first__bit Int)

(declare-const robot_iface__speed_option__opt__last__bit Int)

(declare-const robot_iface__speed_option__opt__position Int)

;; robot_iface__speed_option__opt__first__bit_axiom
  (assert (<= 0 robot_iface__speed_option__opt__first__bit))

;; robot_iface__speed_option__opt__last__bit_axiom
  (assert
  (< robot_iface__speed_option__opt__first__bit robot_iface__speed_option__opt__last__bit))

;; robot_iface__speed_option__opt__position_axiom
  (assert (<= 0 robot_iface__speed_option__opt__position))

(declare-const robot_iface__speed_option__modulus__first__bit Int)

(declare-const robot_iface__speed_option__modulus__last__bit Int)

(declare-const robot_iface__speed_option__modulus__position Int)

;; robot_iface__speed_option__modulus__first__bit_axiom
  (assert (<= 0 robot_iface__speed_option__modulus__first__bit))

;; robot_iface__speed_option__modulus__last__bit_axiom
  (assert
  (< robot_iface__speed_option__modulus__first__bit robot_iface__speed_option__modulus__last__bit))

;; robot_iface__speed_option__modulus__position_axiom
  (assert (<= 0 robot_iface__speed_option__modulus__position))

(declare-const robot_iface__speed_option__angle__first__bit Int)

(declare-const robot_iface__speed_option__angle__last__bit Int)

(declare-const robot_iface__speed_option__angle__position Int)

;; robot_iface__speed_option__angle__first__bit_axiom
  (assert (<= 0 robot_iface__speed_option__angle__first__bit))

;; robot_iface__speed_option__angle__last__bit_axiom
  (assert
  (< robot_iface__speed_option__angle__first__bit robot_iface__speed_option__angle__last__bit))

;; robot_iface__speed_option__angle__position_axiom
  (assert (<= 0 robot_iface__speed_option__angle__position))

(declare-fun user_eq9 (us_rep1 us_rep1) Bool)

(declare-const dummy9 us_rep1)

(declare-datatypes ((speed_option__ref 0))
(((mk_speed_option__ref (speed_option__content us_rep1)))))
(define-fun speed_option__ref___projection ((a speed_option__ref)) us_rep1
  (speed_option__content a))

(declare-datatypes ((us_split_fields4 0))
(((mk___split_fields2
  (rec__robot_iface__proxy__robot_radius positive_float)(rec__robot_iface__proxy__min_gap_width positive_float)(rec__robot_iface__proxy__obstacle_avoid_dist positive_float)(rec__robot_iface__proxy__max_speed positive_float)(rec__robot_iface__proxy__max_turn_rate positive_float)(rec__robot_iface__proxy__goal_position_tol nonnegative_float)(rec__robot_iface__proxy__goal_angle_tol nonnegative_float)(rec__robot_iface__proxy__goalx float)(rec__robot_iface__proxy__goaly float)(rec__robot_iface__proxy__goala float)(rec__robot_iface__proxy__scan_count natural)(rec__robot_iface__proxy__scan_res positive_float)(rec__robot_iface__proxy__max_range positive_float)(rec__robot_iface__proxy__scans (Array Int nonnegative_float))(rec__robot_iface__proxy__x unbounded_float)(rec__robot_iface__proxy__y unbounded_float)(rec__robot_iface__proxy__yaw unbounded_float)(rec__robot_iface__proxy__speed us_rep1)(rec__robot_iface__proxy__goal_reached Bool)))))
(define-fun us_split_fields_scan_Count__projection ((a us_split_fields4)) natural
  (rec__robot_iface__proxy__scan_count a))

(define-fun us_split_fields_scans__projection ((a us_split_fields4)) (Array Int nonnegative_float)
  (rec__robot_iface__proxy__scans a))

(define-fun us_split_fields_speed__projection ((a us_split_fields4)) us_rep1
  (rec__robot_iface__proxy__speed a))

(define-fun us_split_fields_goal_reached__projection ((a us_split_fields4)) Bool
  (rec__robot_iface__proxy__goal_reached a))

(declare-datatypes ((us_split_fields__ref2 0))
(((mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref_5__projection ((a us_split_fields__ref2)) us_split_fields4
  (us_split_fields__content2 a))

(declare-datatypes ((us_rep2 0))
(((mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep_7__projection ((a us_rep2)) us_split_fields4 (us_split_fields5
                                                                a))

(define-fun bool_eq3 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (= (to_rep
                            (rec__robot_iface__proxy__robot_radius
                            (us_split_fields5 a))) (to_rep
                                                   (rec__robot_iface__proxy__robot_radius
                                                   (us_split_fields5 b))))
                         (= (to_rep
                            (rec__robot_iface__proxy__min_gap_width
                            (us_split_fields5 a))) (to_rep
                                                   (rec__robot_iface__proxy__min_gap_width
                                                   (us_split_fields5 b)))))
                         (= (to_rep
                            (rec__robot_iface__proxy__obstacle_avoid_dist
                            (us_split_fields5 a))) (to_rep
                                                   (rec__robot_iface__proxy__obstacle_avoid_dist
                                                   (us_split_fields5 b)))))
                         (= (to_rep
                            (rec__robot_iface__proxy__max_speed
                            (us_split_fields5 a))) (to_rep
                                                   (rec__robot_iface__proxy__max_speed
                                                   (us_split_fields5 b)))))
                         (= (to_rep
                            (rec__robot_iface__proxy__max_turn_rate
                            (us_split_fields5 a))) (to_rep
                                                   (rec__robot_iface__proxy__max_turn_rate
                                                   (us_split_fields5 b)))))
                         (= (to_rep1
                            (rec__robot_iface__proxy__goal_position_tol
                            (us_split_fields5 a))) (to_rep1
                                                   (rec__robot_iface__proxy__goal_position_tol
                                                   (us_split_fields5 b)))))
                         (= (to_rep1
                            (rec__robot_iface__proxy__goal_angle_tol
                            (us_split_fields5 a))) (to_rep1
                                                   (rec__robot_iface__proxy__goal_angle_tol
                                                   (us_split_fields5 b)))))
                         (= (to_rep4
                            (rec__robot_iface__proxy__goalx
                            (us_split_fields5 a))) (to_rep4
                                                   (rec__robot_iface__proxy__goalx
                                                   (us_split_fields5 b)))))
                         (= (to_rep4
                            (rec__robot_iface__proxy__goaly
                            (us_split_fields5 a))) (to_rep4
                                                   (rec__robot_iface__proxy__goaly
                                                   (us_split_fields5 b)))))
                         (= (to_rep4
                            (rec__robot_iface__proxy__goala
                            (us_split_fields5 a))) (to_rep4
                                                   (rec__robot_iface__proxy__goala
                                                   (us_split_fields5 b)))))
                         (= (to_rep3
                            (rec__robot_iface__proxy__scan_count
                            (us_split_fields5 a))) (to_rep3
                                                   (rec__robot_iface__proxy__scan_count
                                                   (us_split_fields5 b)))))
                         (= (to_rep
                            (rec__robot_iface__proxy__scan_res
                            (us_split_fields5 a))) (to_rep
                                                   (rec__robot_iface__proxy__scan_res
                                                   (us_split_fields5 b)))))
                         (= (to_rep
                            (rec__robot_iface__proxy__max_range
                            (us_split_fields5 a))) (to_rep
                                                   (rec__robot_iface__proxy__max_range
                                                   (us_split_fields5 b)))))
                         (= (bool_eq1
                            (rec__robot_iface__proxy__scans
                            (us_split_fields5 a)) 1 1000
                            (rec__robot_iface__proxy__scans
                            (us_split_fields5 b)) 1 1000) true))
                         (= (to_rep5
                            (rec__robot_iface__proxy__x (us_split_fields5 a)))
                         (to_rep5
                         (rec__robot_iface__proxy__x (us_split_fields5 b)))))
                         (= (to_rep5
                            (rec__robot_iface__proxy__y (us_split_fields5 a)))
                         (to_rep5
                         (rec__robot_iface__proxy__y (us_split_fields5 b)))))
                         (= (to_rep5
                            (rec__robot_iface__proxy__yaw
                            (us_split_fields5 a))) (to_rep5
                                                   (rec__robot_iface__proxy__yaw
                                                   (us_split_fields5 b)))))
                         (= (bool_eq2
                            (rec__robot_iface__proxy__speed
                            (us_split_fields5 a))
                            (rec__robot_iface__proxy__speed
                            (us_split_fields5 b))) true))
                         (= (rec__robot_iface__proxy__goal_reached
                            (us_split_fields5 a)) (rec__robot_iface__proxy__goal_reached
                                                  (us_split_fields5 b))))
                    true false))

(declare-const value__size3 Int)

(declare-fun object__size3 (us_rep2) Int)

(declare-const value__alignment3 Int)

(declare-fun object__alignment3 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment3 a))))

(declare-const robot_iface__proxy__robot_radius__first__bit Int)

(declare-const robot_iface__proxy__robot_radius__last__bit Int)

(declare-const robot_iface__proxy__robot_radius__position Int)

;; robot_iface__proxy__robot_radius__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__robot_radius__first__bit))

;; robot_iface__proxy__robot_radius__last__bit_axiom
  (assert
  (< robot_iface__proxy__robot_radius__first__bit robot_iface__proxy__robot_radius__last__bit))

;; robot_iface__proxy__robot_radius__position_axiom
  (assert (<= 0 robot_iface__proxy__robot_radius__position))

(declare-const robot_iface__proxy__min_gap_width__first__bit Int)

(declare-const robot_iface__proxy__min_gap_width__last__bit Int)

(declare-const robot_iface__proxy__min_gap_width__position Int)

;; robot_iface__proxy__min_gap_width__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__min_gap_width__first__bit))

;; robot_iface__proxy__min_gap_width__last__bit_axiom
  (assert
  (< robot_iface__proxy__min_gap_width__first__bit robot_iface__proxy__min_gap_width__last__bit))

;; robot_iface__proxy__min_gap_width__position_axiom
  (assert (<= 0 robot_iface__proxy__min_gap_width__position))

(declare-const robot_iface__proxy__obstacle_avoid_dist__first__bit Int)

(declare-const robot_iface__proxy__obstacle_avoid_dist__last__bit Int)

(declare-const robot_iface__proxy__obstacle_avoid_dist__position Int)

;; robot_iface__proxy__obstacle_avoid_dist__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__obstacle_avoid_dist__first__bit))

;; robot_iface__proxy__obstacle_avoid_dist__last__bit_axiom
  (assert
  (< robot_iface__proxy__obstacle_avoid_dist__first__bit robot_iface__proxy__obstacle_avoid_dist__last__bit))

;; robot_iface__proxy__obstacle_avoid_dist__position_axiom
  (assert (<= 0 robot_iface__proxy__obstacle_avoid_dist__position))

(declare-const robot_iface__proxy__max_speed__first__bit Int)

(declare-const robot_iface__proxy__max_speed__last__bit Int)

(declare-const robot_iface__proxy__max_speed__position Int)

;; robot_iface__proxy__max_speed__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__max_speed__first__bit))

;; robot_iface__proxy__max_speed__last__bit_axiom
  (assert
  (< robot_iface__proxy__max_speed__first__bit robot_iface__proxy__max_speed__last__bit))

;; robot_iface__proxy__max_speed__position_axiom
  (assert (<= 0 robot_iface__proxy__max_speed__position))

(declare-const robot_iface__proxy__max_turn_rate__first__bit Int)

(declare-const robot_iface__proxy__max_turn_rate__last__bit Int)

(declare-const robot_iface__proxy__max_turn_rate__position Int)

;; robot_iface__proxy__max_turn_rate__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__max_turn_rate__first__bit))

;; robot_iface__proxy__max_turn_rate__last__bit_axiom
  (assert
  (< robot_iface__proxy__max_turn_rate__first__bit robot_iface__proxy__max_turn_rate__last__bit))

;; robot_iface__proxy__max_turn_rate__position_axiom
  (assert (<= 0 robot_iface__proxy__max_turn_rate__position))

(declare-const robot_iface__proxy__goal_position_tol__first__bit Int)

(declare-const robot_iface__proxy__goal_position_tol__last__bit Int)

(declare-const robot_iface__proxy__goal_position_tol__position Int)

;; robot_iface__proxy__goal_position_tol__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__goal_position_tol__first__bit))

;; robot_iface__proxy__goal_position_tol__last__bit_axiom
  (assert
  (< robot_iface__proxy__goal_position_tol__first__bit robot_iface__proxy__goal_position_tol__last__bit))

;; robot_iface__proxy__goal_position_tol__position_axiom
  (assert (<= 0 robot_iface__proxy__goal_position_tol__position))

(declare-const robot_iface__proxy__goal_angle_tol__first__bit Int)

(declare-const robot_iface__proxy__goal_angle_tol__last__bit Int)

(declare-const robot_iface__proxy__goal_angle_tol__position Int)

;; robot_iface__proxy__goal_angle_tol__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__goal_angle_tol__first__bit))

;; robot_iface__proxy__goal_angle_tol__last__bit_axiom
  (assert
  (< robot_iface__proxy__goal_angle_tol__first__bit robot_iface__proxy__goal_angle_tol__last__bit))

;; robot_iface__proxy__goal_angle_tol__position_axiom
  (assert (<= 0 robot_iface__proxy__goal_angle_tol__position))

(declare-const robot_iface__proxy__goalx__first__bit Int)

(declare-const robot_iface__proxy__goalx__last__bit Int)

(declare-const robot_iface__proxy__goalx__position Int)

;; robot_iface__proxy__goalx__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__goalx__first__bit))

;; robot_iface__proxy__goalx__last__bit_axiom
  (assert
  (< robot_iface__proxy__goalx__first__bit robot_iface__proxy__goalx__last__bit))

;; robot_iface__proxy__goalx__position_axiom
  (assert (<= 0 robot_iface__proxy__goalx__position))

(declare-const robot_iface__proxy__goaly__first__bit Int)

(declare-const robot_iface__proxy__goaly__last__bit Int)

(declare-const robot_iface__proxy__goaly__position Int)

;; robot_iface__proxy__goaly__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__goaly__first__bit))

;; robot_iface__proxy__goaly__last__bit_axiom
  (assert
  (< robot_iface__proxy__goaly__first__bit robot_iface__proxy__goaly__last__bit))

;; robot_iface__proxy__goaly__position_axiom
  (assert (<= 0 robot_iface__proxy__goaly__position))

(declare-const robot_iface__proxy__goala__first__bit Int)

(declare-const robot_iface__proxy__goala__last__bit Int)

(declare-const robot_iface__proxy__goala__position Int)

;; robot_iface__proxy__goala__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__goala__first__bit))

;; robot_iface__proxy__goala__last__bit_axiom
  (assert
  (< robot_iface__proxy__goala__first__bit robot_iface__proxy__goala__last__bit))

;; robot_iface__proxy__goala__position_axiom
  (assert (<= 0 robot_iface__proxy__goala__position))

(declare-const robot_iface__proxy__scan_count__first__bit Int)

(declare-const robot_iface__proxy__scan_count__last__bit Int)

(declare-const robot_iface__proxy__scan_count__position Int)

;; robot_iface__proxy__scan_count__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__scan_count__first__bit))

;; robot_iface__proxy__scan_count__last__bit_axiom
  (assert
  (< robot_iface__proxy__scan_count__first__bit robot_iface__proxy__scan_count__last__bit))

;; robot_iface__proxy__scan_count__position_axiom
  (assert (<= 0 robot_iface__proxy__scan_count__position))

(declare-const robot_iface__proxy__scan_res__first__bit Int)

(declare-const robot_iface__proxy__scan_res__last__bit Int)

(declare-const robot_iface__proxy__scan_res__position Int)

;; robot_iface__proxy__scan_res__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__scan_res__first__bit))

;; robot_iface__proxy__scan_res__last__bit_axiom
  (assert
  (< robot_iface__proxy__scan_res__first__bit robot_iface__proxy__scan_res__last__bit))

;; robot_iface__proxy__scan_res__position_axiom
  (assert (<= 0 robot_iface__proxy__scan_res__position))

(declare-const robot_iface__proxy__max_range__first__bit Int)

(declare-const robot_iface__proxy__max_range__last__bit Int)

(declare-const robot_iface__proxy__max_range__position Int)

;; robot_iface__proxy__max_range__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__max_range__first__bit))

;; robot_iface__proxy__max_range__last__bit_axiom
  (assert
  (< robot_iface__proxy__max_range__first__bit robot_iface__proxy__max_range__last__bit))

;; robot_iface__proxy__max_range__position_axiom
  (assert (<= 0 robot_iface__proxy__max_range__position))

(declare-const robot_iface__proxy__scans__first__bit Int)

(declare-const robot_iface__proxy__scans__last__bit Int)

(declare-const robot_iface__proxy__scans__position Int)

;; robot_iface__proxy__scans__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__scans__first__bit))

;; robot_iface__proxy__scans__last__bit_axiom
  (assert
  (< robot_iface__proxy__scans__first__bit robot_iface__proxy__scans__last__bit))

;; robot_iface__proxy__scans__position_axiom
  (assert (<= 0 robot_iface__proxy__scans__position))

(declare-const robot_iface__proxy__x__first__bit Int)

(declare-const robot_iface__proxy__x__last__bit Int)

(declare-const robot_iface__proxy__x__position Int)

;; robot_iface__proxy__x__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__x__first__bit))

;; robot_iface__proxy__x__last__bit_axiom
  (assert
  (< robot_iface__proxy__x__first__bit robot_iface__proxy__x__last__bit))

;; robot_iface__proxy__x__position_axiom
  (assert (<= 0 robot_iface__proxy__x__position))

(declare-const robot_iface__proxy__y__first__bit Int)

(declare-const robot_iface__proxy__y__last__bit Int)

(declare-const robot_iface__proxy__y__position Int)

;; robot_iface__proxy__y__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__y__first__bit))

;; robot_iface__proxy__y__last__bit_axiom
  (assert
  (< robot_iface__proxy__y__first__bit robot_iface__proxy__y__last__bit))

;; robot_iface__proxy__y__position_axiom
  (assert (<= 0 robot_iface__proxy__y__position))

(declare-const robot_iface__proxy__yaw__first__bit Int)

(declare-const robot_iface__proxy__yaw__last__bit Int)

(declare-const robot_iface__proxy__yaw__position Int)

;; robot_iface__proxy__yaw__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__yaw__first__bit))

;; robot_iface__proxy__yaw__last__bit_axiom
  (assert
  (< robot_iface__proxy__yaw__first__bit robot_iface__proxy__yaw__last__bit))

;; robot_iface__proxy__yaw__position_axiom
  (assert (<= 0 robot_iface__proxy__yaw__position))

(declare-const robot_iface__proxy__speed__first__bit Int)

(declare-const robot_iface__proxy__speed__last__bit Int)

(declare-const robot_iface__proxy__speed__position Int)

;; robot_iface__proxy__speed__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__speed__first__bit))

;; robot_iface__proxy__speed__last__bit_axiom
  (assert
  (< robot_iface__proxy__speed__first__bit robot_iface__proxy__speed__last__bit))

;; robot_iface__proxy__speed__position_axiom
  (assert (<= 0 robot_iface__proxy__speed__position))

(declare-const robot_iface__proxy__goal_reached__first__bit Int)

(declare-const robot_iface__proxy__goal_reached__last__bit Int)

(declare-const robot_iface__proxy__goal_reached__position Int)

;; robot_iface__proxy__goal_reached__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__goal_reached__first__bit))

;; robot_iface__proxy__goal_reached__last__bit_axiom
  (assert
  (< robot_iface__proxy__goal_reached__first__bit robot_iface__proxy__goal_reached__last__bit))

;; robot_iface__proxy__goal_reached__position_axiom
  (assert (<= 0 robot_iface__proxy__goal_reached__position))

(declare-fun user_eq10 (us_rep2 us_rep2) Bool)

(declare-const dummy10 us_rep2)

(declare-datatypes ((proxy__ref 0))
(((mk_proxy__ref (proxy__content us_rep2)))))
(define-fun proxy__ref___projection ((a proxy__ref)) us_rep2 (proxy__content
                                                             a))

(declare-datatypes ((us_split_fields6 0))
(((mk___split_fields3
  (rec__algorithm__laser_scan_data__first nonnegative_float)(rec__algorithm__laser_scan_data__second us_rep)))))
(define-fun us_split_fields_second__projection ((a us_split_fields6)) us_rep
  (rec__algorithm__laser_scan_data__second a))

(declare-datatypes ((us_split_fields__ref3 0))
(((mk___split_fields__ref3 (us_split_fields__content3 us_split_fields6)))))
(define-fun us_split_fields__ref_11__projection ((a us_split_fields__ref3)) us_split_fields6
  (us_split_fields__content3 a))

(declare-datatypes ((us_rep3 0))
(((mk___rep3 (us_split_fields7 us_split_fields6)))))
(define-fun us_rep_16__projection ((a us_rep3)) us_split_fields6 (us_split_fields7
                                                                 a))

(define-fun bool_eq4 ((a us_rep3)
  (b us_rep3)) Bool (ite (and
                         (= (to_rep1
                            (rec__algorithm__laser_scan_data__first
                            (us_split_fields7 a))) (to_rep1
                                                   (rec__algorithm__laser_scan_data__first
                                                   (us_split_fields7 b))))
                         (= (bool_eq
                            (rec__algorithm__laser_scan_data__second
                            (us_split_fields7 a))
                            (rec__algorithm__laser_scan_data__second
                            (us_split_fields7 b))) true))
                    true false))

(declare-const value__size4 Int)

(declare-fun object__size4 (us_rep3) Int)

(declare-const value__alignment4 Int)

(declare-fun object__alignment4 (us_rep3) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__size4 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__alignment4 a))))

(declare-const algorithm__laser_scan_data__first__first__bit Int)

(declare-const algorithm__laser_scan_data__first__last__bit Int)

(declare-const algorithm__laser_scan_data__first__position Int)

;; algorithm__laser_scan_data__first__first__bit_axiom
  (assert (<= 0 algorithm__laser_scan_data__first__first__bit))

;; algorithm__laser_scan_data__first__last__bit_axiom
  (assert
  (< algorithm__laser_scan_data__first__first__bit algorithm__laser_scan_data__first__last__bit))

;; algorithm__laser_scan_data__first__position_axiom
  (assert (<= 0 algorithm__laser_scan_data__first__position))

(declare-const algorithm__laser_scan_data__second__first__bit Int)

(declare-const algorithm__laser_scan_data__second__last__bit Int)

(declare-const algorithm__laser_scan_data__second__position Int)

;; algorithm__laser_scan_data__second__first__bit_axiom
  (assert (<= 0 algorithm__laser_scan_data__second__first__bit))

;; algorithm__laser_scan_data__second__last__bit_axiom
  (assert
  (< algorithm__laser_scan_data__second__first__bit algorithm__laser_scan_data__second__last__bit))

;; algorithm__laser_scan_data__second__position_axiom
  (assert (<= 0 algorithm__laser_scan_data__second__position))

(declare-fun user_eq11 (us_rep3 us_rep3) Bool)

(declare-const dummy11 us_rep3)

(declare-datatypes ((laser_scan_data__ref 0))
(((mk_laser_scan_data__ref (laser_scan_data__content us_rep3)))))
(define-fun laser_scan_data__ref___projection ((a laser_scan_data__ref)) us_rep3
  (laser_scan_data__content a))

(declare-datatypes ((map__ref1 0))
(((mk_map__ref1 (map__content1 (Array Int us_rep3))))))
(declare-fun slide1 ((Array Int us_rep3) Int Int) (Array Int us_rep3))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep3)))
  (forall ((first Int))
  (! (= (slide1 a first first) a) :pattern ((slide1 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep3)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int us_rep3) Int Int (Array Int us_rep3) Int
  Int) (Array Int us_rep3))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep3)) (b (Array Int us_rep3)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 (us_rep3 Int) (Array Int us_rep3))

;; singleton_def
  (assert
  (forall ((v us_rep3))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq5 ((a (Array Int us_rep3)) (a__first Int) (a__last Int)
  (b (Array Int us_rep3)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_133 Int))
                           (=>
                           (and (<= a__first temp___idx_133)
                           (<= temp___idx_133 a__last))
                           (= (bool_eq4 (select a temp___idx_133)
                              (select b (+ (- b__first a__first) temp___idx_133))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep3)) (b (Array Int us_rep3)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq5 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_133 Int))
  (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last))
  (= (bool_eq4 (select a temp___idx_133)
     (select b (+ (- b__first a__first) temp___idx_133))) true))))))))

(declare-sort count_type 0)

(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq12 (count_type count_type) Bool)

(declare-const dummy12 count_type)

(declare-datatypes ((count_type__ref 0))
(((mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type
  (count_type__content a))

(declare-fun to_rep7 (count_type) Int)

(declare-fun of_rep7 (Int) count_type)

;; inversion_axiom
  (assert
  (forall ((x count_type))
  (! (= (of_rep7 (to_rep7 x)) x) :pattern ((to_rep7 x)) )))

;; range_axiom
  (assert
  (forall ((x count_type)) (! (in_range7
  (to_rep7 x)) :pattern ((to_rep7 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range7 x) (= (to_rep7 (of_rep7 x)) x)) :pattern ((to_rep7
                                                              (of_rep7 x))) )))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-datatypes ((us_split_discrs2 0))
(((mk___split_discrs1
  (rec__algorithm__gap_vectors__list__capacity count_type)))))
(define-fun us_split_discrs_3__projection ((a us_split_discrs2)) count_type
  (rec__algorithm__gap_vectors__list__capacity a))

(declare-datatypes ((us_split_discrs__ref1 0))
(((mk___split_discrs__ref1 (us_split_discrs__content1 us_split_discrs2)))))
(define-fun us_split_discrs__ref_3__projection ((a us_split_discrs__ref1)) us_split_discrs2
  (us_split_discrs__content1 a))

(declare-datatypes ((us_split_fields8 0))
(((mk___split_fields4 (rec__algorithm__gap_vectors__list us_main_type)))))
(define-fun us_split_fields_List__projection ((a us_split_fields8)) us_main_type
  (rec__algorithm__gap_vectors__list a))

(declare-datatypes ((us_split_fields__ref4 0))
(((mk___split_fields__ref4 (us_split_fields__content4 us_split_fields8)))))
(define-fun us_split_fields__ref_9__projection ((a us_split_fields__ref4)) us_split_fields8
  (us_split_fields__content4 a))

(declare-datatypes ((us_rep4 0))
(((mk___rep4
  (us_split_discrs3 us_split_discrs2)(us_split_fields9 us_split_fields8)))))
(define-fun us_rep_13__projection ((a us_rep4)) us_split_discrs2 (us_split_discrs3
                                                                 a))

(define-fun us_rep_14__projection ((a us_rep4)) us_split_fields8 (us_split_fields9
                                                                 a))

(define-fun bool_eq6 ((a us_rep4)
  (b us_rep4)) Bool (ite (and
                         (= (to_rep7
                            (rec__algorithm__gap_vectors__list__capacity
                            (us_split_discrs3 a))) (to_rep7
                                                   (rec__algorithm__gap_vectors__list__capacity
                                                   (us_split_discrs3 b))))
                         (= (us_main_eq
                            (rec__algorithm__gap_vectors__list
                            (us_split_fields9 a))
                            (rec__algorithm__gap_vectors__list
                            (us_split_fields9 b))) true))
                    true false))

(declare-const value__size5 Int)

(declare-fun object__size5 (us_rep4) Int)

(declare-const value__alignment5 Int)

(declare-fun object__alignment5 (us_rep4) Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (forall ((a us_rep4)) (<= 0 (object__size5 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment5))

;; object__alignment_axiom
  (assert (forall ((a us_rep4)) (<= 0 (object__alignment5 a))))

(declare-const algorithm__gap_vectors__list__capacity__first__bit Int)

(declare-const algorithm__gap_vectors__list__capacity__last__bit Int)

(declare-const algorithm__gap_vectors__list__capacity__position Int)

;; algorithm__gap_vectors__list__capacity__first__bit_axiom
  (assert (<= 0 algorithm__gap_vectors__list__capacity__first__bit))

;; algorithm__gap_vectors__list__capacity__last__bit_axiom
  (assert
  (< algorithm__gap_vectors__list__capacity__first__bit algorithm__gap_vectors__list__capacity__last__bit))

;; algorithm__gap_vectors__list__capacity__position_axiom
  (assert (<= 0 algorithm__gap_vectors__list__capacity__position))

(declare-fun user_eq13 (us_rep4 us_rep4) Bool)

(declare-const dummy13 us_rep4)

(declare-datatypes ((list__ref 0))
(((mk_list__ref (list__content us_rep4)))))
(define-fun list__ref___projection ((a list__ref)) us_rep4 (list__content a))

(define-fun in_range8 ((rec__algorithm__gap_vectors__list__capacity1 Int)
  (a us_rep4)) Bool (= rec__algorithm__gap_vectors__list__capacity1 (to_rep7
                                                                    (rec__algorithm__gap_vectors__list__capacity
                                                                    (us_split_discrs3
                                                                    a)))))

(declare-const value__size6 Int)

(declare-fun object__size6 (us_rep4) Int)

(declare-const value__alignment6 Int)

(declare-fun object__alignment6 (us_rep4) Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert (forall ((a us_rep4)) (<= 0 (object__size6 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment6))

;; object__alignment_axiom
  (assert (forall ((a us_rep4)) (<= 0 (object__alignment6 a))))

(declare-const algorithm__gap_vectors__list__capacity__first__bit1 Int)

(declare-const algorithm__gap_vectors__list__capacity__last__bit1 Int)

(declare-const algorithm__gap_vectors__list__capacity__position1 Int)

;; algorithm__gap_vectors__list__capacity__first__bit_axiom
  (assert (<= 0 algorithm__gap_vectors__list__capacity__first__bit1))

;; algorithm__gap_vectors__list__capacity__last__bit_axiom
  (assert
  (< algorithm__gap_vectors__list__capacity__first__bit1 algorithm__gap_vectors__list__capacity__last__bit1))

;; algorithm__gap_vectors__list__capacity__position_axiom
  (assert (<= 0 algorithm__gap_vectors__list__capacity__position1))

(declare-fun user_eq14 (us_rep4 us_rep4) Bool)

(declare-const dummy14 us_rep4)

(declare-datatypes ((list__ref1 0))
(((mk_list__ref1 (list__content1 us_rep4)))))
(define-fun list__ref_2__projection ((a list__ref1)) us_rep4 (list__content1
                                                             a))

(declare-const dummy15 (Array Int us_rep3))

(declare-const value__size7 Int)

(declare-fun object__size7 ((Array Int us_rep3)) Int)

(declare-const value__component__size1 Int)

(declare-fun object__component__size1 ((Array Int us_rep3)) Int)

(declare-const value__alignment7 Int)

(declare-fun object__alignment7 ((Array Int us_rep3)) Int)

;; value__size_axiom
  (assert (<= 0 value__size7))

;; object__size_axiom
  (assert (forall ((a (Array Int us_rep3))) (<= 0 (object__size7 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int us_rep3))) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment7))

;; object__alignment_axiom
  (assert (forall ((a (Array Int us_rep3))) (<= 0 (object__alignment7 a))))

(declare-fun user_eq15 ((Array Int us_rep3) (Array Int us_rep3)) Bool)

(declare-datatypes ((us_split_fields10 0))
(((mk___split_fields5
  (rec__algorithm__controller__robot us_rep2)(rec__algorithm__controller__laserscan (Array Int us_rep3))(rec__algorithm__controller__gapvec us_rep4)(rec__algorithm__controller__obsavoiddelta float)(rec__algorithm__controller__driveangle us_rep)))))
(define-fun us_split_fields_robot__projection ((a us_split_fields10)) us_rep2
  (rec__algorithm__controller__robot a))

(define-fun us_split_fields_laserScan__projection ((a us_split_fields10)) (Array Int us_rep3)
  (rec__algorithm__controller__laserscan a))

(define-fun us_split_fields_gapVec__projection ((a us_split_fields10)) us_rep4
  (rec__algorithm__controller__gapvec a))

(define-fun us_split_fields_driveAngle__projection ((a us_split_fields10)) us_rep
  (rec__algorithm__controller__driveangle a))

(declare-datatypes ((us_split_fields__ref5 0))
(((mk___split_fields__ref5 (us_split_fields__content5 us_split_fields10)))))
(define-fun us_split_fields__ref_12__projection ((a us_split_fields__ref5)) us_split_fields10
  (us_split_fields__content5 a))

(declare-datatypes ((us_rep5 0))
(((mk___rep5 (us_split_fields11 us_split_fields10)))))
(define-fun us_rep_17__projection ((a us_rep5)) us_split_fields10 (us_split_fields11
                                                                  a))

(define-fun bool_eq7 ((a us_rep5)
  (b us_rep5)) Bool (ite (and
                         (and
                         (and
                         (and
                         (= (bool_eq3
                            (rec__algorithm__controller__robot
                            (us_split_fields11 a))
                            (rec__algorithm__controller__robot
                            (us_split_fields11 b))) true)
                         (= (bool_eq5
                            (rec__algorithm__controller__laserscan
                            (us_split_fields11 a)) 1 1000
                            (rec__algorithm__controller__laserscan
                            (us_split_fields11 b)) 1 1000) true))
                         (= (bool_eq6
                            (rec__algorithm__controller__gapvec
                            (us_split_fields11 a))
                            (rec__algorithm__controller__gapvec
                            (us_split_fields11 b))) true))
                         (= (to_rep4
                            (rec__algorithm__controller__obsavoiddelta
                            (us_split_fields11 a))) (to_rep4
                                                    (rec__algorithm__controller__obsavoiddelta
                                                    (us_split_fields11 b)))))
                         (= (bool_eq
                            (rec__algorithm__controller__driveangle
                            (us_split_fields11 a))
                            (rec__algorithm__controller__driveangle
                            (us_split_fields11 b))) true))
                    true false))

(declare-const value__size8 Int)

(declare-fun object__size8 (us_rep5) Int)

(declare-const value__alignment8 Int)

(declare-fun object__alignment8 (us_rep5) Int)

;; value__size_axiom
  (assert (<= 0 value__size8))

;; object__size_axiom
  (assert (forall ((a us_rep5)) (<= 0 (object__size8 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment8))

;; object__alignment_axiom
  (assert (forall ((a us_rep5)) (<= 0 (object__alignment8 a))))

(declare-const algorithm__controller__robot__first__bit Int)

(declare-const algorithm__controller__robot__last__bit Int)

(declare-const algorithm__controller__robot__position Int)

;; algorithm__controller__robot__first__bit_axiom
  (assert (<= 0 algorithm__controller__robot__first__bit))

;; algorithm__controller__robot__last__bit_axiom
  (assert
  (< algorithm__controller__robot__first__bit algorithm__controller__robot__last__bit))

;; algorithm__controller__robot__position_axiom
  (assert (<= 0 algorithm__controller__robot__position))

(declare-const algorithm__controller__laserscan__first__bit Int)

(declare-const algorithm__controller__laserscan__last__bit Int)

(declare-const algorithm__controller__laserscan__position Int)

;; algorithm__controller__laserscan__first__bit_axiom
  (assert (<= 0 algorithm__controller__laserscan__first__bit))

;; algorithm__controller__laserscan__last__bit_axiom
  (assert
  (< algorithm__controller__laserscan__first__bit algorithm__controller__laserscan__last__bit))

;; algorithm__controller__laserscan__position_axiom
  (assert (<= 0 algorithm__controller__laserscan__position))

(declare-const algorithm__controller__gapvec__first__bit Int)

(declare-const algorithm__controller__gapvec__last__bit Int)

(declare-const algorithm__controller__gapvec__position Int)

;; algorithm__controller__gapvec__first__bit_axiom
  (assert (<= 0 algorithm__controller__gapvec__first__bit))

;; algorithm__controller__gapvec__last__bit_axiom
  (assert
  (< algorithm__controller__gapvec__first__bit algorithm__controller__gapvec__last__bit))

;; algorithm__controller__gapvec__position_axiom
  (assert (<= 0 algorithm__controller__gapvec__position))

(declare-const algorithm__controller__obsavoiddelta__first__bit Int)

(declare-const algorithm__controller__obsavoiddelta__last__bit Int)

(declare-const algorithm__controller__obsavoiddelta__position Int)

;; algorithm__controller__obsavoiddelta__first__bit_axiom
  (assert (<= 0 algorithm__controller__obsavoiddelta__first__bit))

;; algorithm__controller__obsavoiddelta__last__bit_axiom
  (assert
  (< algorithm__controller__obsavoiddelta__first__bit algorithm__controller__obsavoiddelta__last__bit))

;; algorithm__controller__obsavoiddelta__position_axiom
  (assert (<= 0 algorithm__controller__obsavoiddelta__position))

(declare-const algorithm__controller__driveangle__first__bit Int)

(declare-const algorithm__controller__driveangle__last__bit Int)

(declare-const algorithm__controller__driveangle__position Int)

;; algorithm__controller__driveangle__first__bit_axiom
  (assert (<= 0 algorithm__controller__driveangle__first__bit))

;; algorithm__controller__driveangle__last__bit_axiom
  (assert
  (< algorithm__controller__driveangle__first__bit algorithm__controller__driveangle__last__bit))

;; algorithm__controller__driveangle__position_axiom
  (assert (<= 0 algorithm__controller__driveangle__position))

(declare-fun user_eq16 (us_rep5 us_rep5) Bool)

(declare-const dummy16 us_rep5)

(declare-datatypes ((controller__ref 0))
(((mk_controller__ref (controller__content us_rep5)))))
(define-fun controller__ref___projection ((a controller__ref)) us_rep5
  (controller__content a))

(declare-const null_angle us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-fun is_empty (us_rep4) Bool)

(declare-fun is_empty__function_guard (Bool us_rep4) Bool)

(define-fun in_range9 ((rec__robot_iface__speed_option__opt1 Int)
  (a us_rep1)) Bool (= rec__robot_iface__speed_option__opt1 (to_rep6
                                                            (rec__robot_iface__speed_option__opt
                                                            (us_split_discrs1
                                                            a)))))

(declare-const value__size9 Int)

(declare-fun object__size9 (us_rep1) Int)

(declare-const value__alignment9 Int)

(declare-fun object__alignment9 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size9))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size9 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment9))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment9 a))))

(declare-const robot_iface__speed_option__opt__first__bit1 Int)

(declare-const robot_iface__speed_option__opt__last__bit1 Int)

(declare-const robot_iface__speed_option__opt__position1 Int)

;; robot_iface__speed_option__opt__first__bit_axiom
  (assert (<= 0 robot_iface__speed_option__opt__first__bit1))

;; robot_iface__speed_option__opt__last__bit_axiom
  (assert
  (< robot_iface__speed_option__opt__first__bit1 robot_iface__speed_option__opt__last__bit1))

;; robot_iface__speed_option__opt__position_axiom
  (assert (<= 0 robot_iface__speed_option__opt__position1))

(declare-const robot_iface__speed_option__modulus__first__bit1 Int)

(declare-const robot_iface__speed_option__modulus__last__bit1 Int)

(declare-const robot_iface__speed_option__modulus__position1 Int)

;; robot_iface__speed_option__modulus__first__bit_axiom
  (assert (<= 0 robot_iface__speed_option__modulus__first__bit1))

;; robot_iface__speed_option__modulus__last__bit_axiom
  (assert
  (< robot_iface__speed_option__modulus__first__bit1 robot_iface__speed_option__modulus__last__bit1))

;; robot_iface__speed_option__modulus__position_axiom
  (assert (<= 0 robot_iface__speed_option__modulus__position1))

(declare-const robot_iface__speed_option__angle__first__bit1 Int)

(declare-const robot_iface__speed_option__angle__last__bit1 Int)

(declare-const robot_iface__speed_option__angle__position1 Int)

;; robot_iface__speed_option__angle__first__bit_axiom
  (assert (<= 0 robot_iface__speed_option__angle__first__bit1))

;; robot_iface__speed_option__angle__last__bit_axiom
  (assert
  (< robot_iface__speed_option__angle__first__bit1 robot_iface__speed_option__angle__last__bit1))

;; robot_iface__speed_option__angle__position_axiom
  (assert (<= 0 robot_iface__speed_option__angle__position1))

(declare-fun user_eq17 (us_rep1 us_rep1) Bool)

(declare-const dummy17 us_rep1)

(declare-datatypes ((t252s__ref 0))
(((mk_t252s__ref (t252s__content us_rep1)))))
(define-fun t252s__ref___projection ((a t252s__ref)) us_rep1 (t252s__content
                                                             a))

(declare-fun temp___614 (Float32) (Array Int nonnegative_float))

;; def_axiom
  (assert
  (forall ((temp___616 Float32))
  (forall ((temp___617 Int))
  (= (select (temp___614 temp___616) temp___617) (of_rep1 temp___616)))))

(declare-fun temp___618 (us_rep3) (Array Int us_rep3))

;; def_axiom
  (assert
  (forall ((temp___620 us_rep3))
  (forall ((temp___621 Int))
  (= (select (temp___618 temp___620) temp___621) temp___620))))

(define-fun dynamic_invariant2 ((temp___expr_607 us_rep5)
  (temp___is_init_604 Bool) (temp___skip_constant_605 Bool)
  (temp___do_toplevel_606 Bool)) Bool (and
                                      (= (attr__constrained
                                         (rec__robot_iface__proxy__speed
                                         (us_split_fields5
                                         (rec__algorithm__controller__robot
                                         (us_split_fields11 temp___expr_607))))) false)
                                      (in_range8 1000
                                      (rec__algorithm__controller__gapvec
                                      (us_split_fields11 temp___expr_607)))))

(define-fun default_initial_assumption ((temp___expr_612 us_rep5)
  (temp___skip_top_level_613 Bool)) Bool (and
                                         (and
                                         (and
                                         (and
                                         (= (rec__algorithm__controller__robot
                                            (us_split_fields11
                                            temp___expr_612)) (mk___rep2
                                                              (mk___split_fields2
                                                              (of_rep
                                                              (fp #b0 #b00000000 #b00000000000000000000000))
                                                              (of_rep
                                                              (fp #b0 #b00000000 #b00000000000000000000000))
                                                              (of_rep
                                                              (fp #b0 #b00000000 #b00000000000000000000000))
                                                              (of_rep
                                                              (fp #b0 #b00000000 #b00000000000000000000000))
                                                              (of_rep
                                                              (fp #b0 #b00000000 #b00000000000000000000000))
                                                              (of_rep1
                                                              (fp #b0 #b00000000 #b00000000000000000000000))
                                                              (of_rep1
                                                              (fp #b0 #b00000000 #b00000000000000000000000))
                                                              (of_rep4
                                                              (fp #b0 #b00000000 #b00000000000000000000000))
                                                              (of_rep4
                                                              (fp #b0 #b00000000 #b00000000000000000000000))
                                                              (of_rep4
                                                              (fp #b0 #b00000000 #b00000000000000000000000))
                                                              (of_rep3 0)
                                                              (of_rep
                                                              (fp #b0 #b00000000 #b00000000000000000000000))
                                                              (of_rep
                                                              (fp #b0 #b00000000 #b00000000000000000000000))
                                                              (temp___614
                                                              (fp #b0 #b00000000 #b00000000000000000000000))
                                                              (of_rep5
                                                              (fp #b0 #b00000000 #b00000000000000000000000))
                                                              (of_rep5
                                                              (fp #b0 #b00000000 #b00000000000000000000000))
                                                              (of_rep5
                                                              (fp #b0 #b00000000 #b00000000000000000000000))
                                                              (let ((usq_
                                                              (mk___rep1
                                                              (mk___split_discrs
                                                              (of_rep6 0))
                                                              (mk___split_fields1
                                                              dummy dummy)
                                                              true)))
                                                              (mk___rep1
                                                              (us_split_discrs1
                                                              usq_)
                                                              (us_split_fields3
                                                              usq_) false))
                                                              (of_int1 0))))
                                         (= (rec__algorithm__controller__laserscan
                                            (us_split_fields11
                                            temp___expr_612)) (temp___618
                                                              (mk___rep3
                                                              (mk___split_fields3
                                                              (of_rep1
                                                              (fp #b0 #b00000000 #b00000000000000000000000))
                                                              null_angle)))))
                                         (and
                                         (= (to_rep7
                                            (rec__algorithm__gap_vectors__list__capacity
                                            (us_split_discrs3
                                            (rec__algorithm__controller__gapvec
                                            (us_split_fields11
                                            temp___expr_612))))) 1000)
                                         (= (is_empty
                                            (rec__algorithm__controller__gapvec
                                            (us_split_fields11
                                            temp___expr_612))) true)))
                                         (= (to_rep4
                                            (rec__algorithm__controller__obsavoiddelta
                                            (us_split_fields11
                                            temp___expr_612))) (fp #b0 #b00000000 #b00000000000000000000000)))
                                         (= (rec__algorithm__controller__driveangle
                                            (us_split_fields11
                                            temp___expr_612)) null_angle)))

(declare-const this us_rep5)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const safetydist Float32)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-fun limit (Float32 Float32 Float32) Float32)

(declare-fun limit__function_guard (Float32 Float32 Float32 Float32) Bool)

(declare-sort zero_to_one 0)

(define-fun in_range10 ((x Float32)) Bool (and (fp.isFinite32 x)
                                          (and
                                          (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x)
                                          (fp.leq x (fp #b0 #b01111111 #b00000000000000000000000)))))

(declare-fun user_eq18 (zero_to_one zero_to_one) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE9 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Float32)

(declare-const dummy18 zero_to_one)

(declare-datatypes ((zero_to_one__ref 0))
(((mk_zero_to_one__ref (zero_to_one__content zero_to_one)))))
(define-fun zero_to_one__ref___projection ((a zero_to_one__ref)) zero_to_one
  (zero_to_one__content a))

(define-fun dynamic_invariant3 ((temp___expr_679 Float32)
  (temp___is_init_676 Bool) (temp___skip_constant_677 Bool)
  (temp___do_toplevel_678 Bool)) Bool (=>
                                      (or (= temp___is_init_676 true)
                                      (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b01111111 #b00000000000000000000000)))
                                      (in_range10 temp___expr_679)))

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-sort integer 0)

(define-fun in_range11 ((x Int)) Bool (and (<= (- 2147483648) x)
                                      (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)

(declare-fun user_eq19 (integer integer) Bool)

(declare-const dummy19 integer)

(declare-datatypes ((integer__ref 0))
(((mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-fun to_rep8 (integer) Int)

(declare-fun of_rep8 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep8 (to_rep8 x)) x) :pattern ((to_rep8 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range11 (to_rep8 x)) :pattern ((to_rep8 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range11 x) (= (to_rep8 (of_rep8 x)) x)) :pattern ((to_rep8
                                                               (of_rep8 x))) )))

(define-fun dynamic_property ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE11 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) Int)

(declare-fun user_eq20 (integer integer) Bool)

(declare-const dummy20 integer)

(declare-datatypes ((t64b__ref 0))
(((mk_t64b__ref (t64b__content integer)))))
(define-fun t64b__ref___projection ((a t64b__ref)) integer (t64b__content a))

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(define-fun dynamic_invariant4 ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range5
                                     temp___expr_33)))

(define-fun dynamic_invariant5 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range11 temp___expr_15)))

(define-fun dynamic_invariant6 ((temp___expr_577 us_rep4)
  (temp___is_init_574 Bool) (temp___skip_constant_575 Bool)
  (temp___do_toplevel_576 Bool)) Bool (=>
                                      (not (= temp___skip_constant_575 true))
                                      (in_range8 1000 temp___expr_577)))

(define-fun default_initial_assumption1 ((temp___expr_579 us_rep4)
  (temp___skip_top_level_580 Bool)) Bool (and
                                         (= (to_rep7
                                            (rec__algorithm__gap_vectors__list__capacity
                                            (us_split_discrs3
                                            temp___expr_579))) 1000)
                                         (=>
                                         (not
                                         (= temp___skip_top_level_580 true))
                                         (= (is_empty temp___expr_579) true))))

(define-fun dynamic_invariant7 ((temp___expr_220 Int)
  (temp___is_init_217 Bool) (temp___skip_constant_218 Bool)
  (temp___do_toplevel_219 Bool)) Bool (=>
                                      (or (= temp___is_init_217 true)
                                      (<= 0 1)) (in_range6 temp___expr_220)))

(define-fun default_initial_assumption2 ((temp___expr_228 us_rep1)
  (temp___skip_top_level_229 Bool)) Bool (and
                                         (= (attr__constrained
                                            temp___expr_228) false)
                                         (= (to_rep6
                                            (rec__robot_iface__speed_option__opt
                                            (us_split_discrs1
                                            temp___expr_228))) 0)))

(define-fun dynamic_invariant8 ((temp___expr_236 us_rep2)
  (temp___is_init_233 Bool) (temp___skip_constant_234 Bool)
  (temp___do_toplevel_235 Bool)) Bool (= (attr__constrained
                                         (rec__robot_iface__proxy__speed
                                         (us_split_fields5 temp___expr_236))) false))

(define-fun default_initial_assumption3 ((temp___expr_239 us_rep2)
  (temp___skip_top_level_240 Bool)) Bool (and
                                         (= (attr__constrained
                                            (rec__robot_iface__proxy__speed
                                            (us_split_fields5
                                            temp___expr_239))) false)
                                         (= (to_rep6
                                            (rec__robot_iface__speed_option__opt
                                            (us_split_discrs1
                                            (rec__robot_iface__proxy__speed
                                            (us_split_fields5
                                            temp___expr_239))))) 0)))

(define-fun dynamic_invariant9 ((temp___expr_140 Float32)
  (temp___is_init_137 Bool) (temp___skip_constant_138 Bool)
  (temp___do_toplevel_139 Bool)) Bool (=>
                                      (or (= temp___is_init_137 true)
                                      (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b11111110 #b11111111111111111111111)))
                                      (in_range2 temp___expr_140)))

(define-fun dynamic_invariant10 ((temp___expr_158 Float32)
  (temp___is_init_155 Bool) (temp___skip_constant_156 Bool)
  (temp___do_toplevel_157 Bool)) Bool (=>
                                      (or (= temp___is_init_155 true)
                                      (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                      (fp.isFinite32 temp___expr_158)))

;; null_angle__def_axiom
  (assert
  (= null_angle (mk___rep
                (mk___split_fields
                (of_rep2 (fp #b0 #b00000000 #b00000000000000000000000))))))

(define-fun dynamic_invariant11 ((temp___expr_170 Float32)
  (temp___is_init_167 Bool) (temp___skip_constant_168 Bool)
  (temp___do_toplevel_169 Bool)) Bool (=>
                                      (or (= temp___is_init_167 true)
                                      (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000001 #b10010010000111111011011)))
                                      (in_range4 temp___expr_170)))

(define-fun dynamic_invariant12 ((temp___expr_324 Int)
  (temp___is_init_321 Bool) (temp___skip_constant_322 Bool)
  (temp___do_toplevel_323 Bool)) Bool (=>
                                      (or (= temp___is_init_321 true)
                                      (<= 0 2147483647)) (in_range7
                                      temp___expr_324)))

(declare-fun length (us_rep4) Int)

(declare-fun length__function_guard (Int us_rep4) Bool)

;; length__post_axiom
  (assert
  (forall ((container us_rep4))
  (! (let ((result (length container)))
     (and
     (<= result (to_rep7
                (rec__algorithm__gap_vectors__list__capacity
                (us_split_discrs3 container))))
     (dynamic_invariant12 result true false true))) :pattern ((length
                                                              container)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep4))
  (! (= (= (is_empty container) true) (= (length container) 0)) :pattern (
  (is_empty container)) )))

(declare-const deltamag Float32)

(declare-const deltaangle Float32)

(declare-const deltaareasum Float32)

(declare-const obstacleavoiddelta Float32)

(declare-const i Int)

(declare-const temp___884 Float32)

(declare-const temp___883 Float32)

(declare-const temp___882 Float32)

(declare-const temp___881 Float32)

(declare-const temp___880 Int)

(declare-const temp___879 Float32)

(declare-const o Float32)

(declare-const o1 Float32)

(declare-const o2 Float32)

(declare-const o3 Float32)

(declare-const o4 Float32)

(declare-const o5 Float32)

(declare-const o6 Float32)

(declare-const o7 Float32)

(declare-const o8 normalized2pi)

(declare-const o9 normalized2pi)

(declare-const o10 Float32)

(declare-const o11 Float32)

(declare-const o12 Float32)

(declare-const o13 Float32)

(declare-const o14 Float32)

(declare-const deltamag1 Float32)

(declare-const deltaangle1 Float32)

(declare-const result Float32)

(declare-const deltaareasum1 Float32)

(declare-const result1 Float32)

(declare-const obstacleavoiddelta1 Float32)

(declare-const result2 Int)

(declare-const i1 Int)

(declare-const deltamag2 Float32)

(declare-const deltaangle2 Float32)

(declare-const deltaareasum2 Float32)

(declare-const obstacleavoiddelta2 Float32)

(declare-const i2 Int)

(declare-const result3 Bool)

(declare-const result4 Float32)

(declare-const deltamag3 Float32)

(declare-const result5 Float32)

(declare-const deltaangle3 Float32)

(declare-const result6 Float32)

(declare-const deltaareasum3 Float32)

(declare-const result7 Float32)

(declare-const obstacleavoiddelta3 Float32)

(declare-const deltamag4 t__ref)

(declare-const deltaangle4 t__ref)

(declare-const deltaareasum4 t__ref)

(declare-const obstacleavoiddelta4 t__ref)

(declare-const i3 int__ref)

(declare-const deltamag5 Float32)

(declare-const deltaangle5 Float32)

(declare-const deltaareasum5 Float32)

(declare-const obstacleavoiddelta5 Float32)

(declare-const i4 Int)

(declare-const deltamag6 t__ref)

(declare-const deltaangle6 t__ref)

(declare-const deltaareasum6 t__ref)

(declare-const obstacleavoiddelta6 t__ref)

(declare-const i5 int__ref)

(declare-const deltamag7 Float32)

(declare-const deltaangle7 Float32)

(declare-const deltaareasum7 Float32)

(declare-const obstacleavoiddelta7 Float32)

(declare-const i6 Int)

(define-fun o15 () us_rep (mk___rep (mk___split_fields o9)))

(define-fun o16 () us_rep (mk___rep (mk___split_fields o8)))

;; H
  (assert
  (and
  (= (attr__constrained
     (rec__robot_iface__proxy__speed
     (us_split_fields5
     (rec__algorithm__controller__robot (us_split_fields11 this))))) false)
  (= 1000 (to_rep7
          (rec__algorithm__gap_vectors__list__capacity
          (us_split_discrs3
          (rec__algorithm__controller__gapvec (us_split_fields11 this))))))))

;; H
  (assert (fp.isFinite32 safetydist))

;; H
  (assert
  (not (fp.eq safetydist (fp #b0 #b00000000 #b00000000000000000000000))))

;; H
  (assert
  (=>
  (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b01111111 #b00000000000000000000000))
  (in_range10 deltamag)))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (fp.isFinite32 deltaangle)))

;; H
  (assert (= result deltaareasum))

;; H
  (assert (= deltaareasum1 (fp #b0 #b00000000 #b00000000000000000000000)))

;; H
  (assert (in_range3 deltaareasum1))

;; H
  (assert (= result1 obstacleavoiddelta))

;; H
  (assert
  (= obstacleavoiddelta1 (fp #b0 #b00000000 #b00000000000000000000000)))

;; H
  (assert (fp.isFinite32 obstacleavoiddelta1))

;; H
  (assert (= (mk_int__ref result2) (mk_int__ref i)))

;; H
  (assert (= i1 1))

;; H
  (assert
  (=> (and (<= 1 i1) (<= i1 1000))
  (= temp___884 (to_rep
                (rec__robot_iface__proxy__robot_radius
                (us_split_fields5
                (rec__algorithm__controller__robot (us_split_fields11 this))))))))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 1000)) (= temp___883 deltaareasum1)))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 1000)) (= temp___882 deltaangle)))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 1000)) (= temp___881 deltamag)))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 1000)) (= temp___880 i1)))

;; H
  (assert
  (=> (and (<= 1 i1) (<= i1 1000)) (= temp___879 obstacleavoiddelta1)))

;; H
  (assert
  (=> (and (<= 1 i1) (<= i1 1000))
  (fp.eq (to_rep
         (rec__robot_iface__proxy__robot_radius
         (us_split_fields5
         (rec__algorithm__controller__robot (us_split_fields11 this)))))
  temp___884)))

;; H
  (assert
  (=> (and (<= 1 i1) (<= i1 1000))
  (and
  (and
  (and
  (and
  (and
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (fp.isFinite32 obstacleavoiddelta2))
  (=> (<= 1 1000) (dynamic_property 1 1000 i2)))
  (=>
  (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b01111111 #b00000000000000000000000))
  (in_range10 deltamag2)))
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (fp.isFinite32 deltaangle2)))
  (=>
  (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b11111110 #b11111111111111111111111))
  (in_range3 deltaareasum2))) (and (<= 1 i2) (<= i2 1000)))))

;; H
  (assert
  (=> (and (<= 1 i1) (<= i1 1000))
  (and
  (= o (fp.add RNE safetydist (to_rep
                              (rec__robot_iface__proxy__robot_radius
                              (us_split_fields5
                              (rec__algorithm__controller__robot
                              (us_split_fields11 this)))))))
  (fp.isFinite32 (fp.add RNE safetydist (to_rep
                                        (rec__robot_iface__proxy__robot_radius
                                        (us_split_fields5
                                        (rec__algorithm__controller__robot
                                        (us_split_fields11 this))))))))))

;; H
  (assert
  (=> (and (<= 1 i1) (<= i1 1000))
  (= result3 (ite (fp.leq (to_rep1
                          (rec__algorithm__laser_scan_data__first
                          (us_split_fields7
                          (select (rec__algorithm__controller__laserscan
                                  (us_split_fields11 this)) i2)))) o)
             true false))))

;; H
  (assert
  (=> (and (<= 1 i1) (<= i1 1000))
  (=> (= result3 true)
  (and
  (= o1 (fp.add RNE safetydist (to_rep
                               (rec__robot_iface__proxy__robot_radius
                               (us_split_fields5
                               (rec__algorithm__controller__robot
                               (us_split_fields11 this)))))))
  (fp.isFinite32 (fp.add RNE safetydist (to_rep
                                        (rec__robot_iface__proxy__robot_radius
                                        (us_split_fields5
                                        (rec__algorithm__controller__robot
                                        (us_split_fields11 this)))))))))))

;; H
  (assert
  (=> (and (<= 1 i1) (<= i1 1000))
  (=> (= result3 true)
  (= o2 (fp.sub RNE o1 (to_rep1
                       (rec__algorithm__laser_scan_data__first
                       (us_split_fields7
                       (select (rec__algorithm__controller__laserscan
                               (us_split_fields11 this)) i2)))))))))

;; H
  (assert
  (=> (and (<= 1 i1) (<= i1 1000))
  (=> (= result3 true) (and (= o3 o2) (fp.isFinite32 o2)))))

;; H
  (assert
  (=> (and (<= 1 i1) (<= i1 1000))
  (=> (= result3 true) (= o4 (fp.div RNE o3 safetydist)))))

;; H
  (assert
  (=> (and (<= 1 i1) (<= i1 1000))
  (=> (= result3 true) (and (= o5 o4) (fp.isFinite32 o4)))))

;; H
  (assert
  (=> (and (<= 1 i1) (<= i1 1000))
  (=> (= result3 true)
  (and
  (= o6 (limit o5 (fp #b0 #b00000000 #b00000000000000000000000)
        (fp #b0 #b01111111 #b00000000000000000000000)))
  (and (fp.isFinite32 o6)
  (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) o6)
  (fp.leq o6 (fp #b0 #b01111111 #b00000000000000000000000))))))))

;; H
  (assert
  (=> (and (<= 1 i1) (<= i1 1000))
  (=> (= result3 true) (and (= o7 o6) (fp.isFinite32 o6)))))

;; H
  (assert
  (=> (and (<= 1 i1) (<= i1 1000))
  (=> (= result3 true) (= deltamag2 result4))))

;; H
  (assert
  (=> (and (<= 1 i1) (<= i1 1000)) (=> (= result3 true) (= deltamag3 o7))))

;; H
  (assert
  (=> (and (<= 1 i1) (<= i1 1000))
  (=> (= result3 true)
  (= o16 (create__2 (fp #b0 #b10000000 #b10010010000111111011011))))))

;; H
  (assert
  (=> (and (<= 1 i1) (<= i1 1000))
  (=> (= result3 true)
  (= o15 (oadd
         (rec__algorithm__laser_scan_data__second
         (us_split_fields7
         (select (rec__algorithm__controller__laserscan
                 (us_split_fields11 this)) i2)))
         o16)))))

;; H
  (assert
  (=> (and (<= 1 i1) (<= i1 1000))
  (=> (= result3 true)
  (and
  (= o10 (aldiff
         (rec__algorithm__controller__driveangle (us_split_fields11 this))
         o15))
  (and (fp.isFinite32 o10)
  (and (fp.lt (fp.neg (fp #b0 #b10000000 #b10010010000111111011011))
  o10) (fp.leq o10 (fp #b0 #b10000000 #b10010010000111111011011))))))))

;; H
  (assert
  (=> (and (<= 1 i1) (<= i1 1000))
  (=> (= result3 true) (= deltaangle2 result5))))

;; H
  (assert
  (=> (and (<= 1 i1) (<= i1 1000)) (=> (= result3 true) (= deltaangle3 o10))))

;; H
  (assert
  (=> (and (<= 1 i1) (<= i1 1000))
  (=> (= result3 true)
  (and (= o11 (fp.add RNE deltaareasum2 (fp.mul RNE deltamag3 deltamag3)))
  (fp.isFinite32 (fp.add RNE deltaareasum2 (fp.mul RNE deltamag3 deltamag3)))))))

;; H
  (assert
  (=> (and (<= 1 i1) (<= i1 1000))
  (=> (= result3 true) (= deltaareasum2 result6))))

;; H
  (assert
  (=> (and (<= 1 i1) (<= i1 1000))
  (=> (= result3 true) (= deltaareasum3 o11))))

;; H
  (assert
  (=> (and (<= 1 i1) (<= i1 1000))
  (=> (= result3 true)
  (and
  (= o12 (fp.mul RNE (fp.mul RNE (fp.mul RNE deltamag3 deltamag3) deltamag3)
  deltaangle3))
  (fp.isFinite32 (fp.mul RNE (fp.mul RNE (fp.mul RNE deltamag3 deltamag3)
  deltamag3) deltaangle3))))))

;; H
  (assert
  (=> (and (<= 1 i1) (<= i1 1000))
  (=> (= result3 true) (= o13 (fp.add RNE obstacleavoiddelta2 o12)))))

;; H
  (assert
  (=> (and (<= 1 i1) (<= i1 1000))
  (=> (= result3 true) (and (= o14 o13) (fp.isFinite32 o13)))))

;; H
  (assert
  (=> (and (<= 1 i1) (<= i1 1000))
  (=> (= result3 true) (= obstacleavoiddelta2 result7))))

;; H
  (assert
  (=> (and (<= 1 i1) (<= i1 1000))
  (=> (= result3 true) (= obstacleavoiddelta3 o14))))

;; H
  (assert
  (=> (and (<= 1 i1) (<= i1 1000))
  (=> (not (= result3 true)) (= obstacleavoiddelta3 obstacleavoiddelta2))))

;; H
  (assert
  (=> (and (<= 1 i1) (<= i1 1000))
  (=> (not (= result3 true)) (= deltaareasum3 deltaareasum2))))

;; H
  (assert
  (=> (and (<= 1 i1) (<= i1 1000))
  (=> (not (= result3 true)) (= deltaangle3 deltaangle2))))

;; H
  (assert
  (=> (and (<= 1 i1) (<= i1 1000))
  (=> (not (= result3 true)) (= deltamag3 deltamag2))))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 1000)) (= i2 1000)))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 1000)) (= i3 (mk_int__ref i2))))

;; H
  (assert
  (=> (and (<= 1 i1) (<= i1 1000))
  (= obstacleavoiddelta4 (mk_t__ref obstacleavoiddelta3))))

;; H
  (assert
  (=> (and (<= 1 i1) (<= i1 1000))
  (= deltaareasum4 (mk_t__ref deltaareasum3))))

;; H
  (assert
  (=> (and (<= 1 i1) (<= i1 1000)) (= deltaangle4 (mk_t__ref deltaangle3))))

;; H
  (assert
  (=> (and (<= 1 i1) (<= i1 1000)) (= deltamag4 (mk_t__ref deltamag3))))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 1000)) (= i4 i2)))

;; H
  (assert
  (=> (and (<= 1 i1) (<= i1 1000))
  (= obstacleavoiddelta5 obstacleavoiddelta3)))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 1000)) (= deltaareasum5 deltaareasum3)))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 1000)) (= deltaangle5 deltaangle3)))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 1000)) (= deltamag5 deltamag3)))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 1000)) (= i5 i3)))

;; H
  (assert
  (=> (and (<= 1 i1) (<= i1 1000))
  (= obstacleavoiddelta6 obstacleavoiddelta4)))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 1000)) (= deltaareasum6 deltaareasum4)))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 1000)) (= deltaangle6 deltaangle4)))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 1000)) (= deltamag6 deltamag4)))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 1000)) (= i6 i4)))

;; H
  (assert
  (=> (and (<= 1 i1) (<= i1 1000))
  (= obstacleavoiddelta7 obstacleavoiddelta5)))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 1000)) (= deltaareasum7 deltaareasum5)))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 1000)) (= deltaangle7 deltaangle5)))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 1000)) (= deltamag7 deltamag5)))

;; H
  (assert (=> (not (and (<= 1 i1) (<= i1 1000))) (= i5 (mk_int__ref i1))))

;; H
  (assert
  (=> (not (and (<= 1 i1) (<= i1 1000)))
  (= obstacleavoiddelta6 (mk_t__ref obstacleavoiddelta1))))

;; H
  (assert
  (=> (not (and (<= 1 i1) (<= i1 1000)))
  (= deltaareasum6 (mk_t__ref deltaareasum1))))

;; H
  (assert
  (=> (not (and (<= 1 i1) (<= i1 1000)))
  (= deltaangle6 (mk_t__ref deltaangle))))

;; H
  (assert
  (=> (not (and (<= 1 i1) (<= i1 1000))) (= deltamag6 (mk_t__ref deltamag))))

;; H
  (assert (=> (not (and (<= 1 i1) (<= i1 1000))) (= i6 i1)))

;; H
  (assert
  (=> (not (and (<= 1 i1) (<= i1 1000)))
  (= obstacleavoiddelta7 obstacleavoiddelta1)))

;; H
  (assert
  (=> (not (and (<= 1 i1) (<= i1 1000))) (= deltaareasum7 deltaareasum1)))

;; H
  (assert
  (=> (not (and (<= 1 i1) (<= i1 1000))) (= deltaangle7 deltaangle1)))

;; H
  (assert (=> (not (and (<= 1 i1) (<= i1 1000))) (= deltamag7 deltamag1)))

;; H
  (assert
  (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) (t__content
                                                       deltaareasum6)))

(assert
;; WP_parameter_def
 ;; File "system.ads", line 1, characters 0-0
  (not
  (fp.isFinite32 (fp.div RNE (t__content obstacleavoiddelta6) (t__content
                                                              deltaareasum6)))))
(check-sat)
(exit)
