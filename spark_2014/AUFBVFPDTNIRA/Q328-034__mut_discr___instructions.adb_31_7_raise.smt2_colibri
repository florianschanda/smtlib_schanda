;; produced by colibri_gnatprove.drv ;;
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-fun value__size () Int)

(declare-fun value__component__size () Int)

(declare-fun value__alignment () Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range2
                                     temp___expr_39)))

(define-fun dynamic_invariant1 ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range3 temp___expr_63)))

(define-fun dynamic_invariant2 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(define-fun dynamic_invariant3 ((temp___expr_158 Int)
  (temp___is_init_155 Bool) (temp___skip_constant_156 Bool)
  (temp___do_toplevel_157 Bool)) Bool (=>
                                      (or (= temp___is_init_155 true)
                                      (<= 0 2)) (in_range4 temp___expr_158)))

(declare-fun i () Int)

(declare-fun instructions__read__result () Int)

(declare-fun instructions__read__result1 () Int)

(declare-fun result () Int)

(declare-fun i1 () Int)

(declare-fun i2 () Int)

(declare-fun instructions__read__result2 () Int)

(declare-fun instructions__read__result3 () Int)

(declare-fun i3 () Int)

(declare-fun instructions__read__result4 () Int)

(declare-fun i4 () Int)

(declare-fun instructions__read__result5 () Int)

(declare-fun i5 () Int)

(declare-fun instructions__read__result6 () Int)

(declare-fun i6 () Int)

(declare-fun instructions__read__result7 () Int)

;; H
  (assert (= result i))

;; H
  (assert (= i1 0))

;; H
  (assert (=> (and (<= 0 i1) (<= i1 2)) (and (<= 0 i2) (<= i2 2))))

;; H
  (assert
  (=> (and (<= 0 i1) (<= i1 2))
  (= instructions__read__result3 instructions__read__result2)))

;; H
  (assert (=> (and (<= 0 i1) (<= i1 2)) (= i2 2)))

;; H
  (assert
  (=> (and (<= 0 i1) (<= i1 2))
  (= instructions__read__result3 instructions__read__result4)))

;; H
  (assert (=> (and (<= 0 i1) (<= i1 2)) (= i2 i3)))

;; H
  (assert
  (=> (and (<= 0 i1) (<= i1 2))
  (= instructions__read__result5 instructions__read__result3)))

;; H
  (assert (=> (and (<= 0 i1) (<= i1 2)) (= i4 i2)))

;; H
  (assert
  (=> (and (<= 0 i1) (<= i1 2))
  (= instructions__read__result7 instructions__read__result5)))

;; H
  (assert (=> (and (<= 0 i1) (<= i1 2)) (= i6 i4)))

;; H
  (assert (=> (not (and (<= 0 i1) (<= i1 2))) (= i1 i5)))

;; H
  (assert
  (=> (not (and (<= 0 i1) (<= i1 2)))
  (= instructions__read__result7 instructions__read__result1)))

;; H
  (assert (=> (not (and (<= 0 i1) (<= i1 2))) (= i6 i1)))

(assert
;; WP_parameter_def
 ;; File "instructions.ads", line 7, characters 0-0
  (not false))
(check-sat)
(exit)
