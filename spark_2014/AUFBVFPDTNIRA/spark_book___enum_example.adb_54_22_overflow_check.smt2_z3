;; produced by z3_gnatprove.drv ;;
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort positive 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-fun dummy1 () positive)

(declare-datatypes ()
((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(declare-sort character 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-fun dummy2 () character)

(declare-datatypes ()
((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character 
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int
  Int) (Array Int character))

;; concat_def
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (character Int) (Array Int character))

;; singleton_def
  (assert
  (forall ((v character))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_78 Int))
                           (=>
                           (and (<= a__first temp___idx_78)
                           (<= temp___idx_78 a__last))
                           (= (to_rep (select a temp___idx_78)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_78)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_78 Int))
  (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last))
  (= (to_rep (select a temp___idx_78)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_78)))))))))))

(declare-fun compare ((Array Int character) Int Int (Array Int character) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun to_rep1 (integer) Int)

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-fun value__size () Int)

(declare-fun object__size ((Array Int character)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int character)) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-fun dummy3 () us_t)

(declare-fun to_string (us_image) us_t)

(declare-fun from_string (us_t) us_image)

(declare-datatypes ()
((string__ref (mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content
                                                            a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-sort field 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (field field) Bool)

(declare-fun dummy4 () field)

(declare-datatypes () ((field__ref (mk_field__ref (field__content field)))))
(define-fun field__ref___projection ((a field__ref)) field (field__content a))

(define-fun dynamic_invariant1 ((temp___expr_472 Int)
  (temp___is_init_469 Bool) (temp___skip_constant_470 Bool)
  (temp___do_toplevel_471 Bool)) Bool (=>
                                      (or (= temp___is_init_469 true)
                                      (<= 0 255)) (in_range4
                                      temp___expr_472)))

(declare-sort number_base 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 2 x) (<= x 16)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (number_base number_base) Bool)

(declare-fun dummy5 () number_base)

(declare-datatypes ()
((number_base__ref (mk_number_base__ref (number_base__content number_base)))))
(define-fun number_base__ref___projection ((a number_base__ref)) number_base 
  (number_base__content a))

(define-fun dynamic_invariant2 ((temp___expr_478 Int)
  (temp___is_init_475 Bool) (temp___skip_constant_476 Bool)
  (temp___do_toplevel_477 Bool)) Bool (=>
                                      (or (= temp___is_init_475 true)
                                      (<= 2 16)) (in_range5 temp___expr_478)))

(declare-sort type_set 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq6 (type_set type_set) Bool)

(declare-fun dummy6 () type_set)

(declare-datatypes ()
((type_set__ref (mk_type_set__ref (type_set__content type_set)))))
(define-fun type_set__ref___projection ((a type_set__ref)) type_set (type_set__content
                                                                    a))

(define-fun dynamic_invariant3 ((temp___expr_484 Int)
  (temp___is_init_481 Bool) (temp___skip_constant_482 Bool)
  (temp___do_toplevel_483 Bool)) Bool (=>
                                      (or (= temp___is_init_481 true)
                                      (<= 0 1)) (in_range6 temp___expr_484)))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-sort day_type 0)

(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 6)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq7 (day_type day_type) Bool)

(declare-fun dummy7 () day_type)

(declare-datatypes ()
((day_type__ref (mk_day_type__ref (day_type__content day_type)))))
(define-fun day_type__ref___projection ((a day_type__ref)) day_type (day_type__content
                                                                    a))

(define-fun dynamic_invariant4 ((temp___expr_525 Int)
  (temp___is_init_522 Bool) (temp___skip_constant_523 Bool)
  (temp___do_toplevel_524 Bool)) Bool (=>
                                      (or (= temp___is_init_522 true)
                                      (<= 0 6)) (in_range7 temp___expr_525)))

(declare-sort traffic_light_color 0)

(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq8 (traffic_light_color traffic_light_color) Bool)

(declare-fun dummy8 () traffic_light_color)

(declare-datatypes ()
((traffic_light_color__ref
 (mk_traffic_light_color__ref
 (traffic_light_color__content traffic_light_color)))))
(define-fun traffic_light_color__ref___projection ((a traffic_light_color__ref)) traffic_light_color 
  (traffic_light_color__content a))

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-sort enum 0)

(define-fun in_range9 ((x Int)) Bool (and (<= 0 x) (<= x 6)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq9 (enum enum) Bool)

(declare-fun dummy9 () enum)

(declare-datatypes () ((enum__ref (mk_enum__ref (enum__content enum)))))
(define-fun enum__ref___projection ((a enum__ref)) enum (enum__content a))

(define-fun dynamic_invariant5 ((temp___expr_543 Int)
  (temp___is_init_540 Bool) (temp___skip_constant_541 Bool)
  (temp___do_toplevel_542 Bool)) Bool (=>
                                      (or (= temp___is_init_540 true)
                                      (<= 0 6)) (in_range9 temp___expr_543)))

(declare-fun next_day (Int) Int)

(declare-fun next_day__function_guard (Int Int) Bool)

;; next_day__post_axiom
  (assert
  (forall ((day Int))
  (! (=> (dynamic_invariant4 day true true true) (dynamic_invariant4
     (next_day day) true false true)) :pattern ((next_day day)) )))

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS7 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS8 () Int)

(declare-fun temp___String_Literal_549 (tuple0) (Array Int character))

;; temp___String_Literal_549__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_549 us_void_param) 1)) 87)
     (= (to_rep (select (temp___String_Literal_549 us_void_param) 2)) 104))
     (= (to_rep (select (temp___String_Literal_549 us_void_param) 3)) 97))
     (= (to_rep (select (temp___String_Literal_549 us_void_param) 4)) 116))
     (= (to_rep (select (temp___String_Literal_549 us_void_param) 5)) 32))
     (= (to_rep (select (temp___String_Literal_549 us_void_param) 6)) 100))
     (= (to_rep (select (temp___String_Literal_549 us_void_param) 7)) 97))
     (= (to_rep (select (temp___String_Literal_549 us_void_param) 8)) 121))
     (= (to_rep (select (temp___String_Literal_549 us_void_param) 9)) 32))
     (= (to_rep (select (temp___String_Literal_549 us_void_param) 10)) 105))
     (= (to_rep (select (temp___String_Literal_549 us_void_param) 11)) 115))
     (= (to_rep (select (temp___String_Literal_549 us_void_param) 12)) 32))
     (= (to_rep (select (temp___String_Literal_549 us_void_param) 13)) 116))
     (= (to_rep (select (temp___String_Literal_549 us_void_param) 14)) 111))
     (= (to_rep (select (temp___String_Literal_549 us_void_param) 15)) 100))
     (= (to_rep (select (temp___String_Literal_549 us_void_param) 16)) 97))
     (= (to_rep (select (temp___String_Literal_549 us_void_param) 17)) 121))
     (= (to_rep (select (temp___String_Literal_549 us_void_param) 18)) 63)) :pattern (
  (temp___String_Literal_549 us_void_param)) )))

(declare-fun temp___String_Literal_550 (tuple0) (Array Int character))

;; temp___String_Literal_550__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_550 us_void_param) 1)) 84)
     (= (to_rep (select (temp___String_Literal_550 us_void_param) 2)) 111))
     (= (to_rep (select (temp___String_Literal_550 us_void_param) 3)) 109))
     (= (to_rep (select (temp___String_Literal_550 us_void_param) 4)) 111))
     (= (to_rep (select (temp___String_Literal_550 us_void_param) 5)) 114))
     (= (to_rep (select (temp___String_Literal_550 us_void_param) 6)) 114))
     (= (to_rep (select (temp___String_Literal_550 us_void_param) 7)) 111))
     (= (to_rep (select (temp___String_Literal_550 us_void_param) 8)) 119))
     (= (to_rep (select (temp___String_Literal_550 us_void_param) 9)) 32))
     (= (to_rep (select (temp___String_Literal_550 us_void_param) 10)) 105))
     (= (to_rep (select (temp___String_Literal_550 us_void_param) 11)) 115))
     (= (to_rep (select (temp___String_Literal_550 us_void_param) 12)) 32)) :pattern (
  (temp___String_Literal_550 us_void_param)) )))

(declare-fun temp___String_Literal_551 (tuple0) (Array Int character))

;; temp___String_Literal_551__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_551 us_void_param) 1)) 84)
     (= (to_rep (select (temp___String_Literal_551 us_void_param) 2)) 111))
     (= (to_rep (select (temp___String_Literal_551 us_void_param) 3)) 100))
     (= (to_rep (select (temp___String_Literal_551 us_void_param) 4)) 97))
     (= (to_rep (select (temp___String_Literal_551 us_void_param) 5)) 121))
     (= (to_rep (select (temp___String_Literal_551 us_void_param) 6)) 32))
     (= (to_rep (select (temp___String_Literal_551 us_void_param) 7)) 109))
     (= (to_rep (select (temp___String_Literal_551 us_void_param) 8)) 117))
     (= (to_rep (select (temp___String_Literal_551 us_void_param) 9)) 115))
     (= (to_rep (select (temp___String_Literal_551 us_void_param) 10)) 116))
     (= (to_rep (select (temp___String_Literal_551 us_void_param) 11)) 32))
     (= (to_rep (select (temp___String_Literal_551 us_void_param) 12)) 98))
     (= (to_rep (select (temp___String_Literal_551 us_void_param) 13)) 101))
     (= (to_rep (select (temp___String_Literal_551 us_void_param) 14)) 32))
     (= (to_rep (select (temp___String_Literal_551 us_void_param) 15)) 83))
     (= (to_rep (select (temp___String_Literal_551 us_void_param) 16)) 117))
     (= (to_rep (select (temp___String_Literal_551 us_void_param) 17)) 110))
     (= (to_rep (select (temp___String_Literal_551 us_void_param) 18)) 100))
     (= (to_rep (select (temp___String_Literal_551 us_void_param) 19)) 97))
     (= (to_rep (select (temp___String_Literal_551 us_void_param) 20)) 121)) :pattern (
  (temp___String_Literal_551 us_void_param)) )))

(declare-fun temp___String_Literal_552 (tuple0) (Array Int character))

;; temp___String_Literal_552__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_552 us_void_param) 1)) 84)
     (= (to_rep (select (temp___String_Literal_552 us_void_param) 2)) 104))
     (= (to_rep (select (temp___String_Literal_552 us_void_param) 3)) 101))
     (= (to_rep (select (temp___String_Literal_552 us_void_param) 4)) 32))
     (= (to_rep (select (temp___String_Literal_552 us_void_param) 5)) 119))
     (= (to_rep (select (temp___String_Literal_552 us_void_param) 6)) 101))
     (= (to_rep (select (temp___String_Literal_552 us_void_param) 7)) 101))
     (= (to_rep (select (temp___String_Literal_552 us_void_param) 8)) 107))
     (= (to_rep (select (temp___String_Literal_552 us_void_param) 9)) 32))
     (= (to_rep (select (temp___String_Literal_552 us_void_param) 10)) 100))
     (= (to_rep (select (temp___String_Literal_552 us_void_param) 11)) 97))
     (= (to_rep (select (temp___String_Literal_552 us_void_param) 12)) 121))
     (= (to_rep (select (temp___String_Literal_552 us_void_param) 13)) 115))
     (= (to_rep (select (temp___String_Literal_552 us_void_param) 14)) 32))
     (= (to_rep (select (temp___String_Literal_552 us_void_param) 15)) 97))
     (= (to_rep (select (temp___String_Literal_552 us_void_param) 16)) 114))
     (= (to_rep (select (temp___String_Literal_552 us_void_param) 17)) 101))
     (= (to_rep (select (temp___String_Literal_552 us_void_param) 18)) 32)) :pattern (
  (temp___String_Literal_552 us_void_param)) )))

(define-fun dynamic_invariant6 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range2
                                     temp___expr_39)))

(define-fun dynamic_invariant7 ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range3 temp___expr_63)))

(define-fun dynamic_invariant8 ((temp___expr_82 us_t)
  (temp___is_init_79 Bool) (temp___skip_constant_80 Bool)
  (temp___do_toplevel_81 Bool)) Bool (=>
                                     (not (= temp___skip_constant_80 true))
                                     (dynamic_property 1 2147483647
                                     (first1 temp___expr_82)
                                     (last1 temp___expr_82))))

(define-fun dynamic_invariant9 ((temp___expr_531 Int)
  (temp___is_init_528 Bool) (temp___skip_constant_529 Bool)
  (temp___do_toplevel_530 Bool)) Bool (=>
                                      (or (= temp___is_init_528 true)
                                      (<= 0 2)) (in_range8 temp___expr_531)))

(declare-fun default_base () Int)

(declare-fun default_width () Int)

(declare-fun default_setting () Int)

(declare-fun today () Int)

(declare-fun tomorrow () Int)

(declare-fun count () Int)

(declare-fun day () Int)

(declare-fun color () Int)

(declare-fun color1 () Int)

(declare-fun o () Int)

(declare-fun o1 () Int)

(declare-fun enum_example__day_io__get__2__item () Int)

(declare-fun result () Int)

(declare-fun today1 () Int)

(declare-fun result1 () Int)

(declare-fun tomorrow1 () Int)

(declare-fun result2 () Int)

(declare-fun day1 () Int)

(declare-fun day2 () Int)

(declare-fun day3 () Int)

(declare-fun day4 () Int)

(declare-fun day5 () Int)

(declare-fun day6 () Int)

(declare-fun result3 () Int)

(declare-fun color2 () Int)

(declare-fun color3 () Int)

(declare-fun color4 () Int)

(declare-fun color5 () Int)

(declare-fun color6 () Int)

(declare-fun color7 () Int)

(declare-fun result4 () Int)

(declare-fun count1 () Int)

(declare-fun result5 () Int)

(declare-fun color8 () Int)

(declare-fun count2 () Int)

(declare-fun color9 () Int)

;; H
  (assert (in_range5 default_base))

;; H
  (assert (in_range4 default_width))

;; H
  (assert (in_range6 default_setting))

;; H
  (assert (=> (<= 0 6) (in_range7 today)))

;; H
  (assert (=> (<= 0 6) (in_range7 tomorrow)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range1 count)))

;; H
  (assert (in_range9 enum_example__day_io__get__2__item))

;; H
  (assert (= result today))

;; H
  (assert (= today1 enum_example__day_io__get__2__item))

;; H
  (assert (and (= o (next_day today1)) (in_range7 o)))

;; H
  (assert (= result1 tomorrow))

;; H
  (assert (= tomorrow1 o))

;; H
  (assert (= result2 day))

;; H
  (assert (= day1 0))

;; H
  (assert (=> (and (<= 0 day1) (<= day1 4)) (and (<= 0 day2) (<= day2 4))))

;; H
  (assert (=> (and (<= 0 day1) (<= day1 4)) (= day2 4)))

;; H
  (assert (=> (and (<= 0 day1) (<= day1 4)) (= day2 day3)))

;; H
  (assert (=> (and (<= 0 day1) (<= day1 4)) (= day4 day2)))

;; H
  (assert
  (=> (and (<= 0 day1) (<= day1 4))
  (= (mk_int__ref day5) (mk_int__ref day3))))

;; H
  (assert (=> (and (<= 0 day1) (<= day1 4)) (= day6 day4)))

;; H
  (assert (=> (not (and (<= 0 day1) (<= day1 4))) (= day1 day5)))

;; H
  (assert (=> (not (and (<= 0 day1) (<= day1 4))) (= day6 day1)))

;; H
  (assert (= result3 color))

;; H
  (assert (= color2 0))

;; H
  (assert
  (=> (and (<= 0 color2) (<= color2 2)) (and (<= 0 color3) (<= color3 2))))

;; H
  (assert (=> (and (<= 0 color2) (<= color2 2)) (= color3 2)))

;; H
  (assert (=> (and (<= 0 color2) (<= color2 2)) (= color3 color4)))

;; H
  (assert (=> (and (<= 0 color2) (<= color2 2)) (= color5 color3)))

;; H
  (assert
  (=> (and (<= 0 color2) (<= color2 2))
  (= (mk_int__ref color6) (mk_int__ref color4))))

;; H
  (assert (=> (and (<= 0 color2) (<= color2 2)) (= color7 color5)))

;; H
  (assert (=> (not (and (<= 0 color2) (<= color2 2))) (= color2 color6)))

;; H
  (assert (=> (not (and (<= 0 color2) (<= color2 2))) (= color7 color2)))

;; H
  (assert (= result4 count))

;; H
  (assert (= count1 0))

;; H
  (assert (= result5 color1))

;; H
  (assert (= color8 0))

;; H
  (assert (<= 0 color8))

;; H
  (assert (<= color8 5))

;; H
  (assert
  (and (=> (<= (- 2147483648) 2147483647) (in_range1 count2))
  (and (<= 0 color9) (<= color9 5))))

(assert
;; WP_parameter_def
 ;; File "enum_example.adb", line 13, characters 0-0
  (not (in_range1 (+ count2 1))))
(check-sat)
