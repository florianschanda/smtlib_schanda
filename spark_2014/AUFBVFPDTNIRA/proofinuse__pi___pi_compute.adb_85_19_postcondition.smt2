;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun pow2 (Int) Int)

(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                (fp.isPositive x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                 (fp.isNegative x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x)
                                            (fp.isPositive x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x)
                                             (fp.isNegative x)))

(declare-fun of_int (RoundingMode Int) Float32)

(declare-fun to_int1 (RoundingMode Float32) Int)

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y))
                    (and (fp.isNegative x) (fp.isNegative y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y))
                    (and (fp.isNegative x) (fp.isPositive y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z))
                    (=> (diff_sign x y) (fp.isNegative z))))

(define-fun sqr ((x Real)) Real (* x x))

(declare-fun sqrt (Real) Real)

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r))
                 (and (fp.isNegative x) (< r 0.0))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content Float32)))))
(declare-sort float 0)

(declare-fun user_eq (float float) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Float32)

(declare-const dummy float)

(declare-datatypes () ((float__ref (mk_float__ref (float__content float)))))
(define-fun float__ref___projection ((a float__ref)) float (float__content a))

(define-fun dynamic_invariant ((temp___expr_51 Float32)
  (temp___is_init_48 Bool) (temp___skip_constant_49 Bool)
  (temp___do_toplevel_50 Bool)) Bool (=>
                                     (or (= temp___is_init_48 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                     (fp.isFinite32 temp___expr_51)))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(declare-const attr__ATTRIBUTE_ADDRESS11 Int)

(declare-const attr__ATTRIBUTE_ADDRESS12 Int)

(declare-const attr__ATTRIBUTE_ADDRESS13 Int)

(declare-const attr__ATTRIBUTE_ADDRESS14 Int)

(declare-const attr__ATTRIBUTE_ADDRESS15 Int)

(declare-const attr__ATTRIBUTE_ADDRESS16 Int)

(declare-const attr__ATTRIBUTE_ADDRESS17 Int)

(declare-const attr__ATTRIBUTE_ADDRESS18 Int)

(declare-const attr__ATTRIBUTE_ADDRESS19 Int)

(declare-const attr__ATTRIBUTE_ADDRESS20 Int)

(declare-const attr__ATTRIBUTE_ADDRESS21 Int)

(declare-const attr__ATTRIBUTE_ADDRESS22 Int)

(declare-const t1 Float32)

(declare-const t2 Float32)

(declare-const t3 Float32)

(declare-const t4 Float32)

(declare-const t5 Float32)

(declare-const t6 Float32)

(declare-const t7 Float32)

(declare-const t8 Float32)

(declare-const t9 Float32)

(declare-const t10 Float32)

(declare-const a1 Float32)

(declare-const a2 Float32)

(declare-const a3 Float32)

(declare-const a4 Float32)

(declare-const a5 Float32)

(declare-const a6 Float32)

(declare-const a7 Float32)

(declare-const a8 Float32)

(declare-const a9 Float32)

(declare-const a10 Float32)

(declare-const num Float32)

(declare-const den t__ref)

(declare-const res t__ref)

(declare-const pi_compute__shanks_float__result t__ref)

(declare-const o Float32)

(declare-const o1 Float32)

(declare-const o2 Float32)

(declare-const o3 Float32)

(declare-const o4 Float32)

(declare-const o5 Float32)

(declare-const o6 Float32)

(declare-const o7 Float32)

(declare-const o8 Float32)

(declare-const o9 Float32)

(declare-const o10 Float32)

(declare-const o11 Float32)

(declare-const o12 Float32)

(declare-const o13 Float32)

(declare-const o14 Float32)

(declare-const o15 Float32)

(declare-const o16 Float32)

(declare-const o17 Float32)

(declare-const o18 Float32)

(declare-const o19 Float32)

(declare-const o20 Float32)

(declare-const result t__ref)

(declare-const t11 Float32)

(declare-const result1 t__ref)

(declare-const t21 Float32)

(declare-const result2 t__ref)

(declare-const t31 Float32)

(declare-const result3 t__ref)

(declare-const t41 Float32)

(declare-const result4 t__ref)

(declare-const t51 Float32)

(declare-const result5 t__ref)

(declare-const t61 Float32)

(declare-const result6 t__ref)

(declare-const t71 Float32)

(declare-const result7 t__ref)

(declare-const t81 Float32)

(declare-const result8 t__ref)

(declare-const t91 Float32)

(declare-const result9 t__ref)

(declare-const t101 Float32)

(declare-const result10 t__ref)

(declare-const a11 Float32)

(declare-const result11 t__ref)

(declare-const a21 Float32)

(declare-const result12 t__ref)

(declare-const a31 Float32)

(declare-const result13 t__ref)

(declare-const a41 Float32)

(declare-const result14 t__ref)

(declare-const a51 Float32)

(declare-const result15 t__ref)

(declare-const a61 Float32)

(declare-const result16 t__ref)

(declare-const a71 Float32)

(declare-const result17 t__ref)

(declare-const a81 Float32)

(declare-const result18 t__ref)

(declare-const a91 Float32)

(declare-const result19 t__ref)

(declare-const a101 Float32)

(declare-const result20 t__ref)

(declare-const num1 Float32)

(declare-const result21 t__ref)

(declare-const den1 Float32)

(declare-const result22 t__ref)

(declare-const res1 Float32)

(declare-const result23 t__ref)

(declare-const pi_compute__shanks_float__result1 Float32)

(declare-const pi_compute__shanks_float__result2 t__ref)

(declare-const pi_compute__shanks_float__result3 Float32)

(declare-const t12 t__ref)

(declare-const t22 t__ref)

(declare-const t32 t__ref)

(declare-const t42 t__ref)

(declare-const t52 t__ref)

(declare-const t62 t__ref)

(declare-const t72 t__ref)

(declare-const t82 t__ref)

(declare-const t92 t__ref)

(declare-const t102 t__ref)

(declare-const a12 t__ref)

(declare-const a22 t__ref)

(declare-const a32 t__ref)

(declare-const a42 t__ref)

(declare-const a52 t__ref)

(declare-const a62 t__ref)

(declare-const a72 t__ref)

(declare-const a82 t__ref)

(declare-const a92 t__ref)

(declare-const a102 t__ref)

(declare-const num2 t__ref)

(declare-const den2 t__ref)

(declare-const res2 t__ref)

(declare-const pi_compute__shanks_float__result4 t__ref)

(declare-const t13 Float32)

(declare-const t23 Float32)

(declare-const t33 Float32)

(declare-const t43 Float32)

(declare-const t53 Float32)

(declare-const t63 Float32)

(declare-const t73 Float32)

(declare-const t83 Float32)

(declare-const t93 Float32)

(declare-const t103 Float32)

(declare-const a13 Float32)

(declare-const a23 Float32)

(declare-const a33 Float32)

(declare-const a43 Float32)

(declare-const a53 Float32)

(declare-const a63 Float32)

(declare-const a73 Float32)

(declare-const a83 Float32)

(declare-const a93 Float32)

(declare-const a103 Float32)

(declare-const num3 Float32)

(declare-const den3 Float32)

(declare-const res3 Float32)

(declare-const pi_compute__shanks_float__result5 Float32)

(declare-const result24 Float32)

;; H
  (assert
  (and
  (and
  (and (= result (mk_t__ref t1))
  (= t11 (fp #b0 #b01111111 #b00000000000000000000000)))
  (and (fp.isFinite32 t11)
  (and
  (and (= result1 (mk_t__ref t2))
  (= t21 (fp #b0 #b01111101 #b01010101010101010101011)))
  (and (fp.isFinite32 t21)
  (and
  (and (= result2 (mk_t__ref t3))
  (= t31 (fp #b0 #b01111100 #b10011001100110011001101)))
  (and (fp.isFinite32 t31)
  (and
  (and (= result3 (mk_t__ref t4))
  (= t41 (fp #b0 #b01111100 #b00100100100100100100101)))
  (and (fp.isFinite32 t41)
  (and
  (and (= result4 (mk_t__ref t5))
  (= t51 (fp #b0 #b01111011 #b11000111000111000111001)))
  (and (fp.isFinite32 t51)
  (and
  (and (= result5 (mk_t__ref t6))
  (= t61 (fp #b0 #b01111011 #b01110100010111010001100)))
  (and (fp.isFinite32 t61)
  (and
  (and (= result6 (mk_t__ref t7))
  (= t71 (fp #b0 #b01111011 #b00111011000100111011001)))
  (and (fp.isFinite32 t71)
  (and
  (and (= result7 (mk_t__ref t8))
  (= t81 (fp #b0 #b01111011 #b00010001000100010001001)))
  (and (fp.isFinite32 t81)
  (and
  (and (= result8 (mk_t__ref t9))
  (= t91 (fp #b0 #b01111010 #b11100001111000011110001)))
  (and (fp.isFinite32 t91)
  (and
  (and (= result9 (mk_t__ref t10))
  (= t101 (fp #b0 #b01111010 #b10101111001010000110110)))
  (and (fp.isFinite32 t101)
  (and (and (= result10 (mk_t__ref a1)) (= a11 t11))
  (and (fp.isFinite32 a11)
  (and
  (and (and (= o (fp.sub RNE a11 t21)) (fp.isFinite32 (fp.sub RNE a11 t21)))
  (and (= result11 (mk_t__ref a2)) (= a21 o)))
  (and (fp.isFinite32 a21)
  (and
  (and (and (= o1 (fp.add RNE a21 t31)) (fp.isFinite32 (fp.add RNE a21 t31)))
  (and (= result12 (mk_t__ref a3)) (= a31 o1)))
  (and (fp.isFinite32 a31)
  (and
  (and (and (= o2 (fp.sub RNE a31 t41)) (fp.isFinite32 (fp.sub RNE a31 t41)))
  (and (= result13 (mk_t__ref a4)) (= a41 o2)))
  (and (fp.isFinite32 a41)
  (and
  (and (and (= o3 (fp.add RNE a41 t51)) (fp.isFinite32 (fp.add RNE a41 t51)))
  (and (= result14 (mk_t__ref a5)) (= a51 o3)))
  (and (fp.isFinite32 a51)
  (and
  (and (and (= o4 (fp.sub RNE a51 t61)) (fp.isFinite32 (fp.sub RNE a51 t61)))
  (and (= result15 (mk_t__ref a6)) (= a61 o4)))
  (and (fp.isFinite32 a61)
  (and
  (and (and (= o5 (fp.add RNE a61 t71)) (fp.isFinite32 (fp.add RNE a61 t71)))
  (and (= result16 (mk_t__ref a7)) (= a71 o5)))
  (and (fp.isFinite32 a71)
  (and
  (and (and (= o6 (fp.sub RNE a71 t81)) (fp.isFinite32 (fp.sub RNE a71 t81)))
  (and (= result17 (mk_t__ref a8)) (= a81 o6)))
  (and (fp.isFinite32 a81)
  (and
  (and (and (= o7 (fp.add RNE a81 t91)) (fp.isFinite32 (fp.add RNE a81 t91)))
  (and (= result18 (mk_t__ref a9)) (= a91 o7)))
  (and (fp.isFinite32 a91)
  (and
  (and
  (and (= o8 (fp.sub RNE a91 t101)) (fp.isFinite32 (fp.sub RNE a91 t101)))
  (and (= result19 (mk_t__ref a10)) (= a101 o8)))
  (and (fp.isFinite32 a101)
  (and
  (and
  (and
  (and
  (and
  (and (and (= o9 (fp.mul RNE a91 a91)) (fp.isFinite32 (fp.mul RNE a91 a91)))
  (and
  (and (= o10 (fp.mul RNE a101 a81)) (fp.isFinite32 (fp.mul RNE a101 a81)))
  (= o11 (fp.sub RNE o10 o9)))) (and (= o12 o11) (fp.isFinite32 o11)))
  (= o13 (fp.mul RNE (fp #b0 #b10000001 #b00000000000000000000000) o12)))
  (and (= o14 o13) (fp.isFinite32 o13)))
  (and (= result20 (mk_t__ref num)) (= num1 o14)))
  (and (fp.isFinite32 num1)
  (and
  (and
  (and
  (and
  (and
  (and
  (and (= o15 (fp.mul RNE (fp #b0 #b10000000 #b00000000000000000000000)
  a91))
  (fp.isFinite32 (fp.mul RNE (fp #b0 #b10000000 #b00000000000000000000000)
  a91))) (= o16 (fp.sub RNE a101 o15)))
  (and (= o17 o16) (fp.isFinite32 o16))) (= o18 (fp.add RNE o17 a81)))
  (and (= o19 o18) (fp.isFinite32 o18)))
  (and (= result21 den) (= (let ((subject den)) den1) o19)))
  (and (fp.isFinite32 (let ((subject den)) den1))
  (and
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (fp.isFinite32 (t__content res)))
  (and
  (and
  (and (= o20 (fp.div RNE num1 (let ((subject den)) den1)))
  (fp.isFinite32 (fp.div RNE num1 (let ((subject den)) den1))))
  (and (= result22 res) (= (let ((subject res)) res1) o20)))
  (and
  (fp.eq (let ((subject res)) res1) (fp #b0 #b10000000 #b10010010000101001010011))
  (and
  (and
  (= pi_compute__shanks_float__result2 (let ((subject pi_compute__shanks_float__result))
                                       (mk_t__ref
                                       pi_compute__shanks_float__result1)))
  (= pi_compute__shanks_float__result3 pi_compute__shanks_float__result1))
  (and (= result23 pi_compute__shanks_float__result)
  (= (let ((subject pi_compute__shanks_float__result))
     pi_compute__shanks_float__result1) (let ((subject res)) res1)))))))))))))))))))))))))))))))))))))))))))))))))))
  (and
  (and
  (= pi_compute__shanks_float__result4 pi_compute__shanks_float__result2)
  (and (= res2 (let ((subject res)) (mk_t__ref res1)))
  (and (= den2 (let ((subject den)) (mk_t__ref den1)))
  (and (= num2 (mk_t__ref num1))
  (and (= a102 (mk_t__ref a101))
  (and (= a92 (mk_t__ref a91))
  (and (= a82 (mk_t__ref a81))
  (and (= a72 (mk_t__ref a71))
  (and (= a62 (mk_t__ref a61))
  (and (= a52 (mk_t__ref a51))
  (and (= a42 (mk_t__ref a41))
  (and (= a32 (mk_t__ref a31))
  (and (= a22 (mk_t__ref a21))
  (and (= a12 (mk_t__ref a11))
  (and (= t102 (mk_t__ref t101))
  (and (= t92 (mk_t__ref t91))
  (and (= t82 (mk_t__ref t81))
  (and (= t72 (mk_t__ref t71))
  (and (= t62 (mk_t__ref t61))
  (and (= t52 (mk_t__ref t51))
  (and (= t42 (mk_t__ref t41))
  (and (= t32 (mk_t__ref t31))
  (and (= t22 (mk_t__ref t21)) (= t12 (mk_t__ref t11)))))))))))))))))))))))))
  (and
  (= pi_compute__shanks_float__result5 pi_compute__shanks_float__result3)
  (and (= res3 res1)
  (and (= den3 den1)
  (and (= num3 num1)
  (and (= a103 a101)
  (and (= a93 a91)
  (and (= a83 a81)
  (and (= a73 a71)
  (and (= a63 a61)
  (and (= a53 a51)
  (and (= a43 a41)
  (and (= a33 a31)
  (and (= a23 a21)
  (and (= a13 a11)
  (and (= t103 t101)
  (and (= t93 t91)
  (and (= t83 t81)
  (and (= t73 t71)
  (and (= t63 t61)
  (and (= t53 t51)
  (and (= t43 t41) (and (= t33 t31) (and (= t23 t21) (= t13 t11)))))))))))))))))))))))))))

;; H
  (assert (= result24 (t__content pi_compute__shanks_float__result4)))

(assert
;; WP_parameter_def
 ;; File "system.ads", line 1, characters 0-0
  (not
  (fp.eq (t__content pi_compute__shanks_float__result4) (fp #b0 #b10000000 #b10010010000101001010011))))
(check-sat)
(exit)
