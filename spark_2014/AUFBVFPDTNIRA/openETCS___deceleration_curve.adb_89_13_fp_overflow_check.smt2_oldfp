;; produced by cvc4_14.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort t 0)

(declare-fun tqtreal (t) Real)

(declare-fun tqtisFinite (t) Bool)

;; t'axiom
  (assert
  (forall ((x t))
  (=> (tqtisFinite x)
  (and (<= (- (* 16777215.0 20282409603651670423947251286016.0)) (tqtreal x))
  (<= (tqtreal x) (* 16777215.0 20282409603651670423947251286016.0))))))

(declare-fun pow2 (Int) Int)

(declare-datatypes () ((mode (RNE1) (RNA1) (RTP1) (RTN1) (RTZ1))))
(define-fun to_nearest ((m mode)) Bool (or (= m RNE1) (= m RNA1)))

(declare-const zeroF t)

(declare-fun add (mode t t) t)

(declare-fun sub (mode t t) t)

(declare-fun mul (mode t t) t)

(declare-fun div1 (mode t t) t)

(declare-fun abs1 (t) t)

(declare-fun neg (t) t)

(declare-fun fma (mode t t t) t)

(declare-fun sqrt (mode t) t)

(declare-fun roundToIntegral (mode t) t)

(declare-fun min (t t) t)

(declare-fun max (t t) t)

(declare-fun le (t t) Bool)

(declare-fun lt (t t) Bool)

(declare-fun eq (t t) Bool)

(declare-fun is_normal (t) Bool)

(declare-fun is_subnormal (t) Bool)

(declare-fun is_zero (t) Bool)

(declare-fun is_infinite (t) Bool)

(declare-fun is_nan (t) Bool)

(declare-fun is_positive (t) Bool)

(declare-fun is_negative (t) Bool)

(define-fun is_plus_infinity ((x t)) Bool (and (is_infinite x) (is_positive
                                          x)))

(define-fun is_minus_infinity ((x t)) Bool (and (is_infinite x) (is_negative
                                           x)))

(define-fun is_plus_zero ((x t)) Bool (and (is_zero x) (is_positive x)))

(define-fun is_minus_zero ((x t)) Bool (and (is_zero x) (is_negative x)))

(define-fun is_not_nan ((x t)) Bool (or (tqtisFinite x) (is_infinite x)))

;; is_not_nan
  (assert (forall ((x t)) (= (is_not_nan x) (not (is_nan x)))))

;; is_not_finite
  (assert
  (forall ((x t)) (= (not (tqtisFinite x)) (or (is_infinite x) (is_nan x)))))

;; zeroF_is_positive
  (assert (is_positive zeroF))

;; zeroF_is_zero
  (assert (is_zero zeroF))

;; zero_to_real
  (assert
  (forall ((x t))
  (! (= (is_zero x) (and (tqtisFinite x) (= (tqtreal x) 0.0))) :pattern ((is_zero
  x)) )))

(declare-fun of_int (mode Int) t)

(declare-fun to_int1 (mode t) Int)

;; zero_of_int
  (assert (forall ((m mode)) (= zeroF (of_int m 0))))

(declare-fun round (mode Real) Real)

(declare-const max_int Int)

;; max_real_int
  (assert
  (= (* 33554430.0 10141204801825835211973625643008.0) (to_real max_int)))

(define-fun in_range ((x Real)) Bool (and
                                     (<= (- (* 33554430.0 10141204801825835211973625643008.0)) x)
                                     (<= x (* 33554430.0 10141204801825835211973625643008.0))))

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

;; is_finite
  (assert (forall ((x t)) (=> (tqtisFinite x) (in_range (tqtreal x)))))

(define-fun no_overflow ((m mode) (x Real)) Bool (in_range (round m x)))

;; Bounded_real_no_overflow
  (assert (forall ((m mode) (x Real)) (=> (in_range x) (no_overflow m x))))

;; Round_monotonic
  (assert
  (forall ((m mode) (x Real) (y Real))
  (=> (<= x y) (<= (round m x) (round m y)))))

;; Round_idempotent
  (assert
  (forall ((m1 mode) (m2 mode) (x Real))
  (= (round m1 (round m2 x)) (round m2 x))))

;; Round_to_real
  (assert
  (forall ((m mode) (x t))
  (=> (tqtisFinite x) (= (round m (tqtreal x)) (tqtreal x)))))

;; Round_down_le
  (assert (forall ((x Real)) (<= (round RTN1 x) x)))

;; Round_up_ge
  (assert (forall ((x Real)) (<= x (round RTP1 x))))

;; Round_down_neg
  (assert (forall ((x Real)) (= (round RTN1 (- x)) (- (round RTP1 x)))))

;; Round_up_neg
  (assert (forall ((x Real)) (= (round RTP1 (- x)) (- (round RTN1 x)))))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

;; Exact_rounding_for_integers
  (assert
  (forall ((m mode) (i Int))
  (=> (in_safe_int_range i) (= (round m (to_real i)) (to_real i)))))

(define-fun same_sign ((x t)
  (y t)) Bool (or (and (is_positive x) (is_positive y))
              (and (is_negative x) (is_negative y))))

(define-fun diff_sign ((x t)
  (y t)) Bool (or (and (is_positive x) (is_negative y))
              (and (is_negative x) (is_positive y))))

;; feq_eq
  (assert
  (forall ((x t) (y t))
  (=> (tqtisFinite x)
  (=> (tqtisFinite y) (=> (not (is_zero x)) (=> (eq x y) (= x y)))))))

;; eq_feq
  (assert
  (forall ((x t) (y t))
  (=> (tqtisFinite x) (=> (tqtisFinite y) (=> (= x y) (eq x y))))))

;; eq_refl
  (assert (forall ((x t)) (=> (tqtisFinite x) (eq x x))))

;; eq_sym
  (assert (forall ((x t) (y t)) (=> (eq x y) (eq y x))))

;; eq_trans
  (assert (forall ((x t) (y t) (z t)) (=> (eq x y) (=> (eq y z) (eq x z)))))

;; eq_zero
  (assert (eq zeroF (neg zeroF)))

;; eq_to_real_finite
  (assert
  (forall ((x t) (y t))
  (=> (and (tqtisFinite x) (tqtisFinite y))
  (= (eq x y) (= (tqtreal x) (tqtreal y))))))

;; eq_special
  (assert
  (forall ((x t) (y t))
  (=> (eq x y)
  (and (is_not_nan x)
  (and (is_not_nan y)
  (or (and (tqtisFinite x) (tqtisFinite y))
  (and (is_infinite x) (and (is_infinite y) (same_sign x y)))))))))

;; lt_finite
  (assert
  (forall ((x t) (y t))
  (! (=> (and (tqtisFinite x) (tqtisFinite y))
     (= (lt x y) (< (tqtreal x) (tqtreal y)))) :pattern ((lt
  x y)) )))

;; le_finite
  (assert
  (forall ((x t) (y t))
  (! (=> (and (tqtisFinite x) (tqtisFinite y))
     (= (le x y) (<= (tqtreal x) (tqtreal y)))) :pattern ((le
  x y)) )))

;; le_lt_trans
  (assert (forall ((x t) (y t) (z t)) (=> (and (le x y) (lt y z)) (lt x z))))

;; lt_le_trans
  (assert (forall ((x t) (y t) (z t)) (=> (and (lt x y) (le y z)) (lt x z))))

;; le_ge_asym
  (assert (forall ((x t) (y t)) (=> (and (le x y) (le y x)) (eq x y))))

;; not_lt_ge
  (assert
  (forall ((x t) (y t))
  (=> (and (not (lt x y)) (and (is_not_nan x) (is_not_nan y))) (le y x))))

;; not_gt_le
  (assert
  (forall ((x t) (y t))
  (=> (and (not (lt y x)) (and (is_not_nan x) (is_not_nan y))) (le x y))))

;; le_special
  (assert
  (forall ((x t) (y t))
  (! (=> (le x y)
     (or (and (tqtisFinite x) (tqtisFinite y))
     (or (and (is_minus_infinity x) (is_not_nan y))
     (and (is_not_nan x) (is_plus_infinity y))))) :pattern ((le
  x y)) )))

;; lt_special
  (assert
  (forall ((x t) (y t))
  (! (=> (lt x y)
     (or (and (tqtisFinite x) (tqtisFinite y))
     (or
     (and (is_minus_infinity x)
     (and (is_not_nan y) (not (is_minus_infinity y))))
     (and (is_not_nan x)
     (and (not (is_plus_infinity x)) (is_plus_infinity y)))))) :pattern ((lt
  x y)) )))

;; lt_lt_finite
  (assert
  (forall ((x t) (y t) (z t)) (=> (lt x y) (=> (lt y z) (tqtisFinite y)))))

;; positive_to_real
  (assert
  (forall ((x t))
  (! (=> (tqtisFinite x) (=> (is_positive x) (<= 0.0 (tqtreal x)))) :pattern ((is_positive
  x)) :pattern ((<= 0.0 (tqtreal x))) )))

;; to_real_positive
  (assert
  (forall ((x t))
  (! (=> (tqtisFinite x) (=> (< 0.0 (tqtreal x)) (is_positive x))) :pattern ((is_positive
  x)) )))

;; negative_to_real
  (assert
  (forall ((x t))
  (! (=> (tqtisFinite x) (=> (is_negative x) (<= (tqtreal x) 0.0))) :pattern ((is_negative
  x)) :pattern ((<= (tqtreal x) 0.0)) )))

;; to_real_negative
  (assert
  (forall ((x t))
  (! (=> (tqtisFinite x) (=> (< (tqtreal x) 0.0) (is_negative x))) :pattern ((is_negative
  x)) )))

;; negative_xor_positive
  (assert (forall ((x t)) (not (and (is_positive x) (is_negative x)))))

;; negative_or_positive
  (assert
  (forall ((x t)) (=> (is_not_nan x) (or (is_positive x) (is_negative x)))))

;; diff_sign_trans
  (assert
  (forall ((x t) (y t) (z t))
  (=> (and (diff_sign x y) (diff_sign y z)) (same_sign x z))))

;; diff_sign_product
  (assert
  (forall ((x t) (y t))
  (=>
  (and (tqtisFinite x)
  (and (tqtisFinite y) (< (* (tqtreal x) (tqtreal y)) 0.0))) (diff_sign x y))))

;; same_sign_product
  (assert
  (forall ((x t) (y t))
  (=> (and (tqtisFinite x) (and (tqtisFinite y) (same_sign x y)))
  (<= 0.0 (* (tqtreal x) (tqtreal y))))))

(define-fun product_sign ((z t) (x t)
  (y t)) Bool (and (=> (same_sign x y) (is_positive z))
              (=> (diff_sign x y) (is_negative z))))

(define-fun overflow_value ((m mode)
  (x t)) Bool (ite (is-RTN1 m) (ite (is_positive x)
                               (and (tqtisFinite x)
                               (= (tqtreal x) (* 33554430.0 10141204801825835211973625643008.0)))
                               (is_infinite x)) (ite (is-RTP1 m) (ite (is_positive
                                                                 x)
                                                                 (is_infinite
                                                                 x)
                                                                 (and
                                                                 (tqtisFinite
                                                                 x)
                                                                 (= (tqtreal
                                                                    x) (- (* 33554430.0 10141204801825835211973625643008.0)))))
                                                (ite (is-RTZ1 m) (ite (is_positive
                                                                 x)
                                                                 (and
                                                                 (tqtisFinite
                                                                 x)
                                                                 (= (tqtreal
                                                                    x) (* 33554430.0 10141204801825835211973625643008.0)))
                                                                 (and
                                                                 (tqtisFinite
                                                                 x)
                                                                 (= (tqtreal
                                                                    x) (- (* 33554430.0 10141204801825835211973625643008.0)))))
                                                (ite (is-RNA1 m) (is_infinite
                                                x) (is_infinite x))))))

(define-fun sign_zero_result ((m mode)
  (x t)) Bool (=> (is_zero x)
              (ite (is-RTN1 m) (is_negative x) (is_positive x))))

;; add_finite
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (tqtisFinite x)
     (=> (tqtisFinite y)
     (=> (no_overflow m (+ (tqtreal x) (tqtreal y)))
     (and (tqtisFinite (add m x y))
     (= (tqtreal (add m x y)) (round m (+ (tqtreal x) (tqtreal y)))))))) :pattern (
  (add m x y)) )))

;; add_finite_rev
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (tqtisFinite (add m x y)) (and (tqtisFinite x) (tqtisFinite y))) :pattern (
  (add m x y)) )))

;; add_finite_rev_n
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (to_nearest m)
     (=> (tqtisFinite (add m x y))
     (and (no_overflow m (+ (tqtreal x) (tqtreal y)))
     (= (tqtreal (add m x y)) (round m (+ (tqtreal x) (tqtreal y))))))) :pattern (
  (add m x y)) )))

;; sub_finite
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (tqtisFinite x)
     (=> (tqtisFinite y)
     (=> (no_overflow m (- (tqtreal x) (tqtreal y)))
     (and (tqtisFinite (sub m x y))
     (= (tqtreal (sub m x y)) (round m (- (tqtreal x) (tqtreal y)))))))) :pattern (
  (sub m x y)) )))

;; sub_finite_rev
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (tqtisFinite (sub m x y)) (and (tqtisFinite x) (tqtisFinite y))) :pattern (
  (sub m x y)) )))

;; sub_finite_rev_n
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (to_nearest m)
     (=> (tqtisFinite (sub m x y))
     (and (no_overflow m (- (tqtreal x) (tqtreal y)))
     (= (tqtreal (sub m x y)) (round m (- (tqtreal x) (tqtreal y))))))) :pattern (
  (sub m x y)) )))

;; mul_finite
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (tqtisFinite x)
     (=> (tqtisFinite y)
     (=> (no_overflow m (* (tqtreal x) (tqtreal y)))
     (and (tqtisFinite (mul m x y))
     (= (tqtreal (mul m x y)) (round m (* (tqtreal x) (tqtreal y)))))))) :pattern (
  (mul m x y)) )))

;; mul_finite_rev
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (tqtisFinite (mul m x y)) (and (tqtisFinite x) (tqtisFinite y))) :pattern (
  (mul m x y)) )))

;; mul_finite_rev_n
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (to_nearest m)
     (=> (tqtisFinite (mul m x y))
     (and (no_overflow m (* (tqtreal x) (tqtreal y)))
     (= (tqtreal (mul m x y)) (round m (* (tqtreal x) (tqtreal y))))))) :pattern (
  (mul m x y)) )))

;; div_finite
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (tqtisFinite x)
     (=> (tqtisFinite y)
     (=> (not (is_zero y))
     (=> (no_overflow m (/ (tqtreal x) (tqtreal y)))
     (and (tqtisFinite (div1 m x y))
     (= (tqtreal (div1 m x y)) (round m (/ (tqtreal x) (tqtreal y))))))))) :pattern (
  (div1 m x y)) )))

;; div_finite_rev
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (tqtisFinite (div1 m x y))
     (or (and (tqtisFinite x) (and (tqtisFinite y) (not (is_zero y))))
     (and (tqtisFinite x)
     (and (is_infinite y) (= (tqtreal (div1 m x y)) 0.0))))) :pattern (
  (div1 m x y)) )))

;; div_finite_rev_n
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (to_nearest m)
     (=> (tqtisFinite (div1 m x y))
     (=> (tqtisFinite y)
     (and (no_overflow m (/ (tqtreal x) (tqtreal y)))
     (= (tqtreal (div1 m x y)) (round m (/ (tqtreal x) (tqtreal y)))))))) :pattern (
  (div1 m x y)) )))

;; neg_finite
  (assert
  (forall ((x t))
  (! (=> (tqtisFinite x)
     (and (tqtisFinite (neg x)) (= (tqtreal (neg x)) (- (tqtreal x))))) :pattern (
  (neg x)) )))

;; neg_finite_rev
  (assert
  (forall ((x t))
  (! (=> (tqtisFinite (neg x))
     (and (tqtisFinite x) (= (tqtreal (neg x)) (- (tqtreal x))))) :pattern (
  (neg x)) )))

;; abs_finite
  (assert
  (forall ((x t))
  (! (=> (tqtisFinite x)
     (and (tqtisFinite (abs1 x))
     (and
     (= (tqtreal (abs1 x)) (ite (>= (tqtreal x) 0.0) (tqtreal x) (- (tqtreal
                                                                    x))))
     (is_positive (abs1 x))))) :pattern ((abs1 x)) )))

;; abs_finite_rev
  (assert
  (forall ((x t))
  (! (=> (tqtisFinite (abs1 x))
     (and (tqtisFinite x)
     (= (tqtreal (abs1 x)) (ite (>= (tqtreal x) 0.0) (tqtreal x) (- (tqtreal
                                                                    x)))))) :pattern (
  (abs1 x)) )))

;; abs_universal
  (assert
  (forall ((x t)) (! (not (is_negative (abs1 x))) :pattern ((abs1 x)) )))

;; fma_finite
  (assert
  (forall ((m mode) (x t) (y t) (z t))
  (! (=> (tqtisFinite x)
     (=> (tqtisFinite y)
     (=> (tqtisFinite z)
     (=> (no_overflow m (+ (* (tqtreal x) (tqtreal y)) (tqtreal z)))
     (and (tqtisFinite (fma m x y z))
     (= (tqtreal (fma m x y z)) (round m
                                (+ (* (tqtreal x) (tqtreal y)) (tqtreal z))))))))) :pattern (
  (fma m x y z)) )))

;; fma_finite_rev
  (assert
  (forall ((m mode) (x t) (y t) (z t))
  (! (=> (tqtisFinite (fma m x y z))
     (and (tqtisFinite x) (and (tqtisFinite y) (tqtisFinite z)))) :pattern (
  (fma m x y z)) )))

;; fma_finite_rev_n
  (assert
  (forall ((m mode) (x t) (y t) (z t))
  (! (=> (to_nearest m)
     (=> (tqtisFinite (fma m x y z))
     (and (no_overflow m (+ (* (tqtreal x) (tqtreal y)) (tqtreal z)))
     (= (tqtreal (fma m x y z)) (round m
                                (+ (* (tqtreal x) (tqtreal y)) (tqtreal z))))))) :pattern (
  (fma m x y z)) )))

(define-fun sqr ((x Real)) Real (* x x))

(declare-fun sqrt1 (Real) Real)

;; Sqrt_positive
  (assert (forall ((x Real)) (=> (<= 0.0 x) (<= 0.0 (sqrt1 x)))))

;; Sqrt_square
  (assert (forall ((x Real)) (=> (<= 0.0 x) (= (sqr (sqrt1 x)) x))))

;; Square_sqrt
  (assert (forall ((x Real)) (=> (<= 0.0 x) (= (sqrt1 (* x x)) x))))

;; Sqrt_mul
  (assert
  (forall ((x Real) (y Real))
  (=> (and (<= 0.0 x) (<= 0.0 y))
  (= (sqrt1 (* x y)) (* (sqrt1 x) (sqrt1 y))))))

;; Sqrt_le
  (assert
  (forall ((x Real) (y Real))
  (=> (and (<= 0.0 x) (<= x y)) (<= (sqrt1 x) (sqrt1 y)))))

;; sqrt_finite
  (assert
  (forall ((m mode) (x t))
  (! (=> (tqtisFinite x)
     (=> (<= 0.0 (tqtreal x))
     (and (tqtisFinite (sqrt m x))
     (= (tqtreal (sqrt m x)) (round m (sqrt1 (tqtreal x))))))) :pattern (
  (sqrt m x)) )))

;; sqrt_finite_rev
  (assert
  (forall ((m mode) (x t))
  (! (=> (tqtisFinite (sqrt m x))
     (and (tqtisFinite x)
     (and (<= 0.0 (tqtreal x))
     (= (tqtreal (sqrt m x)) (round m (sqrt1 (tqtreal x))))))) :pattern (
  (sqrt m x)) )))

(define-fun same_sign_real ((x t)
  (r Real)) Bool (or (and (is_positive x) (< 0.0 r))
                 (and (is_negative x) (< r 0.0))))

;; add_special
  (assert
  (forall ((m mode) (x t) (y t))
  (! (let ((r (add m x y)))
     (and (=> (or (is_nan x) (is_nan y)) (is_nan r))
     (and
     (=> (and (tqtisFinite x) (is_infinite y))
     (and (is_infinite r) (same_sign r y)))
     (and
     (=> (and (is_infinite x) (tqtisFinite y))
     (and (is_infinite r) (same_sign r x)))
     (and
     (=> (and (is_infinite x) (and (is_infinite y) (same_sign x y)))
     (and (is_infinite r) (same_sign r x)))
     (and
     (=> (and (is_infinite x) (and (is_infinite y) (diff_sign x y))) (is_nan
     r))
     (and
     (=>
     (and (tqtisFinite x)
     (and (tqtisFinite y) (not (no_overflow m (+ (tqtreal x) (tqtreal y))))))
     (and (same_sign_real r (+ (tqtreal x) (tqtreal y))) (overflow_value m
     r)))
     (=> (and (tqtisFinite x) (tqtisFinite y))
     (ite (same_sign x y) (same_sign r x) (sign_zero_result m r)))))))))) :pattern (
  (add m x y)) )))

;; sub_special
  (assert
  (forall ((m mode) (x t) (y t))
  (! (let ((r (sub m x y)))
     (and (=> (or (is_nan x) (is_nan y)) (is_nan r))
     (and
     (=> (and (tqtisFinite x) (is_infinite y))
     (and (is_infinite r) (diff_sign r y)))
     (and
     (=> (and (is_infinite x) (tqtisFinite y))
     (and (is_infinite r) (same_sign r x)))
     (and
     (=> (and (is_infinite x) (and (is_infinite y) (same_sign x y))) (is_nan
     r))
     (and
     (=> (and (is_infinite x) (and (is_infinite y) (diff_sign x y)))
     (and (is_infinite r) (same_sign r x)))
     (and
     (=>
     (and (tqtisFinite x)
     (and (tqtisFinite y) (not (no_overflow m (- (tqtreal x) (tqtreal y))))))
     (and (same_sign_real r (- (tqtreal x) (tqtreal y))) (overflow_value m
     r)))
     (=> (and (tqtisFinite x) (tqtisFinite y))
     (ite (diff_sign x y) (same_sign r x) (sign_zero_result m r)))))))))) :pattern (
  (sub m x y)) )))

;; mul_special
  (assert
  (forall ((m mode) (x t) (y t))
  (! (let ((r (mul m x y)))
     (and (=> (or (is_nan x) (is_nan y)) (is_nan r))
     (and (=> (and (is_zero x) (is_infinite y)) (is_nan r))
     (and
     (=> (and (tqtisFinite x) (and (is_infinite y) (not (is_zero x))))
     (is_infinite r))
     (and (=> (and (is_infinite x) (is_zero y)) (is_nan r))
     (and
     (=> (and (is_infinite x) (and (tqtisFinite y) (not (is_zero y))))
     (is_infinite r))
     (and (=> (and (is_infinite x) (is_infinite y)) (is_infinite r))
     (and
     (=>
     (and (tqtisFinite x)
     (and (tqtisFinite y) (not (no_overflow m (* (tqtreal x) (tqtreal y))))))
     (overflow_value m r)) (=> (not (is_nan r)) (product_sign r x y)))))))))) :pattern (
  (mul m x y)) )))

;; div_special
  (assert
  (forall ((m mode) (x t) (y t))
  (! (let ((r (div1 m x y)))
     (and (=> (or (is_nan x) (is_nan y)) (is_nan r))
     (and (=> (and (tqtisFinite x) (is_infinite y)) (is_zero r))
     (and (=> (and (is_infinite x) (tqtisFinite y)) (is_infinite r))
     (and (=> (and (is_infinite x) (is_infinite y)) (is_nan r))
     (and
     (=>
     (and (tqtisFinite x)
     (and (tqtisFinite y)
     (and (not (is_zero y))
     (not (no_overflow m (/ (tqtreal x) (tqtreal y))))))) (overflow_value m
     r))
     (and
     (=> (and (tqtisFinite x) (and (is_zero y) (not (is_zero x))))
     (is_infinite r))
     (and (=> (and (is_zero x) (is_zero y)) (is_nan r))
     (=> (not (is_nan r)) (product_sign r x y)))))))))) :pattern ((div1 m x
                                                                  y)) )))

;; neg_special
  (assert
  (forall ((x t))
  (! (and (=> (is_nan x) (is_nan (neg x)))
     (and (=> (is_infinite x) (is_infinite (neg x)))
     (=> (not (is_nan x)) (diff_sign x (neg x))))) :pattern ((neg x)) )))

;; abs_special
  (assert
  (forall ((x t))
  (! (and (=> (is_nan x) (is_nan (abs1 x)))
     (and (=> (is_infinite x) (is_infinite (abs1 x)))
     (=> (not (is_nan x)) (is_positive (abs1 x))))) :pattern ((abs1 x)) )))

;; fma_special
  (assert
  (forall ((m mode) (x t) (y t) (z t))
  (! (let ((r (fma m x y z)))
     (and (=> (or (is_nan x) (or (is_nan y) (is_nan z))) (is_nan r))
     (and (=> (and (is_zero x) (is_infinite y)) (is_nan r))
     (and (=> (and (is_infinite x) (is_zero y)) (is_nan r))
     (and
     (=>
     (and (tqtisFinite x)
     (and (not (is_zero x)) (and (is_infinite y) (tqtisFinite z))))
     (and (is_infinite r) (product_sign r x y)))
     (and
     (=>
     (and (tqtisFinite x)
     (and (not (is_zero x)) (and (is_infinite y) (is_infinite z))))
     (ite (product_sign z x y) (and (is_infinite r) (same_sign r z)) (is_nan
     r)))
     (and
     (=>
     (and (is_infinite x)
     (and (tqtisFinite y) (and (not (is_zero y)) (tqtisFinite z))))
     (and (is_infinite r) (product_sign r x y)))
     (and
     (=>
     (and (is_infinite x)
     (and (tqtisFinite y) (and (not (is_zero y)) (is_infinite z))))
     (ite (product_sign z x y) (and (is_infinite r) (same_sign r z)) (is_nan
     r)))
     (and
     (=> (and (is_infinite x) (and (is_infinite y) (tqtisFinite z)))
     (and (is_infinite r) (product_sign r x y)))
     (and
     (=> (and (tqtisFinite x) (and (tqtisFinite y) (is_infinite z)))
     (and (is_infinite r) (same_sign r z)))
     (and
     (=> (and (is_infinite x) (and (is_infinite y) (is_infinite z)))
     (ite (product_sign z x y) (and (is_infinite r) (same_sign r z)) (is_nan
     r)))
     (and
     (=>
     (and (tqtisFinite x)
     (and (tqtisFinite y)
     (and (tqtisFinite z)
     (not (no_overflow m (+ (* (tqtreal x) (tqtreal y)) (tqtreal z)))))))
     (and (same_sign_real r (+ (* (tqtreal x) (tqtreal y)) (tqtreal z)))
     (overflow_value m r)))
     (=> (and (tqtisFinite x) (and (tqtisFinite y) (tqtisFinite z)))
     (ite (product_sign z x y) (same_sign r z)
     (=> (= (+ (* (tqtreal x) (tqtreal y)) (tqtreal z)) 0.0)
     (ite (= m RTN1) (is_negative r) (is_positive r))))))))))))))))) :pattern (
  (fma m x y z)) )))

;; sqrt_special
  (assert
  (forall ((m mode) (x t))
  (! (let ((r (sqrt m x)))
     (and (=> (is_nan x) (is_nan r))
     (and (=> (is_plus_infinity x) (is_plus_infinity r))
     (and (=> (is_minus_infinity x) (is_nan r))
     (and (=> (and (tqtisFinite x) (< (tqtreal x) 0.0)) (is_nan r))
     (and (=> (is_zero x) (same_sign r x))
     (=> (and (tqtisFinite x) (< 0.0 (tqtreal x))) (is_positive r)))))))) :pattern (
  (sqrt m x)) )))

;; of_int_add_exact
  (assert
  (forall ((m mode) (n mode) (i Int) (j Int))
  (=> (in_safe_int_range i)
  (=> (in_safe_int_range j)
  (=> (in_safe_int_range (+ i j)) (eq (of_int m (+ i j))
  (add n (of_int m i) (of_int m j))))))))

;; of_int_sub_exact
  (assert
  (forall ((m mode) (n mode) (i Int) (j Int))
  (=> (in_safe_int_range i)
  (=> (in_safe_int_range j)
  (=> (in_safe_int_range (- i j)) (eq (of_int m (- i j))
  (sub n (of_int m i) (of_int m j))))))))

;; of_int_mul_exact
  (assert
  (forall ((m mode) (n mode) (i Int) (j Int))
  (=> (in_safe_int_range i)
  (=> (in_safe_int_range j)
  (=> (in_safe_int_range (* i j)) (eq (of_int m (* i j))
  (mul n (of_int m i) (of_int m j))))))))

;; Min_r
  (assert (forall ((x t) (y t)) (=> (le y x) (eq (min x y) y))))

;; Min_l
  (assert (forall ((x t) (y t)) (=> (le x y) (eq (min x y) x))))

;; Max_r
  (assert (forall ((x t) (y t)) (=> (le y x) (eq (max x y) x))))

;; Max_l
  (assert (forall ((x t) (y t)) (=> (le x y) (eq (max x y) y))))

(declare-fun is_int1 (t) Bool)

;; zeroF_is_int
  (assert (is_int1 zeroF))

;; of_int_is_int
  (assert
  (forall ((m mode) (x Int)) (=> (in_int_range x) (is_int1 (of_int m x)))))

;; big_float_is_int
  (assert
  (forall ((m mode) (i t))
  (=> (tqtisFinite i)
  (=> (or (le i (neg (of_int m 16777216))) (le (of_int m 16777216) i))
  (is_int1 i)))))

;; roundToIntegral_is_int
  (assert
  (forall ((m mode) (x t))
  (=> (tqtisFinite x) (is_int1 (roundToIntegral m x)))))

;; eq_is_int
  (assert (forall ((x t) (y t)) (=> (eq x y) (=> (is_int1 x) (is_int1 y)))))

;; add_int
  (assert
  (forall ((x t) (y t) (m mode))
  (=> (is_int1 x)
  (=> (is_int1 y) (=> (tqtisFinite (add m x y)) (is_int1 (add m x y)))))))

;; sub_int
  (assert
  (forall ((x t) (y t) (m mode))
  (=> (is_int1 x)
  (=> (is_int1 y) (=> (tqtisFinite (sub m x y)) (is_int1 (sub m x y)))))))

;; mul_int
  (assert
  (forall ((x t) (y t) (m mode))
  (=> (is_int1 x)
  (=> (is_int1 y) (=> (tqtisFinite (mul m x y)) (is_int1 (mul m x y)))))))

;; fma_int
  (assert
  (forall ((x t) (y t) (z t) (m mode))
  (=> (is_int1 x)
  (=> (is_int1 y)
  (=> (is_int1 z) (=> (tqtisFinite (fma m x y z)) (is_int1 (fma m x y z))))))))

;; neg_int
  (assert (forall ((x t)) (=> (is_int1 x) (is_int1 (neg x)))))

;; abs_int
  (assert (forall ((x t)) (=> (is_int1 x) (is_int1 (abs1 x)))))

;; is_int_of_int
  (assert
  (forall ((x t) (m mode) (mqt mode))
  (=> (is_int1 x) (eq x (of_int mqt (to_int1 m x))))))

;; is_int_to_int
  (assert
  (forall ((m mode) (x t)) (=> (is_int1 x) (in_int_range (to_int1 m x)))))

;; is_int_is_finite
  (assert (forall ((x t)) (=> (is_int1 x) (tqtisFinite x))))

;; int_to_real
  (assert
  (forall ((m mode) (x t))
  (=> (is_int1 x) (= (tqtreal x) (to_real (to_int1 m x))))))

;; truncate_int
  (assert
  (forall ((m mode) (i t)) (=> (is_int1 i) (eq (roundToIntegral m i) i))))

;; truncate_neg
  (assert
  (forall ((x t))
  (=> (tqtisFinite x)
  (=> (is_negative x) (= (roundToIntegral RTZ1 x) (roundToIntegral RTP1 x))))))

;; truncate_pos
  (assert
  (forall ((x t))
  (=> (tqtisFinite x)
  (=> (is_positive x) (= (roundToIntegral RTZ1 x) (roundToIntegral RTN1 x))))))

;; ceil_le
  (assert
  (forall ((x t)) (=> (tqtisFinite x) (le x (roundToIntegral RTP1 x)))))

;; ceil_lest
  (assert
  (forall ((x t) (y t))
  (=> (and (le x y) (is_int1 y)) (le (roundToIntegral RTP1 x) y))))

;; ceil_to_real
  (assert
  (forall ((x t))
  (=> (tqtisFinite x)
  (= (tqtreal (roundToIntegral RTP1 x)) (to_real (- 1 (to_int (- 1.0
  (tqtreal x)))))))))

;; ceil_to_int
  (assert
  (forall ((m mode) (x t))
  (=> (tqtisFinite x)
  (= (to_int1 m (roundToIntegral RTP1 x)) (- 1 (to_int (- 1.0 (tqtreal x))))))))

;; floor_le
  (assert
  (forall ((x t)) (=> (tqtisFinite x) (le (roundToIntegral RTN1 x) x))))

;; floor_lest
  (assert
  (forall ((x t) (y t))
  (=> (and (le y x) (is_int1 y)) (le y (roundToIntegral RTN1 x)))))

;; floor_to_real
  (assert
  (forall ((x t))
  (=> (tqtisFinite x)
  (= (tqtreal (roundToIntegral RTN1 x)) (to_real (to_int (tqtreal x)))))))

;; floor_to_int
  (assert
  (forall ((m mode) (x t))
  (=> (tqtisFinite x)
  (= (to_int1 m (roundToIntegral RTN1 x)) (to_int (tqtreal x))))))

;; RNA_down
  (assert
  (forall ((x t))
  (=> (lt (sub RNE1 x (roundToIntegral RTN1 x))
  (sub RNE1 (roundToIntegral RTP1 x) x))
  (= (roundToIntegral RNA1 x) (roundToIntegral RTN1 x)))))

;; RNA_up
  (assert
  (forall ((x t))
  (=> (lt (sub RNE1 (roundToIntegral RTP1 x) x)
  (sub RNE1 x (roundToIntegral RTN1 x)))
  (= (roundToIntegral RNA1 x) (roundToIntegral RTP1 x)))))

;; RNA_down_tie
  (assert
  (forall ((x t))
  (=> (eq (sub RNE1 x (roundToIntegral RTN1 x))
  (sub RNE1 (roundToIntegral RTP1 x) x))
  (=> (is_negative x) (= (roundToIntegral RNA1 x) (roundToIntegral RTN1 x))))))

;; RNA_up_tie
  (assert
  (forall ((x t))
  (=> (eq (sub RNE1 (roundToIntegral RTP1 x) x)
  (sub RNE1 x (roundToIntegral RTN1 x)))
  (=> (is_positive x) (= (roundToIntegral RNA1 x) (roundToIntegral RTP1 x))))))

;; to_int_roundToIntegral
  (assert
  (forall ((m mode) (x t))
  (= (to_int1 m x) (to_int1 m (roundToIntegral m x)))))

;; to_int_monotonic
  (assert
  (forall ((m mode) (x t) (y t))
  (=> (tqtisFinite x)
  (=> (tqtisFinite y) (=> (le x y) (<= (to_int1 m x) (to_int1 m y)))))))

;; to_int_of_int
  (assert
  (forall ((m mode) (i Int))
  (=> (in_safe_int_range i) (= (to_int1 m (of_int m i)) i))))

;; eq_to_int
  (assert
  (forall ((m mode) (x t) (y t))
  (=> (tqtisFinite x) (=> (eq x y) (= (to_int1 m x) (to_int1 m y))))))

;; neg_to_int
  (assert
  (forall ((m mode) (x t))
  (=> (is_int1 x) (= (to_int1 m (neg x)) (- (to_int1 m x))))))

;; roundToIntegral_is_finite
  (assert
  (forall ((m mode) (x t))
  (=> (tqtisFinite x) (tqtisFinite (roundToIntegral m x)))))

;; round_bound_ne
  (assert
  (forall ((x Real))
  (! (=> (no_overflow RNE1 x)
     (and
     (<= (- (- x (* (/ 1.0 16777216.0) (ite (>= x 0.0) x (- x)))) (/ 1.0 1427247692705959881058285969449495136382746624.0))
     (round RNE1 x))
     (<= (round RNE1 x) (+ (+ x (* (/ 1.0 16777216.0) (ite (>= x 0.0) x (- x)))) (/ 1.0 1427247692705959881058285969449495136382746624.0))))) :pattern (
  (round RNE1 x)) )))

;; round_bound
  (assert
  (forall ((m mode) (x Real))
  (! (=> (no_overflow m x)
     (and
     (<= (- (- x (* (/ 1.0 8388608.0) (ite (>= x 0.0) x (- x)))) (/ 1.0 713623846352979940529142984724747568191373312.0))
     (round m x))
     (<= (round m x) (+ (+ x (* (/ 1.0 8388608.0) (ite (>= x 0.0) x (- x)))) (/ 1.0 713623846352979940529142984724747568191373312.0))))) :pattern (
  (round m x)) )))

(define-fun neq ((x t) (y t)) Bool (not (eq x y)))

(define-fun bool_lt ((x t) (y t)) Bool (ite (lt x y) true false))

(define-fun bool_le ((x t) (y t)) Bool (ite (le x y) true false))

(define-fun bool_gt ((x t) (y t)) Bool (ite (lt y x) true false))

(define-fun bool_ge ((x t) (y t)) Bool (ite (le y x) true false))

(define-fun bool_eq ((x t) (y t)) Bool (ite (eq x y) true false))

(define-fun bool_neq ((x t) (y t)) Bool (ite (not (eq x y)) true false))

(declare-fun rem1 (t t) t)

(declare-const fliteral t)

;; fliteral_axiom
  (assert (and (tqtisFinite fliteral) (= (tqtreal fliteral) 1.0)))

;; one_is_int
  (assert (is_int1 fliteral))

;; one_of_int
  (assert (= fliteral (of_int RNA1 1)))

(declare-datatypes () ((t__ref (mk_t__ref (t__content t)))))
(define-fun in_range1 ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort float 0)

(define-fun bool_eq1 ((x t) (y t)) Bool (ite (eq x y) true false))

(declare-fun user_eq (float float) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE1 (t) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) t)

(declare-const dummy float)

(declare-datatypes () ((float__ref (mk_float__ref (float__content float)))))
(define-fun float__ref___projection ((a float__ref)) float (float__content a))

(declare-sort speed_t 0)

(define-fun bool_eq2 ((x t) (y t)) Bool (ite (eq x y) true false))

(declare-fun user_eq1 (speed_t speed_t) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE2 (t) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) t)

(declare-const dummy1 speed_t)

(declare-datatypes ()
((speed_t__ref (mk_speed_t__ref (speed_t__content speed_t)))))
(define-fun speed_t__ref___projection ((a speed_t__ref)) speed_t (speed_t__content
                                                                 a))

(declare-const fliteral1 t)

;; fliteral_axiom
  (assert
  (and (tqtisFinite fliteral1)
  (= (tqtreal fliteral1) 340282346638528859811704183484516925440.0)))

(define-fun dynamic_invariant ((temp___expr_175 t) (temp___is_init_171 Bool)
  (temp___skip_constant_172 Bool) (temp___do_toplevel_173 Bool)
  (temp___do_typ_inv_174 Bool)) Bool (=>
                                     (or (= temp___is_init_171 true) (le
                                     (neg fliteral1) fliteral1)) (tqtisFinite
                                     temp___expr_175)))

(declare-fun to_rep (speed_t) t)

(declare-fun of_rep (t) speed_t)

;; inversion_axiom
  (assert
  (forall ((x speed_t)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x speed_t)) (! (tqtisFinite (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x t))
  (! (=> (tqtisFinite x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                              (of_rep x))) )))

(declare-sort tdistance_tB 0)

(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (tdistance_tB tdistance_tB) Bool)

(declare-const dummy2 tdistance_tB)

(declare-datatypes ()
((tdistance_tB__ref
 (mk_tdistance_tB__ref (tdistance_tB__content tdistance_tB)))))
(define-fun tdistance_tB__ref___projection ((a tdistance_tB__ref)) tdistance_tB
  (tdistance_tB__content a))

(declare-sort distance_t 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (distance_t distance_t) Bool)

(declare-const dummy3 distance_t)

(declare-datatypes ()
((distance_t__ref (mk_distance_t__ref (distance_t__content distance_t)))))
(define-fun distance_t__ref___projection ((a distance_t__ref)) distance_t
  (distance_t__content a))

(define-fun dynamic_invariant1 ((temp___expr_203 Int)
  (temp___is_init_199 Bool) (temp___skip_constant_200 Bool)
  (temp___do_toplevel_201 Bool)
  (temp___do_typ_inv_202 Bool)) Bool (=>
                                     (or (= temp___is_init_199 true)
                                     (<= 0 2147483647)) (in_range3
                                     temp___expr_203)))

(declare-fun to_rep1 (distance_t) Int)

(declare-fun of_rep1 (Int) distance_t)

;; inversion_axiom
  (assert
  (forall ((x distance_t))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x distance_t)) (! (in_range3
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-fun m_per_s_from_km_per_h (t) t)

(declare-fun m_per_s_from_km_per_h__function_guard (t t) Bool)

(define-fun dynamic_invariant2 ((temp___expr_60 t) (temp___is_init_56 Bool)
  (temp___skip_constant_57 Bool) (temp___do_toplevel_58 Bool)
  (temp___do_typ_inv_59 Bool)) Bool (=>
                                    (or (= temp___is_init_56 true) (le
                                    (neg fliteral1) fliteral1)) (tqtisFinite
                                    temp___expr_60)))

(declare-fun sqrt2 (t) t)

(declare-fun sqrt__function_guard (t t) Bool)

(declare-const fliteral2 t)

;; fliteral_axiom
  (assert (and (tqtisFinite fliteral2) (= (tqtreal fliteral2) (/ 0.0 10.0))))

(declare-const fliteral3 t)

;; fliteral_axiom
  (assert
  (and (tqtisFinite fliteral3)
  (= (tqtreal fliteral3) (/ 14012984643248170709237295832899161312802619418765157717570682838897910826858606014866381883621215820312500000000000000000000000.0 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0))))

;; sqrt__post_axiom
  (assert
  (forall ((x t))
  (! (=> (and (dynamic_invariant2 x true true true true) (le fliteral2 x))
     (let ((result (sqrt2 x)))
     (and
     (and (le fliteral2 result)
     (and (=> (eq x fliteral2) (eq result fliteral2))
     (and (=> (eq x fliteral) (eq result fliteral))
     (=> (le fliteral3 x) (lt fliteral2 result))))) (dynamic_invariant2
     result true false true true)))) :pattern ((sqrt2 x)) )))

(declare-sort deceleration_t 0)

(define-fun in_range4 ((x t)) Bool (and (tqtisFinite x)
                                   (and (le fliteral2 x) (le x fliteral1))))

(define-fun bool_eq3 ((x t) (y t)) Bool (ite (eq x y) true false))

(declare-fun user_eq4 (deceleration_t deceleration_t) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE5 (t) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) t)

(declare-const dummy4 deceleration_t)

(declare-datatypes ()
((deceleration_t__ref
 (mk_deceleration_t__ref (deceleration_t__content deceleration_t)))))
(define-fun deceleration_t__ref___projection ((a deceleration_t__ref)) deceleration_t
  (deceleration_t__content a))

(define-fun dynamic_invariant3 ((temp___expr_196 t) (temp___is_init_192 Bool)
  (temp___skip_constant_193 Bool) (temp___do_toplevel_194 Bool)
  (temp___do_typ_inv_195 Bool)) Bool (=>
                                     (or (= temp___is_init_192 true) (le
                                     fliteral2 fliteral1)) (in_range4
                                     temp___expr_196)))

(declare-fun a_gradient (Int) t)

(declare-fun a_gradient__function_guard (t Int) Bool)

(declare-fun a_brake_safe (t Int) t)

(declare-fun a_brake_safe__function_guard (t t Int) Bool)

(declare-fun a_safe (t Int) t)

(declare-fun a_safe__function_guard (t t Int) Bool)

;; a_safe__post_axiom
  (assert
  (forall ((v t))
  (forall ((d Int))
  (! (=>
     (and (dynamic_invariant v true true true true) (dynamic_invariant1 d
     true true true true)) (dynamic_invariant3 (a_safe v d) true false true
     true)) :pattern ((a_safe v d)) ))))

;; a_safe__def_axiom
  (assert
  (forall ((v t))
  (forall ((d Int))
  (! (=>
     (and (dynamic_invariant v true true true true) (dynamic_invariant1 d
     true true true true))
     (= (a_safe v d) (add RNE1 (a_brake_safe v d) (a_gradient d)))) :pattern (
  (a_safe v d)) ))))

(declare-const maximum_valid_speed t)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-sort braking_curve_range 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 1000)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq5 (braking_curve_range braking_curve_range) Bool)

(declare-const dummy5 braking_curve_range)

(declare-datatypes ()
((braking_curve_range__ref
 (mk_braking_curve_range__ref
 (braking_curve_range__content braking_curve_range)))))
(define-fun braking_curve_range__ref___projection ((a braking_curve_range__ref)) braking_curve_range
  (braking_curve_range__content a))

(define-fun dynamic_invariant4 ((temp___expr_362 Int)
  (temp___is_init_358 Bool) (temp___skip_constant_359 Bool)
  (temp___do_toplevel_360 Bool)
  (temp___do_typ_inv_361 Bool)) Bool (=>
                                     (or (= temp___is_init_358 true)
                                     (<= 0 1000)) (in_range5
                                     temp___expr_362)))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__deceleration_curve__braking_curve_entry__location distance_t)(rec__deceleration_curve__braking_curve_entry__speed speed_t)))))
(define-fun us_split_fields_location__projection ((a us_split_fields)) distance_t
  (rec__deceleration_curve__braking_curve_entry__location a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___3__projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___3__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                                a))

(define-fun bool_eq4 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep1
                           (rec__deceleration_curve__braking_curve_entry__location
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__deceleration_curve__braking_curve_entry__location
                                                  (us_split_fields1 b))))
                        (= (to_rep
                           (rec__deceleration_curve__braking_curve_entry__speed
                           (us_split_fields1 a))) (to_rep
                                                  (rec__deceleration_curve__braking_curve_entry__speed
                                                  (us_split_fields1 b)))))
                   true false))

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const deceleration_curve__braking_curve_entry__location__first__bit Int)

(declare-const deceleration_curve__braking_curve_entry__location__last__bit Int)

(declare-const deceleration_curve__braking_curve_entry__location__position Int)

;; deceleration_curve__braking_curve_entry__location__first__bit_axiom
  (assert
  (<= 0 deceleration_curve__braking_curve_entry__location__first__bit))

;; deceleration_curve__braking_curve_entry__location__last__bit_axiom
  (assert
  (< deceleration_curve__braking_curve_entry__location__first__bit deceleration_curve__braking_curve_entry__location__last__bit))

;; deceleration_curve__braking_curve_entry__location__position_axiom
  (assert (<= 0 deceleration_curve__braking_curve_entry__location__position))

(declare-const deceleration_curve__braking_curve_entry__speed__first__bit Int)

(declare-const deceleration_curve__braking_curve_entry__speed__last__bit Int)

(declare-const deceleration_curve__braking_curve_entry__speed__position Int)

;; deceleration_curve__braking_curve_entry__speed__first__bit_axiom
  (assert (<= 0 deceleration_curve__braking_curve_entry__speed__first__bit))

;; deceleration_curve__braking_curve_entry__speed__last__bit_axiom
  (assert
  (< deceleration_curve__braking_curve_entry__speed__first__bit deceleration_curve__braking_curve_entry__speed__last__bit))

;; deceleration_curve__braking_curve_entry__speed__position_axiom
  (assert (<= 0 deceleration_curve__braking_curve_entry__speed__position))

(declare-fun user_eq6 (us_rep us_rep) Bool)

(declare-const dummy6 us_rep)

(declare-datatypes ()
((braking_curve_entry__ref
 (mk_braking_curve_entry__ref (braking_curve_entry__content us_rep)))))
(define-fun braking_curve_entry__ref___projection ((a braking_curve_entry__ref)) us_rep
  (braking_curve_entry__content a))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int us_rep))))))
(declare-fun slide ((Array Int us_rep) Int Int) (Array Int us_rep))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq5 ((a (Array Int us_rep)) (a__first Int) (a__last Int)
  (b (Array Int us_rep)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_170 Int))
                           (=>
                           (and (<= a__first temp___idx_170)
                           (<= temp___idx_170 a__last))
                           (= (bool_eq4 (select a temp___idx_170)
                              (select b (+ (- b__first a__first) temp___idx_170))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq5 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_170 Int))
  (=> (and (<= a__first temp___idx_170) (<= temp___idx_170 a__last))
  (= (bool_eq4 (select a temp___idx_170)
     (select b (+ (- b__first a__first) temp___idx_170))) true))))))))

(declare-const dummy7 (Array Int us_rep))

(declare-const value__size1 Int)

(declare-fun object__size1 ((Array Int us_rep)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int us_rep)) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 ((Array Int us_rep)) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a (Array Int us_rep))) (<= 0 (object__size1 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int us_rep))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a (Array Int us_rep))) (<= 0 (object__alignment1 a))))

(declare-fun user_eq7 ((Array Int us_rep) (Array Int us_rep)) Bool)

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1
 (rec__deceleration_curve__braking_curve_t__curve (Array Int us_rep))(rec__deceleration_curve__braking_curve_t__end_point distance_t)))))
(define-fun us_split_fields_curve__projection ((a us_split_fields2)) (Array Int us_rep)
  (rec__deceleration_curve__braking_curve_t__curve a))

(define-fun us_split_fields_end_point__projection ((a us_split_fields2)) distance_t
  (rec__deceleration_curve__braking_curve_t__end_point a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___4__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___4__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                  a))

(define-fun bool_eq6 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (bool_eq5
                            (rec__deceleration_curve__braking_curve_t__curve
                            (us_split_fields3 a)) 0 1000
                            (rec__deceleration_curve__braking_curve_t__curve
                            (us_split_fields3 b)) 0 1000) true)
                         (= (to_rep1
                            (rec__deceleration_curve__braking_curve_t__end_point
                            (us_split_fields3 a))) (to_rep1
                                                   (rec__deceleration_curve__braking_curve_t__end_point
                                                   (us_split_fields3 b)))))
                    true false))

(declare-const value__size2 Int)

(declare-fun object__size2 (us_rep1) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))

(declare-const deceleration_curve__braking_curve_t__curve__first__bit Int)

(declare-const deceleration_curve__braking_curve_t__curve__last__bit Int)

(declare-const deceleration_curve__braking_curve_t__curve__position Int)

;; deceleration_curve__braking_curve_t__curve__first__bit_axiom
  (assert (<= 0 deceleration_curve__braking_curve_t__curve__first__bit))

;; deceleration_curve__braking_curve_t__curve__last__bit_axiom
  (assert
  (< deceleration_curve__braking_curve_t__curve__first__bit deceleration_curve__braking_curve_t__curve__last__bit))

;; deceleration_curve__braking_curve_t__curve__position_axiom
  (assert (<= 0 deceleration_curve__braking_curve_t__curve__position))

(declare-const deceleration_curve__braking_curve_t__end_point__first__bit Int)

(declare-const deceleration_curve__braking_curve_t__end_point__last__bit Int)

(declare-const deceleration_curve__braking_curve_t__end_point__position Int)

;; deceleration_curve__braking_curve_t__end_point__first__bit_axiom
  (assert (<= 0 deceleration_curve__braking_curve_t__end_point__first__bit))

;; deceleration_curve__braking_curve_t__end_point__last__bit_axiom
  (assert
  (< deceleration_curve__braking_curve_t__end_point__first__bit deceleration_curve__braking_curve_t__end_point__last__bit))

;; deceleration_curve__braking_curve_t__end_point__position_axiom
  (assert (<= 0 deceleration_curve__braking_curve_t__end_point__position))

(declare-fun user_eq8 (us_rep1 us_rep1) Bool)

(declare-const dummy8 us_rep1)

(declare-datatypes ()
((braking_curve_t__ref
 (mk_braking_curve_t__ref (braking_curve_t__content us_rep1)))))
(define-fun braking_curve_t__ref___projection ((a braking_curve_t__ref)) us_rep1
  (braking_curve_t__content a))

(declare-datatypes ()
((us_split_fields4
 (mk___split_fields2
 (rec__deceleration_curve__target_t__supervise Bool)(rec__deceleration_curve__target_t__location distance_t)(rec__deceleration_curve__target_t__speed speed_t)))))
(define-fun us_split_fields_supervise__projection ((a us_split_fields4)) Bool
  (rec__deceleration_curve__target_t__supervise a))

(define-fun us_split_fields_location__2__projection ((a us_split_fields4)) distance_t
  (rec__deceleration_curve__target_t__location a))

(declare-datatypes ()
((us_split_fields__ref2
 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___5__projection ((a us_split_fields__ref2)) us_split_fields4
  (us_split_fields__content2 a))

(declare-datatypes ()
((us_rep2 (mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep___5__projection ((a us_rep2)) us_split_fields4 (us_split_fields5
                                                                  a))

(define-fun bool_eq7 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (and
                         (= (rec__deceleration_curve__target_t__supervise
                            (us_split_fields5 a)) (rec__deceleration_curve__target_t__supervise
                                                  (us_split_fields5 b)))
                         (= (to_rep1
                            (rec__deceleration_curve__target_t__location
                            (us_split_fields5 a))) (to_rep1
                                                   (rec__deceleration_curve__target_t__location
                                                   (us_split_fields5 b)))))
                         (= (to_rep
                            (rec__deceleration_curve__target_t__speed
                            (us_split_fields5 a))) (to_rep
                                                   (rec__deceleration_curve__target_t__speed
                                                   (us_split_fields5 b)))))
                    true false))

(declare-const value__size3 Int)

(declare-fun object__size3 (us_rep2) Int)

(declare-const value__alignment3 Int)

(declare-fun object__alignment3 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment3 a))))

(declare-const deceleration_curve__target_t__supervise__first__bit Int)

(declare-const deceleration_curve__target_t__supervise__last__bit Int)

(declare-const deceleration_curve__target_t__supervise__position Int)

;; deceleration_curve__target_t__supervise__first__bit_axiom
  (assert (<= 0 deceleration_curve__target_t__supervise__first__bit))

;; deceleration_curve__target_t__supervise__last__bit_axiom
  (assert
  (< deceleration_curve__target_t__supervise__first__bit deceleration_curve__target_t__supervise__last__bit))

;; deceleration_curve__target_t__supervise__position_axiom
  (assert (<= 0 deceleration_curve__target_t__supervise__position))

(declare-const deceleration_curve__target_t__location__first__bit Int)

(declare-const deceleration_curve__target_t__location__last__bit Int)

(declare-const deceleration_curve__target_t__location__position Int)

;; deceleration_curve__target_t__location__first__bit_axiom
  (assert (<= 0 deceleration_curve__target_t__location__first__bit))

;; deceleration_curve__target_t__location__last__bit_axiom
  (assert
  (< deceleration_curve__target_t__location__first__bit deceleration_curve__target_t__location__last__bit))

;; deceleration_curve__target_t__location__position_axiom
  (assert (<= 0 deceleration_curve__target_t__location__position))

(declare-const deceleration_curve__target_t__speed__first__bit Int)

(declare-const deceleration_curve__target_t__speed__last__bit Int)

(declare-const deceleration_curve__target_t__speed__position Int)

;; deceleration_curve__target_t__speed__first__bit_axiom
  (assert (<= 0 deceleration_curve__target_t__speed__first__bit))

;; deceleration_curve__target_t__speed__last__bit_axiom
  (assert
  (< deceleration_curve__target_t__speed__first__bit deceleration_curve__target_t__speed__last__bit))

;; deceleration_curve__target_t__speed__position_axiom
  (assert (<= 0 deceleration_curve__target_t__speed__position))

(declare-fun user_eq9 (us_rep2 us_rep2) Bool)

(declare-const dummy9 us_rep2)

(declare-datatypes ()
((target_t__ref (mk_target_t__ref (target_t__content us_rep2)))))
(define-fun target_t__ref___projection ((a target_t__ref)) us_rep2 (target_t__content
                                                                   a))

(declare-fun curve_index_from_location (Int) Int)

(declare-fun curve_index_from_location__function_guard (Int Int) Bool)

;; curve_index_from_location__post_axiom
  (assert
  (forall ((d Int))
  (! (=> (and (dynamic_invariant1 d true true true true) (<= d 5000))
     (dynamic_invariant4 (curve_index_from_location d) true false true true)) :pattern (
  (curve_index_from_location d)) )))

(declare-const target us_rep2)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const end_point Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

;; end_point__def_axiom
  (assert
  (= end_point (curve_index_from_location
               (to_rep1
               (rec__deceleration_curve__target_t__location
               (us_split_fields5 target))))))

(declare-const fliteral4 t)

;; fliteral_axiom
  (assert (and (tqtisFinite fliteral4) (= (tqtreal fliteral4) 500.0)))

;; maximum_valid_speed__def_axiom
  (assert (= maximum_valid_speed (m_per_s_from_km_per_h fliteral4)))

(declare-sort speed_km_per_h_t 0)

(define-fun bool_eq8 ((x t) (y t)) Bool (ite (eq x y) true false))

(declare-fun user_eq10 (speed_km_per_h_t speed_km_per_h_t) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE7 (t) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) t)

(declare-const dummy10 speed_km_per_h_t)

(declare-datatypes ()
((speed_km_per_h_t__ref
 (mk_speed_km_per_h_t__ref (speed_km_per_h_t__content speed_km_per_h_t)))))
(define-fun speed_km_per_h_t__ref___projection ((a speed_km_per_h_t__ref)) speed_km_per_h_t
  (speed_km_per_h_t__content a))

(define-fun dynamic_invariant5 ((temp___expr_182 t) (temp___is_init_178 Bool)
  (temp___skip_constant_179 Bool) (temp___do_toplevel_180 Bool)
  (temp___do_typ_inv_181 Bool)) Bool (=>
                                     (or (= temp___is_init_178 true) (le
                                     (neg fliteral1) fliteral1)) (tqtisFinite
                                     temp___expr_182)))

(declare-fun is_valid_speed_km_per_h (t) Bool)

(declare-fun is_valid_speed_km_per_h__function_guard (Bool t) Bool)

;; is_valid_speed_km_per_h__post_axiom
  (assert true)

;; is_valid_speed_km_per_h__def_axiom
  (assert
  (forall ((speed t))
  (! (= (= (is_valid_speed_km_per_h speed) true)
     (and (le fliteral2 speed) (le speed fliteral4))) :pattern ((is_valid_speed_km_per_h
                                                                speed)) )))

;; m_per_s_from_km_per_h__post_axiom
  (assert
  (forall ((speed t))
  (! (=>
     (and (dynamic_invariant5 speed true true true true)
     (= (is_valid_speed_km_per_h speed) true)) (dynamic_invariant
     (m_per_s_from_km_per_h speed) true false true true)) :pattern ((m_per_s_from_km_per_h
                                                                    speed)) )))

(declare-const fliteral5 t)

;; fliteral_axiom
  (assert (and (tqtisFinite fliteral5) (= (tqtreal fliteral5) 1000.0)))

(declare-const fliteral6 t)

;; fliteral_axiom
  (assert (and (tqtisFinite fliteral6) (= (tqtreal fliteral6) 3600.0)))

;; m_per_s_from_km_per_h__def_axiom
  (assert
  (forall ((speed t))
  (! (=> (dynamic_invariant5 speed true true true true)
     (= (m_per_s_from_km_per_h speed) (div1 RNE1 (mul RNE1 speed fliteral5)
                                      fliteral6))) :pattern ((m_per_s_from_km_per_h
                                                             speed)) )))

(declare-fun is_valid_speed (t) Bool)

(declare-fun is_valid_speed__function_guard (Bool t) Bool)

;; is_valid_speed__post_axiom
  (assert true)

;; is_valid_speed__def_axiom
  (assert
  (forall ((speed t))
  (! (= (= (is_valid_speed speed) true)
     (and (le fliteral2 speed) (le speed (m_per_s_from_km_per_h fliteral4)))) :pattern (
  (is_valid_speed speed)) )))

(declare-sort num_delimiters_range 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq11 (num_delimiters_range num_delimiters_range) Bool)

(declare-const dummy11 num_delimiters_range)

(declare-datatypes ()
((num_delimiters_range__ref
 (mk_num_delimiters_range__ref
 (num_delimiters_range__content num_delimiters_range)))))
(define-fun num_delimiters_range__ref___projection ((a num_delimiters_range__ref)) num_delimiters_range
  (num_delimiters_range__content a))

(declare-fun to_rep2 (num_delimiters_range) Int)

(declare-fun of_rep2 (Int) num_delimiters_range)

;; inversion_axiom
  (assert
  (forall ((x num_delimiters_range))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x num_delimiters_range)) (! (in_range6
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range6 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-fun to_rep3 (float) t)

(declare-fun of_rep3 (t) float)

;; inversion_axiom
  (assert
  (forall ((x float))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x float)) (! (tqtisFinite (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x t))
  (! (=> (tqtisFinite x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                                (of_rep3 x))) )))

(declare-sort function_range 0)

(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq12 (function_range function_range) Bool)

(declare-const dummy12 function_range)

(declare-datatypes ()
((function_range__ref
 (mk_function_range__ref (function_range__content function_range)))))
(define-fun function_range__ref___projection ((a function_range__ref)) function_range
  (function_range__content a))

(declare-fun to_rep4 (function_range) Int)

(declare-fun of_rep4 (Int) function_range)

;; inversion_axiom
  (assert
  (forall ((x function_range))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x function_range)) (! (in_range7
  (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range7 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(declare-datatypes ()
((us_split_fields6
 (mk___split_fields3
 (rec__step_function__delimiter_entry__delimiter function_range)(rec__step_function__delimiter_entry__value float)))))
(define-fun us_split_fields_Delimiter__projection ((a us_split_fields6)) function_range
  (rec__step_function__delimiter_entry__delimiter a))

(declare-datatypes ()
((us_split_fields__ref3
 (mk___split_fields__ref3 (us_split_fields__content3 us_split_fields6)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref3)) us_split_fields6
  (us_split_fields__content3 a))

(declare-datatypes ()
((us_rep3 (mk___rep3 (us_split_fields7 us_split_fields6)))))
(define-fun us_rep___projection ((a us_rep3)) us_split_fields6 (us_split_fields7
                                                               a))

(define-fun bool_eq9 ((a us_rep3)
  (b us_rep3)) Bool (ite (and
                         (= (to_rep4
                            (rec__step_function__delimiter_entry__delimiter
                            (us_split_fields7 a))) (to_rep4
                                                   (rec__step_function__delimiter_entry__delimiter
                                                   (us_split_fields7 b))))
                         (= (to_rep3
                            (rec__step_function__delimiter_entry__value
                            (us_split_fields7 a))) (to_rep3
                                                   (rec__step_function__delimiter_entry__value
                                                   (us_split_fields7 b)))))
                    true false))

(declare-const value__size4 Int)

(declare-fun object__size4 (us_rep3) Int)

(declare-const value__alignment4 Int)

(declare-fun object__alignment4 (us_rep3) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__size4 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__alignment4 a))))

(declare-const step_function__delimiter_entry__delimiter__first__bit Int)

(declare-const step_function__delimiter_entry__delimiter__last__bit Int)

(declare-const step_function__delimiter_entry__delimiter__position Int)

;; step_function__delimiter_entry__delimiter__first__bit_axiom
  (assert (<= 0 step_function__delimiter_entry__delimiter__first__bit))

;; step_function__delimiter_entry__delimiter__last__bit_axiom
  (assert
  (< step_function__delimiter_entry__delimiter__first__bit step_function__delimiter_entry__delimiter__last__bit))

;; step_function__delimiter_entry__delimiter__position_axiom
  (assert (<= 0 step_function__delimiter_entry__delimiter__position))

(declare-const step_function__delimiter_entry__value__first__bit Int)

(declare-const step_function__delimiter_entry__value__last__bit Int)

(declare-const step_function__delimiter_entry__value__position Int)

;; step_function__delimiter_entry__value__first__bit_axiom
  (assert (<= 0 step_function__delimiter_entry__value__first__bit))

;; step_function__delimiter_entry__value__last__bit_axiom
  (assert
  (< step_function__delimiter_entry__value__first__bit step_function__delimiter_entry__value__last__bit))

;; step_function__delimiter_entry__value__position_axiom
  (assert (<= 0 step_function__delimiter_entry__value__position))

(declare-fun user_eq13 (us_rep3 us_rep3) Bool)

(declare-const dummy13 us_rep3)

(declare-datatypes ()
((delimiter_entry__ref
 (mk_delimiter_entry__ref (delimiter_entry__content us_rep3)))))
(define-fun delimiter_entry__ref___projection ((a delimiter_entry__ref)) us_rep3
  (delimiter_entry__content a))

(declare-datatypes ()
((map__ref1 (mk_map__ref1 (map__content1 (Array Int us_rep3))))))
(declare-fun slide1 ((Array Int us_rep3) Int Int) (Array Int us_rep3))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep3)))
  (forall ((first Int))
  (! (= (slide1 a first first) a) :pattern ((slide1 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep3)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide1 a old_first new_first) i)) ))))))

(define-fun bool_eq10 ((a (Array Int us_rep3)) (a__first Int) (a__last Int)
  (b (Array Int us_rep3)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_154 Int))
                           (=>
                           (and (<= a__first temp___idx_154)
                           (<= temp___idx_154 a__last))
                           (= (bool_eq9 (select a temp___idx_154)
                              (select b (+ (- b__first a__first) temp___idx_154))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep3)) (b (Array Int us_rep3)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq10 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_154 Int))
  (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last))
  (= (bool_eq9 (select a temp___idx_154)
     (select b (+ (- b__first a__first) temp___idx_154))) true))))))))

(declare-const dummy14 (Array Int us_rep3))

(declare-const value__size5 Int)

(declare-fun object__size5 ((Array Int us_rep3)) Int)

(declare-const value__component__size1 Int)

(declare-fun object__component__size1 ((Array Int us_rep3)) Int)

(declare-const value__alignment5 Int)

(declare-fun object__alignment5 ((Array Int us_rep3)) Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (forall ((a (Array Int us_rep3))) (<= 0 (object__size5 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int us_rep3))) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment5))

;; object__alignment_axiom
  (assert (forall ((a (Array Int us_rep3))) (<= 0 (object__alignment5 a))))

(declare-fun user_eq14 ((Array Int us_rep3) (Array Int us_rep3)) Bool)

(declare-datatypes ()
((us_split_fields8
 (mk___split_fields4
 (rec__step_function__step_function_t__number_of_delimiters num_delimiters_range)(rec__step_function__step_function_t__step (Array Int us_rep3))))))
(define-fun us_split_fields_Number_Of_Delimiters__projection ((a us_split_fields8)) num_delimiters_range
  (rec__step_function__step_function_t__number_of_delimiters a))

(define-fun us_split_fields_Step__projection ((a us_split_fields8)) (Array Int us_rep3)
  (rec__step_function__step_function_t__step a))

(declare-datatypes ()
((us_split_fields__ref4
 (mk___split_fields__ref4 (us_split_fields__content4 us_split_fields8)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref4)) us_split_fields8
  (us_split_fields__content4 a))

(declare-datatypes ()
((us_rep4 (mk___rep4 (us_split_fields9 us_split_fields8)))))
(define-fun us_rep___2__projection ((a us_rep4)) us_split_fields8 (us_split_fields9
                                                                  a))

(define-fun bool_eq11 ((a us_rep4)
  (b us_rep4)) Bool (ite (and
                         (= (to_rep2
                            (rec__step_function__step_function_t__number_of_delimiters
                            (us_split_fields9 a))) (to_rep2
                                                   (rec__step_function__step_function_t__number_of_delimiters
                                                   (us_split_fields9 b))))
                         (= (bool_eq10
                            (rec__step_function__step_function_t__step
                            (us_split_fields9 a)) 0 10
                            (rec__step_function__step_function_t__step
                            (us_split_fields9 b)) 0 10) true))
                    true false))

(declare-const value__size6 Int)

(declare-fun object__size6 (us_rep4) Int)

(declare-const value__alignment6 Int)

(declare-fun object__alignment6 (us_rep4) Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert (forall ((a us_rep4)) (<= 0 (object__size6 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment6))

;; object__alignment_axiom
  (assert (forall ((a us_rep4)) (<= 0 (object__alignment6 a))))

(declare-const step_function__step_function_t__number_of_delimiters__first__bit Int)

(declare-const step_function__step_function_t__number_of_delimiters__last__bit Int)

(declare-const step_function__step_function_t__number_of_delimiters__position Int)

;; step_function__step_function_t__number_of_delimiters__first__bit_axiom
  (assert
  (<= 0 step_function__step_function_t__number_of_delimiters__first__bit))

;; step_function__step_function_t__number_of_delimiters__last__bit_axiom
  (assert
  (< step_function__step_function_t__number_of_delimiters__first__bit
  step_function__step_function_t__number_of_delimiters__last__bit))

;; step_function__step_function_t__number_of_delimiters__position_axiom
  (assert
  (<= 0 step_function__step_function_t__number_of_delimiters__position))

(declare-const step_function__step_function_t__step__first__bit Int)

(declare-const step_function__step_function_t__step__last__bit Int)

(declare-const step_function__step_function_t__step__position Int)

;; step_function__step_function_t__step__first__bit_axiom
  (assert (<= 0 step_function__step_function_t__step__first__bit))

;; step_function__step_function_t__step__last__bit_axiom
  (assert
  (< step_function__step_function_t__step__first__bit step_function__step_function_t__step__last__bit))

;; step_function__step_function_t__step__position_axiom
  (assert (<= 0 step_function__step_function_t__step__position))

(declare-fun user_eq15 (us_rep4 us_rep4) Bool)

(declare-const dummy15 us_rep4)

(declare-datatypes ()
((step_function_t__ref
 (mk_step_function_t__ref (step_function_t__content us_rep4)))))
(define-fun step_function_t__ref___projection ((a step_function_t__ref)) us_rep4
  (step_function_t__content a))

(declare-fun get_value (us_rep4 Int) t)

(declare-fun get_value__function_guard (t us_rep4 Int) Bool)

(declare-fun is_valid_deceleration_model (us_rep4) Bool)

(declare-fun is_valid_deceleration_model__function_guard (Bool us_rep4) Bool)

(declare-const a_brake_emergency_model us_rep4)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-fun a_brake_emergency (t Int) t)

(declare-fun a_brake_emergency__function_guard (t t Int) Bool)

;; a_brake_emergency__post_axiom
  (assert
  (forall ((v t))
  (forall ((d Int))
  (! (=>
     (and
     (and (dynamic_invariant v true true true true) (dynamic_invariant1 d
     true true true true))
     (and (= (is_valid_deceleration_model a_brake_emergency_model) true)
     (= (is_valid_speed v) true)))
     (let ((result (a_brake_emergency v d)))
     (and (eq result (get_value a_brake_emergency_model (to_int1 RNA1 v)))
     (dynamic_invariant3 result true false true true)))) :pattern ((a_brake_emergency
                                                                   v d)) ))))

(declare-fun kdry_rst (t) t)

(declare-fun kdry_rst__function_guard (t t) Bool)

(declare-fun kwet_rst (t) t)

(declare-fun kwet_rst__function_guard (t t) Bool)

;; a_brake_safe__post_axiom
  (assert
  (forall ((v t))
  (forall ((d Int))
  (! (=>
     (and (dynamic_invariant v true true true true) (dynamic_invariant1 d
     true true true true)) (dynamic_invariant3 (a_brake_safe v d) true false
     true true)) :pattern ((a_brake_safe v d)) ))))

;; a_brake_safe__def_axiom
  (assert
  (forall ((v t))
  (forall ((d Int))
  (! (=>
     (and (dynamic_invariant v true true true true) (dynamic_invariant1 d
     true true true true))
     (= (a_brake_safe v d) (mul RNE1
                           (mul RNE1 (kdry_rst v)
                           (add RNE1 (kwet_rst v)
                           (mul RNE1 fliteral2
                           (sub RNE1 fliteral (kwet_rst v)))))
                           (a_brake_emergency v d)))) :pattern ((a_brake_safe
                                                                v d)) ))))

(define-fun dynamic_invariant6 ((temp___expr_237 Int)
  (temp___is_init_233 Bool) (temp___skip_constant_234 Bool)
  (temp___do_toplevel_235 Bool)
  (temp___do_typ_inv_236 Bool)) Bool (=>
                                     (or (= temp___is_init_233 true)
                                     (<= 0 10)) (in_range6 temp___expr_237)))

(define-fun dynamic_invariant7 ((temp___expr_244 Int)
  (temp___is_init_240 Bool) (temp___skip_constant_241 Bool)
  (temp___do_toplevel_242 Bool)
  (temp___do_typ_inv_243 Bool)) Bool (=>
                                     (or (= temp___is_init_240 true)
                                     (<= 0 2147483647)) (in_range7
                                     temp___expr_244)))

(declare-fun is_valid (us_rep4) Bool)

(declare-fun is_valid__function_guard (Bool us_rep4) Bool)

;; is_valid__post_axiom
  (assert true)

;; is_valid__def_axiom
  (assert
  (forall ((sfun us_rep4))
  (! (= (= (is_valid sfun) true)
     (and
     (= (to_rep4
        (rec__step_function__delimiter_entry__delimiter
        (us_split_fields7
        (let ((temp___287 (rec__step_function__step_function_t__step
                          (us_split_fields9 sfun))))
        (select temp___287 0))))) 0)
     (forall ((i Int))
     (=>
     (and (<= 0 i)
     (<= i (- (to_rep2
              (rec__step_function__step_function_t__number_of_delimiters
              (us_split_fields9 sfun))) 1)))
     (< (to_rep4
        (rec__step_function__delimiter_entry__delimiter
        (us_split_fields7
        (let ((temp___289 (rec__step_function__step_function_t__step
                          (us_split_fields9 sfun))))
        (select temp___289 i))))) (to_rep4
                                  (rec__step_function__delimiter_entry__delimiter
                                  (us_split_fields7
                                  (let ((temp___288 (rec__step_function__step_function_t__step
                                                    (us_split_fields9 sfun))))
                                  (select temp___288 (+ i 1))))))))))) :pattern (
  (is_valid sfun)) )))

(declare-fun has_same_delimiters (us_rep4 us_rep4) Bool)

(declare-fun has_same_delimiters__function_guard (Bool us_rep4 us_rep4) Bool)

;; has_same_delimiters__post_axiom
  (assert true)

;; has_same_delimiters__def_axiom
  (assert
  (forall ((sfun1 us_rep4) (sfun2 us_rep4))
  (! (= (= (has_same_delimiters sfun1 sfun2) true)
     (and
     (= (to_rep2
        (rec__step_function__step_function_t__number_of_delimiters
        (us_split_fields9 sfun1))) (to_rep2
                                   (rec__step_function__step_function_t__number_of_delimiters
                                   (us_split_fields9 sfun2))))
     (forall ((i Int))
     (=>
     (and (<= 1 i)
     (<= i (to_rep2
           (rec__step_function__step_function_t__number_of_delimiters
           (us_split_fields9 sfun1)))))
     (= (to_rep4
        (rec__step_function__delimiter_entry__delimiter
        (us_split_fields7
        (let ((temp___296 (rec__step_function__step_function_t__step
                          (us_split_fields9 sfun1))))
        (select temp___296 i))))) (to_rep4
                                  (rec__step_function__delimiter_entry__delimiter
                                  (us_split_fields7
                                  (let ((temp___297 (rec__step_function__step_function_t__step
                                                    (us_split_fields9 sfun2))))
                                  (select temp___297 i)))))))))) :pattern (
  (has_same_delimiters sfun1 sfun2)) )))

;; get_value__post_axiom
  (assert
  (forall ((sfun us_rep4))
  (forall ((x Int))
  (! (=>
     (and (dynamic_invariant7 x true true true true)
     (= (is_valid sfun) true))
     (let ((result (get_value sfun x)))
     (and
     (or
     (exists ((i Int))
     (and
     (and (<= 0 i)
     (<= i (- (to_rep2
              (rec__step_function__step_function_t__number_of_delimiters
              (us_split_fields9 sfun))) 1)))
     (and
     (and
     (<= (to_rep4
         (rec__step_function__delimiter_entry__delimiter
         (us_split_fields7
         (let ((temp___304 (rec__step_function__step_function_t__step
                           (us_split_fields9 sfun))))
         (select temp___304 i))))) x)
     (< x (to_rep4
          (rec__step_function__delimiter_entry__delimiter
          (us_split_fields7
          (let ((temp___305 (rec__step_function__step_function_t__step
                            (us_split_fields9 sfun))))
          (select temp___305 (+ i 1))))))))
     (eq result
     (to_rep3
     (rec__step_function__delimiter_entry__value
     (us_split_fields7
     (let ((temp___306 (rec__step_function__step_function_t__step
                       (us_split_fields9 sfun))))
     (select temp___306 i)))))))))
     (and
     (<= (to_rep4
         (rec__step_function__delimiter_entry__delimiter
         (us_split_fields7
         (let ((temp___307 (rec__step_function__step_function_t__step
                           (us_split_fields9 sfun))))
         (select temp___307 (to_rep2
                            (rec__step_function__step_function_t__number_of_delimiters
                            (us_split_fields9 sfun)))))))) x)
     (eq result
     (to_rep3
     (rec__step_function__delimiter_entry__value
     (us_split_fields7
     (let ((temp___308 (rec__step_function__step_function_t__step
                       (us_split_fields9 sfun))))
     (select temp___308 (to_rep2
                        (rec__step_function__step_function_t__number_of_delimiters
                        (us_split_fields9 sfun)))))))))))
     (dynamic_invariant2 result true false true true)))) :pattern ((get_value
                                                                   sfun x)) ))))

;; is_valid_deceleration_model__post_axiom
  (assert true)

;; is_valid_deceleration_model__def_axiom
  (assert
  (forall ((s us_rep4))
  (! (= (= (is_valid_deceleration_model s) true)
     (and (= (is_valid s) true)
     (<= (to_rep2
         (rec__step_function__step_function_t__number_of_delimiters
         (us_split_fields9 s))) 6))) :pattern ((is_valid_deceleration_model
                                               s)) )))

(declare-fun temp___155 (us_rep3 us_rep3) (Array Int us_rep3))

;; a_brake_emergency_model__def_axiom
  (assert
  (= a_brake_emergency_model (mk___rep4
                             (mk___split_fields4 (of_rep2 0)
                             (temp___155
                             (mk___rep3
                             (mk___split_fields3 (of_rep4 0)
                             (of_rep3 fliteral)))
                             (mk___rep3
                             (mk___split_fields3 (of_rep4 0)
                             (of_rep3 fliteral2))))))))

(declare-const kdry_rst_model us_rep4)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-fun temp___160 (us_rep3 us_rep3) (Array Int us_rep3))

;; kdry_rst_model__def_axiom
  (assert
  (= kdry_rst_model (mk___rep4
                    (mk___split_fields4 (of_rep2 0)
                    (temp___160
                    (mk___rep3
                    (mk___split_fields3 (of_rep4 0) (of_rep3 fliteral)))
                    (mk___rep3
                    (mk___split_fields3 (of_rep4 0) (of_rep3 fliteral2))))))))

(declare-const kwet_rst_model us_rep4)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-fun temp___165 (us_rep3 us_rep3) (Array Int us_rep3))

;; kwet_rst_model__def_axiom
  (assert
  (= kwet_rst_model (mk___rep4
                    (mk___split_fields4 (of_rep2 0)
                    (temp___165
                    (mk___rep3
                    (mk___split_fields3 (of_rep4 0) (of_rep3 fliteral)))
                    (mk___rep3
                    (mk___split_fields3 (of_rep4 0) (of_rep3 fliteral2))))))))

(declare-fun is_valid_kdry_rst (tuple0) Bool)

(declare-fun is_valid_kdry_rst__function_guard (Bool tuple0) Bool)

;; is_valid_kdry_rst__post_axiom
  (assert true)

;; is_valid_kdry_rst__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (= (= (is_valid_kdry_rst us_void_param) true)
     (and (= (is_valid kdry_rst_model) true)
     (= (has_same_delimiters kdry_rst_model a_brake_emergency_model) true))) :pattern (
  (is_valid_kdry_rst us_void_param)) )))

;; kdry_rst__post_axiom
  (assert
  (forall ((v t))
  (! (=>
     (and (dynamic_invariant v true true true true)
     (= (is_valid_kdry_rst Tuple0) true))
     (let ((result (kdry_rst v)))
     (and (eq result (get_value kdry_rst_model (to_int1 RNA1 v)))
     (dynamic_invariant2 result true false true true)))) :pattern ((kdry_rst
                                                                   v)) )))

(declare-fun is_valid_kwet_rst (tuple0) Bool)

(declare-fun is_valid_kwet_rst__function_guard (Bool tuple0) Bool)

;; is_valid_kwet_rst__post_axiom
  (assert true)

;; is_valid_kwet_rst__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (= (= (is_valid_kwet_rst us_void_param) true)
     (and (= (is_valid kwet_rst_model) true)
     (= (has_same_delimiters kwet_rst_model a_brake_emergency_model) true))) :pattern (
  (is_valid_kwet_rst us_void_param)) )))

;; kwet_rst__post_axiom
  (assert
  (forall ((v t))
  (! (=>
     (and (dynamic_invariant v true true true true)
     (= (is_valid_kwet_rst Tuple0) true))
     (let ((result (kwet_rst v)))
     (and (eq result (get_value kwet_rst_model (to_int1 RNA1 v)))
     (dynamic_invariant2 result true false true true)))) :pattern ((kwet_rst
                                                                   v)) )))

;; a_gradient__post_axiom
  (assert
  (forall ((d Int))
  (! (=> (dynamic_invariant1 d true true true true) (dynamic_invariant3
     (a_gradient d) true false true true)) :pattern ((a_gradient d)) )))

;; a_gradient__def_axiom
  (assert
  (forall ((d Int))
  (! (=> (dynamic_invariant1 d true true true true)
     (= (a_gradient d) fliteral2)) :pattern ((a_gradient d)) )))

;; def_axiom
  (assert
  (forall ((temp___157 us_rep3) (temp___158 us_rep3))
  (let ((temp___156 (temp___155 temp___157 temp___158)))
  (forall ((temp___159 Int))
  (ite (= temp___159 0) (= (select temp___156 temp___159) temp___157)
  (= (select temp___156 temp___159) temp___158))))))

;; def_axiom
  (assert
  (forall ((temp___162 us_rep3) (temp___163 us_rep3))
  (let ((temp___161 (temp___160 temp___162 temp___163)))
  (forall ((temp___164 Int))
  (ite (= temp___164 0) (= (select temp___161 temp___164) temp___162)
  (= (select temp___161 temp___164) temp___163))))))

;; def_axiom
  (assert
  (forall ((temp___167 us_rep3) (temp___168 us_rep3))
  (let ((temp___166 (temp___165 temp___167 temp___168)))
  (forall ((temp___169 Int))
  (ite (= temp___169 0) (= (select temp___166 temp___169) temp___167)
  (= (select temp___166 temp___169) temp___168))))))

(declare-const fliteral7 t)

;; fliteral_axiom
  (assert (and (tqtisFinite fliteral7) (= (tqtreal fliteral7) 4.0)))

(declare-const fliteral8 t)

;; fliteral_axiom
  (assert (and (tqtisFinite fliteral8) (= (tqtreal fliteral8) 5.0)))

(declare-const braking_curve__split_fields (Array Int us_rep))

(declare-const braking_curve__split_fields1 distance_t)

(declare-const speed t)

(declare-const location Int)

(declare-const i Int)

(declare-const deceleration_curve__curve_from_target__end_point__assume Int)

(declare-const o distance_t)

(declare-const o1 (Array Int us_rep))

(declare-const o2 distance_t)

(declare-const temp___417 (Array Int us_rep))

(declare-const temp___4171 distance_t)

(declare-const o3 distance_t)

(declare-const o4 distance_t)

(declare-const o5 speed_t)

(declare-const o6 distance_t)

(declare-const o7 speed_t)

(declare-const o8 (Array Int us_rep))

(declare-const o9 (Array Int us_rep))

(declare-const o10 distance_t)

(declare-const temp___422 (Array Int us_rep))

(declare-const temp___4221 distance_t)

(declare-const o11 speed_t)

(declare-const o12 distance_t)

(declare-const o13 speed_t)

(declare-const o14 distance_t)

(declare-const o15 speed_t)

(declare-const o16 (Array Int us_rep))

(declare-const o17 (Array Int us_rep))

(declare-const o18 distance_t)

(declare-const temp___427 (Array Int us_rep))

(declare-const temp___4271 distance_t)

(declare-const o19 t)

(declare-const o20 t)

(declare-const o21 t)

(declare-const o22 t)

(declare-const o23 t)

(declare-const o24 t)

(declare-const o25 t)

(declare-const result t)

(declare-const speed1 t)

(declare-const result1 int__ref)

(declare-const location1 Int)

(declare-const result2 us_split_fields__ref1)

(declare-const braking_curve__split_fields2 us_split_fields2)

(declare-const result3 us_split_fields__ref1)

(declare-const braking_curve__split_fields3 us_split_fields2)

(declare-const result4 us_split_fields__ref1)

(declare-const braking_curve__split_fields4 us_split_fields2)

(declare-const result5 int__ref)

(declare-const i1 Int)

(declare-const braking_curve__split_fields5 us_split_fields2)

(declare-const speed2 t)

(declare-const location2 Int)

(declare-const i2 Int)

;; H
  (assert (tqtisFinite maximum_valid_speed))

;; H
  (assert (= (m_per_s_from_km_per_h fliteral4) maximum_valid_speed))

;; H
  (assert
  (<= (to_rep1
      (rec__deceleration_curve__target_t__location (us_split_fields5 target))) 5000))

;; H
  (assert (= result speed))

;; H
  (assert
  (= speed1 (to_rep
            (rec__deceleration_curve__target_t__speed
            (us_split_fields5 target)))))

;; H
  (assert (tqtisFinite speed1))

;; H
  (assert (= result1 (mk_int__ref location)))

;; H
  (assert
  (= location1 (to_rep1
               (rec__deceleration_curve__target_t__location
               (us_split_fields5 target)))))

;; H
  (assert (in_range3 location1))

;; H
  (assert
  (and
  (= deceleration_curve__curve_from_target__end_point__assume (curve_index_from_location
                                                              (to_rep1
                                                              (rec__deceleration_curve__target_t__location
                                                              (us_split_fields5
                                                              target)))))
  (in_range5 deceleration_curve__curve_from_target__end_point__assume)))

;; H
  (assert
  (= deceleration_curve__curve_from_target__end_point__assume end_point))

;; H
  (assert (in_range5 end_point))

;; H
  (assert
  (= (to_rep1 o) (to_rep1
                 (rec__deceleration_curve__target_t__location
                 (us_split_fields5 target)))))

;; H
  (assert (= braking_curve__split_fields o1))

;; H
  (assert (= o o2))

;; H
  (assert (= temp___417 o1))

;; H
  (assert (= temp___4171 o2))

;; H
  (assert
  (= result2 (mk___split_fields__ref1
             (mk___split_fields1 braking_curve__split_fields
             braking_curve__split_fields1))))

;; H
  (assert
  (= braking_curve__split_fields2 (mk___split_fields1 temp___417 temp___4171)))

;; H
  (assert (= (to_rep1 o3) location1))

;; H
  (assert (= o3 o4))

;; H
  (assert
  (= (rec__deceleration_curve__braking_curve_entry__speed
     (us_split_fields1
     (select (rec__deceleration_curve__braking_curve_t__curve
             braking_curve__split_fields2) end_point))) o5))

;; H
  (assert (= o6 o4))

;; H
  (assert (= o7 o5))

;; H
  (assert
  (= o8 (store (rec__deceleration_curve__braking_curve_t__curve
               braking_curve__split_fields2) end_point (mk___rep
                                                       (mk___split_fields
                                                       o6 o7)))))

;; H
  (assert (= o8 o9))

;; H
  (assert
  (= (rec__deceleration_curve__braking_curve_t__end_point
     braking_curve__split_fields2) o10))

;; H
  (assert (= temp___422 o9))

;; H
  (assert (= temp___4221 o10))

;; H
  (assert (= result3 (mk___split_fields__ref1 braking_curve__split_fields2)))

;; H
  (assert
  (= braking_curve__split_fields3 (mk___split_fields1 temp___422 temp___4221)))

;; H
  (assert (= (to_rep o11) speed1))

;; H
  (assert
  (= (rec__deceleration_curve__braking_curve_entry__location
     (us_split_fields1
     (select (rec__deceleration_curve__braking_curve_t__curve
             braking_curve__split_fields3) end_point))) o12))

;; H
  (assert (= o11 o13))

;; H
  (assert (= o14 o12))

;; H
  (assert (= o15 o13))

;; H
  (assert
  (= o16 (store (rec__deceleration_curve__braking_curve_t__curve
                braking_curve__split_fields3) end_point (mk___rep
                                                        (mk___split_fields
                                                        o14 o15)))))

;; H
  (assert (= o16 o17))

;; H
  (assert
  (= (rec__deceleration_curve__braking_curve_t__end_point
     braking_curve__split_fields3) o18))

;; H
  (assert (= temp___427 o17))

;; H
  (assert (= temp___4271 o18))

;; H
  (assert (= result4 (mk___split_fields__ref1 braking_curve__split_fields3)))

;; H
  (assert
  (= braking_curve__split_fields4 (mk___split_fields1 temp___427 temp___4271)))

;; H
  (assert (= result5 (mk_int__ref i)))

;; H
  (assert (= i1 (- end_point 1)))

;; H
  (assert (<= 0 i1))

;; H
  (assert (<= i1 (- end_point 1)))

;; H
  (assert
  (and
  (and
  (and (=> (<= 0 2147483647) (in_range3 location2))
  (and
  (forall ((temp___440 Int))
  (=> (and (<= 0 temp___440) (<= temp___440 1000))
  (=> (<= temp___440 i2)
  (= (select (rec__deceleration_curve__braking_curve_t__curve
             braking_curve__split_fields5) temp___440) (select (rec__deceleration_curve__braking_curve_t__curve
                                                               braking_curve__split_fields4) temp___440)))))
  (= (rec__deceleration_curve__braking_curve_t__end_point
     braking_curve__split_fields5) (rec__deceleration_curve__braking_curve_t__end_point
                                   braking_curve__split_fields4))))
  (=> (le (neg fliteral1) fliteral1) (tqtisFinite speed2)))
  (and (<= 0 i2) (<= i2 (- end_point 1)))))

;; H
  (assert
  (and (= o19 (a_safe speed2 location2))
  (and (in_range4 o19)
  (= o19 (add RNE1 (a_brake_safe speed2 location2) (a_gradient location2))))))

;; H
  (assert (= o20 (mul RNE1 fliteral7 o19)))

;; H
  (assert (and (= o21 o20) (tqtisFinite o20)))

;; H
  (assert (= o22 (mul RNE1 o21 fliteral8)))

;; H
  (assert (and (= o23 o22) (tqtisFinite o22)))

;; H
  (assert
  (and (= o24 (mul RNE1 speed2 speed2)) (tqtisFinite
  (mul RNE1 speed2 speed2))))

;; H
  (assert (= o25 (add RNE1 o24 o23)))

(assert
;; WP_parameter_def
 ;; File "deceleration_curve.ads", line 32, characters 0-0
  (not (tqtisFinite o25)))
(check-sat)
(exit)
