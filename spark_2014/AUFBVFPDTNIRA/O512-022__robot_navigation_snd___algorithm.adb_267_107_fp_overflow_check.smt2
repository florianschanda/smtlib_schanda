;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun pow2 (Int) Int)

(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                (fp.isPositive x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                 (fp.isNegative x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x)
                                            (fp.isPositive x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x)
                                             (fp.isNegative x)))

(declare-fun of_int (RoundingMode Int) Float32)

(declare-fun to_int1 (RoundingMode Float32) Int)

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y))
                    (and (fp.isNegative x) (fp.isNegative y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y))
                    (and (fp.isNegative x) (fp.isPositive y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z))
                    (=> (diff_sign x y) (fp.isNegative z))))

(define-fun sqr ((x Real)) Real (* x x))

(declare-fun sqrt (Real) Real)

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r))
                 (and (fp.isNegative x) (< r 0.0))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content Float32)))))
(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int1 ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort positive 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-const dummy1 positive)

(declare-datatypes ()
((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(declare-sort character 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-const dummy2 character)

(declare-datatypes ()
((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int
  Int) (Array Int character))

;; concat_def
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (character Int) (Array Int character))

;; singleton_def
  (assert
  (forall ((v character))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_78 Int))
                           (=>
                           (and (<= a__first temp___idx_78)
                           (<= temp___idx_78 a__last))
                           (= (to_rep (select a temp___idx_78)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_78)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_78 Int))
  (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last))
  (= (to_rep (select a temp___idx_78)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_78)))))))))))

(declare-fun compare ((Array Int character) Int Int (Array Int character) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun to_rep1 (integer) Int)

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-fun object__size ((Array Int character)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int character)) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-const dummy3 us_t)

(declare-fun to_string (us_image) us_t)

(declare-fun from_string (us_t) us_image)

(declare-datatypes ()
((string__ref (mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content
                                                            a))

(declare-sort float 0)

(declare-fun user_eq4 (float float) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE4 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Float32)

(declare-const dummy4 float)

(declare-datatypes () ((float__ref (mk_float__ref (float__content float)))))
(define-fun float__ref___projection ((a float__ref)) float (float__content a))

(declare-sort positive_float 0)

(define-fun in_range4 ((x Float32)) Bool (and (fp.isFinite32 x)
                                         (and
                                         (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x)
                                         (fp.leq x (fp #b0 #b11111110 #b11111111111111111111111)))))

(declare-fun user_eq5 (positive_float positive_float) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE5 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Float32)

(declare-const dummy5 positive_float)

(declare-datatypes ()
((positive_float__ref
 (mk_positive_float__ref (positive_float__content positive_float)))))
(define-fun positive_float__ref___projection ((a positive_float__ref)) positive_float
  (positive_float__content a))

(declare-fun to_rep2 (positive_float) Float32)

(declare-fun of_rep2 (Float32) positive_float)

;; inversion_axiom
  (assert
  (forall ((x positive_float))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x positive_float)) (! (in_range4
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Float32))
  (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-sort normalized2pi 0)

(define-fun in_range5 ((x Float32)) Bool (and (fp.isFinite32 x)
                                         (and
                                         (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x)
                                         (fp.leq x (fp #b0 #b10000001 #b10010010000111111011011)))))

(declare-fun user_eq6 (normalized2pi normalized2pi) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE6 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Float32)

(declare-const dummy6 normalized2pi)

(declare-datatypes ()
((normalized2pi__ref
 (mk_normalized2pi__ref (normalized2pi__content normalized2pi)))))
(define-fun normalized2pi__ref___projection ((a normalized2pi__ref)) normalized2pi
  (normalized2pi__content a))

(declare-fun to_rep3 (normalized2pi) Float32)

(declare-fun of_rep3 (Float32) normalized2pi)

;; inversion_axiom
  (assert
  (forall ((x normalized2pi))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x normalized2pi)) (! (in_range5
  (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Float32))
  (! (=> (in_range5 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields (rec__spaces__angles__angle__theta normalized2pi)))))
(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq2 ((a us_rep)
  (b us_rep)) Bool (ite (= (to_rep3
                           (rec__spaces__angles__angle__theta
                           (us_split_fields1 a))) (to_rep3
                                                  (rec__spaces__angles__angle__theta
                                                  (us_split_fields1 b))))
                   true false))

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-const spaces__angles__angle__theta__first__bit Int)

(declare-const spaces__angles__angle__theta__last__bit Int)

(declare-const spaces__angles__angle__theta__position Int)

;; spaces__angles__angle__theta__first__bit_axiom
  (assert (<= 0 spaces__angles__angle__theta__first__bit))

;; spaces__angles__angle__theta__last__bit_axiom
  (assert
  (< spaces__angles__angle__theta__first__bit spaces__angles__angle__theta__last__bit))

;; spaces__angles__angle__theta__position_axiom
  (assert (<= 0 spaces__angles__angle__theta__position))

(declare-fun user_eq7 (us_rep us_rep) Bool)

(declare-const dummy7 us_rep)

(declare-datatypes () ((angle__ref (mk_angle__ref (angle__content us_rep)))))
(define-fun angle__ref___projection ((a angle__ref)) us_rep (angle__content
                                                            a))

(define-fun dynamic_invariant ((temp___expr_51 Float32)
  (temp___is_init_48 Bool) (temp___skip_constant_49 Bool)
  (temp___do_toplevel_50 Bool)) Bool (=>
                                     (or (= temp___is_init_48 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                     (fp.isFinite32 temp___expr_51)))

(declare-fun ccwdiff (us_rep us_rep) Float32)

(declare-fun ccwdiff__function_guard (Float32 us_rep us_rep) Bool)

(define-fun dynamic_invariant1 ((temp___expr_82 us_t)
  (temp___is_init_79 Bool) (temp___skip_constant_80 Bool)
  (temp___do_toplevel_81 Bool)) Bool (=>
                                     (not (= temp___skip_constant_80 true))
                                     (dynamic_property 1 2147483647
                                     (first1 temp___expr_82)
                                     (last1 temp___expr_82))))

(declare-fun print (us_rep) us_t)

(declare-fun print__function_guard (us_t us_rep) Bool)

(declare-sort natural 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq8 (natural natural) Bool)

(declare-const dummy8 natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(declare-fun to_rep4 (natural) Int)

(declare-fun of_rep4 (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range6 (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range6 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(declare-fun to_rep5 (float) Float32)

(declare-fun of_rep5 (Float32) float)

;; inversion_axiom
  (assert
  (forall ((x float))
  (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)) )))

;; range_axiom
  (assert
  (forall ((x float))
  (! (fp.isFinite32 (to_rep5 x)) :pattern ((to_rep5 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Float32))
  (! (=> (fp.isFinite32 x) (= (to_rep5 (of_rep5 x)) x)) :pattern ((to_rep5
                                                                  (of_rep5 x))) )))

(declare-sort nonnegative_float 0)

(define-fun in_range7 ((x Float32)) Bool (and (fp.isFinite32 x)
                                         (and
                                         (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x)
                                         (fp.leq x (fp #b0 #b11111110 #b11111111111111111111111)))))

(declare-fun user_eq9 (nonnegative_float nonnegative_float) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE8 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Float32)

(declare-const dummy9 nonnegative_float)

(declare-datatypes ()
((nonnegative_float__ref
 (mk_nonnegative_float__ref (nonnegative_float__content nonnegative_float)))))
(define-fun nonnegative_float__ref___projection ((a nonnegative_float__ref)) nonnegative_float
  (nonnegative_float__content a))

(declare-fun to_rep6 (nonnegative_float) Float32)

(declare-fun of_rep6 (Float32) nonnegative_float)

;; inversion_axiom
  (assert
  (forall ((x nonnegative_float))
  (! (= (of_rep6 (to_rep6 x)) x) :pattern ((to_rep6 x)) )))

;; range_axiom
  (assert
  (forall ((x nonnegative_float)) (! (in_range7
  (to_rep6 x)) :pattern ((to_rep6 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Float32))
  (! (=> (in_range7 x) (= (to_rep6 (of_rep6 x)) x)) :pattern ((to_rep6
                                                              (of_rep6 x))) )))

(declare-sort unbounded_float 0)

(declare-fun user_eq10 (unbounded_float unbounded_float) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE9 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Float32)

(declare-const dummy10 unbounded_float)

(declare-datatypes ()
((unbounded_float__ref
 (mk_unbounded_float__ref (unbounded_float__content unbounded_float)))))
(define-fun unbounded_float__ref___projection ((a unbounded_float__ref)) unbounded_float
  (unbounded_float__content a))

(declare-fun to_rep7 (unbounded_float) Float32)

(declare-fun of_rep7 (Float32) unbounded_float)

;; inversion_axiom
  (assert
  (forall ((x unbounded_float))
  (! (= (of_rep7 (to_rep7 x)) x) :pattern ((to_rep7 x)) )))

;; range_axiom
  (assert
  (forall ((x unbounded_float))
  (! (fp.isFinite32 (to_rep7 x)) :pattern ((to_rep7 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Float32))
  (! (=> (fp.isFinite32 x) (= (to_rep7 (of_rep7 x)) x)) :pattern ((to_rep7
                                                                  (of_rep7 x))) )))

(declare-datatypes ()
((map__ref1 (mk_map__ref1 (map__content1 (Array Int nonnegative_float))))))
(declare-fun slide1 ((Array Int nonnegative_float) Int
  Int) (Array Int nonnegative_float))

;; slide_eq
  (assert
  (forall ((a (Array Int nonnegative_float)))
  (forall ((first2 Int))
  (! (= (slide1 a first2 first2) a) :pattern ((slide1 a first2 first2)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int nonnegative_float)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int nonnegative_float) Int Int
  (Array Int nonnegative_float) Int Int) (Array Int nonnegative_float))

;; concat_def
  (assert
  (forall ((a (Array Int nonnegative_float))
  (b (Array Int nonnegative_float)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 (nonnegative_float
  Int) (Array Int nonnegative_float))

;; singleton_def
  (assert
  (forall ((v nonnegative_float))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq3 ((a (Array Int nonnegative_float)) (a__first Int)
  (a__last Int) (b (Array Int nonnegative_float)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep6 (select a temp___idx_132)) (to_rep6
                                                                  (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int nonnegative_float))
  (b (Array Int nonnegative_float)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq3 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep6 (select a temp___idx_132)) (to_rep6
                                         (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-const dummy11 (Array Int nonnegative_float))

(declare-const value__size2 Int)

(declare-fun object__size2 ((Array Int nonnegative_float)) Int)

(declare-const value__component__size1 Int)

(declare-fun object__component__size1 ((Array Int nonnegative_float)) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 ((Array Int nonnegative_float)) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert
  (forall ((a (Array Int nonnegative_float))) (<= 0 (object__size2 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int nonnegative_float)))
  (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert
  (forall ((a (Array Int nonnegative_float))) (<= 0 (object__alignment2 a))))

(declare-fun user_eq11 ((Array Int nonnegative_float)
  (Array Int nonnegative_float)) Bool)

(declare-sort option 0)

(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)

(declare-fun user_eq12 (option option) Bool)

(declare-const dummy12 option)

(declare-datatypes ()
((option__ref (mk_option__ref (option__content option)))))
(define-fun option__ref___projection ((a option__ref)) option (option__content
                                                              a))

(declare-fun to_rep8 (option) Int)

(declare-fun of_rep8 (Int) option)

;; inversion_axiom
  (assert
  (forall ((x option))
  (! (= (of_rep8 (to_rep8 x)) x) :pattern ((to_rep8 x)) )))

;; range_axiom
  (assert
  (forall ((x option)) (! (in_range8 (to_rep8 x)) :pattern ((to_rep8 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range8 x) (= (to_rep8 (of_rep8 x)) x)) :pattern ((to_rep8
                                                              (of_rep8 x))) )))

(declare-datatypes ()
((us_split_discrs
 (mk___split_discrs (rec__robot_iface__speed_option__opt option)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) option
  (rec__robot_iface__speed_option__opt a))

(declare-datatypes ()
((us_split_discrs__ref
 (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1
 (rec__robot_iface__speed_option__modulus float)(rec__robot_iface__speed_option__angle float)))))
(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___4__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1
 (mk___rep1
 (us_split_discrs1 us_split_discrs)(us_split_fields3 us_split_fields2)(attr__constrained Bool)))))
(define-fun us_rep___4__projection ((a us_rep1)) us_split_discrs (us_split_discrs1
                                                                 a))

(define-fun us_rep___5__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                  a))

(define-fun us_rep___6__projection ((a us_rep1)) Bool (attr__constrained a))

(define-fun robot_iface__speed_option__modulus__pred ((a us_rep1)) Bool (=
  (to_rep8 (rec__robot_iface__speed_option__opt (us_split_discrs1 a))) 1))

(define-fun robot_iface__speed_option__angle__pred ((a us_rep1)) Bool (=
  (to_rep8 (rec__robot_iface__speed_option__opt (us_split_discrs1 a))) 1))

(define-fun bool_eq4 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (to_rep8
                            (rec__robot_iface__speed_option__opt
                            (us_split_discrs1 a))) (to_rep8
                                                   (rec__robot_iface__speed_option__opt
                                                   (us_split_discrs1 b))))
                         (and
                         (=> (robot_iface__speed_option__modulus__pred a)
                         (= (to_rep5
                            (rec__robot_iface__speed_option__modulus
                            (us_split_fields3 a))) (to_rep5
                                                   (rec__robot_iface__speed_option__modulus
                                                   (us_split_fields3 b)))))
                         (=> (robot_iface__speed_option__angle__pred a)
                         (= (to_rep5
                            (rec__robot_iface__speed_option__angle
                            (us_split_fields3 a))) (to_rep5
                                                   (rec__robot_iface__speed_option__angle
                                                   (us_split_fields3 b)))))))
                    true false))

(declare-const value__size3 Int)

(declare-fun object__size3 (us_rep1) Int)

(declare-const value__alignment3 Int)

(declare-fun object__alignment3 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment3 a))))

(declare-const robot_iface__speed_option__opt__first__bit Int)

(declare-const robot_iface__speed_option__opt__last__bit Int)

(declare-const robot_iface__speed_option__opt__position Int)

;; robot_iface__speed_option__opt__first__bit_axiom
  (assert (<= 0 robot_iface__speed_option__opt__first__bit))

;; robot_iface__speed_option__opt__last__bit_axiom
  (assert
  (< robot_iface__speed_option__opt__first__bit robot_iface__speed_option__opt__last__bit))

;; robot_iface__speed_option__opt__position_axiom
  (assert (<= 0 robot_iface__speed_option__opt__position))

(declare-const robot_iface__speed_option__modulus__first__bit Int)

(declare-const robot_iface__speed_option__modulus__last__bit Int)

(declare-const robot_iface__speed_option__modulus__position Int)

;; robot_iface__speed_option__modulus__first__bit_axiom
  (assert (<= 0 robot_iface__speed_option__modulus__first__bit))

;; robot_iface__speed_option__modulus__last__bit_axiom
  (assert
  (< robot_iface__speed_option__modulus__first__bit robot_iface__speed_option__modulus__last__bit))

;; robot_iface__speed_option__modulus__position_axiom
  (assert (<= 0 robot_iface__speed_option__modulus__position))

(declare-const robot_iface__speed_option__angle__first__bit Int)

(declare-const robot_iface__speed_option__angle__last__bit Int)

(declare-const robot_iface__speed_option__angle__position Int)

;; robot_iface__speed_option__angle__first__bit_axiom
  (assert (<= 0 robot_iface__speed_option__angle__first__bit))

;; robot_iface__speed_option__angle__last__bit_axiom
  (assert
  (< robot_iface__speed_option__angle__first__bit robot_iface__speed_option__angle__last__bit))

;; robot_iface__speed_option__angle__position_axiom
  (assert (<= 0 robot_iface__speed_option__angle__position))

(declare-fun user_eq13 (us_rep1 us_rep1) Bool)

(declare-const dummy13 us_rep1)

(declare-datatypes ()
((speed_option__ref (mk_speed_option__ref (speed_option__content us_rep1)))))
(define-fun speed_option__ref___projection ((a speed_option__ref)) us_rep1
  (speed_option__content a))

(declare-datatypes ()
((us_split_fields4
 (mk___split_fields2
 (rec__robot_iface__proxy__robot_radius positive_float)(rec__robot_iface__proxy__min_gap_width positive_float)(rec__robot_iface__proxy__obstacle_avoid_dist positive_float)(rec__robot_iface__proxy__max_speed positive_float)(rec__robot_iface__proxy__max_turn_rate positive_float)(rec__robot_iface__proxy__goal_position_tol nonnegative_float)(rec__robot_iface__proxy__goal_angle_tol nonnegative_float)(rec__robot_iface__proxy__goalx float)(rec__robot_iface__proxy__goaly float)(rec__robot_iface__proxy__goala float)(rec__robot_iface__proxy__scan_count natural)(rec__robot_iface__proxy__scan_res positive_float)(rec__robot_iface__proxy__max_range positive_float)(rec__robot_iface__proxy__scans (Array Int nonnegative_float))(rec__robot_iface__proxy__x unbounded_float)(rec__robot_iface__proxy__y unbounded_float)(rec__robot_iface__proxy__yaw unbounded_float)(rec__robot_iface__proxy__speed us_rep1)(rec__robot_iface__proxy__goal_reached Bool)))))
(define-fun us_split_fields_scan_Count__projection ((a us_split_fields4)) natural
  (rec__robot_iface__proxy__scan_count a))

(define-fun us_split_fields_scans__projection ((a us_split_fields4)) (Array Int nonnegative_float)
  (rec__robot_iface__proxy__scans a))

(define-fun us_split_fields_speed__projection ((a us_split_fields4)) us_rep1
  (rec__robot_iface__proxy__speed a))

(define-fun us_split_fields_goal_reached__projection ((a us_split_fields4)) Bool
  (rec__robot_iface__proxy__goal_reached a))

(declare-datatypes ()
((us_split_fields__ref2
 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___5__projection ((a us_split_fields__ref2)) us_split_fields4
  (us_split_fields__content2 a))

(declare-datatypes ()
((us_rep2 (mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep___7__projection ((a us_rep2)) us_split_fields4 (us_split_fields5
                                                                  a))

(define-fun bool_eq5 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (= (to_rep2
                            (rec__robot_iface__proxy__robot_radius
                            (us_split_fields5 a))) (to_rep2
                                                   (rec__robot_iface__proxy__robot_radius
                                                   (us_split_fields5 b))))
                         (= (to_rep2
                            (rec__robot_iface__proxy__min_gap_width
                            (us_split_fields5 a))) (to_rep2
                                                   (rec__robot_iface__proxy__min_gap_width
                                                   (us_split_fields5 b)))))
                         (= (to_rep2
                            (rec__robot_iface__proxy__obstacle_avoid_dist
                            (us_split_fields5 a))) (to_rep2
                                                   (rec__robot_iface__proxy__obstacle_avoid_dist
                                                   (us_split_fields5 b)))))
                         (= (to_rep2
                            (rec__robot_iface__proxy__max_speed
                            (us_split_fields5 a))) (to_rep2
                                                   (rec__robot_iface__proxy__max_speed
                                                   (us_split_fields5 b)))))
                         (= (to_rep2
                            (rec__robot_iface__proxy__max_turn_rate
                            (us_split_fields5 a))) (to_rep2
                                                   (rec__robot_iface__proxy__max_turn_rate
                                                   (us_split_fields5 b)))))
                         (= (to_rep6
                            (rec__robot_iface__proxy__goal_position_tol
                            (us_split_fields5 a))) (to_rep6
                                                   (rec__robot_iface__proxy__goal_position_tol
                                                   (us_split_fields5 b)))))
                         (= (to_rep6
                            (rec__robot_iface__proxy__goal_angle_tol
                            (us_split_fields5 a))) (to_rep6
                                                   (rec__robot_iface__proxy__goal_angle_tol
                                                   (us_split_fields5 b)))))
                         (= (to_rep5
                            (rec__robot_iface__proxy__goalx
                            (us_split_fields5 a))) (to_rep5
                                                   (rec__robot_iface__proxy__goalx
                                                   (us_split_fields5 b)))))
                         (= (to_rep5
                            (rec__robot_iface__proxy__goaly
                            (us_split_fields5 a))) (to_rep5
                                                   (rec__robot_iface__proxy__goaly
                                                   (us_split_fields5 b)))))
                         (= (to_rep5
                            (rec__robot_iface__proxy__goala
                            (us_split_fields5 a))) (to_rep5
                                                   (rec__robot_iface__proxy__goala
                                                   (us_split_fields5 b)))))
                         (= (to_rep4
                            (rec__robot_iface__proxy__scan_count
                            (us_split_fields5 a))) (to_rep4
                                                   (rec__robot_iface__proxy__scan_count
                                                   (us_split_fields5 b)))))
                         (= (to_rep2
                            (rec__robot_iface__proxy__scan_res
                            (us_split_fields5 a))) (to_rep2
                                                   (rec__robot_iface__proxy__scan_res
                                                   (us_split_fields5 b)))))
                         (= (to_rep2
                            (rec__robot_iface__proxy__max_range
                            (us_split_fields5 a))) (to_rep2
                                                   (rec__robot_iface__proxy__max_range
                                                   (us_split_fields5 b)))))
                         (= (bool_eq3
                            (rec__robot_iface__proxy__scans
                            (us_split_fields5 a)) 1 1000
                            (rec__robot_iface__proxy__scans
                            (us_split_fields5 b)) 1 1000) true))
                         (= (to_rep7
                            (rec__robot_iface__proxy__x (us_split_fields5 a)))
                         (to_rep7
                         (rec__robot_iface__proxy__x (us_split_fields5 b)))))
                         (= (to_rep7
                            (rec__robot_iface__proxy__y (us_split_fields5 a)))
                         (to_rep7
                         (rec__robot_iface__proxy__y (us_split_fields5 b)))))
                         (= (to_rep7
                            (rec__robot_iface__proxy__yaw
                            (us_split_fields5 a))) (to_rep7
                                                   (rec__robot_iface__proxy__yaw
                                                   (us_split_fields5 b)))))
                         (= (bool_eq4
                            (rec__robot_iface__proxy__speed
                            (us_split_fields5 a))
                            (rec__robot_iface__proxy__speed
                            (us_split_fields5 b))) true))
                         (= (rec__robot_iface__proxy__goal_reached
                            (us_split_fields5 a)) (rec__robot_iface__proxy__goal_reached
                                                  (us_split_fields5 b))))
                    true false))

(declare-const value__size4 Int)

(declare-fun object__size4 (us_rep2) Int)

(declare-const value__alignment4 Int)

(declare-fun object__alignment4 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size4 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment4 a))))

(declare-const robot_iface__proxy__robot_radius__first__bit Int)

(declare-const robot_iface__proxy__robot_radius__last__bit Int)

(declare-const robot_iface__proxy__robot_radius__position Int)

;; robot_iface__proxy__robot_radius__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__robot_radius__first__bit))

;; robot_iface__proxy__robot_radius__last__bit_axiom
  (assert
  (< robot_iface__proxy__robot_radius__first__bit robot_iface__proxy__robot_radius__last__bit))

;; robot_iface__proxy__robot_radius__position_axiom
  (assert (<= 0 robot_iface__proxy__robot_radius__position))

(declare-const robot_iface__proxy__min_gap_width__first__bit Int)

(declare-const robot_iface__proxy__min_gap_width__last__bit Int)

(declare-const robot_iface__proxy__min_gap_width__position Int)

;; robot_iface__proxy__min_gap_width__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__min_gap_width__first__bit))

;; robot_iface__proxy__min_gap_width__last__bit_axiom
  (assert
  (< robot_iface__proxy__min_gap_width__first__bit robot_iface__proxy__min_gap_width__last__bit))

;; robot_iface__proxy__min_gap_width__position_axiom
  (assert (<= 0 robot_iface__proxy__min_gap_width__position))

(declare-const robot_iface__proxy__obstacle_avoid_dist__first__bit Int)

(declare-const robot_iface__proxy__obstacle_avoid_dist__last__bit Int)

(declare-const robot_iface__proxy__obstacle_avoid_dist__position Int)

;; robot_iface__proxy__obstacle_avoid_dist__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__obstacle_avoid_dist__first__bit))

;; robot_iface__proxy__obstacle_avoid_dist__last__bit_axiom
  (assert
  (< robot_iface__proxy__obstacle_avoid_dist__first__bit robot_iface__proxy__obstacle_avoid_dist__last__bit))

;; robot_iface__proxy__obstacle_avoid_dist__position_axiom
  (assert (<= 0 robot_iface__proxy__obstacle_avoid_dist__position))

(declare-const robot_iface__proxy__max_speed__first__bit Int)

(declare-const robot_iface__proxy__max_speed__last__bit Int)

(declare-const robot_iface__proxy__max_speed__position Int)

;; robot_iface__proxy__max_speed__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__max_speed__first__bit))

;; robot_iface__proxy__max_speed__last__bit_axiom
  (assert
  (< robot_iface__proxy__max_speed__first__bit robot_iface__proxy__max_speed__last__bit))

;; robot_iface__proxy__max_speed__position_axiom
  (assert (<= 0 robot_iface__proxy__max_speed__position))

(declare-const robot_iface__proxy__max_turn_rate__first__bit Int)

(declare-const robot_iface__proxy__max_turn_rate__last__bit Int)

(declare-const robot_iface__proxy__max_turn_rate__position Int)

;; robot_iface__proxy__max_turn_rate__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__max_turn_rate__first__bit))

;; robot_iface__proxy__max_turn_rate__last__bit_axiom
  (assert
  (< robot_iface__proxy__max_turn_rate__first__bit robot_iface__proxy__max_turn_rate__last__bit))

;; robot_iface__proxy__max_turn_rate__position_axiom
  (assert (<= 0 robot_iface__proxy__max_turn_rate__position))

(declare-const robot_iface__proxy__goal_position_tol__first__bit Int)

(declare-const robot_iface__proxy__goal_position_tol__last__bit Int)

(declare-const robot_iface__proxy__goal_position_tol__position Int)

;; robot_iface__proxy__goal_position_tol__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__goal_position_tol__first__bit))

;; robot_iface__proxy__goal_position_tol__last__bit_axiom
  (assert
  (< robot_iface__proxy__goal_position_tol__first__bit robot_iface__proxy__goal_position_tol__last__bit))

;; robot_iface__proxy__goal_position_tol__position_axiom
  (assert (<= 0 robot_iface__proxy__goal_position_tol__position))

(declare-const robot_iface__proxy__goal_angle_tol__first__bit Int)

(declare-const robot_iface__proxy__goal_angle_tol__last__bit Int)

(declare-const robot_iface__proxy__goal_angle_tol__position Int)

;; robot_iface__proxy__goal_angle_tol__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__goal_angle_tol__first__bit))

;; robot_iface__proxy__goal_angle_tol__last__bit_axiom
  (assert
  (< robot_iface__proxy__goal_angle_tol__first__bit robot_iface__proxy__goal_angle_tol__last__bit))

;; robot_iface__proxy__goal_angle_tol__position_axiom
  (assert (<= 0 robot_iface__proxy__goal_angle_tol__position))

(declare-const robot_iface__proxy__goalx__first__bit Int)

(declare-const robot_iface__proxy__goalx__last__bit Int)

(declare-const robot_iface__proxy__goalx__position Int)

;; robot_iface__proxy__goalx__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__goalx__first__bit))

;; robot_iface__proxy__goalx__last__bit_axiom
  (assert
  (< robot_iface__proxy__goalx__first__bit robot_iface__proxy__goalx__last__bit))

;; robot_iface__proxy__goalx__position_axiom
  (assert (<= 0 robot_iface__proxy__goalx__position))

(declare-const robot_iface__proxy__goaly__first__bit Int)

(declare-const robot_iface__proxy__goaly__last__bit Int)

(declare-const robot_iface__proxy__goaly__position Int)

;; robot_iface__proxy__goaly__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__goaly__first__bit))

;; robot_iface__proxy__goaly__last__bit_axiom
  (assert
  (< robot_iface__proxy__goaly__first__bit robot_iface__proxy__goaly__last__bit))

;; robot_iface__proxy__goaly__position_axiom
  (assert (<= 0 robot_iface__proxy__goaly__position))

(declare-const robot_iface__proxy__goala__first__bit Int)

(declare-const robot_iface__proxy__goala__last__bit Int)

(declare-const robot_iface__proxy__goala__position Int)

;; robot_iface__proxy__goala__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__goala__first__bit))

;; robot_iface__proxy__goala__last__bit_axiom
  (assert
  (< robot_iface__proxy__goala__first__bit robot_iface__proxy__goala__last__bit))

;; robot_iface__proxy__goala__position_axiom
  (assert (<= 0 robot_iface__proxy__goala__position))

(declare-const robot_iface__proxy__scan_count__first__bit Int)

(declare-const robot_iface__proxy__scan_count__last__bit Int)

(declare-const robot_iface__proxy__scan_count__position Int)

;; robot_iface__proxy__scan_count__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__scan_count__first__bit))

;; robot_iface__proxy__scan_count__last__bit_axiom
  (assert
  (< robot_iface__proxy__scan_count__first__bit robot_iface__proxy__scan_count__last__bit))

;; robot_iface__proxy__scan_count__position_axiom
  (assert (<= 0 robot_iface__proxy__scan_count__position))

(declare-const robot_iface__proxy__scan_res__first__bit Int)

(declare-const robot_iface__proxy__scan_res__last__bit Int)

(declare-const robot_iface__proxy__scan_res__position Int)

;; robot_iface__proxy__scan_res__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__scan_res__first__bit))

;; robot_iface__proxy__scan_res__last__bit_axiom
  (assert
  (< robot_iface__proxy__scan_res__first__bit robot_iface__proxy__scan_res__last__bit))

;; robot_iface__proxy__scan_res__position_axiom
  (assert (<= 0 robot_iface__proxy__scan_res__position))

(declare-const robot_iface__proxy__max_range__first__bit Int)

(declare-const robot_iface__proxy__max_range__last__bit Int)

(declare-const robot_iface__proxy__max_range__position Int)

;; robot_iface__proxy__max_range__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__max_range__first__bit))

;; robot_iface__proxy__max_range__last__bit_axiom
  (assert
  (< robot_iface__proxy__max_range__first__bit robot_iface__proxy__max_range__last__bit))

;; robot_iface__proxy__max_range__position_axiom
  (assert (<= 0 robot_iface__proxy__max_range__position))

(declare-const robot_iface__proxy__scans__first__bit Int)

(declare-const robot_iface__proxy__scans__last__bit Int)

(declare-const robot_iface__proxy__scans__position Int)

;; robot_iface__proxy__scans__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__scans__first__bit))

;; robot_iface__proxy__scans__last__bit_axiom
  (assert
  (< robot_iface__proxy__scans__first__bit robot_iface__proxy__scans__last__bit))

;; robot_iface__proxy__scans__position_axiom
  (assert (<= 0 robot_iface__proxy__scans__position))

(declare-const robot_iface__proxy__x__first__bit Int)

(declare-const robot_iface__proxy__x__last__bit Int)

(declare-const robot_iface__proxy__x__position Int)

;; robot_iface__proxy__x__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__x__first__bit))

;; robot_iface__proxy__x__last__bit_axiom
  (assert
  (< robot_iface__proxy__x__first__bit robot_iface__proxy__x__last__bit))

;; robot_iface__proxy__x__position_axiom
  (assert (<= 0 robot_iface__proxy__x__position))

(declare-const robot_iface__proxy__y__first__bit Int)

(declare-const robot_iface__proxy__y__last__bit Int)

(declare-const robot_iface__proxy__y__position Int)

;; robot_iface__proxy__y__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__y__first__bit))

;; robot_iface__proxy__y__last__bit_axiom
  (assert
  (< robot_iface__proxy__y__first__bit robot_iface__proxy__y__last__bit))

;; robot_iface__proxy__y__position_axiom
  (assert (<= 0 robot_iface__proxy__y__position))

(declare-const robot_iface__proxy__yaw__first__bit Int)

(declare-const robot_iface__proxy__yaw__last__bit Int)

(declare-const robot_iface__proxy__yaw__position Int)

;; robot_iface__proxy__yaw__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__yaw__first__bit))

;; robot_iface__proxy__yaw__last__bit_axiom
  (assert
  (< robot_iface__proxy__yaw__first__bit robot_iface__proxy__yaw__last__bit))

;; robot_iface__proxy__yaw__position_axiom
  (assert (<= 0 robot_iface__proxy__yaw__position))

(declare-const robot_iface__proxy__speed__first__bit Int)

(declare-const robot_iface__proxy__speed__last__bit Int)

(declare-const robot_iface__proxy__speed__position Int)

;; robot_iface__proxy__speed__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__speed__first__bit))

;; robot_iface__proxy__speed__last__bit_axiom
  (assert
  (< robot_iface__proxy__speed__first__bit robot_iface__proxy__speed__last__bit))

;; robot_iface__proxy__speed__position_axiom
  (assert (<= 0 robot_iface__proxy__speed__position))

(declare-const robot_iface__proxy__goal_reached__first__bit Int)

(declare-const robot_iface__proxy__goal_reached__last__bit Int)

(declare-const robot_iface__proxy__goal_reached__position Int)

;; robot_iface__proxy__goal_reached__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__goal_reached__first__bit))

;; robot_iface__proxy__goal_reached__last__bit_axiom
  (assert
  (< robot_iface__proxy__goal_reached__first__bit robot_iface__proxy__goal_reached__last__bit))

;; robot_iface__proxy__goal_reached__position_axiom
  (assert (<= 0 robot_iface__proxy__goal_reached__position))

(declare-fun user_eq14 (us_rep2 us_rep2) Bool)

(declare-const dummy14 us_rep2)

(declare-datatypes ()
((proxy__ref (mk_proxy__ref (proxy__content us_rep2)))))
(define-fun proxy__ref___projection ((a proxy__ref)) us_rep2 (proxy__content
                                                             a))

(declare-sort idir_t 0)

(define-fun in_range9 ((x Int)) Bool (and (<= (- 1) x) (<= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE11 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) Int)

(declare-fun user_eq15 (idir_t idir_t) Bool)

(declare-const dummy15 idir_t)

(declare-datatypes ()
((idir_t__ref (mk_idir_t__ref (idir_t__content idir_t)))))
(define-fun idir_t__ref___projection ((a idir_t__ref)) idir_t (idir_t__content
                                                              a))

(declare-fun to_rep9 (idir_t) Int)

(declare-fun of_rep9 (Int) idir_t)

;; inversion_axiom
  (assert
  (forall ((x idir_t))
  (! (= (of_rep9 (to_rep9 x)) x) :pattern ((to_rep9 x)) )))

;; range_axiom
  (assert
  (forall ((x idir_t)) (! (in_range9 (to_rep9 x)) :pattern ((to_rep9 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range9 x) (= (to_rep9 (of_rep9 x)) x)) :pattern ((to_rep9
                                                              (of_rep9 x))) )))

(declare-sort count_type 0)

(define-fun in_range10 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE12 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check12 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE12 (us_image) Int)

(declare-fun user_eq16 (count_type count_type) Bool)

(declare-const dummy16 count_type)

(declare-datatypes ()
((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type
  (count_type__content a))

(declare-fun to_rep10 (count_type) Int)

(declare-fun of_rep10 (Int) count_type)

;; inversion_axiom
  (assert
  (forall ((x count_type))
  (! (= (of_rep10 (to_rep10 x)) x) :pattern ((to_rep10 x)) )))

;; range_axiom
  (assert
  (forall ((x count_type)) (! (in_range10
  (to_rep10 x)) :pattern ((to_rep10 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range10 x) (= (to_rep10 (of_rep10 x)) x)) :pattern ((to_rep10
                                                                 (of_rep10 x))) )))

(declare-datatypes ()
((us_split_fields6
 (mk___split_fields3
 (rec__gaps__gap__bearing us_rep)(rec__gaps__gap__distance float)(rec__gaps__gap__idir idir_t)))))
(define-fun us_split_fields_bearing__projection ((a us_split_fields6)) us_rep
  (rec__gaps__gap__bearing a))

(define-fun us_split_fields_iDir__projection ((a us_split_fields6)) idir_t
  (rec__gaps__gap__idir a))

(declare-datatypes ()
((us_split_fields__ref3
 (mk___split_fields__ref3 (us_split_fields__content3 us_split_fields6)))))
(define-fun us_split_fields__ref___6__projection ((a us_split_fields__ref3)) us_split_fields6
  (us_split_fields__content3 a))

(declare-datatypes ()
((us_rep3 (mk___rep3 (us_split_fields7 us_split_fields6)))))
(define-fun us_rep___8__projection ((a us_rep3)) us_split_fields6 (us_split_fields7
                                                                  a))

(define-fun bool_eq6 ((a us_rep3)
  (b us_rep3)) Bool (ite (and
                         (and
                         (= (bool_eq2
                            (rec__gaps__gap__bearing (us_split_fields7 a))
                            (rec__gaps__gap__bearing (us_split_fields7 b))) true)
                         (= (to_rep5
                            (rec__gaps__gap__distance (us_split_fields7 a)))
                         (to_rep5
                         (rec__gaps__gap__distance (us_split_fields7 b)))))
                         (= (to_rep9
                            (rec__gaps__gap__idir (us_split_fields7 a)))
                         (to_rep9
                         (rec__gaps__gap__idir (us_split_fields7 b)))))
                    true false))

(declare-const value__size5 Int)

(declare-fun object__size5 (us_rep3) Int)

(declare-const value__alignment5 Int)

(declare-fun object__alignment5 (us_rep3) Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__size5 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment5))

;; object__alignment_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__alignment5 a))))

(declare-const gaps__gap__bearing__first__bit Int)

(declare-const gaps__gap__bearing__last__bit Int)

(declare-const gaps__gap__bearing__position Int)

;; gaps__gap__bearing__first__bit_axiom
  (assert (<= 0 gaps__gap__bearing__first__bit))

;; gaps__gap__bearing__last__bit_axiom
  (assert (< gaps__gap__bearing__first__bit gaps__gap__bearing__last__bit))

;; gaps__gap__bearing__position_axiom
  (assert (<= 0 gaps__gap__bearing__position))

(declare-const gaps__gap__distance__first__bit Int)

(declare-const gaps__gap__distance__last__bit Int)

(declare-const gaps__gap__distance__position Int)

;; gaps__gap__distance__first__bit_axiom
  (assert (<= 0 gaps__gap__distance__first__bit))

;; gaps__gap__distance__last__bit_axiom
  (assert (< gaps__gap__distance__first__bit gaps__gap__distance__last__bit))

;; gaps__gap__distance__position_axiom
  (assert (<= 0 gaps__gap__distance__position))

(declare-const gaps__gap__idir__first__bit Int)

(declare-const gaps__gap__idir__last__bit Int)

(declare-const gaps__gap__idir__position Int)

;; gaps__gap__idir__first__bit_axiom
  (assert (<= 0 gaps__gap__idir__first__bit))

;; gaps__gap__idir__last__bit_axiom
  (assert (< gaps__gap__idir__first__bit gaps__gap__idir__last__bit))

;; gaps__gap__idir__position_axiom
  (assert (<= 0 gaps__gap__idir__position))

(declare-fun user_eq17 (us_rep3 us_rep3) Bool)

(declare-const dummy17 us_rep3)

(declare-datatypes () ((gap__ref (mk_gap__ref (gap__content us_rep3)))))
(define-fun gap__ref___projection ((a gap__ref)) us_rep3 (gap__content a))

(declare-datatypes ()
((element_type__ref (mk_element_type__ref (element_type__content us_rep3)))))
(define-fun element_type__ref___projection ((a element_type__ref)) us_rep3
  (element_type__content a))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-datatypes ()
((us_split_discrs2
 (mk___split_discrs1
 (rec__algorithm__gap_vectors__list__capacity count_type)))))
(define-fun us_split_discrs___3__projection ((a us_split_discrs2)) count_type
  (rec__algorithm__gap_vectors__list__capacity a))

(declare-datatypes ()
((us_split_discrs__ref1
 (mk___split_discrs__ref1 (us_split_discrs__content1 us_split_discrs2)))))
(define-fun us_split_discrs__ref___3__projection ((a us_split_discrs__ref1)) us_split_discrs2
  (us_split_discrs__content1 a))

(declare-datatypes ()
((us_split_fields8
 (mk___split_fields4 (rec__algorithm__gap_vectors__list us_main_type)))))
(define-fun us_split_fields_List__projection ((a us_split_fields8)) us_main_type
  (rec__algorithm__gap_vectors__list a))

(declare-datatypes ()
((us_split_fields__ref4
 (mk___split_fields__ref4 (us_split_fields__content4 us_split_fields8)))))
(define-fun us_split_fields__ref___9__projection ((a us_split_fields__ref4)) us_split_fields8
  (us_split_fields__content4 a))

(declare-datatypes ()
((us_rep4
 (mk___rep4
 (us_split_discrs3 us_split_discrs2)(us_split_fields9 us_split_fields8)))))
(define-fun us_rep___13__projection ((a us_rep4)) us_split_discrs2 (us_split_discrs3
                                                                   a))

(define-fun us_rep___14__projection ((a us_rep4)) us_split_fields8 (us_split_fields9
                                                                   a))

(define-fun bool_eq7 ((a us_rep4)
  (b us_rep4)) Bool (ite (and
                         (= (to_rep10
                            (rec__algorithm__gap_vectors__list__capacity
                            (us_split_discrs3 a))) (to_rep10
                                                   (rec__algorithm__gap_vectors__list__capacity
                                                   (us_split_discrs3 b))))
                         (= (us_main_eq
                            (rec__algorithm__gap_vectors__list
                            (us_split_fields9 a))
                            (rec__algorithm__gap_vectors__list
                            (us_split_fields9 b))) true))
                    true false))

(declare-const value__size6 Int)

(declare-fun object__size6 (us_rep4) Int)

(declare-const value__alignment6 Int)

(declare-fun object__alignment6 (us_rep4) Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert (forall ((a us_rep4)) (<= 0 (object__size6 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment6))

;; object__alignment_axiom
  (assert (forall ((a us_rep4)) (<= 0 (object__alignment6 a))))

(declare-const algorithm__gap_vectors__list__capacity__first__bit Int)

(declare-const algorithm__gap_vectors__list__capacity__last__bit Int)

(declare-const algorithm__gap_vectors__list__capacity__position Int)

;; algorithm__gap_vectors__list__capacity__first__bit_axiom
  (assert (<= 0 algorithm__gap_vectors__list__capacity__first__bit))

;; algorithm__gap_vectors__list__capacity__last__bit_axiom
  (assert
  (< algorithm__gap_vectors__list__capacity__first__bit algorithm__gap_vectors__list__capacity__last__bit))

;; algorithm__gap_vectors__list__capacity__position_axiom
  (assert (<= 0 algorithm__gap_vectors__list__capacity__position))

(declare-fun user_eq18 (us_rep4 us_rep4) Bool)

(declare-const dummy18 us_rep4)

(declare-datatypes () ((list__ref (mk_list__ref (list__content us_rep4)))))
(define-fun list__ref___projection ((a list__ref)) us_rep4 (list__content a))

(declare-datatypes ()
((us_split_fields10
 (mk___split_fields5 (rec__algorithm__gap_vectors__cursor__node count_type)))))
(define-fun us_split_fields_Node__projection ((a us_split_fields10)) count_type
  (rec__algorithm__gap_vectors__cursor__node a))

(declare-datatypes ()
((us_split_fields__ref5
 (mk___split_fields__ref5 (us_split_fields__content5 us_split_fields10)))))
(define-fun us_split_fields__ref___10__projection ((a us_split_fields__ref5)) us_split_fields10
  (us_split_fields__content5 a))

(declare-datatypes ()
((us_rep5 (mk___rep5 (us_split_fields11 us_split_fields10)))))
(define-fun us_rep___15__projection ((a us_rep5)) us_split_fields10 (us_split_fields11
                                                                    a))

(define-fun bool_eq8 ((a us_rep5)
  (b us_rep5)) Bool (ite (= (to_rep10
                            (rec__algorithm__gap_vectors__cursor__node
                            (us_split_fields11 a))) (to_rep10
                                                    (rec__algorithm__gap_vectors__cursor__node
                                                    (us_split_fields11 b))))
                    true false))

(declare-const value__size7 Int)

(declare-fun object__size7 (us_rep5) Int)

(declare-const value__alignment7 Int)

(declare-fun object__alignment7 (us_rep5) Int)

;; value__size_axiom
  (assert (<= 0 value__size7))

;; object__size_axiom
  (assert (forall ((a us_rep5)) (<= 0 (object__size7 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment7))

;; object__alignment_axiom
  (assert (forall ((a us_rep5)) (<= 0 (object__alignment7 a))))

(declare-const algorithm__gap_vectors__cursor__node__first__bit Int)

(declare-const algorithm__gap_vectors__cursor__node__last__bit Int)

(declare-const algorithm__gap_vectors__cursor__node__position Int)

;; algorithm__gap_vectors__cursor__node__first__bit_axiom
  (assert (<= 0 algorithm__gap_vectors__cursor__node__first__bit))

;; algorithm__gap_vectors__cursor__node__last__bit_axiom
  (assert
  (< algorithm__gap_vectors__cursor__node__first__bit algorithm__gap_vectors__cursor__node__last__bit))

;; algorithm__gap_vectors__cursor__node__position_axiom
  (assert (<= 0 algorithm__gap_vectors__cursor__node__position))

(declare-fun user_eq19 (us_rep5 us_rep5) Bool)

(declare-const dummy19 us_rep5)

(declare-datatypes ()
((cursor__ref (mk_cursor__ref (cursor__content us_rep5)))))
(define-fun cursor__ref___projection ((a cursor__ref)) us_rep5 (cursor__content
                                                               a))

(define-fun default_initial_assumption ((temp___expr_413 us_rep5)
  (temp___skip_top_level_414 Bool)) Bool (= (to_rep10
                                            (rec__algorithm__gap_vectors__cursor__node
                                            (us_split_fields11
                                            temp___expr_413))) 0))

(declare-const no_element us_rep5)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-fun length1 (us_rep4) Int)

(declare-fun length__function_guard (Int us_rep4) Bool)

(define-fun dynamic_invariant2 ((temp___expr_324 Int)
  (temp___is_init_321 Bool) (temp___skip_constant_322 Bool)
  (temp___do_toplevel_323 Bool)) Bool (=>
                                      (or (= temp___is_init_321 true)
                                      (<= 0 2147483647)) (in_range10
                                      temp___expr_324)))

;; length__post_axiom
  (assert
  (forall ((container us_rep4))
  (! (let ((result (length1 container)))
     (and
     (<= result (to_rep10
                (rec__algorithm__gap_vectors__list__capacity
                (us_split_discrs3 container))))
     (dynamic_invariant2 result true false true))) :pattern ((length1
                                                             container)) )))

(declare-sort us_main_type1 0)

(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)

(declare-sort us_rep6 0)

(declare-fun bool_eq9 (us_rep6 us_rep6) Bool)

(declare-const value__size8 Int)

(declare-fun object__size8 (us_rep6) Int)

(declare-const value__alignment8 Int)

(declare-fun object__alignment8 (us_rep6) Int)

;; value__size_axiom
  (assert (<= 0 value__size8))

;; object__size_axiom
  (assert (forall ((a us_rep6)) (<= 0 (object__size8 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment8))

;; object__alignment_axiom
  (assert (forall ((a us_rep6)) (<= 0 (object__alignment8 a))))

(declare-fun user_eq20 (us_rep6 us_rep6) Bool)

(declare-const dummy20 us_rep6)

(declare-datatypes () ((map__ref2 (mk_map__ref2 (map__content2 us_rep6)))))
(define-fun map__ref___projection ((a map__ref2)) us_rep6 (map__content2 a))

(declare-datatypes ()
((key_type__ref (mk_key_type__ref (key_type__content us_rep5)))))
(define-fun key_type__ref___projection ((a key_type__ref)) us_rep5 (key_type__content
                                                                   a))

(declare-fun has_key (us_rep6 us_rep5) Bool)

(declare-fun has_key__function_guard (Bool us_rep6 us_rep5) Bool)

(declare-fun positions (us_rep4) us_rep6)

(declare-fun positions__function_guard (us_rep6 us_rep4) Bool)

(define-fun has_element ((container us_rep4)
  (position us_rep5)) Bool (has_key (positions container) position))

(declare-fun has_element__function_guard (Bool us_rep4 us_rep5) Bool)

(declare-datatypes ()
((element_type__ref1
 (mk_element_type__ref1 (element_type__content1 us_rep3)))))
(define-fun element_type__ref___2__projection ((a element_type__ref1)) us_rep3
  (element_type__content1 a))

(declare-sort us_main_type2 0)

(declare-fun us_main_eq2 (us_main_type2 us_main_type2) Bool)

(declare-sort us_rep7 0)

(declare-fun bool_eq10 (us_rep7 us_rep7) Bool)

(declare-const value__size9 Int)

(declare-fun object__size9 (us_rep7) Int)

(declare-const value__alignment9 Int)

(declare-fun object__alignment9 (us_rep7) Int)

;; value__size_axiom
  (assert (<= 0 value__size9))

;; object__size_axiom
  (assert (forall ((a us_rep7)) (<= 0 (object__size9 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment9))

;; object__alignment_axiom
  (assert (forall ((a us_rep7)) (<= 0 (object__alignment9 a))))

(declare-fun user_eq21 (us_rep7 us_rep7) Bool)

(declare-const dummy21 us_rep7)

(declare-datatypes ()
((sequence__ref (mk_sequence__ref (sequence__content us_rep7)))))
(define-fun sequence__ref___projection ((a sequence__ref)) us_rep7 (sequence__content
                                                                   a))

(declare-fun get (us_rep7 Int) us_rep3)

(declare-fun get__function_guard (us_rep3 us_rep7 Int) Bool)

(declare-fun get1 (us_rep6 us_rep5) Int)

(declare-fun get__function_guard1 (Int us_rep6 us_rep5) Bool)

(declare-fun model__ (us_rep4) us_rep7)

(declare-fun model____function_guard (us_rep7 us_rep4) Bool)

(define-fun element ((container us_rep4)
  (position us_rep5)) us_rep3 (get (model__ container)
                              (get1 (positions container) position)))

(declare-fun element__function_guard (us_rep3 us_rep4 us_rep5) Bool)

(define-fun range_equal ((left us_rep7) (right us_rep7) (fst Int)
  (lst Int)) Bool (ite (forall ((i Int))
                       (=> (and (<= fst i) (<= i lst))
                       (= (bool_eq6 (get left i) (get right i)) true)))
                  true false))

(declare-fun range_equal__function_guard (Bool us_rep7 us_rep7 Int Int) Bool)

(define-fun range_shifted ((left us_rep7) (right us_rep7) (fst Int) (lst Int)
  (offset Int)) Bool (and (ite (forall ((i Int))
                               (=> (and (<= fst i) (<= i lst))
                               (= (bool_eq6 (get left i)
                                  (get right (+ i offset))) true)))
                          true false) (ite (forall ((i Int))
                                           (=>
                                           (and (<= (+ fst offset) i)
                                           (<= i (+ lst offset)))
                                           (= (bool_eq6
                                              (get left (- i offset))
                                              (get right i)) true)))
                                      true false)))

(declare-fun range_shifted__function_guard (Bool us_rep7 us_rep7 Int Int
  Int) Bool)

(declare-fun p_positions_shifted (us_rep6 us_rep6 Int Int) Bool)

(declare-fun p_positions_shifted__function_guard (Bool us_rep6 us_rep6 Int
  Int) Bool)

(declare-fun first2 (us_rep4) us_rep5)

(declare-fun first__function_guard (us_rep5 us_rep4) Bool)

;; first__post_axiom
  (assert
  (forall ((container us_rep4))
  (! (let ((result (first2 container)))
     (ite (= (length1 container) 0) (= (bool_eq8 result no_element) true)
     (and (= (has_element container result) true)
     (= (get1 (positions container) result) 1)))) :pattern ((first2
                                                            container)) )))

(declare-fun next (us_rep4 us_rep5) us_rep5)

(declare-fun next__function_guard (us_rep5 us_rep4 us_rep5) Bool)

;; next__post_axiom
  (assert
  (forall ((container us_rep4))
  (forall ((position us_rep5))
  (! (=>
     (or (= (has_element container position) true)
     (= (bool_eq8 position no_element) true))
     (let ((result (next container position)))
     (ite (or (= (bool_eq8 position no_element) true)
          (= (get1 (positions container) position) (length1 container)))
     (= (bool_eq8 result no_element) true)
     (and (= (has_element container result) true)
     (= (get1 (positions container) result) (+ (get1 (positions container)
                                               position) 1)))))) :pattern (
  (next container position)) ))))

(declare-fun previous (us_rep4 us_rep5) us_rep5)

(declare-fun previous__function_guard (us_rep5 us_rep4 us_rep5) Bool)

;; previous__post_axiom
  (assert
  (forall ((container us_rep4))
  (forall ((position us_rep5))
  (! (=>
     (or (= (has_element container position) true)
     (= (bool_eq8 position no_element) true))
     (let ((result (previous container position)))
     (ite (or (= (bool_eq8 position no_element) true)
          (= (get1 (positions container) position) 1))
     (= (bool_eq8 result no_element) true)
     (and (= (has_element container result) true)
     (= (get1 (positions container) result) (- (get1 (positions container)
                                               position) 1)))))) :pattern (
  (previous container position)) ))))

(define-fun in_range11 ((rec__algorithm__gap_vectors__list__capacity1 Int)
  (a us_rep4)) Bool (= rec__algorithm__gap_vectors__list__capacity1 (to_rep10
                                                                    (rec__algorithm__gap_vectors__list__capacity
                                                                    (us_split_discrs3
                                                                    a)))))

(declare-const value__size10 Int)

(declare-fun object__size10 (us_rep4) Int)

(declare-const value__alignment10 Int)

(declare-fun object__alignment10 (us_rep4) Int)

;; value__size_axiom
  (assert (<= 0 value__size10))

;; object__size_axiom
  (assert (forall ((a us_rep4)) (<= 0 (object__size10 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment10))

;; object__alignment_axiom
  (assert (forall ((a us_rep4)) (<= 0 (object__alignment10 a))))

(declare-const algorithm__gap_vectors__list__capacity__first__bit1 Int)

(declare-const algorithm__gap_vectors__list__capacity__last__bit1 Int)

(declare-const algorithm__gap_vectors__list__capacity__position1 Int)

;; algorithm__gap_vectors__list__capacity__first__bit_axiom
  (assert (<= 0 algorithm__gap_vectors__list__capacity__first__bit1))

;; algorithm__gap_vectors__list__capacity__last__bit_axiom
  (assert
  (< algorithm__gap_vectors__list__capacity__first__bit1 algorithm__gap_vectors__list__capacity__last__bit1))

;; algorithm__gap_vectors__list__capacity__position_axiom
  (assert (<= 0 algorithm__gap_vectors__list__capacity__position1))

(declare-fun user_eq22 (us_rep4 us_rep4) Bool)

(declare-const dummy22 us_rep4)

(declare-datatypes ()
((list__ref1 (mk_list__ref1 (list__content1 us_rep4)))))
(define-fun list__ref___2__projection ((a list__ref1)) us_rep4 (list__content1
                                                               a))

(declare-datatypes ()
((us_split_fields12
 (mk___split_fields6
 (rec__algorithm__laser_scan_data__first nonnegative_float)(rec__algorithm__laser_scan_data__second us_rep)))))
(define-fun us_split_fields_second__projection ((a us_split_fields12)) us_rep
  (rec__algorithm__laser_scan_data__second a))

(declare-datatypes ()
((us_split_fields__ref6
 (mk___split_fields__ref6 (us_split_fields__content6 us_split_fields12)))))
(define-fun us_split_fields__ref___11__projection ((a us_split_fields__ref6)) us_split_fields12
  (us_split_fields__content6 a))

(declare-datatypes ()
((us_rep8 (mk___rep6 (us_split_fields13 us_split_fields12)))))
(define-fun us_rep___16__projection ((a us_rep8)) us_split_fields12 (us_split_fields13
                                                                    a))

(define-fun bool_eq11 ((a us_rep8)
  (b us_rep8)) Bool (ite (and
                         (= (to_rep6
                            (rec__algorithm__laser_scan_data__first
                            (us_split_fields13 a))) (to_rep6
                                                    (rec__algorithm__laser_scan_data__first
                                                    (us_split_fields13 b))))
                         (= (bool_eq2
                            (rec__algorithm__laser_scan_data__second
                            (us_split_fields13 a))
                            (rec__algorithm__laser_scan_data__second
                            (us_split_fields13 b))) true))
                    true false))

(declare-const value__size11 Int)

(declare-fun object__size11 (us_rep8) Int)

(declare-const value__alignment11 Int)

(declare-fun object__alignment11 (us_rep8) Int)

;; value__size_axiom
  (assert (<= 0 value__size11))

;; object__size_axiom
  (assert (forall ((a us_rep8)) (<= 0 (object__size11 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment11))

;; object__alignment_axiom
  (assert (forall ((a us_rep8)) (<= 0 (object__alignment11 a))))

(declare-const algorithm__laser_scan_data__first__first__bit Int)

(declare-const algorithm__laser_scan_data__first__last__bit Int)

(declare-const algorithm__laser_scan_data__first__position Int)

;; algorithm__laser_scan_data__first__first__bit_axiom
  (assert (<= 0 algorithm__laser_scan_data__first__first__bit))

;; algorithm__laser_scan_data__first__last__bit_axiom
  (assert
  (< algorithm__laser_scan_data__first__first__bit algorithm__laser_scan_data__first__last__bit))

;; algorithm__laser_scan_data__first__position_axiom
  (assert (<= 0 algorithm__laser_scan_data__first__position))

(declare-const algorithm__laser_scan_data__second__first__bit Int)

(declare-const algorithm__laser_scan_data__second__last__bit Int)

(declare-const algorithm__laser_scan_data__second__position Int)

;; algorithm__laser_scan_data__second__first__bit_axiom
  (assert (<= 0 algorithm__laser_scan_data__second__first__bit))

;; algorithm__laser_scan_data__second__last__bit_axiom
  (assert
  (< algorithm__laser_scan_data__second__first__bit algorithm__laser_scan_data__second__last__bit))

;; algorithm__laser_scan_data__second__position_axiom
  (assert (<= 0 algorithm__laser_scan_data__second__position))

(declare-fun user_eq23 (us_rep8 us_rep8) Bool)

(declare-const dummy23 us_rep8)

(declare-datatypes ()
((laser_scan_data__ref
 (mk_laser_scan_data__ref (laser_scan_data__content us_rep8)))))
(define-fun laser_scan_data__ref___projection ((a laser_scan_data__ref)) us_rep8
  (laser_scan_data__content a))

(declare-datatypes ()
((map__ref3 (mk_map__ref3 (map__content3 (Array Int us_rep8))))))
(declare-fun slide2 ((Array Int us_rep8) Int Int) (Array Int us_rep8))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep8)))
  (forall ((first3 Int))
  (! (= (slide2 a first3 first3) a) :pattern ((slide2 a first3 first3)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep8)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide2 a old_first new_first) i)) ))))))

(declare-fun concat3 ((Array Int us_rep8) Int Int (Array Int us_rep8) Int
  Int) (Array Int us_rep8))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep8)) (b (Array Int us_rep8)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat3 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat3 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat3 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton3 (us_rep8 Int) (Array Int us_rep8))

;; singleton_def
  (assert
  (forall ((v us_rep8))
  (forall ((i Int))
  (! (= (select (singleton3 v i) i) v) :pattern ((select (singleton3 v i) i)) ))))

(define-fun bool_eq12 ((a (Array Int us_rep8)) (a__first Int) (a__last Int)
  (b (Array Int us_rep8)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_133 Int))
                           (=>
                           (and (<= a__first temp___idx_133)
                           (<= temp___idx_133 a__last))
                           (= (bool_eq11 (select a temp___idx_133)
                              (select b (+ (- b__first a__first) temp___idx_133))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep8)) (b (Array Int us_rep8)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq12 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_133 Int))
  (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last))
  (= (bool_eq11 (select a temp___idx_133)
     (select b (+ (- b__first a__first) temp___idx_133))) true))))))))

(declare-const dummy24 (Array Int us_rep8))

(declare-const value__size12 Int)

(declare-fun object__size12 ((Array Int us_rep8)) Int)

(declare-const value__component__size2 Int)

(declare-fun object__component__size2 ((Array Int us_rep8)) Int)

(declare-const value__alignment12 Int)

(declare-fun object__alignment12 ((Array Int us_rep8)) Int)

;; value__size_axiom
  (assert (<= 0 value__size12))

;; object__size_axiom
  (assert (forall ((a (Array Int us_rep8))) (<= 0 (object__size12 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size2))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int us_rep8))) (<= 0 (object__component__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment12))

;; object__alignment_axiom
  (assert (forall ((a (Array Int us_rep8))) (<= 0 (object__alignment12 a))))

(declare-fun user_eq24 ((Array Int us_rep8) (Array Int us_rep8)) Bool)

(declare-datatypes ()
((us_split_fields14
 (mk___split_fields7
 (rec__algorithm__controller__robot us_rep2)(rec__algorithm__controller__laserscan (Array Int us_rep8))(rec__algorithm__controller__gapvec us_rep4)(rec__algorithm__controller__obsavoiddelta float)(rec__algorithm__controller__driveangle us_rep)))))
(define-fun us_split_fields_robot__projection ((a us_split_fields14)) us_rep2
  (rec__algorithm__controller__robot a))

(define-fun us_split_fields_laserScan__projection ((a us_split_fields14)) (Array Int us_rep8)
  (rec__algorithm__controller__laserscan a))

(define-fun us_split_fields_gapVec__projection ((a us_split_fields14)) us_rep4
  (rec__algorithm__controller__gapvec a))

(define-fun us_split_fields_driveAngle__projection ((a us_split_fields14)) us_rep
  (rec__algorithm__controller__driveangle a))

(declare-datatypes ()
((us_split_fields__ref7
 (mk___split_fields__ref7 (us_split_fields__content7 us_split_fields14)))))
(define-fun us_split_fields__ref___12__projection ((a us_split_fields__ref7)) us_split_fields14
  (us_split_fields__content7 a))

(declare-datatypes ()
((us_rep9 (mk___rep7 (us_split_fields15 us_split_fields14)))))
(define-fun us_rep___17__projection ((a us_rep9)) us_split_fields14 (us_split_fields15
                                                                    a))

(define-fun bool_eq13 ((a us_rep9)
  (b us_rep9)) Bool (ite (and
                         (and
                         (and
                         (and
                         (= (bool_eq5
                            (rec__algorithm__controller__robot
                            (us_split_fields15 a))
                            (rec__algorithm__controller__robot
                            (us_split_fields15 b))) true)
                         (= (bool_eq12
                            (rec__algorithm__controller__laserscan
                            (us_split_fields15 a)) 1 1000
                            (rec__algorithm__controller__laserscan
                            (us_split_fields15 b)) 1 1000) true))
                         (= (bool_eq7
                            (rec__algorithm__controller__gapvec
                            (us_split_fields15 a))
                            (rec__algorithm__controller__gapvec
                            (us_split_fields15 b))) true))
                         (= (to_rep5
                            (rec__algorithm__controller__obsavoiddelta
                            (us_split_fields15 a))) (to_rep5
                                                    (rec__algorithm__controller__obsavoiddelta
                                                    (us_split_fields15 b)))))
                         (= (bool_eq2
                            (rec__algorithm__controller__driveangle
                            (us_split_fields15 a))
                            (rec__algorithm__controller__driveangle
                            (us_split_fields15 b))) true))
                    true false))

(declare-const value__size13 Int)

(declare-fun object__size13 (us_rep9) Int)

(declare-const value__alignment13 Int)

(declare-fun object__alignment13 (us_rep9) Int)

;; value__size_axiom
  (assert (<= 0 value__size13))

;; object__size_axiom
  (assert (forall ((a us_rep9)) (<= 0 (object__size13 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment13))

;; object__alignment_axiom
  (assert (forall ((a us_rep9)) (<= 0 (object__alignment13 a))))

(declare-const algorithm__controller__robot__first__bit Int)

(declare-const algorithm__controller__robot__last__bit Int)

(declare-const algorithm__controller__robot__position Int)

;; algorithm__controller__robot__first__bit_axiom
  (assert (<= 0 algorithm__controller__robot__first__bit))

;; algorithm__controller__robot__last__bit_axiom
  (assert
  (< algorithm__controller__robot__first__bit algorithm__controller__robot__last__bit))

;; algorithm__controller__robot__position_axiom
  (assert (<= 0 algorithm__controller__robot__position))

(declare-const algorithm__controller__laserscan__first__bit Int)

(declare-const algorithm__controller__laserscan__last__bit Int)

(declare-const algorithm__controller__laserscan__position Int)

;; algorithm__controller__laserscan__first__bit_axiom
  (assert (<= 0 algorithm__controller__laserscan__first__bit))

;; algorithm__controller__laserscan__last__bit_axiom
  (assert
  (< algorithm__controller__laserscan__first__bit algorithm__controller__laserscan__last__bit))

;; algorithm__controller__laserscan__position_axiom
  (assert (<= 0 algorithm__controller__laserscan__position))

(declare-const algorithm__controller__gapvec__first__bit Int)

(declare-const algorithm__controller__gapvec__last__bit Int)

(declare-const algorithm__controller__gapvec__position Int)

;; algorithm__controller__gapvec__first__bit_axiom
  (assert (<= 0 algorithm__controller__gapvec__first__bit))

;; algorithm__controller__gapvec__last__bit_axiom
  (assert
  (< algorithm__controller__gapvec__first__bit algorithm__controller__gapvec__last__bit))

;; algorithm__controller__gapvec__position_axiom
  (assert (<= 0 algorithm__controller__gapvec__position))

(declare-const algorithm__controller__obsavoiddelta__first__bit Int)

(declare-const algorithm__controller__obsavoiddelta__last__bit Int)

(declare-const algorithm__controller__obsavoiddelta__position Int)

;; algorithm__controller__obsavoiddelta__first__bit_axiom
  (assert (<= 0 algorithm__controller__obsavoiddelta__first__bit))

;; algorithm__controller__obsavoiddelta__last__bit_axiom
  (assert
  (< algorithm__controller__obsavoiddelta__first__bit algorithm__controller__obsavoiddelta__last__bit))

;; algorithm__controller__obsavoiddelta__position_axiom
  (assert (<= 0 algorithm__controller__obsavoiddelta__position))

(declare-const algorithm__controller__driveangle__first__bit Int)

(declare-const algorithm__controller__driveangle__last__bit Int)

(declare-const algorithm__controller__driveangle__position Int)

;; algorithm__controller__driveangle__first__bit_axiom
  (assert (<= 0 algorithm__controller__driveangle__first__bit))

;; algorithm__controller__driveangle__last__bit_axiom
  (assert
  (< algorithm__controller__driveangle__first__bit algorithm__controller__driveangle__last__bit))

;; algorithm__controller__driveangle__position_axiom
  (assert (<= 0 algorithm__controller__driveangle__position))

(declare-fun user_eq25 (us_rep9 us_rep9) Bool)

(declare-const dummy25 us_rep9)

(declare-datatypes ()
((controller__ref (mk_controller__ref (controller__content us_rep9)))))
(define-fun controller__ref___projection ((a controller__ref)) us_rep9
  (controller__content a))

(declare-const null_angle us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-fun is_empty (us_rep4) Bool)

(declare-fun is_empty__function_guard (Bool us_rep4) Bool)

(define-fun in_range12 ((rec__robot_iface__speed_option__opt1 Int)
  (a us_rep1)) Bool (= rec__robot_iface__speed_option__opt1 (to_rep8
                                                            (rec__robot_iface__speed_option__opt
                                                            (us_split_discrs1
                                                            a)))))

(declare-const value__size14 Int)

(declare-fun object__size14 (us_rep1) Int)

(declare-const value__alignment14 Int)

(declare-fun object__alignment14 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size14))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size14 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment14))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment14 a))))

(declare-const robot_iface__speed_option__opt__first__bit1 Int)

(declare-const robot_iface__speed_option__opt__last__bit1 Int)

(declare-const robot_iface__speed_option__opt__position1 Int)

;; robot_iface__speed_option__opt__first__bit_axiom
  (assert (<= 0 robot_iface__speed_option__opt__first__bit1))

;; robot_iface__speed_option__opt__last__bit_axiom
  (assert
  (< robot_iface__speed_option__opt__first__bit1 robot_iface__speed_option__opt__last__bit1))

;; robot_iface__speed_option__opt__position_axiom
  (assert (<= 0 robot_iface__speed_option__opt__position1))

(declare-const robot_iface__speed_option__modulus__first__bit1 Int)

(declare-const robot_iface__speed_option__modulus__last__bit1 Int)

(declare-const robot_iface__speed_option__modulus__position1 Int)

;; robot_iface__speed_option__modulus__first__bit_axiom
  (assert (<= 0 robot_iface__speed_option__modulus__first__bit1))

;; robot_iface__speed_option__modulus__last__bit_axiom
  (assert
  (< robot_iface__speed_option__modulus__first__bit1 robot_iface__speed_option__modulus__last__bit1))

;; robot_iface__speed_option__modulus__position_axiom
  (assert (<= 0 robot_iface__speed_option__modulus__position1))

(declare-const robot_iface__speed_option__angle__first__bit1 Int)

(declare-const robot_iface__speed_option__angle__last__bit1 Int)

(declare-const robot_iface__speed_option__angle__position1 Int)

;; robot_iface__speed_option__angle__first__bit_axiom
  (assert (<= 0 robot_iface__speed_option__angle__first__bit1))

;; robot_iface__speed_option__angle__last__bit_axiom
  (assert
  (< robot_iface__speed_option__angle__first__bit1 robot_iface__speed_option__angle__last__bit1))

;; robot_iface__speed_option__angle__position_axiom
  (assert (<= 0 robot_iface__speed_option__angle__position1))

(declare-fun user_eq26 (us_rep1 us_rep1) Bool)

(declare-const dummy26 us_rep1)

(declare-datatypes ()
((t252s__ref (mk_t252s__ref (t252s__content us_rep1)))))
(define-fun t252s__ref___projection ((a t252s__ref)) us_rep1 (t252s__content
                                                             a))

(declare-fun temp___614 (Float32) (Array Int nonnegative_float))

;; def_axiom
  (assert
  (forall ((temp___616 Float32))
  (forall ((temp___617 Int))
  (= (select (temp___614 temp___616) temp___617) (of_rep6 temp___616)))))

(declare-fun temp___618 (us_rep8) (Array Int us_rep8))

;; def_axiom
  (assert
  (forall ((temp___620 us_rep8))
  (forall ((temp___621 Int))
  (= (select (temp___618 temp___620) temp___621) temp___620))))

(define-fun dynamic_invariant3 ((temp___expr_607 us_rep9)
  (temp___is_init_604 Bool) (temp___skip_constant_605 Bool)
  (temp___do_toplevel_606 Bool)) Bool (and
                                      (= (attr__constrained
                                         (rec__robot_iface__proxy__speed
                                         (us_split_fields5
                                         (rec__algorithm__controller__robot
                                         (us_split_fields15 temp___expr_607))))) false)
                                      (in_range11 1000
                                      (rec__algorithm__controller__gapvec
                                      (us_split_fields15 temp___expr_607)))))

(define-fun default_initial_assumption1 ((temp___expr_612 us_rep9)
  (temp___skip_top_level_613 Bool)) Bool (and
                                         (and
                                         (and
                                         (and
                                         (= (rec__algorithm__controller__robot
                                            (us_split_fields15
                                            temp___expr_612)) (mk___rep2
                                                              (mk___split_fields2
                                                              (of_rep2
                                                              (fp #b0 #b00000000 #b00000000000000000000000))
                                                              (of_rep2
                                                              (fp #b0 #b00000000 #b00000000000000000000000))
                                                              (of_rep2
                                                              (fp #b0 #b00000000 #b00000000000000000000000))
                                                              (of_rep2
                                                              (fp #b0 #b00000000 #b00000000000000000000000))
                                                              (of_rep2
                                                              (fp #b0 #b00000000 #b00000000000000000000000))
                                                              (of_rep6
                                                              (fp #b0 #b00000000 #b00000000000000000000000))
                                                              (of_rep6
                                                              (fp #b0 #b00000000 #b00000000000000000000000))
                                                              (of_rep5
                                                              (fp #b0 #b00000000 #b00000000000000000000000))
                                                              (of_rep5
                                                              (fp #b0 #b00000000 #b00000000000000000000000))
                                                              (of_rep5
                                                              (fp #b0 #b00000000 #b00000000000000000000000))
                                                              (of_rep4 0)
                                                              (of_rep2
                                                              (fp #b0 #b00000000 #b00000000000000000000000))
                                                              (of_rep2
                                                              (fp #b0 #b00000000 #b00000000000000000000000))
                                                              (temp___614
                                                              (fp #b0 #b00000000 #b00000000000000000000000))
                                                              (of_rep7
                                                              (fp #b0 #b00000000 #b00000000000000000000000))
                                                              (of_rep7
                                                              (fp #b0 #b00000000 #b00000000000000000000000))
                                                              (of_rep7
                                                              (fp #b0 #b00000000 #b00000000000000000000000))
                                                              (let ((usq_
                                                              (mk___rep1
                                                              (mk___split_discrs
                                                              (of_rep8 0))
                                                              (mk___split_fields1
                                                              dummy4
                                                              dummy4) true)))
                                                              (mk___rep1
                                                              (us_split_discrs1
                                                              usq_)
                                                              (us_split_fields3
                                                              usq_) false))
                                                              (of_int1 0))))
                                         (= (rec__algorithm__controller__laserscan
                                            (us_split_fields15
                                            temp___expr_612)) (temp___618
                                                              (mk___rep6
                                                              (mk___split_fields6
                                                              (of_rep6
                                                              (fp #b0 #b00000000 #b00000000000000000000000))
                                                              null_angle)))))
                                         (and
                                         (= (to_rep10
                                            (rec__algorithm__gap_vectors__list__capacity
                                            (us_split_discrs3
                                            (rec__algorithm__controller__gapvec
                                            (us_split_fields15
                                            temp___expr_612))))) 1000)
                                         (= (is_empty
                                            (rec__algorithm__controller__gapvec
                                            (us_split_fields15
                                            temp___expr_612))) true)))
                                         (= (to_rep5
                                            (rec__algorithm__controller__obsavoiddelta
                                            (us_split_fields15
                                            temp___expr_612))) (fp #b0 #b00000000 #b00000000000000000000000)))
                                         (= (rec__algorithm__controller__driveangle
                                            (us_split_fields15
                                            temp___expr_612)) null_angle)))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-fun temp___String_Literal_1021 (tuple0) (Array Int character))

;; temp___String_Literal_1021__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_1021 us_void_param) 1)) 32)
     (= (to_rep (select (temp___String_Literal_1021 us_void_param) 2)) 32))
     (= (to_rep (select (temp___String_Literal_1021 us_void_param) 3)) 32))
     (= (to_rep (select (temp___String_Literal_1021 us_void_param) 4)) 32))
     (= (to_rep (select (temp___String_Literal_1021 us_void_param) 5)) 82))
     (= (to_rep (select (temp___String_Literal_1021 us_void_param) 6)) 101))
     (= (to_rep (select (temp___String_Literal_1021 us_void_param) 7)) 109))
     (= (to_rep (select (temp___String_Literal_1021 us_void_param) 8)) 111))
     (= (to_rep (select (temp___String_Literal_1021 us_void_param) 9)) 118))
     (= (to_rep (select (temp___String_Literal_1021 us_void_param) 10)) 101))
     (= (to_rep (select (temp___String_Literal_1021 us_void_param) 11)) 100))
     (= (to_rep (select (temp___String_Literal_1021 us_void_param) 12)) 32))
     (= (to_rep (select (temp___String_Literal_1021 us_void_param) 13)) 100))
     (= (to_rep (select (temp___String_Literal_1021 us_void_param) 14)) 117))
     (= (to_rep (select (temp___String_Literal_1021 us_void_param) 15)) 112))
     (= (to_rep (select (temp___String_Literal_1021 us_void_param) 16)) 108))
     (= (to_rep (select (temp___String_Literal_1021 us_void_param) 17)) 105))
     (= (to_rep (select (temp___String_Literal_1021 us_void_param) 18)) 99))
     (= (to_rep (select (temp___String_Literal_1021 us_void_param) 19)) 97))
     (= (to_rep (select (temp___String_Literal_1021 us_void_param) 20)) 116))
     (= (to_rep (select (temp___String_Literal_1021 us_void_param) 21)) 101))
     (= (to_rep (select (temp___String_Literal_1021 us_void_param) 22)) 32))
     (= (to_rep (select (temp___String_Literal_1021 us_void_param) 23)) 103))
     (= (to_rep (select (temp___String_Literal_1021 us_void_param) 24)) 97))
     (= (to_rep (select (temp___String_Literal_1021 us_void_param) 25)) 112))
     (= (to_rep (select (temp___String_Literal_1021 us_void_param) 26)) 32))
     (= (to_rep (select (temp___String_Literal_1021 us_void_param) 27)) 97))
     (= (to_rep (select (temp___String_Literal_1021 us_void_param) 28)) 116))
     (= (to_rep (select (temp___String_Literal_1021 us_void_param) 29)) 32)) :pattern (
  (temp___String_Literal_1021 us_void_param)) )))

(declare-fun temp___String_Literal_1034 (tuple0) (Array Int character))

;; temp___String_Literal_1034__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_1034 us_void_param) 1)) 32)
     (= (to_rep (select (temp___String_Literal_1034 us_void_param) 2)) 32))
     (= (to_rep (select (temp___String_Literal_1034 us_void_param) 3)) 32))
     (= (to_rep (select (temp___String_Literal_1034 us_void_param) 4)) 32))
     (= (to_rep (select (temp___String_Literal_1034 us_void_param) 5)) 82))
     (= (to_rep (select (temp___String_Literal_1034 us_void_param) 6)) 101))
     (= (to_rep (select (temp___String_Literal_1034 us_void_param) 7)) 109))
     (= (to_rep (select (temp___String_Literal_1034 us_void_param) 8)) 111))
     (= (to_rep (select (temp___String_Literal_1034 us_void_param) 9)) 118))
     (= (to_rep (select (temp___String_Literal_1034 us_void_param) 10)) 101))
     (= (to_rep (select (temp___String_Literal_1034 us_void_param) 11)) 100))
     (= (to_rep (select (temp___String_Literal_1034 us_void_param) 12)) 32))
     (= (to_rep (select (temp___String_Literal_1034 us_void_param) 13)) 100))
     (= (to_rep (select (temp___String_Literal_1034 us_void_param) 14)) 117))
     (= (to_rep (select (temp___String_Literal_1034 us_void_param) 15)) 112))
     (= (to_rep (select (temp___String_Literal_1034 us_void_param) 16)) 108))
     (= (to_rep (select (temp___String_Literal_1034 us_void_param) 17)) 105))
     (= (to_rep (select (temp___String_Literal_1034 us_void_param) 18)) 99))
     (= (to_rep (select (temp___String_Literal_1034 us_void_param) 19)) 97))
     (= (to_rep (select (temp___String_Literal_1034 us_void_param) 20)) 116))
     (= (to_rep (select (temp___String_Literal_1034 us_void_param) 21)) 101))
     (= (to_rep (select (temp___String_Literal_1034 us_void_param) 22)) 32))
     (= (to_rep (select (temp___String_Literal_1034 us_void_param) 23)) 103))
     (= (to_rep (select (temp___String_Literal_1034 us_void_param) 24)) 97))
     (= (to_rep (select (temp___String_Literal_1034 us_void_param) 25)) 112))
     (= (to_rep (select (temp___String_Literal_1034 us_void_param) 26)) 32))
     (= (to_rep (select (temp___String_Literal_1034 us_void_param) 27)) 97))
     (= (to_rep (select (temp___String_Literal_1034 us_void_param) 28)) 116))
     (= (to_rep (select (temp___String_Literal_1034 us_void_param) 29)) 32)) :pattern (
  (temp___String_Literal_1034 us_void_param)) )))

(define-fun dynamic_invariant4 ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range6
                                     temp___expr_33)))

(define-fun dynamic_invariant5 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range2
                                     temp___expr_39)))

(define-fun dynamic_invariant6 ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range3 temp___expr_63)))

(define-fun dynamic_invariant7 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(define-fun dynamic_invariant8 ((temp___expr_577 us_rep4)
  (temp___is_init_574 Bool) (temp___skip_constant_575 Bool)
  (temp___do_toplevel_576 Bool)) Bool (=>
                                      (not (= temp___skip_constant_575 true))
                                      (in_range11 1000 temp___expr_577)))

(define-fun default_initial_assumption2 ((temp___expr_579 us_rep4)
  (temp___skip_top_level_580 Bool)) Bool (and
                                         (= (to_rep10
                                            (rec__algorithm__gap_vectors__list__capacity
                                            (us_split_discrs3
                                            temp___expr_579))) 1000)
                                         (=>
                                         (not
                                         (= temp___skip_top_level_580 true))
                                         (= (is_empty temp___expr_579) true))))

(define-fun dynamic_invariant9 ((temp___expr_220 Int)
  (temp___is_init_217 Bool) (temp___skip_constant_218 Bool)
  (temp___do_toplevel_219 Bool)) Bool (=>
                                      (or (= temp___is_init_217 true)
                                      (<= 0 1)) (in_range8 temp___expr_220)))

(define-fun default_initial_assumption3 ((temp___expr_228 us_rep1)
  (temp___skip_top_level_229 Bool)) Bool (and
                                         (= (attr__constrained
                                            temp___expr_228) false)
                                         (= (to_rep8
                                            (rec__robot_iface__speed_option__opt
                                            (us_split_discrs1
                                            temp___expr_228))) 0)))

(define-fun dynamic_invariant10 ((temp___expr_236 us_rep2)
  (temp___is_init_233 Bool) (temp___skip_constant_234 Bool)
  (temp___do_toplevel_235 Bool)) Bool (= (attr__constrained
                                         (rec__robot_iface__proxy__speed
                                         (us_split_fields5 temp___expr_236))) false))

(define-fun default_initial_assumption4 ((temp___expr_239 us_rep2)
  (temp___skip_top_level_240 Bool)) Bool (and
                                         (= (attr__constrained
                                            (rec__robot_iface__proxy__speed
                                            (us_split_fields5
                                            temp___expr_239))) false)
                                         (= (to_rep8
                                            (rec__robot_iface__speed_option__opt
                                            (us_split_discrs1
                                            (rec__robot_iface__proxy__speed
                                            (us_split_fields5
                                            temp___expr_239))))) 0)))

(define-fun dynamic_invariant11 ((temp___expr_140 Float32)
  (temp___is_init_137 Bool) (temp___skip_constant_138 Bool)
  (temp___do_toplevel_139 Bool)) Bool (=>
                                      (or (= temp___is_init_137 true)
                                      (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b11111110 #b11111111111111111111111)))
                                      (in_range4 temp___expr_140)))

(define-fun dynamic_invariant12 ((temp___expr_146 Float32)
  (temp___is_init_143 Bool) (temp___skip_constant_144 Bool)
  (temp___do_toplevel_145 Bool)) Bool (=>
                                      (or (= temp___is_init_143 true)
                                      (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b11111110 #b11111111111111111111111)))
                                      (in_range7 temp___expr_146)))

(define-fun dynamic_invariant13 ((temp___expr_158 Float32)
  (temp___is_init_155 Bool) (temp___skip_constant_156 Bool)
  (temp___do_toplevel_157 Bool)) Bool (=>
                                      (or (= temp___is_init_155 true)
                                      (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                      (fp.isFinite32 temp___expr_158)))

;; null_angle__def_axiom
  (assert
  (= null_angle (mk___rep
                (mk___split_fields
                (of_rep3 (fp #b0 #b00000000 #b00000000000000000000000))))))

(define-fun dynamic_invariant14 ((temp___expr_170 Float32)
  (temp___is_init_167 Bool) (temp___skip_constant_168 Bool)
  (temp___do_toplevel_169 Bool)) Bool (=>
                                      (or (= temp___is_init_167 true)
                                      (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000001 #b10010010000111111011011)))
                                      (in_range5 temp___expr_170)))

(define-fun dynamic_invariant15 ((temp___expr_286 Int)
  (temp___is_init_283 Bool) (temp___skip_constant_284 Bool)
  (temp___do_toplevel_285 Bool)) Bool (=>
                                      (or (= temp___is_init_283 true)
                                      (<= (- 1) 1)) (in_range9
                                      temp___expr_286)))

;; no_element__def_axiom
  (assert (= no_element (mk___rep5 (mk___split_fields5 (of_rep10 0)))))

(declare-sort positive_count_type 0)

(define-fun in_range13 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE13 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check13 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE13 (us_image) Int)

(declare-fun user_eq27 (positive_count_type positive_count_type) Bool)

(declare-const dummy27 positive_count_type)

(declare-datatypes ()
((positive_count_type__ref
 (mk_positive_count_type__ref
 (positive_count_type__content positive_count_type)))))
(define-fun positive_count_type__ref___projection ((a positive_count_type__ref)) positive_count_type
  (positive_count_type__content a))

(define-fun dynamic_invariant16 ((temp___expr_420 Int)
  (temp___is_init_417 Bool) (temp___skip_constant_418 Bool)
  (temp___do_toplevel_419 Bool)) Bool (=>
                                      (or (= temp___is_init_417 true)
                                      (<= 1 2147483647)) (in_range13
                                      temp___expr_420)))

(declare-fun length2 (us_rep6) Int)

(declare-fun length__function_guard1 (Int us_rep6) Bool)

(declare-fun is_empty1 (us_rep6) Bool)

(declare-fun is_empty__function_guard1 (Bool us_rep6) Bool)

(define-fun default_initial_assumption5 ((temp___expr_468 us_rep6)
  (temp___skip_top_level_469 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_469 true))
                                         (and
                                         (= (is_empty1 temp___expr_468) true)
                                         (= (length2 temp___expr_468) 0))))

(declare-fun keys_included (us_rep6 us_rep6) Bool)

(declare-fun keys_included__function_guard (Bool us_rep6 us_rep6) Bool)

(define-fun default_initial_assumption6 ((temp___expr_456 us_rep5)
  (temp___skip_top_level_457 Bool)) Bool (= (to_rep10
                                            (rec__algorithm__gap_vectors__cursor__node
                                            (us_split_fields11
                                            temp___expr_456))) 0))

;; p_positions_shifted__post_axiom
  (assert
  (forall ((small us_rep6) (big us_rep6))
  (forall ((cut Int) (count Int))
  (! (=>
     (and (dynamic_invariant16 cut true true true) (dynamic_invariant2 count
     true true true))
     (= (= (p_positions_shifted small big cut count) true)
     (and
     (and (= (keys_included small big) true)
     (forall ((i us_rep5))
     (=> (= (has_key small i) true)
     (ite (< (get1 small i) cut) (= (get1 big i) (get1 small i))
     (= (- (get1 big i) count) (get1 small i))))))
     (forall ((i us_rep5))
     (=> (= (has_key big i) true)
     (or (= (has_key small i) true)
     (and (<= (- cut count) (- (get1 big i) count))
     (<= (- (get1 big i) count) (- cut 1))))))))) :pattern ((p_positions_shifted
                                                            small big cut
                                                            count)) ))))

(declare-fun length3 (us_rep7) Int)

(declare-fun length__function_guard2 (Int us_rep7) Bool)

(define-fun last2 ((container us_rep7)) Int (+ 0 (length3 container)))

(declare-fun last__function_guard (Int us_rep7) Bool)

(define-fun oeq ((left us_rep7)
  (right us_rep7)) Bool (and (= (length3 left) (length3 right)) (ite
                                                                (forall
                                                                ((n Int))
                                                                (=>
                                                                (and (<= 1 n)
                                                                (<= n
                                                                (last2 left)))
                                                                (= (bool_eq6
                                                                   (get left
                                                                   n)
                                                                   (get right
                                                                   n)) true)))
                                                                true false)))

(declare-fun oeq__function_guard (Bool us_rep7 us_rep7) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep7) (b us_rep7))
  (! (= (user_eq21 a b) (oeq a b)) :pattern ((user_eq21 a b)) )))

(define-fun default_initial_assumption7 ((temp___expr_449 us_rep7)
  (temp___skip_top_level_450 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_450 true))
                                         (= (length3 temp___expr_449) 0)))

;; model____post_axiom
  (assert
  (forall ((container us_rep4))
  (! (= (length3 (model__ container)) (length1 container)) :pattern (
  (model__ container)) )))

;; positions__post_axiom
  (assert
  (forall ((container us_rep4))
  (! (let ((result (positions container)))
     (and (not (= (has_key result no_element) true))
     (forall ((i us_rep5))
     (=> (= (has_key result i) true)
     (and
     (and (<= 1 (get1 result i)) (<= (get1 result i) (length1 container)))
     (forall ((j us_rep5))
     (=> (= (has_key result j) true)
     (=> (= (get1 result i) (get1 result j)) (= (bool_eq8 i j) true))))))))) :pattern (
  (positions container)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep4))
  (! (= (= (is_empty container) true) (= (length1 container) 0)) :pattern (
  (is_empty container)) )))

(declare-sort extended_index 0)

(define-fun in_range14 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE14 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check14 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE14 (us_image) Int)

(declare-fun user_eq28 (extended_index extended_index) Bool)

(declare-const dummy28 extended_index)

(declare-datatypes ()
((extended_index__ref
 (mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref___projection ((a extended_index__ref)) extended_index
  (extended_index__content a))

(define-fun dynamic_invariant17 ((temp___expr_442 Int)
  (temp___is_init_439 Bool) (temp___skip_constant_440 Bool)
  (temp___do_toplevel_441 Bool)) Bool (=>
                                      (or (= temp___is_init_439 true)
                                      (<= 0 2147483647)) (in_range14
                                      temp___expr_442)))

;; length__post_axiom
  (assert
  (forall ((container us_rep7))
  (! (let ((result (length3 container)))
     (and (<= (+ 0 result) 2147483647) (dynamic_invariant2 result true false
     true))) :pattern ((length3 container)) )))

;; get__post_axiom
  (assert true)

;; has_key__post_axiom
  (assert
  (forall ((container us_rep6))
  (forall ((key us_rep5))
  (! (=> (= (of_int1 0) true)
     (=>
     (exists ((k us_rep5))
     (and (= (has_key container k) true) (= (bool_eq8 k key) true)))
     (= (has_key container key) true))) :pattern ((has_key container key)) ))))

(declare-sort element_type 0)

(define-fun in_range15 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE15 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check15 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE15 (us_image) Int)

(declare-fun user_eq29 (element_type element_type) Bool)

(declare-const dummy29 element_type)

(declare-datatypes ()
((element_type__ref2
 (mk_element_type__ref2 (element_type__content2 element_type)))))
(define-fun element_type__ref___3__projection ((a element_type__ref2)) element_type
  (element_type__content2 a))

(define-fun dynamic_invariant18 ((temp___expr_461 Int)
  (temp___is_init_458 Bool) (temp___skip_constant_459 Bool)
  (temp___do_toplevel_460 Bool)) Bool (=>
                                      (or (= temp___is_init_458 true)
                                      (<= 1 2147483647)) (in_range15
                                      temp___expr_461)))

(declare-fun witness (us_rep6 us_rep5) Int)

(declare-fun witness__function_guard (Int us_rep6 us_rep5) Bool)

(declare-fun w_get (us_rep6 Int) Int)

(declare-fun w_get__function_guard (Int us_rep6 Int) Bool)

;; get__post_axiom
  (assert
  (forall ((container us_rep6))
  (forall ((key us_rep5))
  (! (=> (= (has_key container key) true)
     (let ((result (get1 container key)))
     (and
     (=> (= (of_int1 0) true)
     (and (= result (w_get container (witness container key)))
     (forall ((k us_rep5))
     (=> (= (has_key container k) true)
     (= (= (bool_eq8 k key) true)
     (= (witness container key) (witness container k)))))))
     (dynamic_invariant18 result true false true)))) :pattern ((get1
                                                               container key)) ))))

;; length__post_axiom
  (assert
  (forall ((container us_rep6)) (! (dynamic_invariant2 (length2 container)
  true false true) :pattern ((length2 container)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep6))
  (! (= (= (is_empty1 container) true)
     (forall ((key us_rep5)) (not (= (has_key container key) true)))) :pattern (
  (is_empty1 container)) )))

;; keys_included__post_axiom
  (assert
  (forall ((left us_rep6) (right us_rep6))
  (! (= (= (keys_included left right) true)
     (forall ((key us_rep5))
     (=> (= (has_key left key) true) (= (has_key right key) true)))) :pattern (
  (keys_included left right)) )))

(declare-fun has_witness (us_rep6 Int) Bool)

(declare-fun has_witness__function_guard (Bool us_rep6 Int) Bool)

;; has_witness__post_axiom
  (assert true)

;; witness__post_axiom
  (assert
  (forall ((container us_rep6))
  (forall ((key us_rep5))
  (! (=> (= (has_key container key) true)
     (let ((result (witness container key)))
     (and (= (has_witness container result) true) (dynamic_invariant2 result
     true false true)))) :pattern ((witness container key)) ))))

;; w_get__post_axiom
  (assert
  (forall ((container us_rep6))
  (forall ((witness1 Int))
  (! (=>
     (and (dynamic_invariant2 witness1 true true true)
     (= (has_witness container witness1) true)) (dynamic_invariant18
     (w_get container witness1) true false true)) :pattern ((w_get container
                                                            witness1)) ))))

(declare-const this__split_fields us_split_fields__ref7)

(declare-const iterr__split_fields count_type)

(declare-const iterl__split_fields count_type)

(declare-const o count_type)

(declare-const o1 count_type)

(declare-const temp___1038 count_type)

(declare-const temp___1019 count_type)

(declare-const o2 Int)

(declare-const temp___1031 us_rep9)

(declare-const temp___1030 count_type)

(declare-const temp___1029 count_type)

(declare-const temp___1032 Float32)

(declare-const o3 count_type)

(declare-const o4 normalized2pi)

(declare-const o5 float)

(declare-const o6 idir_t)

(declare-const o7 normalized2pi)

(declare-const o8 float)

(declare-const o9 idir_t)

(declare-const o10 idir_t)

(declare-const o11 Int)

(declare-const o12 us_rep3)

(declare-const o13 us_split_fields6)

(declare-const o14 idir_t)

(declare-const o15 Int)

(declare-const o16 us_rep3)

(declare-const o17 us_split_fields6)

(declare-const o18 us_rep)

(declare-const o19 us_rep3)

(declare-const o20 us_split_fields6)

(declare-const o21 us_rep)

(declare-const o22 Float32)

(declare-const o23 Float32)

(declare-const o24 us_rep3)

(declare-const o25 us_split_fields6)

(declare-const o26 us_rep)

(declare-const o27 us_t)

(declare-const o28 us_rep5)

(declare-const temp___1027 us_rep5)

(declare-const temp___1022 us_rep5)

(declare-const o29 Int)

(declare-const o30 Bool)

(declare-const o31 Int)

(declare-const temp___1033 us_rep5)

(declare-const o32 us_rep3)

(declare-const o33 us_split_fields6)

(declare-const o34 idir_t)

(declare-const o35 Int)

(declare-const o36 us_rep3)

(declare-const o37 us_split_fields6)

(declare-const o38 idir_t)

(declare-const o39 Int)

(declare-const o40 us_rep3)

(declare-const o41 us_split_fields6)

(declare-const o42 us_rep)

(declare-const o43 us_rep3)

(declare-const o44 us_split_fields6)

(declare-const o45 us_rep)

(declare-const o46 Float32)

(declare-const o47 Float32)

(declare-const o48 us_rep3)

(declare-const o49 us_split_fields6)

(declare-const o50 us_rep)

(declare-const o51 us_t)

(declare-const this__split_fields1 us_split_fields14)

(declare-const result us_split_fields__ref5)

(declare-const iterl__split_fields1 us_split_fields10)

(declare-const result1 us_split_fields__ref5)

(declare-const iterr__split_fields1 us_split_fields10)

(declare-const iterl__split_fields2 us_split_fields10)

(declare-const result2 Bool)

(declare-const this__split_fields2 us_split_fields14)

(declare-const iterr__split_fields2 us_split_fields10)

(declare-const iterl__split_fields3 us_split_fields10)

(declare-const rho us_split_fields8)

(declare-const rho1 us_split_fields8)

(declare-const result3 Bool)

(declare-const result4 Bool)

(declare-const result5 Bool)

(declare-const result6 Bool)

(declare-const result7 Bool)

(declare-const result8 Bool)

(declare-const iterr__split_fields3 us_split_fields10)

(declare-const algorithm__gap_vectors__delete__container__fields us_split_fields8)

(declare-const result9 us_split_fields__ref7)

(declare-const this__split_fields3 us_split_fields14)

(declare-const result10 us_split_fields__ref5)

(declare-const iterl__split_fields4 us_split_fields10)

(declare-const result11 us_split_fields__ref5)

(declare-const iterl__split_fields5 us_split_fields10)

(declare-const iterr__split_fields4 us_split_fields10)

(declare-const algorithm__gap_vectors__delete__container__fields1 us_split_fields8)

(declare-const result12 us_split_fields__ref7)

(declare-const this__split_fields4 us_split_fields14)

(declare-const iterl__split_fields6 us_split_fields10)

(declare-const result13 us_split_fields__ref5)

(declare-const iterr__split_fields5 us_split_fields10)

(declare-const iterl__split_fields7 us_split_fields10)

(declare-const result14 Bool)

(declare-const this__split_fields5 us_split_fields__ref7)

(declare-const iterr__split_fields6 us_split_fields__ref5)

(declare-const iterl__split_fields8 us_split_fields__ref5)

(declare-const this__split_fields6 us_split_fields14)

(declare-const iterr__split_fields7 us_split_fields10)

(declare-const iterl__split_fields9 us_split_fields10)

(declare-const this__split_fields7 us_split_fields__ref7)

(declare-const iterr__split_fields8 us_split_fields__ref5)

(declare-const iterl__split_fields10 us_split_fields__ref5)

(declare-const this__split_fields8 us_split_fields14)

(declare-const iterr__split_fields9 us_split_fields10)

(declare-const iterl__split_fields11 us_split_fields10)

(declare-const this__split_fields9 us_split_fields__ref7)

(declare-const iterr__split_fields10 us_split_fields__ref5)

(declare-const iterl__split_fields12 us_split_fields__ref5)

(declare-const this__split_fields10 us_split_fields14)

(declare-const iterr__split_fields11 us_split_fields10)

(declare-const iterl__split_fields13 us_split_fields10)

(declare-const result15 Bool)

(declare-const result16 us_split_fields__ref5)

(declare-const iterl__split_fields14 us_split_fields10)

(declare-const result17 Bool)

(declare-const result18 Bool)

(declare-const result19 Bool)

(declare-const iterr__split_fields12 us_split_fields10)

(declare-const algorithm__gap_vectors__delete__container__fields2 us_split_fields8)

(declare-const result20 us_split_fields__ref7)

(declare-const this__split_fields11 us_split_fields14)

(declare-const this__split_fields12 us_split_fields__ref7)

(declare-const iterr__split_fields13 us_split_fields__ref5)

(declare-const this__split_fields13 us_split_fields14)

(declare-const iterr__split_fields14 us_split_fields10)

(declare-const this__split_fields14 us_split_fields__ref7)

(declare-const iterr__split_fields15 us_split_fields__ref5)

(declare-const iterl__split_fields15 us_split_fields__ref5)

(declare-const this__split_fields15 us_split_fields14)

(declare-const iterr__split_fields16 us_split_fields10)

(declare-const iterl__split_fields16 us_split_fields10)

(declare-const this__split_fields16 us_split_fields__ref7)

(declare-const iterr__split_fields17 us_split_fields__ref5)

(declare-const iterl__split_fields17 us_split_fields__ref5)

(declare-const this__split_fields17 us_split_fields14)

(declare-const iterr__split_fields18 us_split_fields10)

(declare-const iterl__split_fields18 us_split_fields10)

;; H
  (assert (= (to_rep10 o) 0))

;; H
  (assert (= o o1))

;; H
  (assert (= temp___1038 o1))

;; H
  (assert (= (mk___rep5 (mk___split_fields5 temp___1038)) no_element))

;; H
  (assert
  (and
  (= (attr__constrained
     (rec__robot_iface__proxy__speed
     (us_split_fields5
     (rec__algorithm__controller__robot
     (us_split_fields__content7 this__split_fields))))) false)
  (= 1000 (to_rep10
          (rec__algorithm__gap_vectors__list__capacity
          (us_split_discrs3
          (rec__algorithm__controller__gapvec
          (us_split_fields__content7 this__split_fields))))))))

;; H
  (assert (= (to_rep10 iterr__split_fields) 0))

;; H
  (assert (= (to_rep10 iterl__split_fields) 0))

;; H
  (assert
  (and
  (= (mk___rep5 (mk___split_fields5 temp___1019)) (first2
                                                  (rec__algorithm__controller__gapvec
                                                  (us_split_fields__content7
                                                  this__split_fields))))
  (ite (= (= (length1
             (rec__algorithm__controller__gapvec
             (us_split_fields__content7 this__split_fields))) 0) true)
  (= (bool_eq8 (mk___rep5 (mk___split_fields5 temp___1019)) no_element) true)
  (and
  (= (has_key
     (positions
     (rec__algorithm__controller__gapvec
     (us_split_fields__content7 this__split_fields)))
     (mk___rep5 (mk___split_fields5 temp___1019))) true)
  (= (get1
     (positions
     (rec__algorithm__controller__gapvec
     (us_split_fields__content7 this__split_fields)))
     (mk___rep5 (mk___split_fields5 temp___1019))) 1)))))

;; H
  (assert
  (= result (mk___split_fields__ref5
            (mk___split_fields5 iterl__split_fields))))

;; H
  (assert (= iterl__split_fields1 (mk___split_fields5 temp___1019)))

;; H
  (assert
  (= result1 (mk___split_fields__ref5
             (mk___split_fields5 iterr__split_fields))))

;; H
  (assert (= iterr__split_fields1 iterl__split_fields1))

;; H
  (assert
  (ite (= (ite (= (bool_eq8 (mk___rep5 iterl__split_fields1) no_element) false) (=
          (get1
          (positions
          (rec__algorithm__controller__gapvec
          (us_split_fields__content7 this__split_fields)))
          (mk___rep5 iterl__split_fields1)) (length1
                                            (rec__algorithm__controller__gapvec
                                            (us_split_fields__content7
                                            this__split_fields)))) true) true)
  (= (bool_eq8 (mk___rep5 iterl__split_fields2) no_element) true)
  (and
  (= (has_key
     (positions
     (rec__algorithm__controller__gapvec
     (us_split_fields__content7 this__split_fields)))
     (mk___rep5 iterl__split_fields2)) true)
  (= (get1
     (positions
     (rec__algorithm__controller__gapvec
     (us_split_fields__content7 this__split_fields)))
     (mk___rep5 iterl__split_fields2)) (+ (get1
                                          (positions
                                          (rec__algorithm__controller__gapvec
                                          (us_split_fields__content7
                                          this__split_fields)))
                                          (mk___rep5 iterl__split_fields1)) 1)))))

;; H
  (assert
  (=>
  (and (not (= (bool_eq8 (mk___rep5 iterl__split_fields2) no_element) true))
  (not (= (bool_eq8 (mk___rep5 iterr__split_fields1) no_element) true)))
  (and
  (= o2 (length1
        (rec__algorithm__controller__gapvec
        (us_split_fields__content7 this__split_fields))))
  (and (in_range10 o2)
  (<= o2 (to_rep10
         (rec__algorithm__gap_vectors__list__capacity
         (us_split_discrs3
         (rec__algorithm__controller__gapvec
         (us_split_fields__content7 this__split_fields))))))))))

;; H
  (assert
  (=>
  (and (not (= (bool_eq8 (mk___rep5 iterl__split_fields2) no_element) true))
  (not (= (bool_eq8 (mk___rep5 iterr__split_fields1) no_element) true)))
  (= result2 (ite (< 1 o2) true false))))

;; H
  (assert
  (=>
  (not
  (and (not (= (bool_eq8 (mk___rep5 iterl__split_fields2) no_element) true))
  (not (= (bool_eq8 (mk___rep5 iterr__split_fields1) no_element) true))))
  (= result2 false)))

;; H
  (assert (= result2 true))

;; H
  (assert
  (and
  (and
  (and
  (= (has_key
     (positions
     (rec__algorithm__controller__gapvec
     (let ((subject this__split_fields)) this__split_fields2)))
     (mk___rep5 iterr__split_fields2)) true)
  (= (has_key
     (positions
     (rec__algorithm__controller__gapvec
     (let ((subject this__split_fields)) this__split_fields2)))
     (mk___rep5 iterl__split_fields3)) true))
  (= (bool_eq8 (mk___rep5 iterl__split_fields3)
     (next
     (rec__algorithm__controller__gapvec
     (let ((subject this__split_fields)) this__split_fields2))
     (mk___rep5 iterr__split_fields2))) true))
  (fp.eq (to_rep2
         (rec__robot_iface__proxy__robot_radius
         (us_split_fields5
         (rec__algorithm__controller__robot
         (let ((subject this__split_fields)) this__split_fields2)))))
  (to_rep2
  (rec__robot_iface__proxy__robot_radius
  (us_split_fields5
  (rec__algorithm__controller__robot
  (us_split_fields__content7 this__split_fields))))))))

;; H
  (assert
  (and
  (and
  (and
  (= (attr__constrained
     (rec__robot_iface__proxy__speed
     (us_split_fields5
     (rec__algorithm__controller__robot
     (let ((subject this__split_fields)) this__split_fields2))))) false)
  (= 1000 (to_rep10
          (rec__algorithm__gap_vectors__list__capacity
          (us_split_discrs3
          (rec__algorithm__controller__gapvec
          (let ((subject this__split_fields)) this__split_fields2)))))))
  (and
  (and
  (and
  (= (rec__algorithm__controller__robot
     (let ((subject this__split_fields)) this__split_fields2)) (rec__algorithm__controller__robot
                                                               (us_split_fields__content7
                                                               this__split_fields)))
  (= (rec__algorithm__controller__laserscan
     (let ((subject this__split_fields)) this__split_fields2)) (rec__algorithm__controller__laserscan
                                                               (us_split_fields__content7
                                                               this__split_fields))))
  (= (rec__algorithm__controller__obsavoiddelta
     (let ((subject this__split_fields)) this__split_fields2)) (rec__algorithm__controller__obsavoiddelta
                                                               (us_split_fields__content7
                                                               this__split_fields))))
  (= (rec__algorithm__controller__driveangle
     (let ((subject this__split_fields)) this__split_fields2)) (rec__algorithm__controller__driveangle
                                                               (us_split_fields__content7
                                                               this__split_fields)))))
  (and
  (and (not (= (bool_eq8 (mk___rep5 iterl__split_fields3) no_element) true))
  (not (= (bool_eq8 (mk___rep5 iterr__split_fields2) no_element) true)))
  (< 1 (length1
       (rec__algorithm__controller__gapvec
       (let ((subject this__split_fields)) this__split_fields2)))))))

(assert
;; WP_parameter_def
 ;; File "algorithm.adb", line 556, characters 0-0
  (not
  (fp.isFinite32 (fp.mul RNE (fp #b0 #b10000000 #b00000000000000000000000)
  (to_rep2
  (rec__robot_iface__proxy__scan_res
  (us_split_fields5
  (rec__algorithm__controller__robot
  (let ((subject this__split_fields)) this__split_fields2)))))))))
(check-sat)
(exit)
