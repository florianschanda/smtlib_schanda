;; produced by z3_gnatprove.drv ;;
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort natural 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-fun dummy () natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range1
                                     temp___expr_33)))

(declare-fun property (Int Int) Bool)

(declare-fun property__function_guard (Bool Int Int) Bool)

;; property__post_axiom
  (assert true)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun prop_transitive (Int Int Int) Bool)

(declare-fun prop_transitive__function_guard (Bool Int Int Int) Bool)

;; prop_transitive__post_axiom
  (assert
  (forall ((a Int) (b Int) (c Int))
  (! (=>
     (and
     (and (dynamic_invariant a true true true) (dynamic_invariant b true true
     true)) (dynamic_invariant c true true true))
     (=>
     (and (and (= (prop_transitive a b c) true) (= (property a b) true))
     (= (property b c) true)) (= (property a c) true))) :pattern ((prop_transitive
                                                                  a b c)) )))

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-sort t3b 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (t3b t3b) Bool)

(declare-fun dummy1 () t3b)

(declare-datatypes () ((t3b__ref (mk_t3b__ref (t3b__content t3b)))))
(define-fun t3b__ref___projection ((a t3b__ref)) t3b (t3b__content a))

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun x () Int)

(declare-fun x_last () Int)

(declare-fun i () Int)

(declare-fun temp___136 () Int)

(declare-fun temp___135 () Int)

(declare-fun temp___134 () Int)

(declare-fun temp___132 () Int)

(declare-fun temp___133 () Int)

(declare-fun x1 () Int)

(declare-fun x_last1 () Int)

(declare-fun result () Int)

(declare-fun i1 () Int)

(declare-fun x2 () Int)

(declare-fun x_last2 () Int)

(declare-fun i2 () Int)

(declare-fun result1 () Int)

(declare-fun x_last3 () Int)

(declare-fun x3 () Int)

(declare-fun result2 () Int)

(declare-fun i3 () Int)

(declare-fun x4 () Int)

(declare-fun x_last4 () Int)

(declare-fun i4 () Int)

(declare-fun x5 () Int)

(declare-fun x_last5 () Int)

(declare-fun i5 () Int)

(declare-fun x6 () Int)

(declare-fun x_last6 () Int)

(declare-fun i6 () Int)

(declare-fun x7 () Int)

(declare-fun x_last7 () Int)

(declare-fun i7 () Int)

(declare-fun x8 () Int)

(declare-fun x_last8 () Int)

(declare-fun i8 () Int)

(declare-fun x9 () Int)

(declare-fun x_last9 () Int)

(declare-fun i9 () Int)

(declare-fun x10 () Int)

(declare-fun x_last10 () Int)

(declare-fun i10 () Int)

(declare-fun x11 () Int)

(declare-fun x_last11 () Int)

(declare-fun i11 () Int)

(define-fun x_last12 () int__ref (mk_int__ref x_last8))

(define-fun x12 () int__ref (mk_int__ref x8))

(define-fun i12 () int__ref (mk_int__ref i6))

(define-fun x_last13 () int__ref (mk_int__ref x_last6))

(define-fun x13 () int__ref (mk_int__ref x6))

(define-fun result3 () int__ref (mk_int__ref result))

(define-fun i13 () int__ref (mk_int__ref i))

;; H
  (assert (in_range1 x))

;; H
  (assert (=> (<= 0 2147483647) (in_range1 x_last)))

;; H
  (assert (= (property x x) true))

;; H
  (assert (= result3 i13))

;; H
  (assert (= i1 1))

;; H
  (assert
  (=> (and (<= 1 i1) (<= i1 10))
  (and
  (and (= temp___136 x)
  (and (= temp___135 x)
  (and (= temp___134 i1)
  (and (= temp___132 x)
  (and (= temp___133 x_last)
  (and (= (property temp___136 x2) true)
  (and
  (and
  (and
  (and (=> (<= 0 2147483647) (in_range1 x_last2))
  (=> (<= 1 10) (in_range2 i2))) (in_range1 x2)) (and (<= 1 i2) (<= i2 10)))
  (and (and (= x_last2 result1) (= x_last3 x2))
  (and (and (= (property x2 x3) true) (in_range1 x3))
  (and (= (prop_transitive temp___132 x_last3 x3) true) (= i2 10)))))))))))
  (and (and (= i2 i6) (and (= x_last3 x_last6) (= x3 x6)))
  (and (= i7 i2) (and (= x_last7 x_last3) (= x7 x3)))))))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 10)) (= (mk_int__ref i8) i12)))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 10)) (= x_last12 x_last13)))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 10)) (= x12 x13)))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 10)) (= i9 i7)))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 10)) (= x_last9 x_last7)))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 10)) (= x9 x7)))

;; H
  (assert (=> (not (and (<= 1 i1) (<= i1 10))) (= i1 i8)))

;; H
  (assert
  (=> (not (and (<= 1 i1) (<= i1 10))) (= x_last12 (mk_int__ref x_last))))

;; H
  (assert (=> (not (and (<= 1 i1) (<= i1 10))) (= x12 (mk_int__ref x))))

;; H
  (assert (=> (not (and (<= 1 i1) (<= i1 10))) (= i9 i1)))

;; H
  (assert (=> (not (and (<= 1 i1) (<= i1 10))) (= x_last9 x_last1)))

;; H
  (assert (=> (not (and (<= 1 i1) (<= i1 10))) (= x9 x1)))

;; H
  (assert (= i10 i8))

;; H
  (assert (= x_last10 x_last8))

;; H
  (assert (= (mk_int__ref x10) x12))

;; H
  (assert (= i11 i9))

;; H
  (assert (= x_last11 x_last9))

;; H
  (assert (= x11 x9))

(assert
;; WP_parameter_def
 ;; File "transitive.ads", line 4, characters 0-0
  (not (= (property x x10) true)))
(check-sat)
(exit)
