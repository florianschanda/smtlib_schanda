(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type scrabble_letter

predicate in_range2(x: int) = ((65 <= x) and (x <= 90))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : scrabble_letter, scrabble_letter -> bool

logic dummy1 : scrabble_letter

type scrabble_letter__ref = { scrabble_letter__content : scrabble_letter
}

function scrabble_letter__ref___projection(a: scrabble_letter__ref) : scrabble_letter =
  (a).scrabble_letter__content

logic to_rep : scrabble_letter -> int

logic of_rep : int -> scrabble_letter

axiom inversion_axiom :
  (forall x:scrabble_letter [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom :
  (forall x:scrabble_letter [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type scrabble_value

predicate in_range3(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : scrabble_value, scrabble_value -> bool

logic dummy2 : scrabble_value

type scrabble_value__ref = { scrabble_value__content : scrabble_value
}

function scrabble_value__ref___projection(a: scrabble_value__ref) : scrabble_value =
  (a).scrabble_value__content

logic to_rep1 : scrabble_value -> int

logic of_rep1 : int -> scrabble_value

axiom inversion_axiom1 :
  (forall x:scrabble_value [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:scrabble_value [to_rep1(x)]. in_range3(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range3(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map__ref = { map__content : (int,scrabble_letter) farray
}

logic slide : (int,scrabble_letter) farray, int,
  int -> (int,scrabble_letter) farray

axiom slide_eq :
  (forall a:(int,scrabble_letter) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,scrabble_letter) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,scrabble_letter) farray, int, int,
  (int,scrabble_letter) farray, int, int -> (int,scrabble_letter) farray

axiom concat_def :
  (forall a:(int,scrabble_letter) farray.
  forall b:(int,scrabble_letter) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : scrabble_letter, int -> (int,scrabble_letter) farray

axiom singleton_def :
  (forall v:scrabble_letter.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq5 : (int,scrabble_letter) farray, int, int,
  (int,scrabble_letter) farray, int, int -> bool

axiom bool_eq_def4 :
  (forall a:(int,scrabble_letter) farray. forall a__first:int.
  forall a__last:int. forall b:(int,scrabble_letter) farray.
  forall b__first:int. forall b__last:int [bool_eq5(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,scrabble_letter) farray.
  forall b:(int,scrabble_letter) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,scrabble_letter) farray, int, int,
  (int,scrabble_letter) farray, int, int -> int

axiom compare_def_eq :
  (forall a:(int,scrabble_letter) farray.
  forall b:(int,scrabble_letter) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq5(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,scrabble_letter) farray.
  forall b:(int,scrabble_letter) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq5(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,scrabble_letter) farray.
  forall b:(int,scrabble_letter) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq5(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

type positive

predicate in_range4(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : positive, positive -> bool

logic dummy3 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

logic to_rep2 : integer -> int

logic of_rep2 : int -> integer

axiom inversion_axiom2 :
  (forall x:integer [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:integer [to_rep2(x)]. in_range1(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range1(x) ->
  (to_rep2(of_rep2(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep2(first(mk(f, l))) = f) and (to_rep2(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range4(low) and in_range4(high)))))

type us_t = { elts : (int,scrabble_letter) farray; rt : t
}

function to_array(a: us_t) : (int,scrabble_letter) farray = (a).elts

function of_array(a: (int,scrabble_letter) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep2(first((a).rt))

function last1(a: us_t) : int = to_rep2(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,scrabble_letter) farray -> int

logic value__component__size : int

logic object__component__size : (int,scrabble_letter) farray -> int

logic value__alignment : int

logic object__alignment : (int,scrabble_letter) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,scrabble_letter) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,scrabble_letter) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,scrabble_letter) farray. (0 <= object__alignment(a)))

function bool_eq7(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep2(first((x).rt)), to_rep2(last((x).rt)), (y).elts,
  to_rep2(first((y).rt)), to_rep2(last((y).rt)))

logic user_eq4 : us_t, us_t -> bool

logic dummy4 : (int,scrabble_letter) farray

logic dummy5 : t

type scrabble_word__ref = { scrabble_word__content : us_t
}

function scrabble_word__ref___projection(a: scrabble_word__ref) : us_t =
  (a).scrabble_word__content

type scrabble_score

predicate in_range5(x: int) = ((0 <= x) and (x <= 100))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : scrabble_score, scrabble_score -> bool

logic dummy6 : scrabble_score

type scrabble_score__ref = { scrabble_score__content : scrabble_score
}

function scrabble_score__ref___projection(a: scrabble_score__ref) : scrabble_score =
  (a).scrabble_score__content

logic word : (int,scrabble_letter) farray

logic word1 : t

logic attr__ATTRIBUTE_ADDRESS : int

type map__ref1 = { map__content1 : (int,scrabble_value) farray
}

logic slide1 : (int,scrabble_value) farray, int,
  int -> (int,scrabble_value) farray

axiom slide_eq1 :
  (forall a:(int,scrabble_value) farray.
  (forall first2:int [slide1(a, first2, first2)]. (slide1(a, first2,
  first2) = a)))

axiom slide_def1 :
  (forall a:(int,scrabble_value) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat1 : (int,scrabble_value) farray, int, int,
  (int,scrabble_value) farray, int, int -> (int,scrabble_value) farray

axiom concat_def1 :
  (forall a:(int,scrabble_value) farray.
  forall b:(int,scrabble_value) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat1(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat1(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat1(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton1 : scrabble_value, int -> (int,scrabble_value) farray

axiom singleton_def1 :
  (forall v:scrabble_value.
  (forall i:int [(singleton1(v, i)[i])]. ((singleton1(v, i)[i]) = v)))

logic bool_eq9 : (int,scrabble_value) farray, int, int,
  (int,scrabble_value) farray, int, int -> bool

axiom bool_eq_def7 :
  (forall a:(int,scrabble_value) farray. forall a__first:int.
  forall a__last:int. forall b:(int,scrabble_value) farray.
  forall b__first:int. forall b__last:int [bool_eq9(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_133:int. ((((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) and
  (to_rep1((a[temp___idx_133])) = to_rep1((b[((b__first - a__first) + temp___idx_133)])))) or
  (not ((a__first <= temp___idx_133) and (temp___idx_133 <= a__last)))))) ->
  (bool_eq9(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) ->
  (to_rep1((a[temp___idx_133])) = to_rep1((b[((b__first - a__first) + temp___idx_133)]))))))) ->
  (bool_eq9(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,scrabble_value) farray.
  forall b:(int,scrabble_value) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq9(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) ->
  (to_rep1((a[temp___idx_133])) = to_rep1((b[((b__first - a__first) + temp___idx_133)])))))))))

logic compare1 : (int,scrabble_value) farray, int, int,
  (int,scrabble_value) farray, int, int -> int

axiom compare_def_eq1 :
  (forall a:(int,scrabble_value) farray.
  forall b:(int,scrabble_value) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq9(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt1 :
  (forall a:(int,scrabble_value) farray.
  forall b:(int,scrabble_value) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq9(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep1((a[(i + 1)])) <  to_rep1((b[(j + 1)]))))))))))))

axiom compare_def_gt1 :
  (forall a:(int,scrabble_value) farray.
  forall b:(int,scrabble_value) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare1(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq9(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep1((b[(i + 1)])) <  to_rep1((a[(j + 1)]))))))))))))

logic lookup_table : (int,scrabble_value) farray

logic attr__ATTRIBUTE_ADDRESS1 : int

logic scrabble__lookup_table__aggregate_def : int, int, int, int, int, int,
  int, int, int, int, int, int, int, int, int, int, int, int, int, int, int,
  int, int, int, int, int -> (int,scrabble_value) farray

axiom def_axiom :
  (forall temp___135:int. forall temp___136:int. forall temp___137:int.
  forall temp___138:int. forall temp___139:int. forall temp___140:int.
  forall temp___141:int. forall temp___142:int. forall temp___143:int.
  forall temp___144:int. forall temp___145:int. forall temp___146:int.
  forall temp___147:int. forall temp___148:int. forall temp___149:int.
  forall temp___150:int. forall temp___151:int. forall temp___152:int.
  forall temp___153:int. forall temp___154:int. forall temp___155:int.
  forall temp___156:int. forall temp___157:int. forall temp___158:int.
  forall temp___159:int. forall temp___160:int.
  (((((((((((((((((((((((((((scrabble__lookup_table__aggregate_def(temp___135,
  temp___136, temp___137, temp___138, temp___139, temp___140, temp___141,
  temp___142, temp___143, temp___144, temp___145, temp___146, temp___147,
  temp___148, temp___149, temp___150, temp___151, temp___152, temp___153,
  temp___154, temp___155, temp___156, temp___157, temp___158, temp___159,
  temp___160)[65]) = of_rep1(temp___135)) and
  ((scrabble__lookup_table__aggregate_def(temp___135, temp___136, temp___137,
  temp___138, temp___139, temp___140, temp___141, temp___142, temp___143,
  temp___144, temp___145, temp___146, temp___147, temp___148, temp___149,
  temp___150, temp___151, temp___152, temp___153, temp___154, temp___155,
  temp___156, temp___157, temp___158, temp___159,
  temp___160)[66]) = of_rep1(temp___136))) and
  ((scrabble__lookup_table__aggregate_def(temp___135, temp___136, temp___137,
  temp___138, temp___139, temp___140, temp___141, temp___142, temp___143,
  temp___144, temp___145, temp___146, temp___147, temp___148, temp___149,
  temp___150, temp___151, temp___152, temp___153, temp___154, temp___155,
  temp___156, temp___157, temp___158, temp___159,
  temp___160)[67]) = of_rep1(temp___137))) and
  ((scrabble__lookup_table__aggregate_def(temp___135, temp___136, temp___137,
  temp___138, temp___139, temp___140, temp___141, temp___142, temp___143,
  temp___144, temp___145, temp___146, temp___147, temp___148, temp___149,
  temp___150, temp___151, temp___152, temp___153, temp___154, temp___155,
  temp___156, temp___157, temp___158, temp___159,
  temp___160)[68]) = of_rep1(temp___138))) and
  ((scrabble__lookup_table__aggregate_def(temp___135, temp___136, temp___137,
  temp___138, temp___139, temp___140, temp___141, temp___142, temp___143,
  temp___144, temp___145, temp___146, temp___147, temp___148, temp___149,
  temp___150, temp___151, temp___152, temp___153, temp___154, temp___155,
  temp___156, temp___157, temp___158, temp___159,
  temp___160)[69]) = of_rep1(temp___139))) and
  ((scrabble__lookup_table__aggregate_def(temp___135, temp___136, temp___137,
  temp___138, temp___139, temp___140, temp___141, temp___142, temp___143,
  temp___144, temp___145, temp___146, temp___147, temp___148, temp___149,
  temp___150, temp___151, temp___152, temp___153, temp___154, temp___155,
  temp___156, temp___157, temp___158, temp___159,
  temp___160)[70]) = of_rep1(temp___140))) and
  ((scrabble__lookup_table__aggregate_def(temp___135, temp___136, temp___137,
  temp___138, temp___139, temp___140, temp___141, temp___142, temp___143,
  temp___144, temp___145, temp___146, temp___147, temp___148, temp___149,
  temp___150, temp___151, temp___152, temp___153, temp___154, temp___155,
  temp___156, temp___157, temp___158, temp___159,
  temp___160)[71]) = of_rep1(temp___141))) and
  ((scrabble__lookup_table__aggregate_def(temp___135, temp___136, temp___137,
  temp___138, temp___139, temp___140, temp___141, temp___142, temp___143,
  temp___144, temp___145, temp___146, temp___147, temp___148, temp___149,
  temp___150, temp___151, temp___152, temp___153, temp___154, temp___155,
  temp___156, temp___157, temp___158, temp___159,
  temp___160)[72]) = of_rep1(temp___142))) and
  ((scrabble__lookup_table__aggregate_def(temp___135, temp___136, temp___137,
  temp___138, temp___139, temp___140, temp___141, temp___142, temp___143,
  temp___144, temp___145, temp___146, temp___147, temp___148, temp___149,
  temp___150, temp___151, temp___152, temp___153, temp___154, temp___155,
  temp___156, temp___157, temp___158, temp___159,
  temp___160)[73]) = of_rep1(temp___143))) and
  ((scrabble__lookup_table__aggregate_def(temp___135, temp___136, temp___137,
  temp___138, temp___139, temp___140, temp___141, temp___142, temp___143,
  temp___144, temp___145, temp___146, temp___147, temp___148, temp___149,
  temp___150, temp___151, temp___152, temp___153, temp___154, temp___155,
  temp___156, temp___157, temp___158, temp___159,
  temp___160)[74]) = of_rep1(temp___144))) and
  ((scrabble__lookup_table__aggregate_def(temp___135, temp___136, temp___137,
  temp___138, temp___139, temp___140, temp___141, temp___142, temp___143,
  temp___144, temp___145, temp___146, temp___147, temp___148, temp___149,
  temp___150, temp___151, temp___152, temp___153, temp___154, temp___155,
  temp___156, temp___157, temp___158, temp___159,
  temp___160)[75]) = of_rep1(temp___145))) and
  ((scrabble__lookup_table__aggregate_def(temp___135, temp___136, temp___137,
  temp___138, temp___139, temp___140, temp___141, temp___142, temp___143,
  temp___144, temp___145, temp___146, temp___147, temp___148, temp___149,
  temp___150, temp___151, temp___152, temp___153, temp___154, temp___155,
  temp___156, temp___157, temp___158, temp___159,
  temp___160)[76]) = of_rep1(temp___146))) and
  ((scrabble__lookup_table__aggregate_def(temp___135, temp___136, temp___137,
  temp___138, temp___139, temp___140, temp___141, temp___142, temp___143,
  temp___144, temp___145, temp___146, temp___147, temp___148, temp___149,
  temp___150, temp___151, temp___152, temp___153, temp___154, temp___155,
  temp___156, temp___157, temp___158, temp___159,
  temp___160)[77]) = of_rep1(temp___147))) and
  ((scrabble__lookup_table__aggregate_def(temp___135, temp___136, temp___137,
  temp___138, temp___139, temp___140, temp___141, temp___142, temp___143,
  temp___144, temp___145, temp___146, temp___147, temp___148, temp___149,
  temp___150, temp___151, temp___152, temp___153, temp___154, temp___155,
  temp___156, temp___157, temp___158, temp___159,
  temp___160)[78]) = of_rep1(temp___148))) and
  ((scrabble__lookup_table__aggregate_def(temp___135, temp___136, temp___137,
  temp___138, temp___139, temp___140, temp___141, temp___142, temp___143,
  temp___144, temp___145, temp___146, temp___147, temp___148, temp___149,
  temp___150, temp___151, temp___152, temp___153, temp___154, temp___155,
  temp___156, temp___157, temp___158, temp___159,
  temp___160)[79]) = of_rep1(temp___149))) and
  ((scrabble__lookup_table__aggregate_def(temp___135, temp___136, temp___137,
  temp___138, temp___139, temp___140, temp___141, temp___142, temp___143,
  temp___144, temp___145, temp___146, temp___147, temp___148, temp___149,
  temp___150, temp___151, temp___152, temp___153, temp___154, temp___155,
  temp___156, temp___157, temp___158, temp___159,
  temp___160)[80]) = of_rep1(temp___150))) and
  ((scrabble__lookup_table__aggregate_def(temp___135, temp___136, temp___137,
  temp___138, temp___139, temp___140, temp___141, temp___142, temp___143,
  temp___144, temp___145, temp___146, temp___147, temp___148, temp___149,
  temp___150, temp___151, temp___152, temp___153, temp___154, temp___155,
  temp___156, temp___157, temp___158, temp___159,
  temp___160)[81]) = of_rep1(temp___151))) and
  ((scrabble__lookup_table__aggregate_def(temp___135, temp___136, temp___137,
  temp___138, temp___139, temp___140, temp___141, temp___142, temp___143,
  temp___144, temp___145, temp___146, temp___147, temp___148, temp___149,
  temp___150, temp___151, temp___152, temp___153, temp___154, temp___155,
  temp___156, temp___157, temp___158, temp___159,
  temp___160)[82]) = of_rep1(temp___152))) and
  ((scrabble__lookup_table__aggregate_def(temp___135, temp___136, temp___137,
  temp___138, temp___139, temp___140, temp___141, temp___142, temp___143,
  temp___144, temp___145, temp___146, temp___147, temp___148, temp___149,
  temp___150, temp___151, temp___152, temp___153, temp___154, temp___155,
  temp___156, temp___157, temp___158, temp___159,
  temp___160)[83]) = of_rep1(temp___153))) and
  ((scrabble__lookup_table__aggregate_def(temp___135, temp___136, temp___137,
  temp___138, temp___139, temp___140, temp___141, temp___142, temp___143,
  temp___144, temp___145, temp___146, temp___147, temp___148, temp___149,
  temp___150, temp___151, temp___152, temp___153, temp___154, temp___155,
  temp___156, temp___157, temp___158, temp___159,
  temp___160)[84]) = of_rep1(temp___154))) and
  ((scrabble__lookup_table__aggregate_def(temp___135, temp___136, temp___137,
  temp___138, temp___139, temp___140, temp___141, temp___142, temp___143,
  temp___144, temp___145, temp___146, temp___147, temp___148, temp___149,
  temp___150, temp___151, temp___152, temp___153, temp___154, temp___155,
  temp___156, temp___157, temp___158, temp___159,
  temp___160)[85]) = of_rep1(temp___155))) and
  ((scrabble__lookup_table__aggregate_def(temp___135, temp___136, temp___137,
  temp___138, temp___139, temp___140, temp___141, temp___142, temp___143,
  temp___144, temp___145, temp___146, temp___147, temp___148, temp___149,
  temp___150, temp___151, temp___152, temp___153, temp___154, temp___155,
  temp___156, temp___157, temp___158, temp___159,
  temp___160)[86]) = of_rep1(temp___156))) and
  ((scrabble__lookup_table__aggregate_def(temp___135, temp___136, temp___137,
  temp___138, temp___139, temp___140, temp___141, temp___142, temp___143,
  temp___144, temp___145, temp___146, temp___147, temp___148, temp___149,
  temp___150, temp___151, temp___152, temp___153, temp___154, temp___155,
  temp___156, temp___157, temp___158, temp___159,
  temp___160)[87]) = of_rep1(temp___157))) and
  ((scrabble__lookup_table__aggregate_def(temp___135, temp___136, temp___137,
  temp___138, temp___139, temp___140, temp___141, temp___142, temp___143,
  temp___144, temp___145, temp___146, temp___147, temp___148, temp___149,
  temp___150, temp___151, temp___152, temp___153, temp___154, temp___155,
  temp___156, temp___157, temp___158, temp___159,
  temp___160)[88]) = of_rep1(temp___158))) and
  ((scrabble__lookup_table__aggregate_def(temp___135, temp___136, temp___137,
  temp___138, temp___139, temp___140, temp___141, temp___142, temp___143,
  temp___144, temp___145, temp___146, temp___147, temp___148, temp___149,
  temp___150, temp___151, temp___152, temp___153, temp___154, temp___155,
  temp___156, temp___157, temp___158, temp___159,
  temp___160)[89]) = of_rep1(temp___159))) and
  ((scrabble__lookup_table__aggregate_def(temp___135, temp___136, temp___137,
  temp___138, temp___139, temp___140, temp___141, temp___142, temp___143,
  temp___144, temp___145, temp___146, temp___147, temp___148, temp___149,
  temp___150, temp___151, temp___152, temp___153, temp___154, temp___155,
  temp___156, temp___157, temp___158, temp___159,
  temp___160)[90]) = of_rep1(temp___160))))

logic attr__ATTRIBUTE_ADDRESS2 : int

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : integer, integer -> bool

logic dummy7 : integer

type t6b__ref = { t6b__content : integer
}

function t6b__ref___projection(a: t6b__ref) : integer = (a).t6b__content

logic attr__ATTRIBUTE_ADDRESS3 : int

axiom lookup_table__def_axiom :
  (lookup_table = scrabble__lookup_table__aggregate_def(1, 3, 3, 2, 1, 4, 2,
  4, 1, 8, 5, 1, 3, 1, 1, 3, 10, 1, 1, 1, 1, 4, 4, 8, 4, 10))

 (* File "scrabble.ads", line 11, characters 0-0 *)
goal WP_parameter_def :
  (forall total_score:int. forall letter_index:int. forall result:int.
  forall total_score1:int. forall result1:int. forall letter_index1:int.
  forall total_score2:int. forall letter_index2:int.
  ((forall temp___194:int. (((65 <= temp___194) and (temp___194 <= 90)) ->
   (((1 <= to_rep1((lookup_table[temp___194]))) and
   (to_rep1((lookup_table[temp___194])) <= 5)) or
   (((8 <= to_rep1((lookup_table[temp___194]))) and
   (to_rep1((lookup_table[temp___194])) <= 8)) or
   ((10 <= to_rep1((lookup_table[temp___194]))) and
   (to_rep1((lookup_table[temp___194])) <= 10)))))) ->
  ((scrabble__lookup_table__aggregate_def(1, 3, 3, 2, 1, 4, 2, 4, 1, 8, 5, 1,
  3, 1, 1, 3, 10, 1, 1, 1, 1, 4, 4, 8, 4, 10) = lookup_table) ->
  (dynamic_property(1, 2147483647, to_rep2(first(word1)),
  to_rep2(last(word1))) -> ((length({ elts = word; rt = word1 }) <= 10) ->
  (((result = total_score) and (total_score1 = 0)) ->
  (in_range5(total_score1) -> (((result1 = letter_index) and
  (letter_index1 = to_rep2(first(word1)))) ->
  (((to_rep2(first(word1)) <= letter_index1) and
  (letter_index1 <= to_rep2(last(word1)))) ->
  ((total_score2 <= (10 * (letter_index2 - to_rep2(first(word1))))) ->
  (((((to_rep2(first(word1)) <= to_rep2(last(word1))) ->
  dynamic_property1(to_rep2(first(word1)), to_rep2(last(word1)),
  letter_index2)) and ((0 <= 100) -> in_range5(total_score2))) and
  ((to_rep2(first(word1)) <= letter_index2) and
  (letter_index2 <= to_rep2(last(word1))))) ->
  in_range1((letter_index2 - to_rep2(first(word1)))))))))))))))
