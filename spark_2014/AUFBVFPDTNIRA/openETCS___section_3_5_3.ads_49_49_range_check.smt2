;; produced by cvc4_14.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun nth ((_ BitVec 32) Int) Bool)

(declare-fun lsr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun asr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun lsl ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_right1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_left1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun pow2 (Int) Int)

(declare-fun to_int1 ((_ BitVec 32)) Int)

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvlshr x n) (lsr x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvashr x n) (asr x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvshl x n) (lsl x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvor (bvshl v (bvurem n (_ bv32 32))) (bvlshr v (bvsub (_ bv32 32) (bvurem n (_ bv32 32)))))
  (rotate_left1 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvor (bvlshr v (bvurem n (_ bv32 32))) (bvshl v (bvsub (_ bv32 32) (bvurem n (_ bv32 32)))))
  (rotate_right1 v (bv2nat n)))))

(declare-fun nth_bv ((_ BitVec 32) (_ BitVec 32)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
  (= (= (nth_bv x i) true)
  (not (= (bvand (bvlshr x i) #x00000001) #x00000000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
  (= (nth x (bv2nat i)) (nth_bv x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 32)) (i Int))
  (=> (and (<= 0 i) (< i 4294967296))
  (= (nth_bv x ((_ int2bv 32) i)) (nth x i)))))

(declare-fun eq_sub_bv ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
  (_ BitVec 32)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32))
  (n (_ BitVec 32)))
  (let ((mask (bvshl (bvsub (bvshl #x00000001 n) #x00000001) i)))
  (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32))
  (n (_ BitVec 32)))
  (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 32))))))
(declare-fun power ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun bv_min ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(declare-sort hash_type 0)

(declare-fun attr__ATTRIBUTE_MODULUS () (_ BitVec 32))

(declare-fun attr__ATTRIBUTE_IMAGE ((_ BitVec 32)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) (_ BitVec 32))

(declare-fun user_eq (hash_type hash_type) Bool)

(declare-fun dummy () hash_type)

(declare-datatypes ()
((hash_type__ref (mk_hash_type__ref (hash_type__content hash_type)))))
(define-fun hash_type__ref___projection ((a hash_type__ref)) hash_type
  (hash_type__content a))

(define-fun dynamic_invariant ((temp___expr_165 (_ BitVec 32))
  (temp___is_init_162 Bool) (temp___skip_constant_163 Bool)
  (temp___do_toplevel_164 Bool)) Bool true)

(declare-sort count_type 0)

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (count_type count_type) Bool)

(declare-fun dummy1 () count_type)

(declare-datatypes ()
((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type
  (count_type__content a))

(define-fun dynamic_invariant1 ((temp___expr_171 Int)
  (temp___is_init_168 Bool) (temp___skip_constant_169 Bool)
  (temp___do_toplevel_170 Bool)) Bool (=>
                                      (or (= temp___is_init_168 true)
                                      (<= 0 2147483647)) (in_range
                                      temp___expr_171)))

(declare-fun default_modulus (Int) (_ BitVec 32))

(declare-fun default_modulus__function_guard ((_ BitVec 32) Int) Bool)

;; default_modulus__post_axiom
  (assert
  (forall ((capacity Int))
  (! (=> (dynamic_invariant1 capacity true true true) (dynamic_invariant
     (default_modulus capacity) true false true)) :pattern ((default_modulus
                                                            capacity)) )))

(declare-fun r1s () (_ BitVec 32))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun to_rep (hash_type) (_ BitVec 32))

(declare-fun of_rep ((_ BitVec 32)) hash_type)

;; inversion_axiom
  (assert
  (forall ((x hash_type))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 32)))
  (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))) )))

(define-fun to_int2 ((x hash_type)) Int (bv2nat (to_rep x)))

;; range_int_axiom
  (assert
  (forall ((x hash_type)) (! (uint_in_range
  (to_int2 x)) :pattern ((to_int2 x)) )))

(declare-fun to_rep1 (count_type) Int)

(declare-fun of_rep1 (Int) count_type)

;; inversion_axiom
  (assert
  (forall ((x count_type))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x count_type)) (! (in_range
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                             (of_rep1 x))) )))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-datatypes ()
((us_split_discrs
 (mk___split_discrs
 (rec__com_map__com_to_rbc_map__map__capacity count_type)(rec__com_map__com_to_rbc_map__map__modulus hash_type)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) count_type
  (rec__com_map__com_to_rbc_map__map__capacity a))

(define-fun us_split_discrs_2__projection ((a us_split_discrs)) hash_type
  (rec__com_map__com_to_rbc_map__map__modulus a))

(declare-datatypes ()
((us_split_discrs__ref
 (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields (rec__com_map__com_to_rbc_map__map us_main_type)))))
(define-fun us_split_fields_Map__projection ((a us_split_fields)) us_main_type
  (rec__com_map__com_to_rbc_map__map a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref_4__projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep
 (mk___rep
 (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep_5__projection ((a us_rep)) us_split_discrs (us_split_discrs1
                                                              a))

(define-fun us_rep_6__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                              a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (to_rep1
                           (rec__com_map__com_to_rbc_map__map__capacity
                           (us_split_discrs1 a))) (to_rep1
                                                  (rec__com_map__com_to_rbc_map__map__capacity
                                                  (us_split_discrs1 b))))
                        (= (to_rep
                           (rec__com_map__com_to_rbc_map__map__modulus
                           (us_split_discrs1 a))) (to_rep
                                                  (rec__com_map__com_to_rbc_map__map__modulus
                                                  (us_split_discrs1 b)))))
                        (= (us_main_eq
                           (rec__com_map__com_to_rbc_map__map
                           (us_split_fields1 a))
                           (rec__com_map__com_to_rbc_map__map
                           (us_split_fields1 b))) true))
                   true false))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun com_map__com_to_rbc_map__map__capacity__first__bit () Int)

(declare-fun com_map__com_to_rbc_map__map__capacity__last__bit () Int)

(declare-fun com_map__com_to_rbc_map__map__capacity__position () Int)

;; com_map__com_to_rbc_map__map__capacity__first__bit_axiom
  (assert (<= 0 com_map__com_to_rbc_map__map__capacity__first__bit))

;; com_map__com_to_rbc_map__map__capacity__last__bit_axiom
  (assert
  (< com_map__com_to_rbc_map__map__capacity__first__bit com_map__com_to_rbc_map__map__capacity__last__bit))

;; com_map__com_to_rbc_map__map__capacity__position_axiom
  (assert (<= 0 com_map__com_to_rbc_map__map__capacity__position))

(declare-fun com_map__com_to_rbc_map__map__modulus__first__bit () Int)

(declare-fun com_map__com_to_rbc_map__map__modulus__last__bit () Int)

(declare-fun com_map__com_to_rbc_map__map__modulus__position () Int)

;; com_map__com_to_rbc_map__map__modulus__first__bit_axiom
  (assert (<= 0 com_map__com_to_rbc_map__map__modulus__first__bit))

;; com_map__com_to_rbc_map__map__modulus__last__bit_axiom
  (assert
  (< com_map__com_to_rbc_map__map__modulus__first__bit com_map__com_to_rbc_map__map__modulus__last__bit))

;; com_map__com_to_rbc_map__map__modulus__position_axiom
  (assert (<= 0 com_map__com_to_rbc_map__map__modulus__position))

(declare-fun dummy2 () us_rep)

(declare-datatypes () ((map__ref (mk_map__ref (map__content us_rep)))))
(define-fun map__ref___projection ((a map__ref)) us_rep (map__content a))

(define-fun in_range1 ((rec__com_map__com_to_rbc_map__map__capacity1 Int)
  (rec__com_map__com_to_rbc_map__map__modulus1 (_ BitVec 32))
  (a us_rep)) Bool (and
                   (= rec__com_map__com_to_rbc_map__map__capacity1 (to_rep1
                                                                   (rec__com_map__com_to_rbc_map__map__capacity
                                                                   (us_split_discrs1
                                                                   a))))
                   (= rec__com_map__com_to_rbc_map__map__modulus1 (to_rep
                                                                  (rec__com_map__com_to_rbc_map__map__modulus
                                                                  (us_split_discrs1
                                                                  a))))))

(declare-fun value__size1 () Int)

(declare-fun object__size1 (us_rep) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-fun com_map__com_to_rbc_map__map__capacity__first__bit1 () Int)

(declare-fun com_map__com_to_rbc_map__map__capacity__last__bit1 () Int)

(declare-fun com_map__com_to_rbc_map__map__capacity__position1 () Int)

;; com_map__com_to_rbc_map__map__capacity__first__bit_axiom
  (assert (<= 0 com_map__com_to_rbc_map__map__capacity__first__bit1))

;; com_map__com_to_rbc_map__map__capacity__last__bit_axiom
  (assert
  (< com_map__com_to_rbc_map__map__capacity__first__bit1 com_map__com_to_rbc_map__map__capacity__last__bit1))

;; com_map__com_to_rbc_map__map__capacity__position_axiom
  (assert (<= 0 com_map__com_to_rbc_map__map__capacity__position1))

(declare-fun com_map__com_to_rbc_map__map__modulus__first__bit1 () Int)

(declare-fun com_map__com_to_rbc_map__map__modulus__last__bit1 () Int)

(declare-fun com_map__com_to_rbc_map__map__modulus__position1 () Int)

;; com_map__com_to_rbc_map__map__modulus__first__bit_axiom
  (assert (<= 0 com_map__com_to_rbc_map__map__modulus__first__bit1))

;; com_map__com_to_rbc_map__map__modulus__last__bit_axiom
  (assert
  (< com_map__com_to_rbc_map__map__modulus__first__bit1 com_map__com_to_rbc_map__map__modulus__last__bit1))

;; com_map__com_to_rbc_map__map__modulus__position_axiom
  (assert (<= 0 com_map__com_to_rbc_map__map__modulus__position1))

(declare-fun dummy3 () us_rep)

(declare-datatypes ()
((tconnectionsS__ref (mk_tconnectionsS__ref (tconnectionsS__content us_rep)))))
(define-fun tconnectionsS__ref___projection ((a tconnectionsS__ref)) us_rep
  (tconnectionsS__content a))

(declare-fun is_empty (us_rep) Bool)

(declare-fun is_empty__function_guard (Bool us_rep) Bool)

(declare-fun is_empty1 (Int us_rep) Bool)

(declare-fun is_empty__function_guard1 (Bool Int us_rep) Bool)

(define-fun dynamic_invariant2 ((temp___expr_510 us_rep)
  (temp___is_init_507 Bool) (temp___skip_constant_508 Bool)
  (temp___do_toplevel_509 Bool)) Bool (=>
                                      (not (= temp___skip_constant_508 true))
                                      (in_range1 10 r1s temp___expr_510)))

(define-fun default_initial_assumption ((temp___expr_513 us_rep)
  (temp___skip_top_level_514 Bool)) Bool (and
                                         (and
                                         (= (to_rep1
                                            (rec__com_map__com_to_rbc_map__map__capacity
                                            (us_split_discrs1
                                            temp___expr_513))) 10)
                                         (= (to_rep
                                            (rec__com_map__com_to_rbc_map__map__modulus
                                            (us_split_discrs1
                                            temp___expr_513))) r1s))
                                         (=>
                                         (not
                                         (= temp___skip_top_level_514 true))
                                         (= (is_empty temp___expr_513) true))))

(declare-fun connections__split_discrs () us_split_discrs)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun oeq (us_rep us_rep) Bool)

(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)

(declare-fun oeq1 (Int us_rep us_rep) Bool)

(declare-fun oeq__function_guard1 (Bool Int us_rep us_rep) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep) (b us_rep))
  (! (= (user_eq2 a b) (oeq a b)) :pattern ((user_eq2 a b)) )))

(declare-fun length (us_rep) Int)

(declare-fun length__function_guard (Int us_rep) Bool)

(declare-fun length1 (Int us_rep) Int)

(declare-fun length__function_guard1 (Int Int us_rep) Bool)

;; length__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (length container)))
     (and
     (<= result (to_rep1
                (rec__com_map__com_to_rbc_map__map__capacity
                (us_split_discrs1 container))))
     (dynamic_invariant1 result true false true))) :pattern ((length
                                                             container)) )))

;; length__post__dispatch_axiom
  (assert
  (forall ((attr__tag Int))
  (forall ((container us_rep)) (! (dynamic_invariant1
  (length1 attr__tag container) true false
  true) :pattern ((length1 attr__tag container)) ))))

(declare-sort us_main_type1 0)

(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)

(declare-sort us_rep1 0)

(declare-fun bool_eq1 (us_rep1 us_rep1) Bool)

(declare-fun user_eq3 (us_rep1 us_rep1) Bool)

(declare-fun value__size2 () Int)

(declare-fun object__size2 (us_rep1) Int)

(declare-fun value__alignment2 () Int)

(declare-fun object__alignment2 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))

(declare-fun dummy4 () us_rep1)

(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 us_rep1)))))
(define-fun map__ref_2__projection ((a map__ref1)) us_rep1 (map__content1 a))

(declare-fun length2 (us_rep1) Int)

(declare-fun length__function_guard2 (Int us_rep1) Bool)

(declare-fun is_empty2 (us_rep1) Bool)

(declare-fun is_empty__function_guard2 (Bool us_rep1) Bool)

(define-fun default_initial_assumption1 ((temp___expr_310 us_rep1)
  (temp___skip_top_level_311 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_311 true))
                                         (and
                                         (= (is_empty2 temp___expr_310) true)
                                         (= (length2 temp___expr_310) 0))))

(declare-fun model__ (us_rep) us_rep1)

(declare-fun model____function_guard (us_rep1 us_rep) Bool)

;; model____post_axiom
  (assert true)

(declare-fun oeq2 (us_rep1 us_rep1) Bool)

(declare-fun oeq__function_guard2 (Bool us_rep1 us_rep1) Bool)

;; oeq__post_axiom
  (assert
  (forall ((left us_rep) (right us_rep))
  (! (= (= (oeq left right) true)
     (= (oeq2 (model__ left) (model__ right)) true)) :pattern ((oeq left
                                                               right)) )))

;; oeq__post__dispatch_axiom
  (assert true)

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep))
  (! (= (= (is_empty container) true) (= (length container) 0)) :pattern (
  (is_empty container)) )))

;; is_empty__post__dispatch_axiom
  (assert true)

(define-fun to_int3 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range2 ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Bool)

(declare-sort key_type 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 10000)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq4 (key_type key_type) Bool)

(declare-fun dummy5 () key_type)

(declare-datatypes ()
((key_type__ref (mk_key_type__ref (key_type__content key_type)))))
(define-fun key_type__ref_2__projection ((a key_type__ref)) key_type
  (key_type__content a))

(define-fun dynamic_invariant3 ((temp___expr_303 Int)
  (temp___is_init_300 Bool) (temp___skip_constant_301 Bool)
  (temp___do_toplevel_302 Bool)) Bool (=>
                                      (or (= temp___is_init_300 true)
                                      (<= 1 10000)) (in_range3
                                      temp___expr_303)))

(declare-fun has_key (us_rep1 Int) Bool)

(declare-fun has_key__function_guard (Bool us_rep1 Int) Bool)

;; has_key__post_axiom
  (assert
  (forall ((container us_rep1))
  (forall ((key Int))
  (! (=> (dynamic_invariant3 key true true true)
     (=> (= (of_int 1) true)
     (=>
     (exists ((k Int))
     (and (and (in_range3 k) (= (has_key container k) true)) (= k key)))
     (= (has_key container key) true)))) :pattern ((has_key container key)) ))))

(declare-fun witness (us_rep1 Int) Int)

(declare-fun witness__function_guard (Int us_rep1 Int) Bool)

(declare-fun w_get (us_rep1 Int) Bool)

(declare-fun w_get__function_guard (Bool us_rep1 Int) Bool)

(declare-fun get (us_rep1 Int) Bool)

(declare-fun get__function_guard (Bool us_rep1 Int) Bool)

;; get__post_axiom
  (assert
  (forall ((container us_rep1))
  (forall ((key Int))
  (! (=>
     (and (dynamic_invariant3 key true true true)
     (= (has_key container key) true))
     (=> (= (of_int 1) true)
     (and
     (= (= (get container key) true)
     (= (w_get container (witness container key)) true))
     (forall ((k Int))
     (=> (and (in_range3 k) (= (has_key container k) true))
     (= (= k key) (= (witness container key) (witness container k)))))))) :pattern (
  (get container key)) ))))

;; length__post_axiom
  (assert
  (forall ((container us_rep1)) (! (dynamic_invariant1 (length2 container)
  true false true) :pattern ((length2 container)) )))

;; oeq__post_axiom
  (assert
  (forall ((left us_rep1) (right us_rep1))
  (! (= (= (oeq2 left right) true)
     (and
     (forall ((key Int))
     (=> (and (in_range3 key) (= (has_key left key) true))
     (and (= (has_key right key) true)
     (= (= (get right key) true) (= (get left key) true)))))
     (forall ((key Int))
     (=> (and (in_range3 key) (= (has_key right key) true))
     (= (has_key left key) true))))) :pattern ((oeq2 left right)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep1))
  (! (= (= (is_empty2 container) true)
     (forall ((key Int))
     (not (and (in_range3 key) (= (has_key container key) true))))) :pattern (
  (is_empty2 container)) )))

(declare-fun has_witness (us_rep1 Int) Bool)

(declare-fun has_witness__function_guard (Bool us_rep1 Int) Bool)

;; has_witness__post_axiom
  (assert true)

;; witness__post_axiom
  (assert
  (forall ((container us_rep1))
  (forall ((key Int))
  (! (=>
     (and (dynamic_invariant3 key true true true)
     (= (has_key container key) true))
     (let ((result (witness container key)))
     (and (= (has_witness container result) true) (dynamic_invariant1 result
     true false true)))) :pattern ((witness container key)) ))))

;; w_get__post_axiom
  (assert true)

(declare-fun section_3_5_3__R1s__assume () (_ BitVec 32))

(declare-fun us () (_ BitVec 32))

;; H
  (assert (= section_3_5_3__R1s__assume (default_modulus 10)))

;; H
  (assert (= section_3_5_3__R1s__assume r1s))

;; H
  (assert (= us r1s))

(assert
;; WP_parameter_def
 ;; File "section_3_5_3.ads", line 83, characters 0-0
  (not (in_range 10)))
(check-sat)
(exit)
