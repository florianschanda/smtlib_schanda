;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun lsr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun asr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun lsl ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_right1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_left1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun pow2 (Int) Int)

(define-fun to_int1 ((x (_ BitVec 32))) Int (ite (bvsge x (_ bv0 32))
                                            (bv2nat x)
                                            (- (- 4294967296 (bv2nat x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 32))))))
(declare-fun power ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun bv_min ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                (fp.isPositive x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                 (fp.isNegative x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x)
                                            (fp.isPositive x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x)
                                             (fp.isNegative x)))

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y))
                    (and (fp.isNegative x) (fp.isNegative y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y))
                    (and (fp.isNegative x) (fp.isPositive y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z))
                    (=> (diff_sign x y) (fp.isNegative z))))

(define-fun sqr ((x Real)) Real (* x x))

(declare-fun sqrt1 (Real) Real)

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r))
                 (and (fp.isNegative x) (< r 0.0))))

(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 Float32)))))
(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647)) (in_range
                                    temp___expr_18)))

(declare-sort float 0)

(declare-fun user_eq1 (float float) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE1 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Float32)

(declare-const dummy1 float)

(declare-datatypes () ((float__ref (mk_float__ref (float__content float)))))
(define-fun float__ref___projection ((a float__ref)) float (float__content a))

(define-fun dynamic_invariant1 ((temp___expr_60 Float32)
  (temp___is_init_56 Bool) (temp___skip_constant_57 Bool)
  (temp___do_toplevel_58 Bool)
  (temp___do_typ_inv_59 Bool)) Bool (=>
                                    (or (= temp___is_init_56 true)
                                    (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                    (fp.isFinite32 temp___expr_60)))

(declare-fun convert ((_ BitVec 32)) Float32)

(declare-fun convert__function_guard (Float32 (_ BitVec 32)) Bool)

(declare-sort source 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 32))

(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 32)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 32))

(declare-fun user_eq2 (source source) Bool)

(declare-const dummy2 source)

(declare-datatypes ()
((source__ref (mk_source__ref (source__content source)))))
(define-fun source__ref___2__projection ((a source__ref)) source (source__content
                                                                 a))

(define-fun dynamic_invariant2 ((temp___expr_221 (_ BitVec 32))
  (temp___is_init_217 Bool) (temp___skip_constant_218 Bool)
  (temp___do_toplevel_219 Bool) (temp___do_typ_inv_220 Bool)) Bool true)

(declare-sort target 0)

(declare-fun user_eq3 (target target) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE3 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Float32)

(declare-const dummy3 target)

(declare-datatypes ()
((target__ref (mk_target__ref (target__content target)))))
(define-fun target__ref___2__projection ((a target__ref)) target (target__content
                                                                 a))

(define-fun dynamic_invariant3 ((temp___expr_228 Float32)
  (temp___is_init_224 Bool) (temp___skip_constant_225 Bool)
  (temp___do_toplevel_226 Bool)
  (temp___do_typ_inv_227 Bool)) Bool (=>
                                     (or (= temp___is_init_224 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                     (fp.isFinite32 temp___expr_228)))

;; convert__post_axiom
  (assert
  (forall ((s (_ BitVec 32)))
  (! (=> (dynamic_invariant2 s true true true true) (dynamic_invariant3
     (convert s) true false true true)) :pattern ((convert s)) )))

(declare-fun magic (Float32) Int)

(declare-fun magic__function_guard (Int Float32) Bool)

(declare-sort source1 0)

(declare-fun user_eq4 (source1 source1) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE4 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Float32)

(declare-const dummy4 source1)

(declare-datatypes ()
((source__ref1 (mk_source__ref1 (source__content1 source1)))))
(define-fun source__ref___3__projection ((a source__ref1)) source1 (source__content1
                                                                   a))

(define-fun dynamic_invariant4 ((temp___expr_235 Float32)
  (temp___is_init_231 Bool) (temp___skip_constant_232 Bool)
  (temp___do_toplevel_233 Bool)
  (temp___do_typ_inv_234 Bool)) Bool (=>
                                     (or (= temp___is_init_231 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                     (fp.isFinite32 temp___expr_235)))

(declare-sort target1 0)

(declare-fun targetqtint (target1) Int)

;; target'axiom
  (assert
  (forall ((i target1))
  (and (<= (- 2147483648) (targetqtint i)) (<= (targetqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (target1 target1) Bool)

(declare-const dummy5 target1)

(declare-datatypes ()
((target__ref1 (mk_target__ref1 (target__content1 target1)))))
(define-fun target__ref___3__projection ((a target__ref1)) target1 (target__content1
                                                                   a))

(define-fun dynamic_invariant5 ((temp___expr_242 Int)
  (temp___is_init_238 Bool) (temp___skip_constant_239 Bool)
  (temp___do_toplevel_240 Bool)
  (temp___do_typ_inv_241 Bool)) Bool (=>
                                     (or (= temp___is_init_238 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_242)))

;; magic__post_axiom
  (assert
  (forall ((s Float32))
  (! (=> (dynamic_invariant4 s true true true true) (dynamic_invariant5
     (magic s) true false true true)) :pattern ((magic s)) )))

(declare-const zero_plus Float32)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const zero_neg Float32)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const c1b Float32)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const c2b Float32)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const x Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const y Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

;; zero_plus__def_axiom
  (assert (= zero_plus (convert #x00000000)))

;; zero_neg__def_axiom
  (assert (= zero_neg (convert #x80000000)))

(declare-const zero_and_min__zero_plus__assume Float32)

(declare-const zero_and_min__zero_neg__assume Float32)

(declare-const zero_and_min__B3b__x__assume Int)

(declare-const zero_and_min__B3b__y__assume Int)

;; H
  (assert (= zero_and_min__zero_plus__assume (convert #x00000000)))

;; H
  (assert (fp.isFinite32 zero_and_min__zero_plus__assume))

;; H
  (assert (= zero_and_min__zero_plus__assume zero_plus))

;; H
  (assert (fp.isFinite32 zero_plus))

;; H
  (assert (= zero_and_min__zero_neg__assume (convert #x80000000)))

;; H
  (assert (fp.isFinite32 zero_and_min__zero_neg__assume))

;; H
  (assert (= zero_and_min__zero_neg__assume zero_neg))

;; H
  (assert (fp.isFinite32 zero_neg))

;; H
  (assert (= zero_plus c1b))

;; H
  (assert (fp.isFinite32 c1b))

;; H
  (assert (= zero_neg c2b))

;; H
  (assert (fp.isFinite32 c2b))

;; H
  (assert (= zero_and_min__B3b__x__assume (magic (fp.min c1b c2b))))

;; H
  (assert (in_range1 zero_and_min__B3b__x__assume))

;; H
  (assert (= zero_and_min__B3b__x__assume x))

;; H
  (assert (in_range x))

;; H
  (assert (= zero_and_min__B3b__y__assume (magic (fp.min c2b c1b))))

;; H
  (assert (in_range1 zero_and_min__B3b__y__assume))

;; H
  (assert (= zero_and_min__B3b__y__assume y))

;; H
  (assert (in_range y))

;; H
  (assert (not (= x y)))

(assert
;; WP_parameter_def
 ;; File "a-unccon.ads", line 20, characters 0-0
  (not (not (fp.eq (fp.min c1b c2b) (fp.min c2b c1b)))))
(check-sat)
(exit)
